language: php
name: HumanEval_109_move_one_ball
results:
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxazkfdu.php:50\n\
    Stack trace:\n#0 /tmp/tmpvxazkfdu.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpvxazkfdu.php\
    \ on line 50\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $n = count($arr);\n    if ($n == 0) {\n  \
    \      return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $n; $i++)\
    \ {\n        if ($arr[$i] < $max) {\n            return false;\n        }\n  \
    \      $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\n$arr = array(3,\
    \ 4, 5, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3, 5, 4, 1,\
    \ 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(20,\
    \ 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(30, 29,\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpnvqxh3av.php on line 57

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $len = count($arr);\n    $min = $arr[0];\n    $max = $arr[0];\n  \
    \  for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n         \
    \   $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max\
    \ = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf6c3atmh.php:49\n\
    Stack trace:\n#0 /tmp/tmpf6c3atmh.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpf6c3atmh.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min + 1 == $len) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpep5kz2f4.php:50\n\
    Stack trace:\n#0 /tmp/tmpep5kz2f4.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpep5kz2f4.php\
    \ on line 50\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $arr_len = count($arr);\n    if ($arr_len\
    \ == 0) {\n        return true;\n    }\n    $min = $arr[0];\n    $min_index =\
    \ 0;\n    for ($i = 1; $i < $arr_len; $i++) {\n        if ($arr[$i] < $min) {\n\
    \            $min = $arr[$i];\n            $min_index = $i;\n        }\n    }\n\
    \    if ($min_index == 0) {\n        return true;\n    }\n    for ($i = 1; $i\
    \ < $arr_len; $i++) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppy_46f73.php:52\n\
    Stack trace:\n#0 /tmp/tmppy_46f73.php(59): test()\n#1 {main}\n  thrown in /tmp/tmppy_46f73.php\
    \ on line 52\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $min_index = 0;\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n            $min_index = $i;\n        }\n    }\n    if\
    \ ($min_index == 0) {\n        return true;\n    }\n    for ($i = $min_index;\
    \ $i < $count - 1; $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkoc4hq7o.php:54\n\
    Stack trace:\n#0 /tmp/tmpkoc4hq7o.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpkoc4hq7o.php\
    \ on line 54\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // Write your code here\n    // To print results\
    \ to the standard output you can use print\n    // Example: print \"Hello world!\"\
    ;\n    $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n\
    \        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n        }\n   \
    \     if ($arr[$i] > $max) {\n            $max = $arr[$i];\n        }\n    }\n\
    \    if ($min == $max) {\n        return true;\n    }\n    $min_index = -1;\n\
    \    $max_index = -1;\n    for ($i = 0; $i < $len; $i++) {\n        if ($arr[$i]\
    \ == $min) {\n            $min_index = $i;\n        }\n        if ($arr[$i] ==\
    \ $max) {\n            $max_index = $i;\n        }\n    }\n    if ($min_index\
    \ == 0 && $max_index == $len - 1) {\n        return true;\n    }\n    if ($min_index\
    \ == $len - 1 && $max_index == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppk59rx_s.php:68\n\
    Stack trace:\n#0 /tmp/tmppk59rx_s.php(75): test()\n#1 {main}\n  thrown in /tmp/tmppk59rx_s.php\
    \ on line 68\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxazkfdu.php:50\n\
    Stack trace:\n#0 /tmp/tmpvxazkfdu.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpvxazkfdu.php\
    \ on line 50\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 1; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n    \
    \    }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n       \
    \ }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppd2r0wou.php:48\n\
    Stack trace:\n#0 /tmp/tmppd2r0wou.php(55): test()\n#1 {main}\n  thrown in /tmp/tmppd2r0wou.php\
    \ on line 48\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = min($arr);\n    $min_index = array_search($min, $arr);\n  \
    \  $max = max($arr);\n    $max_index = array_search($max, $arr);\n    if ($min_index\
    \ == 0 && $max_index == count($arr) - 1) {\n        return true;\n    }\n    if\
    \ ($min_index == 0 && $max_index != count($arr) - 1) {\n        return false;\n\
    \    }\n    if ($min_index != 0 && $max_index == count($arr) - 1) {\n        return\
    \ true;\n    }\n    if ($min_index != 0 && $max_index != count($arr) - 1) {\n\
    \        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hm3_u65.php:50\n\
    Stack trace:\n#0 /tmp/tmp6hm3_u65.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp6hm3_u65.php\
    \ on line 50\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxazkfdu.php:50\n\
    Stack trace:\n#0 /tmp/tmpvxazkfdu.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpvxazkfdu.php\
    \ on line 50\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbtubu0sd.php:43\n\
    Stack trace:\n#0 /tmp/tmpbtubu0sd.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpbtubu0sd.php\
    \ on line 43\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    $min = $arr[0];\n    $max = $arr[0];\n\
    \    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n     \
    \       $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n        \
    \    $max = $arr[$i];\n        }\n    }\n    if ($max - $min == $count - 1) {\n\
    \        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpva6k6s49.php:50\n\
    Stack trace:\n#0 /tmp/tmpva6k6s49.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpva6k6s49.php\
    \ on line 50\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\t$count = count($arr);\n\tif ($count == 0) {\n\
    \t\treturn true;\n\t}\n\t$min = $arr[0];\n\t$max = $arr[0];\n\tfor ($i = 1; $i\
    \ < $count; $i++) {\n\t\tif ($arr[$i] < $min) {\n\t\t\t$min = $arr[$i];\n\t\t\
    }\n\t\tif ($arr[$i] > $max) {\n\t\t\t$max = $arr[$i];\n\t\t}\n\t}\n\tif ($min\
    \ == $max) {\n\t\treturn true;\n\t}\n\tif ($min == $arr[0] && $max == $arr[$count\
    \ - 1]) {\n\t\treturn true;\n\t}\n\treturn false;\n}\necho move_one_ball(array(3,\
    \ 4, 5, 1, 2)) . \"\\n\";\necho move_one_ball(array(3, 5, 4, 1, 2)) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xatp83j.php:53\n\
    Stack trace:\n#0 /tmp/tmp6xatp83j.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp6xatp83j.php\
    \ on line 53\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4,\
    \ 5, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array(7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\necho move_one_ball($arr)\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpml14p3hx.php on line 66

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $arr_length = count($arr);\n    if ($arr_length\
    \ == 0) {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n\
    \    for ($i = 1; $i < $arr_length; $i++) {\n        if ($arr[$i] > $max) {\n\
    \            $max = $arr[$i];\n        }\n        if ($arr[$i] < $min) {\n   \
    \         $min = $arr[$i];\n        }\n    }\n    if ($max - $min == $arr_length\
    \ - 1) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptet_2xqr.php:50\n\
    Stack trace:\n#0 /tmp/tmptet_2xqr.php(56): test()\n#1 {main}\n  thrown in /tmp/tmptet_2xqr.php\
    \ on line 50\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // Your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprebecn9u.php:32\n\
    Stack trace:\n#0 /tmp/tmprebecn9u.php(39): test()\n#1 {main}\n  thrown in /tmp/tmprebecn9u.php\
    \ on line 32\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9f1c18fk.php:49\n\
    Stack trace:\n#0 /tmp/tmp9f1c18fk.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp9f1c18fk.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $n = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i < $n;\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n       \
    \ }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd7d8eflk.php:43\n\
    Stack trace:\n#0 /tmp/tmpd7d8eflk.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpd7d8eflk.php\
    \ on line 43\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbtubu0sd.php:43\n\
    Stack trace:\n#0 /tmp/tmpbtubu0sd.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpbtubu0sd.php\
    \ on line 43\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if(empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    $min = $arr[0];\n    for($i = 1; $i < $count;\
    \ $i++) {\n        if($arr[$i] < $min) {\n            return false;\n        }\n\
    \        $min = $arr[$i];\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8kxovyd9.php:43\n\
    Stack trace:\n#0 /tmp/tmp8kxovyd9.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp8kxovyd9.php\
    \ on line 43\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $min_index = 0;\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n            $min_index = $i;\n        }\n    }\n    if ($min_index\
    \ == 0) {\n        return true;\n    }\n    $max = $arr[$min_index];\n    for\
    \ ($i = $min_index + 1; $i < $len; $i++) {\n        if ($arr[$i] > $max) {\n \
    \           $max = $arr[$i];\n        }\n    }\n    if ($max < $min) {\n     \
    \   return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp59kottxi.php:56\n\
    Stack trace:\n#0 /tmp/tmp59kottxi.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp59kottxi.php\
    \ on line 56\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxazkfdu.php:50\n\
    Stack trace:\n#0 /tmp/tmpvxazkfdu.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpvxazkfdu.php\
    \ on line 50\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min + 1 == $len) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpep5kz2f4.php:50\n\
    Stack trace:\n#0 /tmp/tmpep5kz2f4.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpep5kz2f4.php\
    \ on line 50\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n  \
    \  return true;\n  }\n  $min = $arr[0];\n  $max = $arr[0];\n  for ($i = 1; $i\
    \ < $len; $i++) {\n    if ($arr[$i] < $min) {\n      $min = $arr[$i];\n    }\n\
    \    if ($arr[$i] > $max) {\n      $max = $arr[$i];\n    }\n  }\n  if ($max -\
    \ $min == $len - 1) {\n    return true;\n  }\n  return false;\n}\n\n$arr = array(3,\
    \ 4, 5, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3, 5, 4, 1,\
    \ 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3, 4, 5, 1, 2, 6);\n\
    echo move_one_ball($arr) . \"\\n\";\n$arr = array(3, 4, 5, 1, 2, 6, 7);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array(3, 4, 5, 1, 2, 6, 7, 8);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array(3, 4, 5, 1, 2, 6, 7, 8, 9);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array(3, 4, 5, 1, 2, 6, 7, 8, 9, 10);\n\
    echo move_one_ball($arr) . \"\\n\";\n$arr = array(3, 4, 5, 1, 2, 6, 7, 8, 9, 10,\
    \ 11);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3, 4, 5, 1, 2, 6, 7,\
    \ 8, 9, 10, 11, 12);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3, 4,\
    \ 5, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13);\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n1\n1\n1\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp6dvu3zz_.php:69\nStack trace:\n#0 /tmp/tmp6dvu3zz_.php(75): test()\n\
    #1 {main}\n  thrown in /tmp/tmp6dvu3zz_.php on line 69\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // Your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprebecn9u.php:32\n\
    Stack trace:\n#0 /tmp/tmprebecn9u.php(39): test()\n#1 {main}\n  thrown in /tmp/tmprebecn9u.php\
    \ on line 32\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbtubu0sd.php:43\n\
    Stack trace:\n#0 /tmp/tmpbtubu0sd.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpbtubu0sd.php\
    \ on line 43\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5, 4, 3, 2,\
    \ 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 1, 1, 1, 1);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\
    echo move_one_ball($arr) . \"\\n\";\n$arr = array(10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(11,\
    \ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr =\
    \ array(11, 11\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpba54f7_h.php on line 65

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\";\n$arr\
    \ = array(5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 1, 1, 1, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr\
    \ = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(20, 19, 18, 17, 16, 15,\
    \ 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr =\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpy0mm3ka7.php on line 72

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($max - $min == $count - 1) {\n\
    \        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydnag5wl.php:50\n\
    Stack trace:\n#0 /tmp/tmpydnag5wl.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpydnag5wl.php\
    \ on line 50\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbtubu0sd.php:43\n\
    Stack trace:\n#0 /tmp/tmpbtubu0sd.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpbtubu0sd.php\
    \ on line 43\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbtubu0sd.php:43\n\
    Stack trace:\n#0 /tmp/tmpbtubu0sd.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpbtubu0sd.php\
    \ on line 43\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    if\
    \ ($min != $arr[0]) {\n        return false;\n    }\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp90dwqaq9.php:57\n\
    Stack trace:\n#0 /tmp/tmp90dwqaq9.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp90dwqaq9.php\
    \ on line 57\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    $min_index = array_search($min, $arr);\n    $max_index = array_search($max,\
    \ $arr);\n    if ($min_index == 0) {\n        return false;\n    }\n    if ($max_index\
    \ == $count - 1) {\n        return false;\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnezeflxp.php:59\n\
    Stack trace:\n#0 /tmp/tmpnezeflxp.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpnezeflxp.php\
    \ on line 59\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9f1c18fk.php:49\n\
    Stack trace:\n#0 /tmp/tmp9f1c18fk.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp9f1c18fk.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min + 1 == $len) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpep5kz2f4.php:50\n\
    Stack trace:\n#0 /tmp/tmpep5kz2f4.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpep5kz2f4.php\
    \ on line 50\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9f1c18fk.php:49\n\
    Stack trace:\n#0 /tmp/tmp9f1c18fk.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp9f1c18fk.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\tif (empty($arr)) {\n\t\treturn true;\n\t}\n\t\
    $arr = array_values($arr);\n\t$len = count($arr);\n\t$min = $arr[0];\n\t$max =\
    \ $arr[0];\n\tfor ($i = 1; $i < $len; $i++) {\n\t\tif ($arr[$i] < $min) {\n\t\t\
    \t$min = $arr[$i];\n\t\t}\n\t\tif ($arr[$i] > $max) {\n\t\t\t$max = $arr[$i];\n\
    \t\t}\n\t}\n\tif ($max - $min + 1 == $len) {\n\t\treturn true;\n\t}\n\treturn\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwhqyidgs.php:51\n\
    Stack trace:\n#0 /tmp/tmpwhqyidgs.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpwhqyidgs.php\
    \ on line 51\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5, 4, 3, 2,\
    \ 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 1, 1, 1, 1);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\
    echo move_one_ball($arr) . \"\\n\";\n$arr = array(10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\necho move_one_ball($arr) . \"\\n\";\n\
    $arr = array\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1kjsgris.php on line 65

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($max - $min == $count - 1) {\n\
    \        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydnag5wl.php:50\n\
    Stack trace:\n#0 /tmp/tmpydnag5wl.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpydnag5wl.php\
    \ on line 50\n"
  timestamp: 1659730626
- exit_code: 0
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $sorted = $arr;\n    sort($sorted);\n    $count = 0;\n    while ($arr\
    \ != $sorted) {\n        $last = array_pop($arr);\n        array_unshift($arr,\
    \ $last);\n        $count++;\n        if ($count > count($arr)) {\n          \
    \  return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // Your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprebecn9u.php:32\n\
    Stack trace:\n#0 /tmp/tmprebecn9u.php(39): test()\n#1 {main}\n  thrown in /tmp/tmprebecn9u.php\
    \ on line 32\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $min_index = 0;\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n            $min_index = $i;\n        }\n    }\n    if ($min_index\
    \ == 0) {\n        return true;\n    }\n    for ($i = $min_index; $i < $len -\
    \ 1; $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuleqykgo.php:54\n\
    Stack trace:\n#0 /tmp/tmpuleqykgo.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpuleqykgo.php\
    \ on line 54\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 1; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n    \
    \    }\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n       \
    \ }\n    }\n    if ($min == $arr[0] && $max == $arr[count($arr) - 1]) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjsuwh3jn.php:48\n\
    Stack trace:\n#0 /tmp/tmpjsuwh3jn.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpjsuwh3jn.php\
    \ on line 48\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $length = count($arr);\n    if ($length ==\
    \ 0) {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n\
    \    for ($i = 1; $i < $length; $i++) {\n        if ($arr[$i] < $min) {\n    \
    \        $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n       \
    \     $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(3, 3, 3, 3, 3);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp14q2__1i.php on line 54

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $arr_length = count($arr);\n    if ($arr_length\
    \ == 0) {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n\
    \    for ($i = 1; $i < $arr_length; $i++) {\n        if ($arr[$i] < $min) {\n\
    \            $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n   \
    \         $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n      \
    \  return true;\n    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 3, 3, 3, 3);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpnfba032u.php on line 54

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   $min_index = 0;\n    $max_index = 0;\n    for ($i = 1; $i < $count; $i++)\
    \ {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n          \
    \  $min_index = $i;\n        }\n        if ($arr[$i] > $max) {\n            $max\
    \ = $arr[$i];\n            $max_index = $i;\n        }\n    }\n    if ($min_index\
    \ == 0) {\n        return true;\n    }\n    if ($max_index == $count - 1) {\n\
    \        return true;\n    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr\
    \ = array(6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(7, 6,\
    \ 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3,\
    \ 4, 5, 6, 7, 8);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(8, 7, 6,\
    \ 5,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpgprpujp7.php on line 70

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbtubu0sd.php:43\n\
    Stack trace:\n#0 /tmp/tmpbtubu0sd.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpbtubu0sd.php\
    \ on line 43\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min + 1 == $len) {\n        return true;\n\
    \    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(3, 4, 5, 1, 2, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr\
    \ = array(3, 4, 5, 1, 2, 6, 7);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 6, 7, 8);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 6, 7, 8, 9);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 6, 7, 8, 9, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 6, 7, 8, 9, 10, 11);\necho move_one_ball($arr) . \"\\n\";\n$arr\
    \ = array(3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12);\necho move_one_ball($arr) .\
    \ \"\\n\";\n$arr = array(3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13);\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n1\n1\n1\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmprcsbmq3m.php:69\nStack trace:\n#0 /tmp/tmprcsbmq3m.php(75): test()\n\
    #1 {main}\n  thrown in /tmp/tmprcsbmq3m.php on line 69\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    if\
    \ ($min == $arr[0] && $max == $arr[$len - 1]) {\n        return true;\n    }\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnp9ol30y.php:52\n\
    Stack trace:\n#0 /tmp/tmpnp9ol30y.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpnp9ol30y.php\
    \ on line 52\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count <= 1)\
    \ {\n        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $count;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = $arr[$i];\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprt7ssa50.php:43\n\
    Stack trace:\n#0 /tmp/tmprt7ssa50.php(50): test()\n#1 {main}\n  thrown in /tmp/tmprt7ssa50.php\
    \ on line 43\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $arr_len = count($arr);\n    if ($arr_len\
    \ == 0) {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n\
    \    for ($i = 1; $i < $arr_len; $i++) {\n        if ($arr[$i] < $min) {\n   \
    \         $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n      \
    \      $max = $arr[$i];\n        }\n    }\n    if ($min == 1 && $max == $arr_len)\
    \ {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwj0rx91g.php:50\n\
    Stack trace:\n#0 /tmp/tmpwj0rx91g.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpwj0rx91g.php\
    \ on line 50\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] > $max) {\n            $max\
    \ = $arr[$i];\n        }\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    $min_index\
    \ = array_search($min, $arr);\n    $max_index = array_search($max, $arr);\n  \
    \  if ($min_index < $max_index) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkryo4cqy.php:54\n\
    Stack trace:\n#0 /tmp/tmpkryo4cqy.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpkryo4cqy.php\
    \ on line 54\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $len = count($arr);\n    $max = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptq9t9s2m.php:43\n\
    Stack trace:\n#0 /tmp/tmptq9t9s2m.php(50): test()\n#1 {main}\n  thrown in /tmp/tmptq9t9s2m.php\
    \ on line 43\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $min_index = 0;\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n            $min_index = $i;\n        }\n    }\n    if\
    \ ($min_index == 0) {\n        return true;\n    }\n    for ($i = $min_index;\
    \ $i < $count - 1; $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkoc4hq7o.php:54\n\
    Stack trace:\n#0 /tmp/tmpkoc4hq7o.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpkoc4hq7o.php\
    \ on line 54\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 1, 1, 1,\
    \ 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array();\necho move_one_ball($arr)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7uc91u97.php:59\n\
    Stack trace:\n#0 /tmp/tmp7uc91u97.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp7uc91u97.php\
    \ on line 59\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    for ($i = 1; $i < count($arr); $i++) {\n    \
    \    if ($arr[$i] < $min) {\n            return false;\n        }\n        $min\
    \ = min($min, $arr[$i]);\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7gvgnb5.php:42\n\
    Stack trace:\n#0 /tmp/tmpp7gvgnb5.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpp7gvgnb5.php\
    \ on line 42\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxazkfdu.php:50\n\
    Stack trace:\n#0 /tmp/tmpvxazkfdu.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpvxazkfdu.php\
    \ on line 50\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $i = 0;\n    $j = $len - 1;\n    while ($i <\
    \ $j) {\n        if ($arr[$i] <= $arr[$j]) {\n            $i++;\n        } else\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz8hhub01.php:45\n\
    Stack trace:\n#0 /tmp/tmpz8hhub01.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpz8hhub01.php\
    \ on line 45\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $min_index = 0;\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n            $min_index = $i;\n        }\n    }\n    if ($min_index\
    \ == 0) {\n        return true;\n    }\n    for ($i = $min_index; $i < $len; $i++)\
    \ {\n        if ($arr[$i] > $min) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4,\
    \ 5, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array(7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2, 3\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsc_qk57y.php on line 68

    '
  timestamp: 1659730626
- exit_code: 0
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $sorted = $arr;\n    sort($sorted);\n    $count = count($arr);\n \
    \   for ($i = 0; $i < $count; $i++) {\n        $shifted = array_slice($arr, $i);\n\
    \        $shifted = array_merge($shifted, array_slice($arr, 0, $i));\n       \
    \ if ($shifted == $sorted) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if($count < 2)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for($i = 1; $i < $count; $i++) {\n        if($arr[$i] < $min) {\n        \
    \    $min = $arr[$i];\n        }\n        if($arr[$i] > $max) {\n            $max\
    \ = $arr[$i];\n        }\n    }\n    if($min == $max) {\n        return true;\n\
    \    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5, 5, 5, 5,\
    \ 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array();\necho move_one_ball($arr) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz_bqwngm.php:63\n\
    Stack trace:\n#0 /tmp/tmpz_bqwngm.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpz_bqwngm.php\
    \ on line 63\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\";\n$arr\
    \ = array(1, 1, 1, 1, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array();\n\
    echo move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args) {\n   \
    \ return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2wf9xjoi.php:64\n\
    Stack trace:\n#0 /tmp/tmp2wf9xjoi.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp2wf9xjoi.php\
    \ on line 64\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\t$len = count($arr);\n\tif ($len == 0) {\n\t\t\
    return true;\n\t}\n\t$min = $arr[0];\n\t$max = $arr[0];\n\tfor ($i = 1; $i < $len;\
    \ $i++) {\n\t\tif ($arr[$i] < $min) {\n\t\t\t$min = $arr[$i];\n\t\t}\n\t\tif ($arr[$i]\
    \ > $max) {\n\t\t\t$max = $arr[$i];\n\t\t}\n\t}\n\tif ($min == 1 && $max == $len)\
    \ {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdf9e05pb.php:50\n\
    Stack trace:\n#0 /tmp/tmpdf9e05pb.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpdf9e05pb.php\
    \ on line 50\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n       \
    \ if ($arr[$i] > $arr[$i + 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(5, 4, 3,\
    \ 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5,\
    \ 6);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(7, 6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(8, 7, 6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1);\necho move_one_ball($arr);\necho\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbsm9vpq5.php on line 75

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // Your code here\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ka1famp.php:31\n\
    Stack trace:\n#0 /tmp/tmp1ka1famp.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp1ka1famp.php\
    \ on line 31\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (count($arr) < 2) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    $min_index = 0;\n    $max_index\
    \ = 0;\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $min)\
    \ {\n            $min = $arr[$i];\n            $min_index = $i;\n        }\n \
    \       if ($arr[$i] > $max) {\n            $max = $arr[$i];\n            $max_index\
    \ = $i;\n        }\n    }\n    if ($min_index == 0) {\n        return true;\n\
    \    }\n    if ($max_index == count($arr) - 1) {\n        return true;\n    }\n\
    \    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(3, 4, 5, 1, 2, 3);\necho move_one_ball($arr) . \"\\n\";\n$arr\
    \ = array(3, 4, 5, 1, 2, 3, 4);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 3, 4, 5, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 3, 4, 5, 6, 7);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 4, 5, 1, 2, 3, 4, 5, 6, 7, 8);\necho move_one_ball($arr) . \"\\n\";\n$arr =\
    \ array(3, 4, 5, 1, 2, 3, 4, 5, 6\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbw0gipfs.php on line 67

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    $count = count($arr);\n\
    \    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n     \
    \       $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n        \
    \    $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu2u4myvi.php:49\n\
    Stack trace:\n#0 /tmp/tmpu2u4myvi.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpu2u4myvi.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    for ($i = 0; $i < $len; $i++) {\n        $j\
    \ = $i;\n        while ($j > 0 && $arr[$j] < $arr[$j - 1]) {\n            $temp\
    \ = $arr[$j];\n            $arr[$j] = $arr[$j - 1];\n            $arr[$j - 1]\
    \ = $temp;\n            $j--;\n        }\n    }\n    for ($i = 0; $i < $len -\
    \ 1; $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptvrgs251.php:52\n\
    Stack trace:\n#0 /tmp/tmptvrgs251.php(57): test()\n#1 {main}\n  thrown in /tmp/tmptvrgs251.php\
    \ on line 52\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i <\
    \ $count; $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n\
    \        }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4cjd1fqh.php:43\n\
    Stack trace:\n#0 /tmp/tmp4cjd1fqh.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp4cjd1fqh.php\
    \ on line 43\n"
  timestamp: 1659730626
- exit_code: 0
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $i = 0;\n    $j = $len - 1;\n    while ($i <\
    \ $j) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            break;\n        }\n\
    \        $i++;\n    }\n    while ($j > $i) {\n        if ($arr[$j] < $arr[$j -\
    \ 1]) {\n            break;\n        }\n        $j--;\n    }\n    if ($i == $j)\
    \ {\n        return true;\n    }\n    $k = $i + 1;\n    while ($k < $j) {\n  \
    \      if ($arr[$k] < $arr[$k - 1]) {\n            return false;\n        }\n\
    \        $k++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 1, 1, 1,\
    \ 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(10, 9, 8, 7, 6,\
    \ 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2,\
    \ 3, 4\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpas8n_bih.php on line 63

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr\
    \ = array(1, 2, 3, 4, 5, 6);\necho move_one_ball($arr);\necho \"\\n\";\n$arr =\
    \ array(6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(7,\
    \ 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(8,\
    \ 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp0l4eqdyr.php:81\nStack trace:\n#0 /tmp/tmp0l4eqdyr.php(87): test()\n\
    #1 {main}\n  thrown in /tmp/tmp0l4eqdyr.php on line 81\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (count($arr) == 0) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    for ($i = 1; $i < count($arr); $i++) {\n    \
    \    if ($arr[$i] < $min) {\n            return false;\n        }\n        $min\
    \ = min($min, $arr[$i]);\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp26al5hbz.php:42\n\
    Stack trace:\n#0 /tmp/tmp26al5hbz.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp26al5hbz.php\
    \ on line 42\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    $min_index = array_search($min, $arr);\n    $max_index = array_search($max,\
    \ $arr);\n    if ($min_index == 0) {\n        return false;\n    }\n    if ($max_index\
    \ == $count - 1) {\n        return false;\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnezeflxp.php:59\n\
    Stack trace:\n#0 /tmp/tmpnezeflxp.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpnezeflxp.php\
    \ on line 59\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $min_index = 0;\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n            $min_index = $i;\n        }\n    }\n    if ($min_index\
    \ == 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5oxuzm5b.php:47\n\
    Stack trace:\n#0 /tmp/tmp5oxuzm5b.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp5oxuzm5b.php\
    \ on line 47\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxazkfdu.php:50\n\
    Stack trace:\n#0 /tmp/tmpvxazkfdu.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpvxazkfdu.php\
    \ on line 50\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9f1c18fk.php:49\n\
    Stack trace:\n#0 /tmp/tmp9f1c18fk.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp9f1c18fk.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (count($arr) == 0) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 1; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n    \
    \    }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n       \
    \ }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return false;\n\
    }\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n\
    $arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr =\
    \ array(1, 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 1, 1,\
    \ 1, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr\
    \ = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(20, 19, 18, 17, 16, 15,\
    \ 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(1, 2\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpd2mdth7y.php on line 71

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $min_index = 0;\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n            $min_index = $i;\n        }\n    }\n    if ($min_index\
    \ == 0) {\n        return true;\n    }\n    for ($i = 1; $i < $len; $i++) {\n\
    \        if ($arr[$i] < $arr[$i - 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmzdn_dhb.php:52\n\
    Stack trace:\n#0 /tmp/tmpmzdn_dhb.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpmzdn_dhb.php\
    \ on line 52\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if(empty($arr)) {\n        return true;\n\
    \    }\n    $arr_len = count($arr);\n    $max = $arr[0];\n    for($i = 1; $i <\
    \ $arr_len; $i++) {\n        if($arr[$i] < $max) {\n            return false;\n\
    \        }\n        $max = $arr[$i];\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdik75_gz.php:43\n\
    Stack trace:\n#0 /tmp/tmpdik75_gz.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpdik75_gz.php\
    \ on line 43\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbtubu0sd.php:43\n\
    Stack trace:\n#0 /tmp/tmpbtubu0sd.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpbtubu0sd.php\
    \ on line 43\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbtubu0sd.php:43\n\
    Stack trace:\n#0 /tmp/tmpbtubu0sd.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpbtubu0sd.php\
    \ on line 43\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i <\
    \ $count; $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n\
    \        }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4cjd1fqh.php:43\n\
    Stack trace:\n#0 /tmp/tmp4cjd1fqh.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp4cjd1fqh.php\
    \ on line 43\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $n = count($arr);\n    if ($n == 0) {\n  \
    \      return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $n; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == 1 && $max == $n) {\n        return true;\n\
    \    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\\
    n\";\n\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n\n\
    $arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n\n$arr = array(1,\
    \ 2, 3, 4, 5, 6);\necho move_one_ball($arr) . \"\\n\";\n\n$arr = array(6, 5, 4,\
    \ 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n\n$arr = array(1, 2, 3, 4, 5,\
    \ 6, 7);\necho move_one_ball($arr) . \"\\n\";\n\n$arr = array(7, 6, 5, 4, 3, 2,\
    \ 1);\necho move_one_ball($arr) . \"\\n\";\n\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8);\necho move_one_ball($arr) . \"\\n\";\n\n$arr = array(8, 7, 6, 5, 4, 3, 2,\
    \ 1);\necho move_one_ball($arr) . \"\\n\";\n\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpuaat76ak.php:81\nStack trace:\n#0 /tmp/tmpuaat76ak.php(87): test()\n\
    #1 {main}\n  thrown in /tmp/tmpuaat76ak.php on line 81\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i <\
    \ $count; $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n\
    \        }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4cjd1fqh.php:43\n\
    Stack trace:\n#0 /tmp/tmp4cjd1fqh.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp4cjd1fqh.php\
    \ on line 43\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i <\
    \ $count; $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n\
    \        }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4cjd1fqh.php:43\n\
    Stack trace:\n#0 /tmp/tmp4cjd1fqh.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp4cjd1fqh.php\
    \ on line 43\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9f1c18fk.php:49\n\
    Stack trace:\n#0 /tmp/tmp9f1c18fk.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp9f1c18fk.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i <\
    \ $count; $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n\
    \        }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\n\
    $arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array();\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(6, 5, 4,\
    \ 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5,\
    \ 6, 7);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(7, 6, 5, 4, 3, 2,\
    \ 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(8, 7, 6, 5, 4, 3, 2,\
    \ 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1);\necho move_\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmps1s5lk2a.php on line 64

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbtubu0sd.php:43\n\
    Stack trace:\n#0 /tmp/tmpbtubu0sd.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpbtubu0sd.php\
    \ on line 43\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    $i = 0;\n    while\
    \ ($i < $len - 1) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            return\
    \ false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpda7bl_h_.php:40\n\
    Stack trace:\n#0 /tmp/tmpda7bl_h_.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpda7bl_h_.php\
    \ on line 40\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i <\
    \ $count; $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n\
    \        }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\n\
    $arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr =\
    \ array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array();\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(1, 2, 3, 4, 5, 6);\necho move_one_ball($arr);\necho \"\\\
    n\";\n$arr = array(6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5, 6, 7);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8);\necho move_one_ball($arr);\necho \"\\\
    n\";\n$arr = array(8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(9, 8, 7, 6, 5,\nfunction candidate(...$args) {\n \
    \   return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1qp6ihgk.php on line 75

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    $min_pos\
    \ = 0;\n    $max_pos = 0;\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            $min = $arr[$i];\n            $min_pos = $i;\n      \
    \  }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n         \
    \   $max_pos = $i;\n        }\n    }\n    if ($min_pos == 0) {\n        return\
    \ true;\n    }\n    if ($max_pos == $len - 1) {\n        return true;\n    }\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplostmtxf.php:56\n\
    Stack trace:\n#0 /tmp/tmplostmtxf.php(63): test()\n#1 {main}\n  thrown in /tmp/tmplostmtxf.php\
    \ on line 56\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (count($arr) == 0) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 1; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n    \
    \    }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n       \
    \ }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpty_kgvjf.php:47\n\
    Stack trace:\n#0 /tmp/tmpty_kgvjf.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpty_kgvjf.php\
    \ on line 47\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $i = 0;\n    $j = $len - 1;\n    while ($i <\
    \ $j) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            $arr[$i] = $arr[$i\
    \ + 1];\n            $i++;\n        } else if ($arr[$j] < $arr[$j - 1]) {\n  \
    \          $arr[$j] = $arr[$j - 1];\n            $j--;\n        } else {\n   \
    \         $i++;\n            $j--;\n        }\n    }\n    if ($i == $j) {\n  \
    \      return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp053v1xto.php:53\n\
    Stack trace:\n#0 /tmp/tmp053v1xto.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp053v1xto.php\
    \ on line 53\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $len = count($arr);\n    $min = $arr[0];\n    $max = $arr[0];\n  \
    \  for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n         \
    \   $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max\
    \ = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return true;\n\
    \    }\n    $min_index = array_search($min, $arr);\n    $max_index = array_search($max,\
    \ $arr);\n    if ($min_index == 0) {\n        return true;\n    }\n    if ($max_index\
    \ == $len - 1) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyg8zjt8t.php:57\n\
    Stack trace:\n#0 /tmp/tmpyg8zjt8t.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpyg8zjt8t.php\
    \ on line 57\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $i = 0;\n    $j = count($arr) - 1;\n    while ($i < $j) {\n      \
    \  if ($arr[$i] > $arr[$i + 1]) {\n            return false;\n        }\n    \
    \    if ($arr[$j] < $arr[$j - 1]) {\n            return false;\n        }\n  \
    \      $i++;\n        $j--;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt78gd0_7.php:47\n\
    Stack trace:\n#0 /tmp/tmpt78gd0_7.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpt78gd0_7.php\
    \ on line 47\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (count($arr) == 0) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 1; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n    \
    \    }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n       \
    \ }\n    }\n    return $max - $min == count($arr) - 1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyasrmg7u.php:46\n\
    Stack trace:\n#0 /tmp/tmpyasrmg7u.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpyasrmg7u.php\
    \ on line 46\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $min_index = 0;\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n            $min_index = $i;\n        }\n    }\n    if ($min_index\
    \ == 0) {\n        return true;\n    }\n    for ($i = $min_index; $i < $len -\
    \ 1; $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(3, 5, 4, 1, 2, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr\
    \ = array(3, 5, 4, 1, 2, 6, 7);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 5, 4, 1, 2, 6, 7, 8);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 5, 4, 1, 2, 6, 7, 8, 9);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 5, 4, 1, 2, 6, 7, 8, 9, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 5, 4, 1, 2, 6, 7, 8, 9, 10, 11);\necho move_one_ball($arr) . \"\\n\";\n$arr\
    \ = array(3, 5, 4, 1, 2, 6, 7, 8, 9, 10, 11, 12);\necho move_one_ball($arr) .\
    \ \"\\n\";\n$\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp77vswuk3.php on line 66

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $min_index = 0;\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n            $min_index = $i;\n        }\n    }\n    if ($min_index\
    \ == 0) {\n        return true;\n    }\n    for ($i = 1; $i < $len; $i++) {\n\
    \        if ($arr[$i] < $arr[$i - 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4,\
    \ 5, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array(7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpasrbyvkh.php on line 68

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    $min = $arr[0];\n    $max = $arr[0];\n\
    \    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n     \
    \       $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n        \
    \    $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfneuka18.php:49\n\
    Stack trace:\n#0 /tmp/tmpfneuka18.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpfneuka18.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9f1c18fk.php:49\n\
    Stack trace:\n#0 /tmp/tmp9f1c18fk.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp9f1c18fk.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len <= 1) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    $min_index\
    \ = array_search($min, $arr);\n    $max_index = array_search($max, $arr);\n  \
    \  if ($min_index == 0) {\n        $min_index = $len;\n    }\n    if ($max_index\
    \ == $len - 1) {\n        $max_index = -1;\n    }\n    if ($min_index < $max_index)\
    \ {\n        return false;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphdzv7kji.php:62\n\
    Stack trace:\n#0 /tmp/tmphdzv7kji.php(67): test()\n#1 {main}\n  thrown in /tmp/tmphdzv7kji.php\
    \ on line 62\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    $count = count($arr);\n\
    \    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n     \
    \       $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n        \
    \    $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu2u4myvi.php:49\n\
    Stack trace:\n#0 /tmp/tmpu2u4myvi.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpu2u4myvi.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 3, 3, 3, 3);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmprmn2si_w.php on line 51

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $max = $arr[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($arr[$i] < $max) {\n            return false;\n       \
    \ }\n        $max = max($max, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbtubu0sd.php:43\n\
    Stack trace:\n#0 /tmp/tmpbtubu0sd.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpbtubu0sd.php\
    \ on line 43\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $max = $arr[0];\n    $min = $arr[0];\n    $max_index = 0;\n    $min_index\
    \ = 0;\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] > $max)\
    \ {\n            $max = $arr[$i];\n            $max_index = $i;\n        }\n \
    \       if ($arr[$i] < $min) {\n            $min = $arr[$i];\n            $min_index\
    \ = $i;\n        }\n    }\n    if ($max_index == 0 && $min_index == count($arr)\
    \ - 1) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwnrnatv9.php:52\n\
    Stack trace:\n#0 /tmp/tmpwnrnatv9.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpwnrnatv9.php\
    \ on line 52\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $arr_len = count($arr);\n    if ($arr_len\
    \ == 0) {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n\
    \    for ($i = 1; $i < $arr_len; $i++) {\n        if ($arr[$i] < $min) {\n   \
    \         $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n      \
    \      $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr\
    \ = array(1, 1, 1, 1, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10);\necho move_one_ball($arr);\necho \"\\n\";\n$arr\
    \ = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\\
    n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(20, 19,\
    \ 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\n\
    echo \"\\\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpg3ee_ir3.php on line 76

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5, 4, 3, 2,\
    \ 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 1, 1, 1, 1);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\
    echo move_one_ball($arr) . \"\\n\";\n$arr = array(10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2,\
    \ 3, 4\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp8wwd7_d6.php on line 63

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    $min_index\
    \ = -1;\n    $max_index = -1;\n    for ($i = 0; $i < $len; $i++) {\n        if\
    \ ($arr[$i] == $min) {\n            $min_index = $i;\n        }\n        if ($arr[$i]\
    \ == $max) {\n            $max_index = $i;\n        }\n    }\n    if ($min_index\
    \ == 0 && $max_index == $len - 1) {\n        return true;\n    }\n    if ($min_index\
    \ == 0 && $max_index != $len - 1) {\n        return false;\n    }\n    if ($min_index\
    \ != 0 && $max_index == $len - 1) {\n        return true;\n    }\n    if ($min_index\
    \ != 0 && $max_index != $len - 1) {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0zfqkraf.php:70\n\
    Stack trace:\n#0 /tmp/tmp0zfqkraf.php(77): test()\n#1 {main}\n  thrown in /tmp/tmp0zfqkraf.php\
    \ on line 70\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    $min = $arr[0];\n\
    \    $max = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            $min = $arr[$i];\n        }\n        if ($arr[$i] > $max)\
    \ {\n            $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n\
    \        return true;\n    }\n    $min_index = array_search($min, $arr);\n   \
    \ $max_index = array_search($max, $arr);\n    if ($min_index == 0 && $max_index\
    \ == $len - 1) {\n        return true;\n    }\n    if ($min_index == 0 && $max_index\
    \ == $len - 2) {\n        return true;\n    }\n    if ($min_index == 1 && $max_index\
    \ == $len - 1) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeczyg1ps.php:57\n\
    Stack trace:\n#0 /tmp/tmpeczyg1ps.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpeczyg1ps.php\
    \ on line 57\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 1; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n    \
    \    }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n       \
    \ }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppd2r0wou.php:48\n\
    Stack trace:\n#0 /tmp/tmppd2r0wou.php(55): test()\n#1 {main}\n  thrown in /tmp/tmppd2r0wou.php\
    \ on line 48\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    $min = $arr[0];\n    $max = $arr[0];\n\
    \    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n     \
    \       $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n        \
    \    $max = $arr[$i];\n        }\n    }\n    if ($max - $min == $count - 1) {\n\
    \        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpva6k6s49.php:50\n\
    Stack trace:\n#0 /tmp/tmpva6k6s49.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpva6k6s49.php\
    \ on line 50\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(3, 5, 4, 1, 2, 6);\necho move_one_ball($arr);\necho \"\\\
    n\";\n$arr = array(3, 5, 4, 1, 2, 6, 7);\necho move_one_ball($arr);\necho \"\\\
    n\";\n$arr = array(3, 5, 4, 1, 2, 6, 7, 8);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(3, 5, 4, 1, 2, 6, 7, 8, 9);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2, 6, 7, 8, 9, 10);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2, 6, 7, 8, 9, 10, 11);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2, 6, 7, 8, 9, 10, 11, 12);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2, 6, 7, 8, 9\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpq6y_s0z5.php on line 72

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // Your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprebecn9u.php:32\n\
    Stack trace:\n#0 /tmp/tmprebecn9u.php(39): test()\n#1 {main}\n  thrown in /tmp/tmprebecn9u.php\
    \ on line 32\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($max - $min == $count - 1) {\n\
    \        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydnag5wl.php:50\n\
    Stack trace:\n#0 /tmp/tmpydnag5wl.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpydnag5wl.php\
    \ on line 50\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    for ($i = 0; $i < $count; $i++) {\n        if ($arr[$i] ==\
    \ $min) {\n            $min_index = $i;\n        }\n        if ($arr[$i] == $max)\
    \ {\n            $max_index = $i;\n        }\n    }\n    if ($min_index == 0 &&\
    \ $max_index == $count - 1) {\n        return true;\n    }\n    if ($min_index\
    \ == 0 && $max_index == 1) {\n        return true;\n    }\n    if ($min_index\
    \ == $count - 1 && $max_index == 0) {\n        return true;\n    }\n    if ($min_index\
    \ == $count - 2 && $max_index == $count - 1) {\n        return true;\n    }\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb96tmyz2.php:69\n\
    Stack trace:\n#0 /tmp/tmpb96tmyz2.php(76): test()\n#1 {main}\n  thrown in /tmp/tmpb96tmyz2.php\
    \ on line 69\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n\t$len = count($arr);\n\tif ($len == 0) {\n\t\t\
    return true;\n\t}\n\t$max = $arr[0];\n\tfor ($i = 1; $i < $len; $i++) {\n\t\t\
    if ($arr[$i] < $max) {\n\t\t\treturn false;\n\t\t}\n\t\t$max = $arr[$i];\n\t}\n\
    \treturn true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1duwcx5t.php:43\n\
    Stack trace:\n#0 /tmp/tmp1duwcx5t.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1duwcx5t.php\
    \ on line 43\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for($i\
    \ = 1; $i < $len; $i++) {\n        if($arr[$i] < $min) {\n            $min = $arr[$i];\n\
    \        }\n        if($arr[$i] > $max) {\n            $max = $arr[$i];\n    \
    \    }\n    }\n    if($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2y7jo27z.php:49\n\
    Stack trace:\n#0 /tmp/tmp2y7jo27z.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp2y7jo27z.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $arr_length = count($arr);\n    if ($arr_length\
    \ == 0) {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n\
    \    for ($i = 1; $i < $arr_length; $i++) {\n        if ($arr[$i] < $min) {\n\
    \            $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n   \
    \         $max = $arr[$i];\n        }\n    }\n    if ($min == 1 && $max == $arr_length)\
    \ {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpafhm1d1q.php:50\n\
    Stack trace:\n#0 /tmp/tmpafhm1d1q.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpafhm1d1q.php\
    \ on line 50\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == 1 && $max == $len) {\n        return true;\n\
    \    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . PHP_EOL;\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . PHP_EOL;\n\
    $arr = array(3, 4, 5, 1, 2, 6);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(3,\
    \ 4, 5, 1, 2, 6, 7);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(3, 4,\
    \ 5, 1, 2, 6, 7, 8);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(3, 4,\
    \ 5, 1, 2, 6, 7, 8, 9);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(3,\
    \ 4, 5, 1, 2, 6, 7, 8, 9, 10);\necho move_one_ball($arr) . PHP_EOL;\n$arr = array(3,\
    \ 4, 5, 1, 2, 6, 7, 8, 9, 10, 11);\necho move_one_ball($arr) . PHP_EOL;\n$arr\
    \ = array(3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12);\necho move_one_ball($arr) .\
    \ PHP_EOL;\n$arr = array(3, 4, 5, 1,\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpl29d1qrg.php on line 63

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxazkfdu.php:50\n\
    Stack trace:\n#0 /tmp/tmpvxazkfdu.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpvxazkfdu.php\
    \ on line 50\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    if ($min == $arr[0] && $max == $arr[$count - 1]) {\n     \
    \   return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy6iylaen.php:52\n\
    Stack trace:\n#0 /tmp/tmpy6iylaen.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpy6iylaen.php\
    \ on line 52\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) return\
    \ true;\n    $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if\
    \ ($arr[$i] < $min) return false;\n        $min = min($min, $arr[$i]);\n    }\n\
    \    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array();\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3,\
    \ 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6);\n\
    echo move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\
    echo move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);\necho move_one_ball($arr) . \"\\n\";\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp_ehuejeq.php:63\nStack trace:\n#0 /tmp/tmp_ehuejeq.php(70):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_ehuejeq.php on line 63\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // Write your code here\n    // To print results\
    \ to the standard output you can use print\n    // Example: print \"Hello world!\"\
    ;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_19tqnfd.php:33\n\
    Stack trace:\n#0 /tmp/tmp_19tqnfd.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_19tqnfd.php\
    \ on line 33\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9f1c18fk.php:49\n\
    Stack trace:\n#0 /tmp/tmp9f1c18fk.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp9f1c18fk.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $min_index = 0;\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n            $min_index = $i;\n        }\n    }\n    if ($min_index\
    \ == 0) {\n        return true;\n    }\n    for ($i = 1; $i < $len; $i++) {\n\
    \        if ($arr[$i] < $arr[$i - 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmzdn_dhb.php:52\n\
    Stack trace:\n#0 /tmp/tmpmzdn_dhb.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpmzdn_dhb.php\
    \ on line 52\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4,\
    \ 5, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6,\
    \ 7);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpumdkdwzt.php on line 65

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len < 2) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    $min_index\
    \ = 0;\n    $max_index = 0;\n    for ($i = 0; $i < $len; $i++) {\n        if ($arr[$i]\
    \ == $min) {\n            $min_index = $i;\n        }\n        if ($arr[$i] ==\
    \ $max) {\n            $max_index = $i;\n        }\n    }\n    if ($min_index\
    \ < $max_index) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxf9r2fzp.php:62\n\
    Stack trace:\n#0 /tmp/tmpxf9r2fzp.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpxf9r2fzp.php\
    \ on line 62\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $n = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i < $n;\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n       \
    \ }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd7d8eflk.php:43\n\
    Stack trace:\n#0 /tmp/tmpd7d8eflk.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpd7d8eflk.php\
    \ on line 43\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    $count\
    \ = 0;\n    for ($i = 0; $i < $len; $i++) {\n        if ($arr[$i] == $min) {\n\
    \            $count++;\n        }\n    }\n    if ($count == 1) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphzvo2nwm.php:60\n\
    Stack trace:\n#0 /tmp/tmphzvo2nwm.php(65): test()\n#1 {main}\n  thrown in /tmp/tmphzvo2nwm.php\
    \ on line 60\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min + 1 == $len) {\n        return true;\n\
    \    }\n    return false;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptkzp51mf.php:49\n\
    Stack trace:\n#0 /tmp/tmptkzp51mf.php(55): test()\n#1 {main}\n  thrown in /tmp/tmptkzp51mf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    $i\
    \ = 0;\n    while ($i < $len) {\n        if ($arr[$i] == $min) {\n           \
    \ break;\n        }\n        $i++;\n    }\n    $j = $i + 1;\n    while ($j < $len)\
    \ {\n        if ($arr[$j] != $min) {\n            break;\n        }\n        $j++;\n\
    \    }\n    if ($j == $len) {\n        return true;\n    }\n    $k = $j + 1;\n\
    \    while ($k < $len) {\n        if ($arr[$k] == $min) {\n            return\
    \ false;\n        }\n        $k++;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppyqhqbeu.php:75\n\
    Stack trace:\n#0 /tmp/tmppyqhqbeu.php(80): test()\n#1 {main}\n  thrown in /tmp/tmppyqhqbeu.php\
    \ on line 75\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9f1c18fk.php:49\n\
    Stack trace:\n#0 /tmp/tmp9f1c18fk.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp9f1c18fk.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (count($arr) == 0) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 1; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n    \
    \    }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n       \
    \ }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuxxrs7i3.php:48\n\
    Stack trace:\n#0 /tmp/tmpuxxrs7i3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpuxxrs7i3.php\
    \ on line 48\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $min_index = 0;\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n            $min_index = $i;\n        }\n    }\n    if ($min_index\
    \ == 0) {\n        return true;\n    }\n    for ($i = $min_index; $i < $len -\
    \ 1; $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuleqykgo.php:54\n\
    Stack trace:\n#0 /tmp/tmpuleqykgo.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpuleqykgo.php\
    \ on line 54\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i <\
    \ $count; $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n\
    \        }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4cjd1fqh.php:43\n\
    Stack trace:\n#0 /tmp/tmp4cjd1fqh.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp4cjd1fqh.php\
    \ on line 43\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len < 2) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqjfjy7v3.php:49\n\
    Stack trace:\n#0 /tmp/tmpqjfjy7v3.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpqjfjy7v3.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(3, 5, 4, 1, 2, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr\
    \ = array(3, 5, 4, 1, 2, 6, 7);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 5, 4, 1, 2, 6, 7, 8);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 5, 4, 1, 2, 6, 7, 8, 9);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 5, 4, 1, 2, 6, 7, 8, 9, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 5, 4, 1, 2, 6, 7, 8, 9, 10, 11);\necho move_one_ball($arr) . \"\\n\";\n$arr\
    \ = array(3, 5, 4, 1, 2, 6, 7, 8, 9, 10, 11, 12);\necho move_one_ball($arr) .\
    \ \"\\n\";\n$arr = array(3, 5, 4, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13);\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n1\n1\n1\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpjio4ipjg.php:69\nStack trace:\n#0 /tmp/tmpjio4ipjg.php(75): test()\n\
    #1 {main}\n  thrown in /tmp/tmpjio4ipjg.php on line 69\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    $count = 0;\n    for ($i\
    \ = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $min) {\n           \
    \ $min = $arr[$i];\n            $count++;\n        }\n        if ($arr[$i] > $max)\
    \ {\n            $max = $arr[$i];\n        }\n    }\n    if ($count > 1) {\n \
    \       return false;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_4kthcf0.php:53\n\
    Stack trace:\n#0 /tmp/tmp_4kthcf0.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp_4kthcf0.php\
    \ on line 53\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min + 1 == $len) {\n        return true;\n\
    \    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\n$arr1 = array(3,\
    \ 5, 4, 1, 2);\n$arr2 = array(1, 2, 3, 4, 5);\n$arr3 = array(1, 2, 3, 4, 5, 6);\n\
    $arr4 = array(1, 2, 3, 4, 5, 6, 7);\n$arr5 = array(1, 2, 3, 4, 5, 6, 7, 8);\n\
    $arr6 = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n$arr7 = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10);\n$arr8 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);\n$arr9 = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n$arr10 = array(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13);\n$arr11 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14);\n$arr12 = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n$arr13\
    \ = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpmwu0gk_o.php on line 58

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9f1c18fk.php:49\n\
    Stack trace:\n#0 /tmp/tmp9f1c18fk.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp9f1c18fk.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($max - $min == $count - 1) {\n\
    \        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydnag5wl.php:50\n\
    Stack trace:\n#0 /tmp/tmpydnag5wl.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpydnag5wl.php\
    \ on line 50\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $arr_len = count($arr);\n    if ($arr_len\
    \ == 0) {\n        return true;\n    }\n    $min = $arr[0];\n    $min_index =\
    \ 0;\n    for ($i = 1; $i < $arr_len; $i++) {\n        if ($arr[$i] < $min) {\n\
    \            $min = $arr[$i];\n            $min_index = $i;\n        }\n    }\n\
    \    if ($min_index == 0) {\n        return true;\n    }\n    for ($i = 1; $i\
    \ < $arr_len; $i++) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppy_46f73.php:52\n\
    Stack trace:\n#0 /tmp/tmppy_46f73.php(59): test()\n#1 {main}\n  thrown in /tmp/tmppy_46f73.php\
    \ on line 52\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min == $len - 1) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxazkfdu.php:50\n\
    Stack trace:\n#0 /tmp/tmpvxazkfdu.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpvxazkfdu.php\
    \ on line 50\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $arr_length = count($arr);\n    $min_value = min($arr);\n    $min_index\
    \ = array_search($min_value, $arr);\n    if ($min_index == 0) {\n        return\
    \ true;\n    }\n    $max_value = max($arr);\n    $max_index = array_search($max_value,\
    \ $arr);\n    if ($max_index == $arr_length - 1) {\n        return true;\n   \
    \ }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp126kzcmt.php:46\n\
    Stack trace:\n#0 /tmp/tmp126kzcmt.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp126kzcmt.php\
    \ on line 46\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $arr_len = count($arr);\n    if ($arr_len\
    \ == 0) {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n\
    \    for ($i = 1; $i < $arr_len; $i++) {\n        if ($arr[$i] < $min) {\n   \
    \         $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n      \
    \      $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprvp6sb_8.php:49\n\
    Stack trace:\n#0 /tmp/tmprvp6sb_8.php(56): test()\n#1 {main}\n  thrown in /tmp/tmprvp6sb_8.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min + 1 == $len) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpep5kz2f4.php:50\n\
    Stack trace:\n#0 /tmp/tmpep5kz2f4.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpep5kz2f4.php\
    \ on line 50\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($max - $min + 1 == $len) {\n        return true;\n\
    \    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4,\
    \ 5, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6,\
    \ 7);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp__wsk8oe.php on line 65

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $max = $arr[0];\n    $min = $arr[0];\n    $min_index = 0;\n    $max_index\
    \ = 0;\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] > $max)\
    \ {\n            $max = $arr[$i];\n            $max_index = $i;\n        }\n \
    \       if ($arr[$i] < $min) {\n            $min = $arr[$i];\n            $min_index\
    \ = $i;\n        }\n    }\n    if ($max_index == 0) {\n        return true;\n\
    \    }\n    if ($min_index == count($arr) - 1) {\n        return true;\n    }\n\
    \    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr\
    \ = array(1, 2, 3, 5, 4);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2,\
    \ 3, 4, 5, 6, 7);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2,\
    \ 3, 4, 5, 6, 7, 8);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmptujbzc4q.php on line 78

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // Your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprebecn9u.php:32\n\
    Stack trace:\n#0 /tmp/tmprebecn9u.php(39): test()\n#1 {main}\n  thrown in /tmp/tmprebecn9u.php\
    \ on line 32\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 0
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len <= 1) {\n\
    \        return true;\n    }\n    $count = 0;\n    for ($i = 0; $i < $len - 1;\
    \ $i++) {\n        if ($arr[$i] > $arr[$i + 1]) {\n            $count++;\n   \
    \     }\n    }\n    if ($count > 1) {\n        return false;\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(3, 3, 3, 3, 3);\necho move_one_ball($arr);\necho \"\\n\";\n$arr\
    \ = array(3, 3, 3, 3, 4);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3,\
    \ 3, 3, 3, 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 3, 3,\
    \ 3, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 3, 3, 3, 0);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 3, 3, 3, -1);\necho\
    \ move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 3, 3, 3, -2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 3, 3, 3, -3);\necho move_one_ball($arr);\necho\
    \ \"\\n\";\n$arr = array(3, 3, 3, 3, -4);\necho move_one_ball($arr);\necho \"\\\
    n\";\n$arr = array(3, 3, 3, 3, -5);\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\n\n\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp2y81m7jx.php:84\nStack trace:\n#0 /tmp/tmp2y81m7jx.php(91): test()\n\
    #1 {main}\n  thrown in /tmp/tmp2y81m7jx.php on line 84\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    // Your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprebecn9u.php:32\n\
    Stack trace:\n#0 /tmp/tmprebecn9u.php(39): test()\n#1 {main}\n  thrown in /tmp/tmprebecn9u.php\
    \ on line 32\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $length = count($arr);\n    if ($length ==\
    \ 0) {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n\
    \    for ($i = 1; $i < $length; $i++) {\n        if ($arr[$i] < $min) {\n    \
    \        $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n       \
    \     $max = $arr[$i];\n        }\n    }\n    if ($max - $min + 1 == $length)\
    \ {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphblhzst4.php:50\n\
    Stack trace:\n#0 /tmp/tmphblhzst4.php(56): test()\n#1 {main}\n  thrown in /tmp/tmphblhzst4.php\
    \ on line 50\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $sorted = $arr;\n    sort($sorted);\n    $count = count($arr);\n \
    \   for ($i = 0; $i < $count; $i++) {\n        if ($arr[$i] != $sorted[$i]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpobm8jkn_.php:43\n\
    Stack trace:\n#0 /tmp/tmpobm8jkn_.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpobm8jkn_.php\
    \ on line 43\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $sorted = $arr;\n    sort($sorted);\n    $count = 0;\n    for ($i\
    \ = 0; $i < count($arr); $i++) {\n        if ($arr[$i] != $sorted[$i]) {\n   \
    \         $count++;\n        }\n    }\n    if ($count > 1) {\n        return false;\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgt8rpg_7.php:46\n\
    Stack trace:\n#0 /tmp/tmpgt8rpg_7.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpgt8rpg_7.php\
    \ on line 46\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    for ($i = 1; $i < count($arr); $i++) {\n    \
    \    if ($arr[$i] < $min) {\n            return false;\n        }\n        $min\
    \ = min($min, $arr[$i]);\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7gvgnb5.php:42\n\
    Stack trace:\n#0 /tmp/tmpp7gvgnb5.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpp7gvgnb5.php\
    \ on line 42\n"
  timestamp: 1659730626
- exit_code: 0
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $sorted = $arr;\n    sort($sorted);\n    $count = count($arr);\n \
    \   for ($i = 0; $i < $count; $i++) {\n        $arr = array_merge(array_slice($arr,\
    \ 1), array_slice($arr, 0, 1));\n        if ($arr == $sorted) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $min_index = 0;\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n            $min_index = $i;\n        }\n    }\n    if\
    \ ($min_index == 0) {\n        return true;\n    }\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $min_index; $i++) {\n        if ($arr[$i] > $max) {\n        \
    \    $max = $arr[$i];\n        }\n    }\n    if ($max > $min) {\n        return\
    \ false;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx4ibyjni.php:56\n\
    Stack trace:\n#0 /tmp/tmpx4ibyjni.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpx4ibyjni.php\
    \ on line 56\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $min_index = 0;\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n            $min_index = $i;\n        }\n    }\n    if ($min_index\
    \ == 0) {\n        return true;\n    }\n    for ($i = 1; $i < $len; $i++) {\n\
    \        if ($arr[$i] < $arr[$i - 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4,\
    \ 5, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array(7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp78q7g_vw.php on line 67

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $min_index = 0;\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n            $min_index = $i;\n        }\n    }\n    if ($min_index\
    \ == 0) {\n        return true;\n    }\n    for ($i = $min_index; $i < $len; $i++)\
    \ {\n        if ($arr[$i] > $min) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1mqc1lon.php:52\n\
    Stack trace:\n#0 /tmp/tmp1mqc1lon.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp1mqc1lon.php\
    \ on line 52\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n  \
    \  return true;\n  }\n  $min = $arr[0];\n  $max = $arr[0];\n  for ($i = 1; $i\
    \ < $len; $i++) {\n    if ($arr[$i] < $min) {\n      $min = $arr[$i];\n    }\n\
    \    if ($arr[$i] > $max) {\n      $max = $arr[$i];\n    }\n  }\n  if ($min ==\
    \ $max) {\n    return true;\n  }\n  return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb15l93r0.php:49\n\
    Stack trace:\n#0 /tmp/tmpb15l93r0.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpb15l93r0.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = min($arr);\n    $max = max($arr);\n    $min_index = array_search($min,\
    \ $arr);\n    $max_index = array_search($max, $arr);\n    if ($min_index == 0)\
    \ {\n        return true;\n    }\n    if ($max_index == count($arr) - 1) {\n \
    \       return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5zrv9rml.php:45\n\
    Stack trace:\n#0 /tmp/tmp5zrv9rml.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp5zrv9rml.php\
    \ on line 45\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i <\
    \ $count; $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n\
    \        }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\n\
    $arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(3,\
    \ 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array();\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31, 32,\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpa24hfiw3.php on line 57

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    $count = count($arr);\n\
    \    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n     \
    \       $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n        \
    \    $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu2u4myvi.php:49\n\
    Stack trace:\n#0 /tmp/tmpu2u4myvi.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpu2u4myvi.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1nzxufy4.php:48\n\
    Stack trace:\n#0 /tmp/tmp1nzxufy4.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp1nzxufy4.php\
    \ on line 48\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9f1c18fk.php:49\n\
    Stack trace:\n#0 /tmp/tmp9f1c18fk.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp9f1c18fk.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 1, 1, 1,\
    \ 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(10, 9, 8, 7, 6,\
    \ 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2,\
    \ 3, 4\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpas8n_bih.php on line 63

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    for ($i = 1; $i < count($arr); $i++) {\n    \
    \    if ($arr[$i] < $min) {\n            return false;\n        }\n        $min\
    \ = min($min, $arr[$i]);\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7w3g5wjs.php:41\n\
    Stack trace:\n#0 /tmp/tmp7w3g5wjs.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp7w3g5wjs.php\
    \ on line 41\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $count = count($arr);\n    if ($count == 0)\
    \ {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n \
    \   for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n      \
    \      $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n         \
    \   $max = $arr[$i];\n        }\n    }\n    if ($min == $max) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9f1c18fk.php:49\n\
    Stack trace:\n#0 /tmp/tmp9f1c18fk.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp9f1c18fk.php\
    \ on line 49\n"
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    if (empty($arr)) {\n        return true;\n\
    \    }\n    $count = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i <\
    \ $count; $i++) {\n        if ($arr[$i] < $min) {\n            return false;\n\
    \        }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\n\
    $arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr) ? 'true' : 'false';\necho\
    \ \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) ? 'true' :\
    \ 'false';\necho \"\\n\";\n$arr = array();\necho move_one_ball($arr) ? 'true'\
    \ : 'false';\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr)\
    \ ? 'true' : 'false';\necho \"\\n\";\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr)\
    \ ? 'true' : 'false';\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6);\necho move_one_ball($arr)\
    \ ? 'true' : 'false';\necho \"\\n\";\n$arr = array(6, 5, 4, 3, 2, 1);\necho move_one_ball($arr)\
    \ ? 'true' : 'false';\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7);\necho\
    \ move_one_ball($arr) ? 'true' : 'false';\necho \"\\n\";\n$arr = array(7, 6, 5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr) ? 'true' : 'false';\necho \"\\n\";\n\
    $arr = array(1, 2, 3, 4, 5, 6, 7, 8);\necho move_one_ball($arr) ? 'true' : 'false';\n\
    echo \"\\n\";\n$arr = array(8, 7, 6,\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpj2_knh6p.php on line 69

    '
  timestamp: 1659730626
- exit_code: 255
  program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return true else return false.\n\
    // If the given array is empty then return true.\n// Note: The given array is\
    \ guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3,\
    \ 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing\
    \ order for the given\n// array by performing any number of right shift operations.\n\
    function move_one_ball($arr) {\n    $len = count($arr);\n    if ($len == 0) {\n\
    \        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx9chwpf.php:49\n\
    Stack trace:\n#0 /tmp/tmppx9chwpf.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppx9chwpf.php\
    \ on line 49\n"
  timestamp: 1659730626
