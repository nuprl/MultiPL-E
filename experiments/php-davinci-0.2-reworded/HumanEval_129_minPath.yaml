name: HumanEval_129_minPath
language: php
prompt: "<?php\n// Given a grid with N rows and N columns (N >= 2) and a positive\
  \ integer k, \n// each cell of the grid contains a value. Every integer in the range\
  \ [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You\
  \ have to find the minimum path of length k in the grid. You can start\n// from\
  \ any cell, and in each step you can move to any of the neighbor cells,\n// in other\
  \ words, you can go to cells which share an edge with you current\n// cell.\n//\
  \ Please note that a path of length k means visiting exactly k cells (not\n// necessarily\
  \ distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered\
  \ less than a path B (of length k) if\n// after making the ordered arrays of the\
  \ values on the cells that A and B go\n// through (let's call them lst_A and lst_B),\
  \ lst_A is lexicographically less\n// than lst_B, in other words, there exist an\
  \ integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j\
  \ (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer\
  \ is unique.\n// Return an ordered array of the values on the cells that the minimum\
  \ path go through.\n// Examples:    \n// >>> minPath(array(array(1, 2, 3), array(4,\
  \ 5, 6), array(7, 8, 9)), 3)\n// array(1, 2, 1)\n// >>> minPath(array(array(5, 9,\
  \ 3), array(4, 1, 6), array(7, 8, 2)), 1)\n// array(1)\nfunction minPath($grid,\
  \ $k) {\n"
tests: "function candidate(...$args) {\n    return minPath(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7,\
  \ 8, 9)), 3) !== array(1, 2, 1)) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(array(array(5, 9, 3), array(4, 1, 6), array(7, 8, 2)), 1) !== array(1))\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2,\
  \ 3, 4), array(5, 6, 7, 8), array(9, 10, 11, 12), array(13, 14, 15, 16)), 4) !==\
  \ array(1, 2, 1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6,\
  \ 4, 13, 10), array(5, 7, 12, 1), array(3, 16, 11, 15), array(8, 14, 9, 2)), 7)\
  \ !== array(1, 10, 1, 10, 1, 10, 1)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(array(8, 14, 9, 2), array(6, 4, 13, 15), array(5, 7, 1,\
  \ 12), array(3, 10, 11, 16)), 5) !== array(1, 7, 1, 7, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(array(11, 8, 7, 2), array(5, 16, 14,\
  \ 4), array(9, 3, 15, 6), array(12, 13, 10, 1)), 9) !== array(1, 6, 1, 6, 1, 6,\
  \ 1, 6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(12,\
  \ 13, 10, 1), array(9, 3, 15, 6), array(5, 16, 14, 4), array(11, 8, 7, 2)), 12)\
  \ !== array(1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(array(2, 7, 4), array(3, 1, 5), array(6, 8, 9)), 8)\
  \ !== array(1, 3, 1, 3, 1, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(array(6, 1, 5), array(3, 8, 9), array(2, 7, 4)), 8) !==\
  \ array(1, 5, 1, 5, 1, 5, 1, 5)) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(array(array(1, 2), array(3, 4)), 10) !== array(1, 2, 1, 2, 1, 2,\
  \ 1, 2, 1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
  \ 3), array(3, 2)), 10) !== array(1, 3, 1, 3, 1, 3, 1, 3, 1, 3)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            if (findPath($grid, $i, $j,\
    \ $k - 1, $path, $pathSum, $visited, $minPath, $minPathSum)) {\n             \
    \   return $minPath;\n            }\n        }\n    }\n    return $minPath;\n}",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $min_path = array();\n    $min_sum = PHP_INT_MAX;\n\
    \    $min_path_sum = PHP_INT_MAX;\n    $min_path_sum_index = -1;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $sum = 0;\n            $visited[$i][$j] = true;\n  \
    \          $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n    \
    \        dfs($grid, $visited, $i, $j, $k - 1, $path, $sum, $min_path, $min_sum,\
    \ $min_path_sum, $min_path_sum_index);\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    return $min_path;\n}", "    $n = count($grid);\n    $m\
    \ = count($grid[0]);\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            $visited =\
    \ array_fill(0, $n, array_fill(0, $m, false));\n            dfs($grid, $i, $j,\
    \ $k, $path, $pathSum, $visited);\n            if ($pathSum < $minPathSum) {\n\
    \                $minPathSum = $pathSum;\n                $minPath = $path;\n\
    \            }\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $sum = 0;\n            $visited[$i][$j] = true;\n  \
    \          $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n    \
    \        dfs($grid, $visited, $i, $j, $path, $sum, $k, $minPath, $minSum);\n \
    \           $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $visited = array_fill(0, $n, array_fill(0, $n,\
    \ false));\n    $min = array_fill(0, $k, $n * $n + 1);\n    $min[0] = $grid[0][0];\n\
    \    $queue = array(array(0, 0, 0));\n    while (!empty($queue)) {\n        list($i,\
    \ $j, $l) = array_shift($queue);\n        if ($l == $k - 1) {\n            break;\n\
    \        }\n        if ($i > 0 && !$visited[$i - 1][$j]) {\n            $visited[$i\
    \ - 1][$j] = true;\n            $queue[] = array($i - 1, $j, $l + 1);\n      \
    \      $min[$l + 1] = min($min[$l + 1], $grid[$i - 1][$j]);\n        }\n     \
    \   if ($i < $n - 1 && !$visited[$i + 1][$j]) {\n            $visited[$i + 1][$j]\
    \ = true;\n            $queue[] = array($i + 1, $j, $l + 1);\n            $min[$l\
    \ + 1] = min($min[$l + 1], $grid[$i + 1][$j]);\n        }\n        if ($j > 0\
    \ && !$visited[$i][$j - 1]) {\n            $visited[$i][$j - 1] = true;\n    \
    \        $queue[] = array($i, $j - 1, $l + 1);\n            $min[$l + 1] = min($min[$l\
    \ + 1], $grid[$i][$j - 1]);\n        }\n        if ($j < $n - 1 && !$visited[$i][$j\
    \ + 1]) {\n            $visited[$i][$j + 1] = true;\n            $queue[] = array($i,\
    \ $j + 1, $l + 1);\n            $min[$l + 1] = min($min[$l + 1], $grid[$i][$j\
    \ + 1]);\n        }", "    $n = count($grid);\n    $m = count($grid[0]);\n   \
    \ $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = array();\n            $sum = 0;\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            $visited = dfs($grid, $visited,\
    \ $path, $sum, $i, $j, $k, $minPath, $minSum);\n            $visited[$i][$j] =\
    \ false;\n        }\n    }\n    return $minPath;\n}", "    // your code here\n\
    }\n", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n\
    \    $minPathValue = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n       \
    \ for ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $path[]\
    \ = $grid[$i][$j];\n            $pathValue = $grid[$i][$j];\n            $visited\
    \ = array();\n            $visited[$i][$j] = true;\n            $minPath = minPathHelper($grid,\
    \ $i, $j, $k - 1, $path, $pathValue, $visited, $minPath, $minPathValue);\n   \
    \     }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPaths = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $minPath = array();\n            $minSum = PHP_INT_MAX;\n         \
    \   $minPathSum = PHP_INT_MAX;\n            $visited = array_fill(0, $n, array_fill(0,\
    \ $m, false));\n            $minPaths = array();\n            dfs($grid, $i, $j,\
    \ $k, $visited, $minPath, $minSum, $minPathSum, $minPaths);\n        }\n    }\n\
    \    return $minPaths[0];\n}", "    $n = count($grid);\n    $min = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n  \
    \          $path = array();\n            $path[] = $grid[$i][$j];\n          \
    \  $min = minPathHelper($grid, $i, $j, $k - 1, $path, $min);\n        }\n    }\n\
    \    return $min;\n}", "    // Your code here\n}\n", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $sum = 0;\n            $visited[$i][$j] = true;\n  \
    \          $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n    \
    \        dfs($grid, $i, $j, $k - 1, $visited, $path, $sum, $minPath, $minSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    $minSumPath = array();\n    $minSumPaths = array();\n    $minSumPaths[] =\
    \ array();\n    $minSumPaths[] = array();\n    $minSumPaths[] = array();\n   \
    \ $minSumPaths[] = array();\n    $minSumPaths[] = array();\n    $minSumPaths[]\
    \ = array();\n    $minSumPaths[] = array();\n    $minSumPaths[] = array();\n \
    \   $minSumPaths[] = array();\n    $minSumPaths[] = array();\n    $minSumPaths[]\
    \ = array();\n    $minSumPaths[] = array();\n    $minSumPaths[] = array();\n \
    \   $minSumPaths[] = array();\n    $minSumPaths[] = array();\n    $minSumPaths[]\
    \ = array();\n    $minSumPaths[] = array();\n    $minSumPaths[] = array();\n \
    \   $minSumPaths[] = array();\n    $minSumPaths[] = array();\n    $minSumPaths[]\
    \ = array();\n    $minSumPaths[] = array();\n    $minSumPaths[] = array();\n \
    \   $minSumPaths[] = array();\n    $minSumPaths[] = array();\n    $minSumPaths[]\
    \ = array();\n    $minSumPaths[] = array();\n    $minSumPaths[] = array();\n \
    \   $minSumPaths[] = array();\n    $minSumPaths[] = array();\n    $minSumPaths[]\
    \ = array();\n    $minSumPaths[] = array();\n    $minSumPaths[] = array();\n \
    \   $minSumPaths[] = array();\n    $minSumPaths[] = array();\n    $minSumPaths[]\
    \ = array();\n    $minSumPaths[] = array();\n    $minSumPaths[] = array();\n \
    \   $minSumPaths[] =", "    // Your code here\n}", "    // Write your code here\n\
    \    // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\";\n}", "    // Your code here\n}\n", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPath = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n       \
    \     $sum = 0;\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $visited,\
    \ $path, $sum, $minPath, $minSum, $minPathSum);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    // BEGIN (write your\
    \ solution here)\n    $n = count($grid);\n    $m = count($grid[0]);\n    $min\
    \ = [];\n    $min[] = $grid[0][0];\n    $min[] = $grid[0][1];\n    $min[] = $grid[1][0];\n\
    \    $min[] = $grid[1][1];\n    $min[] = $grid[0][2];\n    $min[] = $grid[1][2];\n\
    \    $min[] = $grid[2][0];\n    $min[] = $grid[2][1];\n    $min[] = $grid[2][2];\n\
    \    sort($min);\n    $min = array_slice($min, 0, $k);\n    return $min;\n   \
    \ // END\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n  \
    \  $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = array();\n            $sum = 0;\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            if (dfs($grid, $visited, $i,\
    \ $j, $k - 1, $path, $sum)) {\n                if ($sum < $minSum) {\n       \
    \             $minSum = $sum;\n                    $minPath = $path;\n       \
    \         }\n            }\n            $visited[$i][$j] = false;\n        }\n\
    \    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = array();\n            $sum = 0;\n\
    \            dfs($grid, $i, $j, $k, $visited, $path, $sum);\n            if ($sum\
    \ < $minSum) {\n                $minSum = $sum;\n                $minPath = $path;\n\
    \            }\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $queue = new SplQueue();\n    $queue->enqueue(array(0, 0, 0, array()));\n\
    \    $visited[0][0] = true;\n    $minPath = array();\n    while (!$queue->isEmpty())\
    \ {\n        list($i, $j, $len, $path) = $queue->dequeue();\n        if ($len\
    \ == $k) {\n            if (empty($minPath) || $path < $minPath) {\n         \
    \       $minPath = $path;\n            }\n            continue;\n        }\n \
    \       if (!empty($minPath) && $path >= $minPath) {\n            continue;\n\
    \        }\n        $path[] = $grid[$i][$j];\n        if ($i > 0 && !$visited[$i\
    \ - 1][$j]) {\n            $queue->enqueue(array($i - 1, $j, $len + 1, $path));\n\
    \            $visited[$i - 1][$j] = true;\n        }\n        if ($i < $n - 1\
    \ && !$visited[$i + 1][$j]) {\n            $queue->enqueue(array($i + 1, $j, $len\
    \ + 1, $path));\n            $visited[$i + 1][$j] = true;\n        }\n       \
    \ if ($j > 0 && !$visited[$i][$j - 1]) {\n            $queue->enqueue(array($i,\
    \ $j - 1, $len + 1, $path));\n            $visited[$i][$j - 1] = true;\n     \
    \   }\n        if ($j < $m - 1 && !$visited[$i][$j + 1]) {\n            $queue->enqueue(array($i,\
    \ $j + 1, $len + 1, $path));\n            $visited[$i][$j + 1] = true;\n     \
    \   }\n    }\n    return $minPath;\n}\n", "    // Write your code here\n    //\
    \ To print results to the standard output you can use print\n    // Example: print\
    \ \"Hello world!\";\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = array();\n    $minPathVal = PHP_INT_MAX;\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n\
    \            $pathVal = 0;\n            $path[] = $grid[$i][$j];\n           \
    \ $pathVal += $grid[$i][$j];\n            $visited = array_fill(0, $n, array_fill(0,\
    \ $m, false));\n            $visited[$i][$j] = true;\n            $minPath = dfs($grid,\
    \ $i, $j, $k - 1, $path, $pathVal, $visited, $minPath, $minPathVal);\n       \
    \ }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minValue = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = true;\n          \
    \  $path = array($grid[$i][$j]);\n            $value = $grid[$i][$j];\n      \
    \      dfs($grid, $i, $j, $visited, $path, $value, $k, $minPath, $minValue);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $sum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $path, $sum, $minPath, $minSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = true;\n          \
    \  $path = array($grid[$i][$j]);\n            $pathSum = $grid[$i][$j];\n    \
    \        $minPathSum = minPathRecursive($grid, $i, $j, $k - 1, $visited, $path,\
    \ $pathSum, $minPathSum, $minPath);\n            $visited[$i][$j] = false;\n \
    \       }\n    }\n    return $minPath;\n}", "  $n = count($grid);\n  $m = count($grid[0]);\n\
    \  $minPath = array();\n  $minPathSum = PHP_INT_MAX;\n  for ($i = 0; $i < $n;\
    \ $i++) {\n    for ($j = 0; $j < $m; $j++) {\n      $path = array();\n      $pathSum\
    \ = 0;\n      $visited = array_fill(0, $n, array_fill(0, $m, false));\n      dfs($grid,\
    \ $i, $j, $k, $path, $pathSum, $visited, $minPath, $minPathSum);\n    }\n  }\n\
    \  return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = array();\n            $sum = 0;\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            $visited[$i][$j] = false;\n \
    \           if ($sum < $minSum) {\n                $minPath = $path;\n       \
    \         $minSum = $sum;\n            }\n            if ($sum == $minSum) {\n\
    \                $minPath = minPathHelper($minPath, $path);\n            }\n \
    \       }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $queue = new SplQueue();\n    $queue->enqueue(array(0, 0, $grid[0][0], array($grid[0][0])));\n\
    \    $visited[0][0] = true;\n    $minPath = array();\n    while (!$queue->isEmpty())\
    \ {\n        list($i, $j, $sum, $path) = $queue->dequeue();\n        if (count($path)\
    \ == $k) {\n            if (empty($minPath) || $path < $minPath) {\n         \
    \       $minPath = $path;\n            }\n            continue;\n        }\n \
    \       if ($i > 0 && !$visited[$i - 1][$j]) {\n            $visited[$i - 1][$j]\
    \ = true;\n            $queue->enqueue(array($i - 1, $j, $sum + $grid[$i - 1][$j],\
    \ array_merge($path, array($grid[$i - 1][$j]))));\n        }\n        if ($i <\
    \ $n - 1 && !$visited[$i + 1][$j]) {\n            $visited[$i + 1][$j] = true;\n\
    \            $queue->enqueue(array($i + 1, $j, $sum + $grid[$i + 1][$j], array_merge($path,\
    \ array($grid[$i + 1][$j]))));\n        }\n        if ($j > 0 && !$visited[$i][$j\
    \ - 1]) {\n            $visited[$i][$j - 1] = true;\n            $queue->enqueue(array($i,\
    \ $j - 1, $sum + $grid[$i][$j - 1], array_merge($path, array($grid[$i][$j - 1]))));\n\
    \        }\n        if ($j < $m - 1 && !$visited[$i][$j + 1]) {\n            $visited[$i][$j\
    \ +", "    $n = count($grid);\n    $m = count($grid[0]);\n    $min = array();\n\
    \    $min_sum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $min_sum = min($min_sum, $grid[$i][$j]);\n\
    \        }\n    }\n    $min_sum *= $k;\n    $min_sum_k = $min_sum;\n    $min_sum_k1\
    \ = $min_sum;\n    $min_sum_k2 = $min_sum;\n    $min_sum_k3 = $min_sum;\n    $min_sum_k4\
    \ = $min_sum;\n    $min_sum_k5 = $min_sum;\n    $min_sum_k6 = $min_sum;\n    $min_sum_k7\
    \ = $min_sum;\n    $min_sum_k8 = $min_sum;\n    $min_sum_k9 = $min_sum;\n    $min_sum_k10\
    \ = $min_sum;\n    $min_sum_k11 = $min_sum;\n    $min_sum_k12 = $min_sum;\n  \
    \  $min_sum_k13 = $min_sum;\n    $min_sum_k14 = $min_sum;\n    $min_sum_k15 =\
    \ $min_sum;\n    $min_sum_k16 = $min_sum;\n    $min_sum_k17 = $min_sum;\n    $min_sum_k18\
    \ = $min_sum;\n    $min_sum_k19 = $min_sum;\n    $min_sum_k20 = $min_sum;\n  \
    \  $min_sum_k21 = $min_sum;\n    $min_sum_k22 = $min_sum;\n    $min_sum_k23 =\
    \ $min_sum;\n    $min_sum_k24 = $min_sum;\n    $min_sum_k25 = $min_sum;\n    $min_sum_k",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n  \
    \  $minPathSum = PHP_INT_MAX;\n    $visited = array_fill(0, $n, array_fill(0,\
    \ $m, false));\n    $path = array();\n    $pathSum = 0;\n    $visited[0][0] =\
    \ true;\n    $path[] = $grid[0][0];\n    $pathSum += $grid[0][0];\n    minPathHelper($grid,\
    \ $n, $m, $k, $visited, $path, $pathSum, $minPath, $minPathSum);\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $min_path = array();\n\
    \    $min_sum = PHP_INT_MAX;\n    $min_path_sum = PHP_INT_MAX;\n    $min_path_sum_count\
    \ = 0;\n    $min_path_sum_count_max = 0;\n    $min_path_sum_count_max_count =\
    \ 0;\n    $min_path_sum_count_max_count_max = 0;\n    $min_path_sum_count_max_count_max_count\
    \ = 0;\n    $min_path_sum_count_max_count_max_count_max = 0;\n    $min_path_sum_count_max_count_max_count_max_count\
    \ = 0;\n    $min_path_sum_count_max_count_max_count_max_count_max = 0;\n    $min_path_sum_count_max_count_max_count_max_count_max_count\
    \ = 0;\n    $min_path_sum_count_max_count_max_count_max_count_max_count_max =\
    \ 0;\n    $min_path_sum_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0;\n    $min_path_sum_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0;\n    $min_path_sum_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0;\n    $min_path_sum_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0;\n    $min_path_sum_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0;\n    $min_path_sum_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0;\n    $min_path_", "    // Your code here\n}", "    // Your code here\n\
    }\n", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n\
    \    $minPathValue = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n       \
    \ for ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $pathValue\
    \ = 0;\n            $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \            dfs($grid, $i, $j, $path, $pathValue, $visited, $k, $minPath, $minPathValue);\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n\
    \            $sum = 0;\n            $visited[$i][$j] = true;\n            $path[]\
    \ = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n            dfs($grid,\
    \ $i, $j, $k - 1, $visited, $path, $sum, $minPath, $minSum);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, array()));\n\
    \    $dp[0][0][0] = $grid[0][0];\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            if ($i > 0) {\n                $dp[$i][$j]\
    \ = minPathMerge($dp[$i][$j], $dp[$i - 1][$j]);\n            }\n            if\
    \ ($j > 0) {\n                $dp[$i][$j] = minPathMerge($dp[$i][$j], $dp[$i][$j\
    \ - 1]);\n            }\n            $dp[$i][$j][] = $grid[$i][$j];\n        }\n\
    \    }\n    return $dp[$n - 1][$m - 1][$k - 1];\n}", "    // Your code here\n\
    }\n", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array_fill(0, $k, PHP_INT_MAX);\n\
    \    $minPath[0] = $grid[0][0];\n    $minPathFound = false;\n    $minPathFoundAt\
    \ = 0;\n    $queue = new SplQueue();\n    $queue->enqueue(array(0, 0, 0));\n \
    \   while (!$queue->isEmpty()) {\n        list($i, $j, $len) = $queue->dequeue();\n\
    \        if ($len == $k) {\n            $minPathFound = true;\n            $minPathFoundAt\
    \ = $len;\n            break;\n        }\n        $visited[$i][$j] = true;\n \
    \       $neighbors = array(\n            array($i - 1, $j),\n            array($i\
    \ + 1, $j),\n            array($i, $j - 1),\n            array($i, $j + 1)\n \
    \       );\n        foreach ($neighbors as $neighbor) {\n            list($ni,\
    \ $nj) = $neighbor;\n            if ($ni >= 0 && $ni < $n && $nj >= 0 && $nj <\
    \ $m && !$visited[$ni][$nj]) {\n                $queue->enqueue(array($ni, $nj,\
    \ $len + 1));\n                if ($grid[$ni][$nj] < $minPath[$len + 1]) {\n \
    \                   $minPath[$len + 1] = $grid[$ni][$nj];\n                }\n\
    \            }\n        }\n    }\n    if ($minPathFound) {\n        return array_slice($minPath,\
    \ 0, $minPathFoundAt + 1);\n    }\n    return array();\n}\n", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathLength = PHP_INT_MAX;\n    $minPathRow = PHP_INT_MAX;\n\
    \    $minPathCol = PHP_INT_MAX;\n    $minPathGrid = $grid;\n    $minPathVisited\
    \ = $visited;\n    $minPathGrid[0][0] = $grid[0][0];\n    $minPathVisited[0][0]\
    \ = true;\n    $minPathLength = 1;\n    $minPathSum = $grid[0][0];\n    $minPathRow\
    \ = 0;\n    $minPathCol = 0;\n    $minPath[] = $grid[0][0];\n    $q = new SplQueue();\n\
    \    $q->enqueue([0, 0, 1, $grid[0][0], [$grid[0][0]]]);\n    while (!$q->isEmpty())\
    \ {\n        list($row, $col, $length, $sum, $path) = $q->dequeue();\n       \
    \ if ($length > $k) {\n            continue;\n        }\n        if ($length ==\
    \ $k) {\n            if ($sum < $minSum) {\n                $minSum = $sum;\n\
    \                $minPath = $path;\n            } else if ($sum == $minSum) {\n\
    \                if ($length < $minPathLength) {\n                    $minPathLength\
    \ = $length;\n                    $minPath = $path;\n                } else if\
    \ ($length == $minPathLength) {\n                    if ($row < $minPathRow) {\n\
    \                        $minPathRow = $row;\n                        $minPath\
    \ = $path;\n                    } else if ($row == $minPathRow) {\n          \
    \              if ($col < $minPathCol) {\n                            $minPathCol\
    \ = $col;\n                            $minPath = $path;\n                   \
    \     } else if ($col == $minPathCol) {\n                ", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = array();\n    $minPath[0] = $grid[0][0];\n    $minPath[1] = $grid[0][1];\n\
    \    $minPath[2] = $grid[1][0];\n    $minPath[3] = $grid[1][1];\n    $minPath[4]\
    \ = $grid[0][2];\n    $minPath[5] = $grid[1][2];\n    $minPath[6] = $grid[2][0];\n\
    \    $minPath[7] = $grid[2][1];\n    $minPath[8] = $grid[2][2];\n    $minPath\
    \ = sort($minPath);\n    return $minPath;\n}\n", "    // Your code here\n}\n",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $", "    // Your code here\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minPathSum = $n\
    \ * $m + 1;\n    $minPathSum = minPathHelper($grid, $n, $m, $k, 0, 0, 0, $visited,\
    \ $minPath, $minPathSum);\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $min = array_fill(0, $k, INF);\n    $min[0] = $grid[0][0];\n \
    \   $visited[0][0] = true;\n    $q = new SplQueue();\n    $q->enqueue([0, 0, 0]);\n\
    \    while (!$q->isEmpty()) {\n        list($i, $j, $d) = $q->dequeue();\n   \
    \     if ($d == $k - 1) {\n            break;\n        }\n        if ($i > 0 &&\
    \ !$visited[$i - 1][$j]) {\n            $visited[$i - 1][$j] = true;\n       \
    \     $q->enqueue([$i - 1, $j, $d + 1]);\n            if ($grid[$i - 1][$j] <\
    \ $min[$d + 1]) {\n                $min[$d + 1] = $grid[$i - 1][$j];\n       \
    \     }\n        }\n        if ($i < $n - 1 && !$visited[$i + 1][$j]) {\n    \
    \        $visited[$i + 1][$j] = true;\n            $q->enqueue([$i + 1, $j, $d\
    \ + 1]);\n            if ($grid[$i + 1][$j] < $min[$d + 1]) {\n              \
    \  $min[$d + 1] = $grid[$i + 1][$j];\n            }\n        }\n        if ($j\
    \ > 0 && !$visited[$i][$j - 1]) {\n            $visited[$i][$j - 1] = true;\n\
    \            $q->enqueue([$i, $j - 1, $d + 1]);\n            if ($grid[$i][$j\
    \ - 1] < $min[$d + 1]) {\n                $min[$d + 1] = $grid[$i][$j - 1];\n\
    \            }\n        }\n        if ($j < $m - 1 &&", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            $visited =\
    \ array_fill(0, $n, array_fill(0, $m, false));\n            $visited[$i][$j] =\
    \ true;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            $queue = array(array($i, $j));\n            while (!empty($queue))\
    \ {\n                $curr = array_shift($queue);\n                $x = $curr[0];\n\
    \                $y = $curr[1];\n                if (count($path) == $k) {\n \
    \                   if ($pathSum < $minPathSum) {\n                        $minPathSum\
    \ = $pathSum;\n                        $minPath = $path;\n                   \
    \ }\n                    break;\n                }\n                if ($x > 0\
    \ && !$visited[$x - 1][$y]) {\n                    $visited[$x - 1][$y] = true;\n\
    \                    $path[] = $grid[$x - 1][$y];\n                    $pathSum\
    \ += $grid[$x - 1][$y];\n                    $queue[] = array($x - 1, $y);\n \
    \               }\n                if ($x < $n - 1 && !$visited[$x + 1][$y]) {\n\
    \                    $visited[$x + 1][$y] = true;\n                    $path[]\
    \ = $grid[$x + 1][$y];\n                    $pathSum += $grid[$x + 1][$y];\n \
    \                   $queue[] = array($x + 1, $y);\n                }\n       \
    \         if ($y > 0 && !$visited[$x][$y - 1]) {\n                    $visited[$x][$y\
    \ - 1] = true;\n                    $path[] = $grid[$x][", "    // Your code here\n\
    }\n", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $path[] = $grid[$i][$j];\n          \
    \  $minPath = minPathHelper($grid, $i, $j, $k - 1, $path, $minPath);\n       \
    \ }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = array();\n            $sum = 0;\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            dfs($grid, $i, $j, $visited,\
    \ $path, $sum, $minPath, $minSum, $k);\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = dfs($grid,\
    \ $n, $m, 0, 0, $k, $visited, $minPath, $minPathSum);\n    return $minPath;\n\
    }\n", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $", "    // Your code here\n\
    }\n", "    // Your code here\n}\n", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = array();\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ 0; $j < $m; $j++) {\n            $path = array();\n            $path[] = $grid[$i][$j];\n\
    \            $visited = array();\n            $visited[$i][$j] = true;\n     \
    \       findPath($grid, $i, $j, $k - 1, $path, $visited);\n            if (count($path)\
    \ == $k) {\n                if (count($minPath) == 0 || $path < $minPath) {\n\
    \                    $minPath = $path;\n                }\n            }\n   \
    \     }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPaths = array();\n\
    \    $minPathsSum = array();\n    $minPaths[] = array();\n    $minPathsSum[] =\
    \ 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n\
    \            $visited[$i][$j] = true;\n            $path = array();\n        \
    \    $path[] = $grid[$i][$j];\n            $pathSum = $grid[$i][$j];\n       \
    \     $paths = array();\n            $paths[] = $path;\n            $pathsSum\
    \ = array();\n            $pathsSum[] = $pathSum;\n            $paths = findPaths($grid,\
    \ $visited, $paths, $pathsSum, $i, $j, $k);\n            $visited[$i][$j] = false;\n\
    \            foreach ($paths as $path) {\n                $pathSum = array_sum($path);\n\
    \                if ($pathSum < $minPathSum) {\n                    $minPathSum\
    \ = $pathSum;\n                    $minPath = $path;\n                }\n    \
    \        }\n        }\n    }\n    return $minPath;\n}", "    // Your code here\n\
    }\n", "    $n = count($grid);\n    $m = count($grid[0]);\n    $dp = array_fill(0,\
    \ $n, array_fill(0, $m, array()));\n    $dp[0][0][] = $grid[0][0];\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if\
    \ ($i > 0) {\n                $dp[$i][$j] = minPathHelper($dp[$i][$j], $dp[$i\
    \ - 1][$j], $grid[$i][$j]);\n            }\n            if ($j > 0) {\n      \
    \          $dp[$i][$j] = minPathHelper($dp[$i][$j], $dp[$i][$j - 1], $grid[$i][$j]);\n\
    \            }\n        }\n    }\n    return $dp[$n - 1][$m - 1][$k - 1];\n}",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n  \
    \  $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            $visited = array();\n            $visited[$i][$j] = true;\n     \
    \       $minPath = minPathHelper($grid, $i, $j, $k, $path, $pathSum, $visited,\
    \ $minPath, $minPathSum);\n        }\n    }\n    return $minPath;\n}", "    //\
    \ Your code here\n}\n", "    $n = count($grid);\n    $m = count($grid[0]);\n \
    \   $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $min_path = array();\n\
    \    $min_sum = PHP_INT_MAX;\n    $min_path_sum = PHP_INT_MAX;\n    $min_path_sum_path\
    \ = array();\n    $min_path_sum_path_sum = PHP_INT_MAX;\n    $min_path_sum_path_sum_path\
    \ = array();\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m;\
    \ $j++) {\n            $path = array();\n            $sum = 0;\n            $path_sum\
    \ = array();\n            $path_sum_path = array();\n            $path_sum_path_sum\
    \ = array();\n            $path_sum_path_sum_path = array();\n            dfs($grid,\
    \ $visited, $i, $j, $k, $path, $sum, $path_sum, $path_sum_path, $path_sum_path_sum,\
    \ $path_sum_path_sum_path);\n            if (count($path_sum_path_sum_path) >\
    \ 0) {\n                if ($path_sum_path_sum_path_sum[0] < $min_path_sum_path_sum_path_sum[0])\
    \ {\n                    $min_path_sum_path_sum_path_sum = $path_sum_path_sum_path_sum;\n\
    \                    $min_path_sum_path_sum_path = $path_sum_path_sum_path;\n\
    \                }\n            }\n            if (count($path_sum_path_sum) >\
    \ 0) {\n                if ($path_sum_path_sum[0] < $min_path_sum_path_sum[0])\
    \ {\n                    $min_path_sum_path_sum = $path_sum_path_sum;\n      \
    \              $min_path_sum_path = $path_sum_path;\n                }\n     \
    \       }\n            if (count($path_sum) > 0", "    // Your code here\n}\n",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n  \
    \  $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = array();\n            $sum = 0;\n\
    \            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n  \
    \          $visited = array();\n            $visited[$i][$j] = true;\n       \
    \     dfs($grid, $i, $j, $k - 1, $sum, $path, $visited);\n            if ($sum\
    \ < $minSum) {\n                $minSum = $sum;\n                $minPath = $path;\n\
    \            }\n        }\n    }\n    return $minPath;\n}", "    // Your code\
    \ here\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited =\
    \ array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = dfs($grid, $visited, 0, 0, $k, $minPath, $minPathSum);\n\
    \    return $minPath;\n}\n", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $min = array_fill(0,\
    \ $k, INF);\n    $min[0] = $grid[0][0];\n    $q = new SplQueue();\n    $q->enqueue([0,\
    \ 0, 0]);\n    $visited[0][0] = true;\n    while (!$q->isEmpty()) {\n        list($i,\
    \ $j, $d) = $q->dequeue();\n        if ($d > 0) {\n            $min[$d] = min($min[$d],\
    \ $grid[$i][$j]);\n        }\n        if ($d == $k - 1) {\n            continue;\n\
    \        }\n        if ($i > 0 && !$visited[$i - 1][$j]) {\n            $q->enqueue([$i\
    \ - 1, $j, $d + 1]);\n            $visited[$i - 1][$j] = true;\n        }\n  \
    \      if ($i < $n - 1 && !$visited[$i + 1][$j]) {\n            $q->enqueue([$i\
    \ + 1, $j, $d + 1]);\n            $visited[$i + 1][$j] = true;\n        }\n  \
    \      if ($j > 0 && !$visited[$i][$j - 1]) {\n            $q->enqueue([$i, $j\
    \ - 1, $d + 1]);\n            $visited[$i][$j - 1] = true;\n        }\n      \
    \  if ($j < $m - 1 && !$visited[$i][$j + 1]) {\n            $q->enqueue([$i, $j\
    \ + 1, $d + 1]);\n            $visited[$i][$j + 1] = true;\n        }\n    }\n\
    \    return $min;\n}\n", "    $n = count($grid);\n    $minPath = array();\n  \
    \  $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $n; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            $visited = array_fill(0, $n, array_fill(0, $n, false));\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            $minPath = dfs($grid, $i,\
    \ $j, $k - 1, $visited, $path, $pathSum, $minPath, $minPathSum);\n        }\n\
    \    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $min = array();\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0;\
    \ $j < $m; $j++) {\n            $path = array();\n            $path[] = $grid[$i][$j];\n\
    \            $min = minPathHelper($grid, $i, $j, $k - 1, $path, $min);\n     \
    \   }\n    }\n    return $min;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    $minSumPath = array();\n    $minSumPaths = array();\n\
    \    $minSumPaths[] = array();\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $minPath[] = array($i, $j);\n       \
    \     $visited[$i][$j] = true;\n            dfs($grid, $k, $i, $j, $visited, $minPath,\
    \ $minSum, $minSumPath, $minSumPaths);\n            $visited[$i][$j] = false;\n\
    \            array_pop($minPath);\n        }\n    }\n    $result = array();\n\
    \    foreach ($minSumPaths as $path) {\n        foreach ($path as $cell) {\n \
    \           $result[] = $grid[$cell[0]][$cell[1]];\n        }\n    }\n    return\
    \ $result;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath\
    \ = array();\n    $minPathValue = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n   \
    \         $pathValue = 0;\n            $visited = array_fill(0, $n, array_fill(0,\
    \ $m, false));\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathValue += $grid[$i][$j];\n            dfs($grid, $i, $j, $k -\
    \ 1, $path, $pathValue, $visited, $minPath, $minPathValue);\n        }\n    }\n\
    \    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    $minSumPath = array();\n    $minSumPaths = array();\n\
    \    $minSumPaths[] = array();\n    $minSumPaths[] = array();\n    $minSumPaths[]\
    \ = array();\n    $minSumPaths[] = array();\n    $minSumPaths[] = array();\n \
    \   $minSumPaths[] = array();\n    $minSumPaths[] = array();\n    $minSumPaths[]\
    \ = array();\n    $minSumPaths[] = array();\n    $minSumPaths[] = array();\n \
    \   $minSumPaths[] = array();\n    $minSumPaths[] = array();\n    $minSumPaths[]\
    \ = array();\n    $minSumPaths[] = array();\n    $minSumPaths[] = array();\n \
    \   $minSumPaths[] = array();\n    $minSumPaths[] = array();\n    $minSumPaths[]\
    \ = array();\n    $minSumPaths[] = array();\n    $minSumPaths[] = array();\n \
    \   $minSumPaths[] = array();\n    $minSumPaths[] = array();\n    $minSumPaths[]\
    \ = array();\n    $minSumPaths[] = array();\n    $minSumPaths[] = array();\n \
    \   $minSumPaths[] = array();\n    $minSumPaths[] = array();\n    $minSumPaths[]\
    \ = array();\n    $minSumPaths[] = array();\n    $minSumPaths[] = array();\n \
    \   $minSumPaths[] = array();\n    $minSumPaths[] = array();\n    $minSumPaths[]\
    \ = array();\n    $minSumPaths[] = array();\n    $minSumPaths[] = array();\n \
    \   $minSumPaths[] = array();\n    $minSumPaths[] = array();\n    $minSumPaths[]\
    \ = array();\n    $minSumPaths[] =", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = array();\n    $minPathVal = PHP_INT_MAX;\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n\
    \            $pathVal = PHP_INT_MAX;\n            $visited = array_fill(0, $n,\
    \ array_fill(0, $m, false));\n            $visited[$i][$j] = true;\n         \
    \   $path[] = $grid[$i][$j];\n            $pathVal = $grid[$i][$j];\n        \
    \    dfs($grid, $i, $j, $k - 1, $path, $pathVal, $visited, $minPath, $minPathVal);\n\
    \        }\n    }\n    return $minPath;\n}", "    // Your code here\n}", "   \
    \ $n = count($grid);\n    $visited = array_fill(0, $n, array_fill(0, $n, false));\n\
    \    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n   ", "    $n = count($grid);\n\
    \    $minPath = array();\n    $minPathValue = PHP_INT_MAX;\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $path = array();\n\
    \            $pathValue = PHP_INT_MAX;\n            $visited = array_fill(0, $n,\
    \ array_fill(0, $n, false));\n            findPath($grid, $i, $j, $k, $path, $pathValue,\
    \ $visited);\n            if ($pathValue < $minPathValue) {\n                $minPath\
    \ = $path;\n                $minPathValue = $pathValue;\n            }\n     \
    \   }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $minPath\
    \ = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n  \
    \          $pathSum = 0;\n            $path = array();\n            $path[] =\
    \ $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n            $visited\
    \ = array_fill(0, $n, array_fill(0, $n, false));\n            $visited[$i][$j]\
    \ = true;\n            $minPath = dfs($grid, $i, $j, $k - 1, $pathSum, $path,\
    \ $visited, $minPathSum, $minPath);\n        }\n    }\n    return $minPath;\n}",
  "    $n = count($grid);\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n", "    $n =\
    \ count($grid);\n    $m = count($grid[0]);\n    $min = array();\n    $min_sum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $path = array();\n            $sum = 0;\n         \
    \   $visited = array_fill(0, $n, array_fill(0, $m, false));\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n\
    \            $min_path = dfs($grid, $i, $j, $n, $m, $visited, $path, $sum, $k);\n\
    \            if ($min_path['sum'] < $min_sum) {\n                $min = $min_path['path'];\n\
    \                $min_sum = $min_path['sum'];\n            }\n        }\n    }\n\
    \    return $min;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n  \
    \  $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            $visited = array();\n            for ($x = 0; $x < $n; $x++) {\n\
    \                $visited[$x] = array();\n                for ($y = 0; $y < $m;\
    \ $y++) {\n                    $visited[$x][$y] = false;\n                }\n\
    \            }\n            $visited[$i][$j] = true;\n            dfs($grid, $i,\
    \ $j, $k - 1, $path, $pathSum, $visited, $minPath, $minPathSum);\n        }\n\
    \    }\n    return $minPath;\n}", "    // Your code here\n}\n", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            $visited =\
    \ array_fill(0, $n, array_fill(0, $m, false));\n            $visited[$i][$j] =\
    \ true;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            if (dfs($grid, $i, $j, $k - 1, $path, $pathSum, $visited, $minPath,\
    \ $minPathSum)) {\n                return $minPath;\n            }\n        }\n\
    \    }\n    return $minPath;\n}", "    // Your code here\n}", "    $n = count($grid);\n\
    \    $path = array();\n    $min = array();\n    $min_path = array();\n    $min_path_len\
    \ = $n * $n + 1;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $n; $j++) {\n            $path[] = $grid[$i][$j];\n            if (count($path)\
    \ == $k) {\n                $path_str = implode('', $path);\n                if\
    \ (!isset($min[$path_str])) {\n                    $min[$path_str] = $path;\n\
    \                }\n                if (count($min[$path_str]) < $min_path_len)\
    \ {\n                    $min_path = $min[$path_str];\n                    $min_path_len\
    \ = count($min_path);\n                }\n                array_shift($path);\n\
    \            }\n        }\n    }\n    return $min_path;\n}\n", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $sum = 0;\n            $visited[$i][$j] = true;\n  \
    \          $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n    \
    \        if (dfs($grid, $i, $j, $visited, $path, $sum, $k, $minPath, $minSum))\
    \ {\n                return $minPath;\n            }\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = array();\n    $minPathValue = null;\n\
    \    $minPathSum = null;\n    $minPathSumValue = null;\n    $minPathSumValueIndex\
    \ = null;\n    $minPathSumValueIndexValue = null;\n    $minPathSumValueIndexValueIndex\
    \ = null;\n    $minPathSumValueIndexValueIndexValue = null;\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path =\
    \ array();\n            $pathSum = 0;\n            $pathSumValue = array();\n\
    \            $pathSumValueIndex = array();\n            $pathSumValueIndexValue\
    \ = array();\n            $pathSumValueIndexValueIndex = array();\n          \
    \  $pathSumValueIndexValueIndexValue = array();\n            $pathSumValueIndexValueIndexValue[$grid[$i][$j]]\
    \ = array();\n            $pathSumValueIndexValueIndexValue[$grid[$i][$j]][$i]\
    \ = array();\n            $pathSumValueIndexValueIndexValue[$grid[$i][$j]][$i][$j]\
    \ = array();\n            $pathSumValueIndexValueIndexValue[$grid[$i][$j]][$i][$j][$grid[$i][$j]]\
    \ = 1;\n            $pathSumValueIndexValueIndex[$grid[$i][$j]] = array();\n \
    \           $pathSumValueIndexValueIndex[$grid[$i][$j]][$i] = array();\n     \
    \       $pathSumValueIndexValueIndex[$grid[$i][$j]][$i][$j] = 1;\n           \
    \ $pathSumValueIndexValue[$grid[$i][$j]] = array();\n            $pathSumValueIndexValue[$grid[$i][$j]][$i]\
    \ = 1;\n            $pathSumValueIndex[$grid[$i][$j]] = 1;\n            $pathSumValue[$grid[$i][$j]]\
    \ = 1;\n            $pathSum += $grid[$i][$j];\n            $path", "    $path\
    \ = array();\n    $min_path = array();\n    $min_path_value = PHP_INT_MAX;\n \
    \   $n = count($grid);\n    $visited = array_fill(0, $n, array_fill(0, $n, false));\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n  \
    \          $path = array();\n            $visited[$i][$j] = true;\n          \
    \  $path[] = $grid[$i][$j];\n            dfs($grid, $i, $j, $k, $visited, $path,\
    \ $min_path, $min_path_value);\n            $visited[$i][$j] = false;\n      \
    \  }\n    }\n    return $min_path;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPath = array();\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ 0; $j < $m; $j++) {\n            $path = array();\n            $pathSum = 0;\n\
    \            $visited = array_fill(0, $n, array_fill(0, $m, false));\n       \
    \     $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n       \
    \     $pathSum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $path,\
    \ $pathSum, $visited, $minPath, $minPathSum);\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            $found = false;\n       \
    \     $queue = array(array($i, $j));\n            while (!empty($queue)) {\n \
    \               $cur = array_shift($queue);\n                if (count($path)\
    \ == $k) {\n                    $found = true;\n                    break;\n \
    \               }\n                $x = $cur[0];\n                $y = $cur[1];\n\
    \                if ($x > 0 && !$visited[$x - 1][$y]) {\n                    $visited[$x\
    \ - 1][$y] = true;\n                    $path[] = $grid[$x - 1][$y];\n       \
    \             $pathSum += $grid[$x - 1][$y];\n                    $queue[] = array($x\
    \ - 1, $y);\n                }\n                if ($x < $n - 1 && !$visited[$x\
    \ + 1][$y]) {\n                    $visited[$x + 1][$y] = true;\n            \
    \        $path[] = $grid[$x + 1][$y];\n                    $pathSum += $grid[$x\
    \ + 1][$y];\n                    $queue[] = array($x + 1, $y);\n             \
    \   }\n                if ($y > 0 && !$visited[$x][$y - 1]) {\n              \
    \      $visited[$x][$y - 1] = true;\n                    $path[] = $grid[$x][$y\
    \ - 1];\n                    $pathSum += $grid[$x][$y - 1];\n                \
    \    $", "    $n = count($grid);\n    $m = count($grid[0]);\n    $min = array();\n\
    \    $min_val = array();\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ 0; $j < $m; $j++) {\n            $min[$i][$j] = array();\n            $min_val[$i][$j]\
    \ = array();\n            for ($l = 0; $l < $k; $l++) {\n                $min[$i][$j][$l]\
    \ = array();\n                $min_val[$i][$j][$l] = array();\n            }\n\
    \        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            $min[$i][$j][0] = array($grid[$i][$j]);\n       \
    \     $min_val[$i][$j][0] = $grid[$i][$j];\n        }\n    }\n    for ($l = 1;\
    \ $l < $k; $l++) {\n        for ($i = 0; $i < $n; $i++) {\n            for ($j\
    \ = 0; $j < $m; $j++) {\n                $min[$i][$j][$l] = array();\n       \
    \         $min_val[$i][$j][$l] = PHP_INT_MAX;\n                if ($i > 0) {\n\
    \                    $tmp = $min[$i - 1][$j][$l - 1];\n                    $tmp[]\
    \ = $grid[$i][$j];\n                    $tmp_val = $min_val[$i - 1][$j][$l - 1]\
    \ + $grid[$i][$j];\n                    if ($tmp_val < $min_val[$i][$j][$l]) {\n\
    \                        $min[$i][$j][$l] = $tmp;\n                        $min_val[$i][$j][$l]\
    \ = $tmp_val;\n                    }\n                }\n                if ($j\
    \ > 0) {\n                    $tmp", "    $n = count($grid);\n    $path = array();\n\
    \    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $n, false));\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $n; $j++) {\n            $visited[$i][$j] = true;\n          \
    \  $path[] = $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $visited,\
    \ $path, $minPath, $minPathSum);\n            array_pop($path);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = array();\n    $minPathValue = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathValue = 0;\n            $path[]\
    \ = $grid[$i][$j];\n            $pathValue += $grid[$i][$j];\n            $visited\
    \ = array();\n            $visited[$i][$j] = true;\n            $queue = array();\n\
    \            $queue[] = array($i, $j);\n            while (!empty($queue)) {\n\
    \                $current = array_shift($queue);\n                $x = $current[0];\n\
    \                $y = $current[1];\n                if (count($path) == $k) {\n\
    \                    if ($pathValue < $minPathValue) {\n                     \
    \   $minPath = $path;\n                        $minPathValue = $pathValue;\n \
    \                   } else if ($pathValue == $minPathValue) {\n              \
    \          $pathString = implode('', $path);\n                        $minPathString\
    \ = implode('', $minPath);\n                        if ($pathString < $minPathString)\
    \ {\n                            $minPath = $path;\n                         \
    \   $minPathValue = $pathValue;\n                        }\n                 \
    \   }\n                    break;\n                }\n                if ($x >\
    \ 0 && !$visited[$x - 1][$y]) {\n                    $visited[$x - 1][$y] = true;\n\
    \                    $queue[] = array($x - 1, $y);\n                    $path[]\
    \ = $grid[$x - 1][$y];\n                    $pathValue += $grid[$x - 1][$y];\n\
    \                }\n                if ($x < $n - 1 && !$visited[$x + 1][$y])\
    \ {\n                    $visited[$x + 1][$y] = true;\n                    $queue[]\
    \ = array($x + 1, $y);\n                    $path[] = $grid[$x + 1][$y];\n   \
    \                 $pathValue", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array_fill(0,\
    \ $k, INF);\n    $minPath[0] = $grid[0][0];\n    $visited[0][0] = true;\n    $queue\
    \ = new SplQueue();\n    $queue->enqueue(array(0, 0, 0));\n    while (!$queue->isEmpty())\
    \ {\n        list($i, $j, $len) = $queue->dequeue();\n        if ($len == $k -\
    \ 1) {\n            break;\n        }\n        $neighbors = array(\n         \
    \   array($i - 1, $j),\n            array($i + 1, $j),\n            array($i,\
    \ $j - 1),\n            array($i, $j + 1)\n        );\n        foreach ($neighbors\
    \ as $neighbor) {\n            list($x, $y) = $neighbor;\n            if ($x >=\
    \ 0 && $x < $n && $y >= 0 && $y < $m && !$visited[$x][$y]) {\n               \
    \ $visited[$x][$y] = true;\n                $queue->enqueue(array($x, $y, $len\
    \ + 1));\n                if ($grid[$x][$y] < $minPath[$len + 1]) {\n        \
    \            $minPath[$len + 1] = $grid[$x][$y];\n                }\n        \
    \    }\n        }\n    }\n    return $minPath;\n}\n", "    $n = count($grid);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $n, false));\n    $path = array();\n\
    \    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            dfs($grid, $i, $j,\
    \ $visited, $path, $minPath, $minPathSum, $k);\n            $visited[$i][$j] =\
    \ false;\n            array_pop($path);\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $n; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            $pathSum = 0;\n            $path = array();\n            $pathSum\
    \ = 0;\n            $pathSum = 0;\n            $path = array();\n            $pathSum\
    \ = 0;\n            $pathSum = 0;\n            $path = array();\n            $pathSum\
    \ = 0;\n            $pathSum = 0;\n            $path = array();\n            $pathSum\
    \ = 0;\n            $pathSum = 0;\n            $path = array();\n            $pathSum\
    \ = 0;\n            $pathSum = 0;\n            $path = array();\n            $pathSum\
    \ = 0;\n            $pathSum = 0;\n            $path = array();\n            $pathSum\
    \ = 0;\n            $pathSum = 0;\n            $path = array();\n            $pathSum\
    \ = 0;\n            $pathSum = 0;\n            $path = array();\n            $pathSum\
    \ = 0;\n            $pathSum = 0;\n            $path = array();\n            $pathSum\
    \ = 0;\n            $pathSum = 0;\n            $path = array();\n            $pathSum\
    \ = 0;\n            $pathSum = 0;\n            $path = array();\n            $pathSum\
    \ = 0;\n            $pathSum = 0;\n            $path = array();\n            $pathSum\
    \ = 0;\n            $pathSum = 0;\n            $path = array();\n            $pathSum\
    \ = 0;\n            $pathSum = 0;\n            $path = array();\n            $pathSum\
    \ = 0;\n            $pathSum = 0;\n            $path = array();\n            $pathSum\
    \ = 0;\n            $pathSum = 0;\n            $path = array();\n            $pathSum\
    \ = 0;\n            $pathSum = 0;\n            $path = array();\n            $pathSum\
    \ = 0;\n            $path", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPath = array();\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ 0; $j < $m; $j++) {\n            $path = array();\n            $pathSum = 0;\n\
    \            $visited = array_fill(0, $n, array_fill(0, $m, false));\n       \
    \     $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n       \
    \     $pathSum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $path,\
    \ $pathSum, $visited, $minPath, $minPathSum);\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $visited = array_fill(0, $n, array_fill(0, $n,\
    \ false));\n    $minPath = array();\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   for ($j = 0; $j < $n; $j++) {\n            $visited[$i][$j] = true;\n    \
    \        $path = array($grid[$i][$j]);\n            $minPath = minPathHelper($grid,\
    \ $visited, $i, $j, $k, $path, $minPath);\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = array();\n  \
    \  $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $n; $j++) {\n            $visited[$i][$j] = true;\n          \
    \  $path = array($grid[$i][$j]);\n            $pathSum = $grid[$i][$j];\n    \
    \        dfs($grid, $visited, $i, $j, $path, $pathSum, $k, $minPath, $minPathSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            if (dfs($grid, $i, $j, $k\
    \ - 1, $path, $pathSum, $visited, $minPath, $minPathSum)) {\n                return\
    \ $minPath;\n            }\n        }\n    }\n    return $minPath;\n}", "    $n\
    \ = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n    $minPathValue\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $path = array();\n            $pathValue = 0;\n   \
    \         $visited = array_fill(0, $n, array_fill(0, $m, false));\n          \
    \  dfs($grid, $i, $j, $k, $path, $pathValue, $visited);\n            if ($pathValue\
    \ < $minPathValue) {\n                $minPath = $path;\n                $minPathValue\
    \ = $pathValue;\n            }\n        }\n    }\n    return $minPath;\n}", " \
    \   $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathLength = PHP_INT_MAX;\n    $minPathIndex\
    \ = 0;\n    $minPath = array();\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $sum =\
    \ 0;\n            $pathSum = 0;\n            $pathLength = 0;\n            $pathIndex\
    \ = 0;\n            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            $pathLength++;\n        \
    \    $pathIndex = $i * $m + $j;\n            $visited[$i][$j] = true;\n      \
    \      $result = dfs($grid, $i, $j, $k, $visited, $path, $sum, $pathSum, $pathLength,\
    \ $pathIndex);\n            if ($result['pathLength'] < $minPathLength) {\n  \
    \              $minPath = $result['path'];\n                $minSum = $result['sum'];\n\
    \                $minPathSum = $result['pathSum'];\n                $minPathLength\
    \ = $result['pathLength'];\n                $minPathIndex = $result['pathIndex'];\n\
    \            } else if ($result['pathLength'] == $minPathLength) {\n         \
    \       if ($result['pathSum'] < $minPathSum) {\n                    $minPath\
    \ = $result['path'];\n                    $minSum = $result['sum'];\n        \
    \            $minPathSum = $result['pathSum'];\n                    $minPathLength\
    \ = $result['pathLength'];\n                    $minPathIndex = $result['pathIndex'];\n\
    \                } else if ($result['pathSum'] == $minPathSum) {\n           \
    \         if ($result['sum']", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $min_path = array();\n    $min_path_value = PHP_INT_MAX;\n    $visited =\
    \ array_fill(0, $n, array_fill(0, $m, false));\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n   \
    \         $path_value = 0;\n            $visited[$i][$j] = true;\n           \
    \ $path[] = $grid[$i][$j];\n            $path_value += $grid[$i][$j];\n      \
    \      dfs($grid, $i, $j, $k - 1, $path, $path_value, $visited, $min_path, $min_path_value);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $min_path;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $sum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n\
    \            dfs($grid, $visited, $i, $j, $k - 1, $path, $sum, $minPath, $minSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $min = array();\n\
    \    $min_sum = $n * $m + 1;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = array();\n            $sum = 0;\n\
    \            $visited = array();\n            $visited[$i][$j] = true;\n     \
    \       $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n       \
    \     $path = dfs($grid, $i, $j, $k - 1, $path, $sum, $visited);\n           \
    \ if ($sum < $min_sum) {\n                $min_sum = $sum;\n                $min\
    \ = $path;\n            }\n        }\n    }\n    return $min;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = [];\n            $pathSum = 0;\n\
    \            $visited = [];\n            for ($x = 0; $x < $n; $x++) {\n     \
    \           $visited[$x] = [];\n                for ($y = 0; $y < $m; $y++) {\n\
    \                    $visited[$x][$y] = false;\n                }\n          \
    \  }\n            dfs($grid, $i, $j, $k, $path, $pathSum, $visited, $minPath,\
    \ $minPathSum);\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $sum = 0;\n            $visited[$i][$j] = true;\n  \
    \          $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n    \
    \        dfs($grid, $n, $m, $i, $j, $k - 1, $visited, $path, $sum, $minPath, $minSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array_fill(0, $k, PHP_INT_MAX);\n\
    \    $minPath[0] = $grid[0][0];\n    $minPaths = array();\n    $minPaths[] = array($minPath);\n\
    \    $visited[0][0] = true;\n    $queue = array();\n    $queue[] = array(0, 0);\n\
    \    while (!empty($queue)) {\n        list($i, $j) = array_shift($queue);\n \
    \       if ($i > 0 && !$visited[$i - 1][$j]) {\n            $visited[$i - 1][$j]\
    \ = true;\n            $queue[] = array($i - 1, $j);\n            $newPath = $minPath;\n\
    \            $newPath[0] = $grid[$i - 1][$j];\n            $minPaths[] = array($newPath);\n\
    \        }\n        if ($i < $n - 1 && !$visited[$i + 1][$j]) {\n            $visited[$i\
    \ + 1][$j] = true;\n            $queue[] = array($i + 1, $j);\n            $newPath\
    \ = $minPath;\n            $newPath[0] = $grid[$i + 1][$j];\n            $minPaths[]\
    \ = array($newPath);\n        }\n        if ($j > 0 && !$visited[$i][$j - 1])\
    \ {\n            $visited[$i][$j - 1] = true;\n            $queue[] = array($i,\
    \ $j - 1);\n            $newPath = $minPath;\n            $newPath[0] = $grid[$i][$j\
    \ - 1];\n            $minPaths[] = array($newPath);\n        }\n        if ($j\
    \ < $m - 1 && !$visited[$i][$j + 1]) {\n            $visited[$i][$j + 1] = true;\n\
    \            $queue[]", "    $n = count($grid);\n    $m = count($grid[0]);\n \
    \   $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPath\
    \ = array();\n    $visited = array();\n    for ($i = 0; $i < $n; $i++) {\n   \
    \     for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = false;\n \
    \       }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $path = array();\n            $pathSum = 0;\n     \
    \       $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n     \
    \       $pathSum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $path,\
    \ $pathSum, $visited, $minPath, $minPathSum);\n            $visited[$i][$j] =\
    \ false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $min_path = array();\n    $min_sum = PHP_INT_MAX;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $sum = 0;\n            $visited[$i][$j] = true;\n  \
    \          dfs($grid, $i, $j, $k, $path, $sum, $visited, $min_path, $min_sum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $min_path;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $sum = 0;\n            dfs($grid, $i,\
    \ $j, $k, $visited, $path, $sum);\n            if ($sum < $minSum) {\n       \
    \         $minSum = $sum;\n                $minPath = $path;\n            }\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $minPath\
    \ = array();\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n;\
    \ $j++) {\n            $path = array();\n            $path[] = $grid[$i][$j];\n\
    \            $minPath = minPathHelper($grid, $i, $j, $k, $path, $minPath);\n \
    \       }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $min = [];\n    $min_val = INF;\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = [];\n\
    \            $val = dfs($grid, $i, $j, $k, $path);\n            if ($val < $min_val)\
    \ {\n                $min_val = $val;\n                $min = $path;\n       \
    \     }\n        }\n    }\n    return $min;\n}", "    $n = count($grid);\n   \
    \ $m = count($grid[0]);\n    $minPath = array();\n    $minPath[] = $grid[0][0];\n\
    \    $minPath[] = $grid[0][1];\n    $minPath[] = $grid[0][2];\n    $minPath[]\
    \ = $grid[1][0];\n    $minPath[] = $grid[1][1];\n    $minPath[] = $grid[1][2];\n\
    \    $minPath[] = $grid[2][0];\n    $minPath[] = $grid[2][1];\n    $minPath[]\
    \ = $grid[2][2];\n    return $minPath;\n}\n", "    $n = count($grid);\n    $m\
    \ = count($grid[0]);\n    $minPath = array();\n    $minPathSum = INF;\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n         \
    \   $path = array();\n            $pathSum = 0;\n            $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n            dfs($grid, $i, $j, $k, $path, $pathSum,\
    \ $visited);\n            if ($pathSum < $minPathSum) {\n                $minPathSum\
    \ = $pathSum;\n                $minPath = $path;\n            }\n        }\n \
    \   }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $min = array_fill(0, $k, PHP_INT_MAX);\n    $min[0] = $grid[0][0];\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $visited[0][0] = true;\n\
    \    $q = new SplQueue();\n    $q->enqueue(array(0, 0, 0));\n    while (!$q->isEmpty())\
    \ {\n        list($i, $j, $l) = $q->dequeue();\n        if ($l == $k - 1) {\n\
    \            break;\n        }\n        if ($i > 0 && !$visited[$i - 1][$j]) {\n\
    \            $visited[$i - 1][$j] = true;\n            $q->enqueue(array($i -\
    \ 1, $j, $l + 1));\n            if ($grid[$i - 1][$j] < $min[$l + 1]) {\n    \
    \            $min[$l + 1] = $grid[$i - 1][$j];\n            }\n        }\n   \
    \     if ($i < $n - 1 && !$visited[$i + 1][$j]) {\n            $visited[$i + 1][$j]\
    \ = true;\n            $q->enqueue(array($i + 1, $j, $l + 1));\n            if\
    \ ($grid[$i + 1][$j] < $min[$l + 1]) {\n                $min[$l + 1] = $grid[$i\
    \ + 1][$j];\n            }\n        }\n        if ($j > 0 && !$visited[$i][$j\
    \ - 1]) {\n            $visited[$i][$j - 1] = true;\n            $q->enqueue(array($i,\
    \ $j - 1, $l + 1));\n            if ($grid[$i][$j - 1] < $min[$l + 1]) {\n   \
    \             $min[$l + 1] = $grid[$i][$j - 1];\n            }\n        }\n  \
    \     ", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n\
    \    $minPathValue = PHP_INT_MAX;\n    $visited = array_fill(0, $n, array_fill(0,\
    \ $m, false));\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m;\
    \ $j++) {\n            $path = array();\n            $pathValue = 0;\n       \
    \     $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n       \
    \     $pathValue += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $path,\
    \ $pathValue, $minPath, $minPathValue, $visited);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = dfs($grid, $n, $m, 0, 0, $k, $visited, $minPath, $minPathSum);\n    return\
    \ $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n  \
    \  $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = array();\n            $sum = 0;\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            dfs($grid, $i, $j, $path, $sum,\
    \ $visited, $k, $minPath, $minSum);\n            $visited[$i][$j] = false;\n \
    \       }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPath = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $sum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n\
    \            $visited[$i][$j] = false;\n            dfs($grid, $i, $j, $k - 1,\
    \ $visited, $path, $sum, $minPath, $minSum, $minPathSum);\n        }\n    }\n\
    \    return $minPath;\n}", "    $n = count($grid);\n    $path = array();\n   \
    \ $min = array();\n    $min_path = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = 0; $j < $n; $j++) {\n            $path[$i][$j] = array();\n\
    \            $min[$i][$j] = array();\n            $min_path[$i][$j] = array();\n\
    \        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $n; $j++) {\n            $path[$i][$j][0] = $grid[$i][$j];\n            $min[$i][$j][0]\
    \ = $grid[$i][$j];\n            $min_path[$i][$j][0] = array($grid[$i][$j]);\n\
    \        }\n    }\n    for ($l = 1; $l < $k; $l++) {\n        for ($i = 0; $i\
    \ < $n; $i++) {\n            for ($j = 0; $j < $n; $j++) {\n                $min[$i][$j][$l]\
    \ = PHP_INT_MAX;\n                $min_path[$i][$j][$l] = array();\n         \
    \       if ($i > 0) {\n                    $path[$i][$j][$l] = array_merge($path[$i\
    \ - 1][$j][$l - 1], array($grid[$i][$j]));\n                    if (less($path[$i][$j][$l],\
    \ $min[$i][$j][$l])) {\n                        $min[$i][$j][$l] = $path[$i][$j][$l];\n\
    \                        $min_path[$i][$j][$l] = $path[$i][$j][$l];\n        \
    \            }\n                }\n                if ($j > 0) {\n           \
    \         $path[$i][$j][$l] = array_merge($path[$i][$j - 1", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            $path[] =\
    \ $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n            $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n            $visited[$i][$j]\
    \ = true;\n            dfs($grid, $i, $j, $k - 1, $path, $pathSum, $visited, $minPath,\
    \ $minPathSum);\n        }\n    }\n    return $minPath;\n}", "    // Your code\
    \ here\n}\n", "    $n = count($grid);\n    $visited = array_fill(0, $n, array_fill(0,\
    \ $n, false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = dfs($grid, $visited, 0, 0, $k, $minPath, $minPathSum);\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            dfs($grid, $visited, $path, $pathSum, $i, $j, $k, $minPath, $minPathSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $min = array();\n\
    \    $min_sum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = array();\n            $sum = 0;\n\
    \            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n  \
    \          $visited = array();\n            $visited[$i][$j] = true;\n       \
    \     $k--;\n            $q = array();\n            $q[] = array($i, $j);\n  \
    \          while ($k > 0 && !empty($q)) {\n                $cur = array_shift($q);\n\
    \                $x = $cur[0];\n                $y = $cur[1];\n              \
    \  if ($x > 0 && !$visited[$x - 1][$y]) {\n                    $path[] = $grid[$x\
    \ - 1][$y];\n                    $sum += $grid[$x - 1][$y];\n                \
    \    $visited[$x - 1][$y] = true;\n                    $q[] = array($x - 1, $y);\n\
    \                    $k--;\n                }\n                if ($x < $n - 1\
    \ && !$visited[$x + 1][$y]) {\n                    $path[] = $grid[$x + 1][$y];\n\
    \                    $sum += $grid[$x + 1][$y];\n                    $visited[$x\
    \ + 1][$y] = true;\n                    $q[] = array($x + 1, $y);\n          \
    \          $k--;\n                }\n                if ($y > 0 && !$visited[$x][$y\
    \ - 1]) {\n                    $path[] = $grid[$x][$y - 1];\n                \
    \    $sum += $grid[$x][$y - 1];\n                    $visited[$x][$y - 1] = true;\n\
    \                    $q[] = array($x, $y - 1);\n                    $k--;\n  \
    \              }\n                if ($y < $m", "    $n = count($grid);\n    $m\
    \ = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n\
    \            $pathSum = 0;\n            dfs($grid, $i, $j, $k, $visited, $path,\
    \ $pathSum, $minPath, $minPathSum);\n        }\n    }\n    return $minPath;\n}",
  "    // Your code here\n}", "    // Your code here\n}\n", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = array();\n    $minPath[0] = array();\n\
    \    $minPath[0][0] = array();\n    $minPath[0][0][0] = $grid[0][0];\n    for\
    \ ($i = 1; $i < $n; $i++) {\n        $minPath[$i] = array();\n        $minPath[$i][0]\
    \ = array();\n        $minPath[$i][0][0] = $grid[$i][0];\n        if (count($minPath[$i\
    \ - 1][0]) < $k) {\n            $minPath[$i][0] = array_merge($minPath[$i - 1][0],\
    \ $minPath[$i][0]);\n        }\n    }\n    for ($j = 1; $j < $m; $j++) {\n   \
    \     $minPath[0][$j] = array();\n        $minPath[0][$j][0] = $grid[0][$j];\n\
    \        if (count($minPath[0][$j - 1]) < $k) {\n            $minPath[0][$j] =\
    \ array_merge($minPath[0][$j - 1], $minPath[0][$j]);\n        }\n    }\n    for\
    \ ($i = 1; $i < $n; $i++) {\n        for ($j = 1; $j < $m; $j++) {\n         \
    \   $minPath[$i][$j] = array();\n            $minPath[$i][$j][0] = $grid[$i][$j];\n\
    \            if (count($minPath[$i - 1][$j]) < $k) {\n                $minPath[$i][$j]\
    \ = array_merge($minPath[$i - 1][$j], $minPath[$i][$j]);\n            }\n    \
    \        if (count($minPath[$i][$j - 1]) < $k) {\n                $minPath[$i][$j]\
    \ = array_merge($minPath[$i][$j - 1], $minPath[", "    $n = count($grid);\n  \
    \  $m = count($grid[0]);\n    $min_path = array();\n    $min_path_sum = $n * $m\
    \ * $k;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++)\
    \ {\n            $path = array();\n            $path_sum = 0;\n            $path_sum\
    \ += $grid[$i][$j];\n            $path[] = $grid[$i][$j];\n            $visited\
    \ = array();\n            $visited[$i][$j] = true;\n            $queue = array();\n\
    \            $queue[] = array($i, $j);\n            while (count($queue) > 0)\
    \ {\n                $cur = array_shift($queue);\n                $x = $cur[0];\n\
    \                $y = $cur[1];\n                if (count($path) == $k) {\n  \
    \                  if ($path_sum < $min_path_sum) {\n                        $min_path_sum\
    \ = $path_sum;\n                        $min_path = $path;\n                 \
    \   }\n                    break;\n                }\n                if ($x >\
    \ 0 && !$visited[$x - 1][$y]) {\n                    $visited[$x - 1][$y] = true;\n\
    \                    $path_sum += $grid[$x - 1][$y];\n                    $path[]\
    \ = $grid[$x - 1][$y];\n                    $queue[] = array($x - 1, $y);\n  \
    \              }\n                if ($x < $n - 1 && !$visited[$x + 1][$y]) {\n\
    \                    $visited[$x + 1][$y] = true;\n                    $path_sum\
    \ += $grid[$x + 1][$y];\n                    $path[] = $grid[$x + 1][$y];\n  \
    \                  $queue[] = array($x + 1, $y);\n                }\n        \
    \        if ($y > 0 && !$visited[$x][$y - 1]) {\n                    $visited[$x][$y\
    \ - 1] = true;\n                    $path_sum +=", "    $n = count($grid);\n \
    \   $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $sum = 0;\n            $visited[$i][$j] = true;\n  \
    \          $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n    \
    \        dfs($grid, $i, $j, $k - 1, $sum, $path, $visited, $minSum, $minPath);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    // Your code here\n}\n", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathLength\
    \ = PHP_INT_MAX;\n    $minPath = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = true;\n\
    \            $path = array($grid[$i][$j]);\n            $pathSum = $grid[$i][$j];\n\
    \            $pathLength = 1;\n            dfs($grid, $visited, $i, $j, $k, $path,\
    \ $pathSum, $pathLength, $minPath, $minSum, $minPathSum, $minPathLength);\n  \
    \          $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $sum = 0;\n            dfs($grid, $i,\
    \ $j, $k, $visited, $path, $sum);\n            if ($sum < $minSum) {\n       \
    \         $minSum = $sum;\n                $minPath = $path;\n            }\n\
    \        }\n    }\n    return $minPath;\n}", "    // Write your code here\n  \
    \  // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\";\n}", "    $n = count($grid);\n    $path = array();\n\
    \    $min = array();\n    $min_value = PHP_INT_MAX;\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $path[0] = array($i,\
    \ $j);\n            $min[0] = $grid[$i][$j];\n            if ($min[0] < $min_value)\
    \ {\n                $min_value = $min[0];\n            }\n            for ($l\
    \ = 1; $l < $k; $l++) {\n                $path[$l] = array();\n              \
    \  $min[$l] = PHP_INT_MAX;\n                for ($m = 0; $m < $l; $m++) {\n  \
    \                  $x = $path[$m][0];\n                    $y = $path[$m][1];\n\
    \                    if ($x > 0) {\n                        $path[$l][] = array($x\
    \ - 1, $y);\n                        $min[$l] = min($min[$l], $min[$m] + $grid[$x\
    \ - 1][$y]);\n                    }\n                    if ($x < $n - 1) {\n\
    \                        $path[$l][] = array($x + 1, $y);\n                  \
    \      $min[$l] = min($min[$l], $min[$m] + $grid[$x + 1][$y]);\n             \
    \       }\n                    if ($y > 0) {\n                        $path[$l][]\
    \ = array($x, $y - 1);\n                        $min[$l] = min($min[$l], $min[$m]\
    \ + $grid[$x][$y - 1]);\n                    }\n                    if ($y < $n\
    \ - 1) {\n                        $path[$l][] = array($x, $y + 1);\n         \
    \               $min[$l] = min($min[$l], $min[$m] + $grid[$x][$y + 1]);\n    \
    \                }\n                }\n                if ($min[$l] < $min_value)\
    \ {\n                    $min_", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = array();\n            $sum = 0;\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            dfs($grid, $visited, $i, $j,\
    \ $path, $sum, $k, $minPath, $minSum);\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = array_fill(0,\
    \ $k, INF);\n    $minPath[0] = $grid[0][0];\n    $minPath[1] = $grid[0][1];\n\
    \    $minPath[2] = $grid[1][0];\n    $visited[0][0] = true;\n    $visited[0][1]\
    \ = true;\n    $visited[1][0] = true;\n    $minPath = minPathHelper($grid, $k,\
    \ $visited, $minPath, 0, 0);\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $n; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            $visited = dfs($grid, $i,\
    \ $j, $k - 1, $visited, $path, $pathSum, $minPath, $minPathSum);\n           \
    \ $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n}", "   \
    \ // Your code here\n}\n", "    $n = count($grid);\n    $minPath = array();\n\
    \    $minPath[0] = $grid[0][0];\n    $minPath[1] = $grid[0][1];\n    $minPath[2]\
    \ = $grid[1][0];\n    $minPath[3] = $grid[1][1];\n    $minPath[4] = $grid[0][2];\n\
    \    $minPath[5] = $grid[1][2];\n    $minPath[6] = $grid[2][0];\n    $minPath[7]\
    \ = $grid[2][1];\n    $minPath[8] = $grid[2][2];\n    $minPath = sort($minPath);\n\
    \    return $minPath;\n}\n", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $min_path =\
    \ array();\n    $min_sum = PHP_INT_MAX;\n    $min_path_sum = PHP_INT_MAX;\n  \
    \  $min_path_sum_idx = 0;\n    $min_path_sum_jdx = 0;\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j]\
    \ = true;\n            $path = array($grid[$i][$j]);\n            $sum = $grid[$i][$j];\n\
    \            $path_sum = $grid[$i][$j];\n            $path_sum_idx = $i;\n   \
    \         $path_sum_jdx = $j;\n            $path_sum_min = $grid[$i][$j];\n  \
    \          $path_sum_min_idx = $i;\n            $path_sum_min_jdx = $j;\n    \
    \        $path_sum_max = $grid[$i][$j];\n            $path_sum_max_idx = $i;\n\
    \            $path_sum_max_jdx = $j;\n            $path_sum_max_idx_min = $i;\n\
    \            $path_sum_max_jdx_min = $j;\n            $path_sum_max_idx_max =\
    \ $i;\n            $path_sum_max_jdx_max = $j;\n            $path_sum_max_idx_min_idx\
    \ = $i;\n            $path_sum_max_jdx_min_idx = $j;\n            $path_sum_max_idx_max_idx\
    \ = $i;\n            $path_sum_max_jdx_max_idx = $j;\n            $path_sum_max_idx_min_jdx\
    \ = $i;\n            $path_sum_max_jdx_min_j", "    $n = count($grid);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $n, false));\n    $queue = new SplQueue();\n\
    \    $queue->enqueue(array(0, 0, 1, array($grid[0][0])));\n    $visited[0][0]\
    \ = true;\n    $minPath = null;\n    while (!$queue->isEmpty()) {\n        list($i,\
    \ $j, $length, $path) = $queue->dequeue();\n        if ($length == $k) {\n   \
    \         if ($minPath == null || $path < $minPath) {\n                $minPath\
    \ = $path;\n            }\n            continue;\n        }\n        if ($i >\
    \ 0 && !$visited[$i - 1][$j]) {\n            $visited[$i - 1][$j] = true;\n  \
    \          $queue->enqueue(array($i - 1, $j, $length + 1, array_merge($path, array($grid[$i\
    \ - 1][$j]))));\n        }\n        if ($i < $n - 1 && !$visited[$i + 1][$j])\
    \ {\n            $visited[$i + 1][$j] = true;\n            $queue->enqueue(array($i\
    \ + 1, $j, $length + 1, array_merge($path, array($grid[$i + 1][$j]))));\n    \
    \    }\n        if ($j > 0 && !$visited[$i][$j - 1]) {\n            $visited[$i][$j\
    \ - 1] = true;\n            $queue->enqueue(array($i, $j - 1, $length + 1, array_merge($path,\
    \ array($grid[$i][$j - 1]))));\n        }\n        if ($j < $n - 1 && !$visited[$i][$j\
    \ + 1]) {\n            $visited[$i][$j + 1] = true;\n            $queue->enqueue(array($i,\
    \ $j + 1, $length + 1, array_merge($path, array($grid[$i][$j + 1]))", "    $n\
    \ = count($grid);\n    $m = count($grid[0]);\n    $min_path = array();\n    $min_path_sum\
    \ = $n * $m * $n * $m;\n    $min_path_sum_found = false;\n    $min_path_sum_found_at\
    \ = array();\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m;\
    \ $j++) {\n            $path = array();\n            $path_sum = 0;\n        \
    \    $path_sum_found = false;\n            $path_sum_found_at = array();\n   \
    \         $path_sum_found_at[] = array($i, $j);\n            $path[] = $grid[$i][$j];\n\
    \            $path_sum += $grid[$i][$j];\n            $path_sum_found = true;\n\
    \            for ($l = 0; $l < $k - 1; $l++) {\n                $min_path_sum_found_at_count\
    \ = count($path_sum_found_at);\n                for ($p = 0; $p < $min_path_sum_found_at_count;\
    \ $p++) {\n                    $x = $path_sum_found_at[$p][0];\n             \
    \       $y = $path_sum_found_at[$p][1];\n                    if ($x > 0) {\n \
    \                       if ($grid[$x - 1][$y] < $grid[$x][$y]) {\n           \
    \                 $path[] = $grid[$x - 1][$y];\n                            $path_sum\
    \ += $grid[$x - 1][$y];\n                            $path_sum_found_at[] = array($x\
    \ - 1, $y);\n                            $path_sum_found = true;\n           \
    \             }\n                    }\n                    if ($x < $n - 1) {\n\
    \                        if ($grid[$x + 1][$y] < $grid[$x][$y]) {\n          \
    \                  $path[] = $grid[$x + 1][$y];\n                            $path_sum\
    \ += $grid[$x + 1][$y];\n", "    // Your code here\n}\n", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $min = array();\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $min[$i][$j] = array();\n\
    \        }\n    }\n    $min[0][0][] = $grid[0][0];\n    for ($i = 1; $i < $n;\
    \ $i++) {\n        $min[$i][0] = $min[$i - 1][0];\n        $min[$i][0][] = $grid[$i][0];\n\
    \    }\n    for ($j = 1; $j < $m; $j++) {\n        $min[0][$j] = $min[0][$j -\
    \ 1];\n        $min[0][$j][] = $grid[0][$j];\n    }\n    for ($i = 1; $i < $n;\
    \ $i++) {\n        for ($j = 1; $j < $m; $j++) {\n            $min[$i][$j] = min($min[$i\
    \ - 1][$j], $min[$i][$j - 1]);\n            $min[$i][$j][] = $grid[$i][$j];\n\
    \        }\n    }\n    return array_slice($min[$n - 1][$m - 1], 0, $k);\n}\n",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $sum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $path, $sum, $visited, $minPath, $minSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1,\
    \ $path, $pathSum, $visited, $minPath, $minPathSum);\n        }\n    }\n    return\
    \ $minPath;\n}", "    // Your code here\n}\n", "    $n = count($grid);\n    $m\
    \ = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = array_fill(0, $k, PHP_INT_MAX);\n    $minPath[0] = $grid[0][0];\n\
    \    $minPath[$k - 1] = $grid[$n - 1][$m - 1];\n    $minPath = dfs($grid, $visited,\
    \ $minPath, 0, 0, $k, $n, $m);\n    return $minPath;\n}\n", "    // Your code\
    \ here\n}\n", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath\
    \ = array();\n    $minPath[] = $grid[0][0];\n    $minPathSum = $grid[0][0];\n\
    \    $minPaths = array();\n    $minPaths[] = $minPath;\n    $minPathsSum = array();\n\
    \    $minPathsSum[] = $minPathSum;\n    $minPathsLength = array();\n    $minPathsLength[]\
    \ = 1;\n    $minPathsVisited = array();\n    $minPathsVisited[] = array(0 => array(0\
    \ => 1));\n    $minPathsVisitedCount = array();\n    $minPathsVisitedCount[] =\
    \ 1;\n    $minPathsVisitedSum = array();\n    $minPathsVisitedSum[] = $grid[0][0];\n\
    \    $minPathsVisitedSumCount = array();\n    $minPathsVisitedSumCount[] = 1;\n\
    \    $minPathsVisitedSumCountSum = array();\n    $minPathsVisitedSumCountSum[]\
    \ = 1;\n    $minPathsVisitedSumCountSumCount = array();\n    $minPathsVisitedSumCountSumCount[]\
    \ = 1;\n    $minPathsVisitedSumCountSumCountCount = array();\n    $minPathsVisitedSumCountSumCountCount[]\
    \ = 1;\n    $minPathsVisitedSumCountSumCountCountCount = array();\n    $minPathsVisitedSumCountSumCountCountCount[]\
    \ = 1;\n    $minPathsVisitedSumCountSumCountCountCountCount = array();\n    $minPathsVisitedSumCountSumCountCountCountCount[]\
    \ = 1;\n    $minPathsVisitedSumCountSumCountCountCountCountCount = array();\n\
    \    $minPathsVisitedSumCountSumCountCountCountCountCount[] = 1;\n    $minPathsVisitedSumCountSumCountCountCountCountCountCount\
    \ = array();\n    $minPathsVisitedSumCountSumCountCountCountCountCountCount[]\
    \ = 1;\n    $minPathsVisitedSumCountSumCountCountCountCountCountCountCount = array();\n\
    \    $minPathsVisitedSumCountSum", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $min = array();\n    $min_sum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n   \
    \         $sum = 0;\n            $path[] = $grid[$i][$j];\n            $sum +=\
    \ $grid[$i][$j];\n            $visited = array();\n            $visited[$i][$j]\
    \ = true;\n            $q = array();\n            $q[] = array($i, $j);\n    \
    \        while (!empty($q)) {\n                $cur = array_shift($q);\n     \
    \           $cur_i = $cur[0];\n                $cur_j = $cur[1];\n           \
    \     if (count($path) == $k) {\n                    if ($sum < $min_sum) {\n\
    \                        $min_sum = $sum;\n                        $min = $path;\n\
    \                    }\n                    break;\n                }\n      \
    \          if ($cur_i > 0 && !$visited[$cur_i - 1][$cur_j]) {\n              \
    \      $visited[$cur_i - 1][$cur_j] = true;\n                    $q[] = array($cur_i\
    \ - 1, $cur_j);\n                    $path[] = $grid[$cur_i - 1][$cur_j];\n  \
    \                  $sum += $grid[$cur_i - 1][$cur_j];\n                }\n   \
    \             if ($cur_i < $n - 1 && !$visited[$cur_i + 1][$cur_j]) {\n      \
    \              $visited[$cur_i + 1][$cur_j] = true;\n                    $q[]\
    \ = array($cur_i + 1, $cur_j);\n                    $path[] = $grid[$cur_i + 1][$cur_j];\n\
    \                    $sum += $grid[$cur_i + 1][$cur_j];\n                }\n \
    \               if ($cur_j > 0 && !$visited[$cur_i][$cur_j - 1", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $sum = 0;\n            $visited[$i][$j] = true;\n  \
    \          $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n    \
    \        if (dfs($grid, $visited, $i, $j, $k - 1, $path, $sum)) {\n          \
    \      if ($sum < $minSum) {\n                    $minSum = $sum;\n          \
    \          $minPath = $path;\n                }\n            }\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $min = array();\n    $min_sum = $n * $m * $n;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $sum = 0;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            $visited = array();\n       \
    \     $visited[$i][$j] = true;\n            $queue = array();\n            $queue[]\
    \ = array($i, $j);\n            while (count($queue) > 0) {\n                $cur\
    \ = array_shift($queue);\n                $x = $cur[0];\n                $y =\
    \ $cur[1];\n                if (count($path) == $k) {\n                    if\
    \ ($sum < $min_sum) {\n                        $min_sum = $sum;\n            \
    \            $min = $path;\n                    }\n                    break;\n\
    \                }\n                if ($x > 0 && !$visited[$x - 1][$y]) {\n \
    \                   $visited[$x - 1][$y] = true;\n                    $queue[]\
    \ = array($x - 1, $y);\n                    $path[] = $grid[$x - 1][$y];\n   \
    \                 $sum += $grid[$x - 1][$y];\n                }\n            \
    \    if ($x < $n - 1 && !$visited[$x + 1][$y]) {\n                    $visited[$x\
    \ + 1][$y] = true;\n                    $queue[] = array($x + 1, $y);\n      \
    \              $path[] = $grid[$x + 1][$y];\n                    $sum += $grid[$x\
    \ + 1][$y];\n                }\n                if ($y > 0 && !$visited[$x][$y\
    \ - 1]) {\n                    $visited[$x][$y - 1] = true;\n                \
    \    $queue[] = array($x, $y - 1);\n                    $path[] = $grid[$x][$y",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n  \
    \  $minPath[0] = $grid[0][0];\n    $minPath[1] = $grid[0][1];\n    $minPath[2]\
    \ = $grid[1][0];\n    $minPath[3] = $grid[1][1];\n    $minPath[4] = $grid[0][2];\n\
    \    $minPath[5] = $grid[1][2];\n    $minPath[6] = $grid[2][0];\n    $minPath[7]\
    \ = $grid[2][1];\n    $minPath[8] = $grid[2][2];\n    $minPath = array_unique($minPath);\n\
    \    sort($minPath);\n    $minPath = array_slice($minPath, 0, $k);\n    return\
    \ $minPath;\n}\n", "    $n = count($grid);\n    $m = count($grid[0]);\n    $min\
    \ = array();\n    $min_sum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n       \
    \     $sum = 0;\n            $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \            dfs($grid, $i, $j, $k, $path, $sum, $visited);\n            if ($sum\
    \ < $min_sum) {\n                $min_sum = $sum;\n                $min = $path;\n\
    \            }\n        }\n    }\n    return $min;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = array();\n    $minPathVal = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $minPath[$i][$j] = array();\n            $minPathVal[$i][$j] = array();\n\
    \        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            $minPath[$i][$j][0] = array($grid[$i][$j]);\n   \
    \         $minPathVal[$i][$j][0] = $grid[$i][$j];\n        }\n    }\n    for ($l\
    \ = 1; $l < $k; $l++) {\n        for ($i = 0; $i < $n; $i++) {\n            for\
    \ ($j = 0; $j < $m; $j++) {\n                $minPath[$i][$j][$l] = array();\n\
    \                $minPathVal[$i][$j][$l] = PHP_INT_MAX;\n                if ($i\
    \ > 0) {\n                    $path = $minPath[$i - 1][$j][$l - 1];\n        \
    \            $path[] = $grid[$i][$j];\n                    $val = $minPathVal[$i\
    \ - 1][$j][$l - 1] * 10 + $grid[$i][$j];\n                    if ($val < $minPathVal[$i][$j][$l])\
    \ {\n                        $minPath[$i][$j][$l] = $path;\n                 \
    \       $minPathVal[$i][$j][$l] = $val;\n                    }\n             \
    \   }\n                if ($j > 0) {\n                    $path = $minPath[$i][$j\
    \ - 1][$l - 1];\n                    $path[] = $grid[$i][$j];\n              \
    \      $val = $minPathVal[$i][$j - 1][$l - 1", "    $n = count($grid);\n    $m\
    \ = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $queue = new SplQueue();\n    $queue->enqueue(new Cell(0, 0, $grid[0][0]));\n\
    \    $visited[0][0] = true;\n    $minPath = null;\n    while (!$queue->isEmpty())\
    \ {\n        $cell = $queue->dequeue();\n        if ($cell->path->count() == $k)\
    \ {\n            if ($minPath == null || $cell->path->compare($minPath) < 0) {\n\
    \                $minPath = $cell->path;\n            }\n            continue;\n\
    \        }\n        $i = $cell->i;\n        $j = $cell->j;\n        if ($i > 0\
    \ && !$visited[$i - 1][$j]) {\n            $visited[$i - 1][$j] = true;\n    \
    \        $queue->enqueue(new Cell($i - 1, $j, $grid[$i - 1][$j], $cell->path));\n\
    \        }\n        if ($i < $n - 1 && !$visited[$i + 1][$j]) {\n            $visited[$i\
    \ + 1][$j] = true;\n            $queue->enqueue(new Cell($i + 1, $j, $grid[$i\
    \ + 1][$j], $cell->path));\n        }\n        if ($j > 0 && !$visited[$i][$j\
    \ - 1]) {\n            $visited[$i][$j - 1] = true;\n            $queue->enqueue(new\
    \ Cell($i, $j - 1, $grid[$i][$j - 1], $cell->path));\n        }\n        if ($j\
    \ < $m - 1 && !$visited[$i][$j + 1]) {\n            $visited[$i][$j + 1] = true;\n\
    \            $queue->enqueue(new Cell($i, $j + 1, $grid[$i][$j + 1], $cell->path));\n\
    \        }\n", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n  \
    \  $minSum = PHP_INT_MAX;\n    $minSumPath = array();\n    $minSumPaths = array();\n\
    \    $minSumPaths[] = array();\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = true;\n          \
    \  $path = array();\n            $path[] = $grid[$i][$j];\n            $sum =\
    \ $grid[$i][$j];\n            $sumPath = array();\n            $sumPath[] = $grid[$i][$j];\n\
    \            $sumPaths = array();\n            $sumPaths[] = array();\n      \
    \      $sumPaths[] = array();\n            $sumPaths[] = array();\n          \
    \  $sumPaths[] = array();\n            $sumPaths[] = array();\n            $sumPaths[]\
    \ = array();\n            $sumPaths[] = array();\n            $sumPaths[] = array();\n\
    \            $sumPaths[] = array();\n            $sumPaths[] = array();\n    \
    \        $sumPaths[] = array();\n            $sumPaths[] = array();\n        \
    \    $sumPaths[] = array();\n            $sumPaths[] = array();\n            $sumPaths[]\
    \ = array();\n            $sumPaths[] = array();\n            $sumPaths[] = array();\n\
    \            $sumPaths[] = array();\n            $sumPaths[] = array();\n    \
    \        $sumPaths[] = array();\n            $sumPaths[] = array();\n        \
    \    $sumPaths[] = array();\n            $sumPaths[] = array();\n            $sumPaths[]\
    \ = array();\n            $sumPaths[] = array();\n            $sumPaths[] = array();\n\
    \            $sumPaths[] = array();\n            $sumPaths[] = array();\n    \
    \        $sumPaths[] = array();\n            $sumPaths", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = dfs($grid, $n, $m, 0, 0, $k, $visited, $minPath, $minPathSum);\n    return\
    \ $minPath;\n}\n", "    $n = count($grid);\n    $m = count($grid[0]);\n    $min\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++)\
    \ {\n            $min[$i][$j] = [];\n        }\n    }\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $min[$i][$j][0]\
    \ = $grid[$i][$j];\n        }\n    }\n    for ($l = 1; $l < $k; $l++) {\n    \
    \    for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $m; $j++) {\n\
    \                $min[$i][$j][$l] = PHP_INT_MAX;\n                if ($i > 0)\
    \ {\n                    $min[$i][$j][$l] = min($min[$i][$j][$l], $min[$i - 1][$j][$l\
    \ - 1]);\n                }\n                if ($i < $n - 1) {\n            \
    \        $min[$i][$j][$l] = min($min[$i][$j][$l], $min[$i + 1][$j][$l - 1]);\n\
    \                }\n                if ($j > 0) {\n                    $min[$i][$j][$l]\
    \ = min($min[$i][$j][$l], $min[$i][$j - 1][$l - 1]);\n                }\n    \
    \            if ($j < $m - 1) {\n                    $min[$i][$j][$l] = min($min[$i][$j][$l],\
    \ $min[$i][$j + 1][$l - 1]);\n                }\n            }\n        }\n  \
    \  }\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ 0; $j < $m; $j++) {\n            $result[] = $min[$", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $sum = 0;\n            $visited[$i][$j] = true;\n  \
    \          $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n    \
    \        dfs($grid, $visited, $i, $j, $path, $sum, $k, $minPath, $minSum);\n \
    \           $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    $minSum = dfs($grid, $n, $m, 0, 0, $k, 0, $visited, $minPath, $minSum);\n\
    \    return $minPath;\n}\n", "    $n = count($grid);\n    $minPath = array();\n\
    \    $minPathValue = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n       \
    \ for ($j = 0; $j < $n; $j++) {\n            $path = array();\n            $pathValue\
    \ = 0;\n            $visited = array_fill(0, $n, array_fill(0, $n, false));\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathValue += $grid[$i][$j];\n            if ($k == 1) {\n      \
    \          if ($pathValue < $minPathValue) {\n                    $minPath = $path;\n\
    \                    $minPathValue = $pathValue;\n                }\n        \
    \    } else {\n                $path = minPathHelper($grid, $k - 1, $i, $j, $visited,\
    \ $path, $pathValue);\n                if ($pathValue < $minPathValue) {\n   \
    \                 $minPath = $path;\n                    $minPathValue = $pathValue;\n\
    \                }\n            }\n        }\n    }\n    return $minPath;\n}",
  "    $n = count($grid);\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            $visited =\
    \ array_fill(0, $n, array_fill(0, $n, false));\n            $visited[$i][$j] =\
    \ true;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            if (dfs($grid, $i, $j, $k - 1, $path, $pathSum, $visited)) {\n  \
    \              if ($pathSum < $minPathSum) {\n                    $minPathSum\
    \ = $pathSum;\n                    $minPath = $path;\n                }\n    \
    \        }\n        }\n    }\n    return $minPath;\n}", "    // Your code here\n\
    }\n", "    $n = count($grid);\n    $m = count($grid[0]);\n    $path = array();\n\
    \    $min = array();\n    $min_path = array();\n    $min_path_found = false;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $path[] = $grid[$i][$j];\n          \
    \  minPathHelper($grid, $i, $j, $k, $path, $min, $min_path, $min_path_found);\n\
    \        }\n    }\n    return $min_path;\n}", "    // Your code here\n}\n", " \
    \   // Your code here\n}", "    // Your code here\n}\n", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $sum = 0;\n            dfs($grid, $i, $j, $k, $visited,\
    \ $path, $sum);\n            if ($sum < $minSum) {\n                $minSum =\
    \ $sum;\n                $minPath = $path;\n            }\n        }\n    }\n\
    \    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = array();\n    $minPathSum = $n * $m * $n * $m;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $pathSum = 0;\n            $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n            $visited[$i][$j] = true;\n     \
    \       $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n   \
    \         $q = array(array($i, $j));\n            while (!empty($q)) {\n     \
    \           $cur = array_shift($q);\n                $curI = $cur[0];\n      \
    \          $curJ = $cur[1];\n                if (count($path) == $k) {\n     \
    \               if ($pathSum < $minPathSum) {\n                        $minPathSum\
    \ = $pathSum;\n                        $minPath = $path;\n                   \
    \ }\n                    break;\n                }\n                if ($curI\
    \ > 0 && !$visited[$curI - 1][$curJ]) {\n                    $visited[$curI -\
    \ 1][$curJ] = true;\n                    $q[] = array($curI - 1, $curJ);\n   \
    \                 $path[] = $grid[$curI - 1][$curJ];\n                    $pathSum\
    \ += $grid[$curI - 1][$curJ];\n                }\n                if ($curI <\
    \ $n - 1 && !$visited[$curI + 1][$curJ]) {\n                    $visited[$curI\
    \ + 1][$curJ] = true;\n                    $q[] = array($curI + 1, $curJ);\n \
    \                   $path[] = $grid[$curI + 1][$curJ];\n                    $pathSum\
    \ += $grid[$curI + 1][$curJ];\n                }\n                if ($curJ >\
    \ 0 && !$visited[$curI][$curJ - 1])", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j]\
    \ = true;\n            $path = array($grid[$i][$j]);\n            $sum = $grid[$i][$j];\n\
    \            $pathSum = $grid[$i][$j];\n            $visited[$i][$j] = false;\n\
    \            dfs($grid, $visited, $path, $sum, $pathSum, $i, $j, $k, $minPath,\
    \ $minSum, $minPathSum);\n        }\n    }\n    return $minPath;\n}", "    $n\
    \ = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n    $minPathSum\
    \ = $n * $m * $n * $m;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0;\
    \ $j < $m; $j++) {\n            $path = array();\n            $pathSum = 0;\n\
    \            $visited = array_fill(0, $n, array_fill(0, $m, false));\n       \
    \     $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n       \
    \     $pathSum += $grid[$i][$j];\n            $q = array();\n            $q[]\
    \ = array($i, $j);\n            while (!empty($q)) {\n                $cur = array_shift($q);\n\
    \                $x = $cur[0];\n                $y = $cur[1];\n              \
    \  if (count($path) == $k) {\n                    if ($pathSum < $minPathSum)\
    \ {\n                        $minPathSum = $pathSum;\n                       \
    \ $minPath = $path;\n                    }\n                    break;\n     \
    \           }\n                if ($x > 0 && !$visited[$x - 1][$y]) {\n      \
    \              $visited[$x - 1][$y] = true;\n                    $q[] = array($x\
    \ - 1, $y);\n                    $path[] = $grid[$x - 1][$y];\n              \
    \      $pathSum += $grid[$x - 1][$y];\n                }\n                if ($x\
    \ < $n - 1 && !$visited[$x + 1][$y]) {\n                    $visited[$x + 1][$y]\
    \ = true;\n                    $q[] = array($x + 1, $y);\n                   \
    \ $path[] = $grid[$x + 1][$y];\n                    $pathSum += $grid[$x + 1][$y];\n\
    \                }\n                if ($y > 0 && !$visited[$x][$y - 1]) {\n \
    \                   $visited[$x][$y - 1] = true;\n                    $", "  \
    \  // Your code here\n}", "    // Your code here\n}\n", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            $path[] =\
    \ $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n            $visited\
    \ = array();\n            $visited[$i][$j] = true;\n            $queue = array();\n\
    \            $queue[] = array($i, $j);\n            while (!empty($queue)) {\n\
    \                $curr = array_shift($queue);\n                $x = $curr[0];\n\
    \                $y = $curr[1];\n                if (count($path) == $k) {\n \
    \                   if ($pathSum < $minPathSum) {\n                        $minPathSum\
    \ = $pathSum;\n                        $minPath = $path;\n                   \
    \ }\n                    break;\n                }\n                if ($x > 0\
    \ && !$visited[$x - 1][$y]) {\n                    $visited[$x - 1][$y] = true;\n\
    \                    $queue[] = array($x - 1, $y);\n                    $path[]\
    \ = $grid[$x - 1][$y];\n                    $pathSum += $grid[$x - 1][$y];\n \
    \               }\n                if ($x < $n - 1 && !$visited[$x + 1][$y]) {\n\
    \                    $visited[$x + 1][$y] = true;\n                    $queue[]\
    \ = array($x + 1, $y);\n                    $path[] = $grid[$x + 1][$y];\n   \
    \                 $pathSum += $grid[$x + 1][$y];\n                }\n        \
    \        if ($y > 0 && !$visited[$x][$y - 1]) {\n                    $visited[$x][$y\
    \ - 1] = true;\n                    $queue[] = array($x, $y - 1);\n          \
    \          $path[] = $grid[", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $min = array();\n    $min_sum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n   \
    \         $sum = 0;\n            $path[] = $grid[$i][$j];\n            $sum +=\
    \ $grid[$i][$j];\n            $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \            $visited[$i][$j] = true;\n            $min_path = minPathHelper($grid,\
    \ $i, $j, $k - 1, $path, $sum, $visited);\n            if ($min_path['sum'] <\
    \ $min_sum) {\n                $min = $min_path['path'];\n                $min_sum\
    \ = $min_path['sum'];\n            }\n        }\n    }\n    return $min;\n}",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $sum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $visited, $path, $sum, $k, $minPath, $minSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    // Your code here\n}\n", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n\
    \            $sum = 0;\n            $path[] = $grid[$i][$j];\n            $sum\
    \ += $grid[$i][$j];\n            $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n            $visited[$i][$j] = true;\n            $queue = array(array($i,\
    \ $j));\n            while (count($queue) > 0) {\n                $cur = array_shift($queue);\n\
    \                $x = $cur[0];\n                $y = $cur[1];\n              \
    \  if (count($path) == $k) {\n                    break;\n                }\n\
    \                if ($x > 0 && !$visited[$x - 1][$y]) {\n                    $path[]\
    \ = $grid[$x - 1][$y];\n                    $sum += $grid[$x - 1][$y];\n     \
    \               $visited[$x - 1][$y] = true;\n                    $queue[] = array($x\
    \ - 1, $y);\n                }\n                if ($x < $n - 1 && !$visited[$x\
    \ + 1][$y]) {\n                    $path[] = $grid[$x + 1][$y];\n            \
    \        $sum += $grid[$x + 1][$y];\n                    $visited[$x + 1][$y]\
    \ = true;\n                    $queue[] = array($x + 1, $y);\n               \
    \ }\n                if ($y > 0 && !$visited[$x][$y - 1]) {\n                \
    \    $path[] = $grid[$x][$y - 1];\n                    $sum += $grid[$x][$y -\
    \ 1];\n                    $visited[$x][$y - 1] = true;\n                    $queue[]\
    \ = array($x, $y - 1);\n                }\n               ", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = array();\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $minPath[$i][$j]\
    \ = array();\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            if ($i == 0 && $j == 0) {\n         \
    \       $minPath[$i][$j][] = $grid[$i][$j];\n            } else if ($i == 0) {\n\
    \                $minPath[$i][$j] = $minPath[$i][$j - 1];\n                $minPath[$i][$j][]\
    \ = $grid[$i][$j];\n            } else if ($j == 0) {\n                $minPath[$i][$j]\
    \ = $minPath[$i - 1][$j];\n                $minPath[$i][$j][] = $grid[$i][$j];\n\
    \            } else {\n                $minPath[$i][$j] = minPathHelper($minPath[$i\
    \ - 1][$j], $minPath[$i][$j - 1]);\n                $minPath[$i][$j][] = $grid[$i][$j];\n\
    \            }\n        }\n    }\n    return array_slice($minPath[$n - 1][$m -\
    \ 1], 0, $k);\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n    $minPathSum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $path = [];\n            $pathSum = 0;\n          \
    \  $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n          \
    \  $pathSum += $grid[$i][$j];\n            if ($k == 1) {\n                if\
    \ ($pathSum < $minPathSum) {\n                    $minPathSum = $pathSum;\n  \
    \                  $minPath = $path;\n                }\n            } else {\n\
    \                $path = minPathHelper($grid, $k - 1, $i, $j, $path, $pathSum,\
    \ $visited, $minPathSum, $minPath);\n            }\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = array_fill(0,\
    \ $k, PHP_INT_MAX);\n    $minPath[0] = $grid[0][0];\n    $minPath = findMinPath($grid,\
    \ $n, $visited, 0, 0, $minPath, $k, 1);\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            $visited =\
    \ array_fill(0, $n, array_fill(0, $m, false));\n            $visited[$i][$j] =\
    \ true;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            $q = new SplQueue();\n            $q->enqueue(array($i, $j));\n \
    \           while (!$q->isEmpty()) {\n                $cur = $q->dequeue();\n\
    \                $x = $cur[0];\n                $y = $cur[1];\n              \
    \  if (count($path) == $k) {\n                    if ($pathSum < $minPathSum)\
    \ {\n                        $minPathSum = $pathSum;\n                       \
    \ $minPath = $path;\n                    }\n                    break;\n     \
    \           }\n                if ($x > 0 && !$visited[$x - 1][$y]) {\n      \
    \              $visited[$x - 1][$y] = true;\n                    $q->enqueue(array($x\
    \ - 1, $y));\n                    $path[] = $grid[$x - 1][$y];\n             \
    \       $pathSum += $grid[$x - 1][$y];\n                }\n                if\
    \ ($x < $n - 1 && !$visited[$x + 1][$y]) {\n                    $visited[$x +\
    \ 1][$y] = true;\n                    $q->enqueue(array($x + 1, $y));\n      \
    \              $path[] = $grid[$x + 1][$y];\n                    $pathSum += $grid[$x\
    \ + 1][$y];\n                }\n                if ($y > 0 && !$visited[$x][$y\
    \ - 1]) {\n                    $visited[$x][$y - 1] = true", "    // Your code\
    \ here\n}\n", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n  \
    \  $minPathSum = PHP_INT_MAX;\n    $minPathSum = dfs($grid, $n, $m, 0, 0, $k,\
    \ $visited, $minPath, $minPathSum);\n    return $minPath;\n}\n", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $min = array_fill(0, $k, PHP_INT_MAX);\n    $min[0] = $grid[0][0];\n\
    \    $visited[0][0] = true;\n    $queue = array(array(0, 0, 0));\n    while (!empty($queue))\
    \ {\n        list($i, $j, $l) = array_shift($queue);\n        if ($l == $k - 1)\
    \ {\n            break;\n        }\n        $visited[$i][$j] = true;\n       \
    \ if ($i > 0 && !$visited[$i - 1][$j] && $grid[$i - 1][$j] < $min[$l + 1]) {\n\
    \            $min[$l + 1] = $grid[$i - 1][$j];\n            $queue[] = array($i\
    \ - 1, $j, $l + 1);\n        }\n        if ($i < $n - 1 && !$visited[$i + 1][$j]\
    \ && $grid[$i + 1][$j] < $min[$l + 1]) {\n            $min[$l + 1] = $grid[$i\
    \ + 1][$j];\n            $queue[] = array($i + 1, $j, $l + 1);\n        }\n  \
    \      if ($j > 0 && !$visited[$i][$j - 1] && $grid[$i][$j - 1] < $min[$l + 1])\
    \ {\n            $min[$l + 1] = $grid[$i][$j - 1];\n            $queue[] = array($i,\
    \ $j - 1, $l + 1);\n        }\n        if ($j < $m - 1 && !$visited[$i][$j + 1]\
    \ && $grid[$i][$j + 1] < $min[$l + 1]) {\n            $min[$l + 1] = $grid[$i][$j\
    \ + 1];\n            $queue[] =", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1,\
    \ $visited, $path, $pathSum, $minPath, $minPathSum);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    // Write your code\
    \ here\n    // To print results to the standard output you can use print\n   \
    \ // Example: print \"Hello world!\";\n}", "    $n = count($grid);\n    $minPath\
    \ = array();\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $n; $j++) {\n            $path = array();\n   \
    \         $pathSum = 0;\n            $visited = array_fill(0, $n, array_fill(0,\
    \ $n, false));\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            if ($k == 1) {\n        \
    \        if ($pathSum < $minPathSum) {\n                    $minPathSum = $pathSum;\n\
    \                    $minPath = $path;\n                }\n            } else\
    \ {\n                $minPath = minPathHelper($grid, $k - 1, $i, $j, $path, $pathSum,\
    \ $visited, $minPath, $minPathSum);\n            }\n        }\n    }\n    return\
    \ $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $min\
    \ = array();\n    $min_sum = PHP_INT_MAX;\n    $min_path = array();\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $sum = 0;\n            $visited = array_fill(0, $n,\
    \ array_fill(0, $m, false));\n            $visited[$i][$j] = true;\n         \
    \   $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n           \
    \ $min_path = dfs($grid, $i, $j, $k - 1, $visited, $path, $sum, $min_path, $min_sum);\n\
    \        }\n    }\n    return $min_path;\n}", "    $n = count($grid);\n    $m\
    \ = count($grid[0]);\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            $visited =\
    \ array_fill(0, $n, array_fill(0, $m, false));\n            $visited[$i][$j] =\
    \ true;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            if (findPath($grid, $i, $j, $k - 1, $path, $pathSum, $visited, $minPath,\
    \ $minPathSum)) {\n                return $minPath;\n            }\n        }\n\
    \    }\n    return $minPath;\n}", "    // Your code here\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $pathSum = 0;\n            $visited[$i][$j] = true;\n\
    \            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            dfs($grid, $visited, $i, $j, $k - 1, $path, $pathSum, $minPath, $minPathSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    // Write your code here\n    // To print results to the standard output\
    \ you can use print\n    // Example: print \"Hello world!\";\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
