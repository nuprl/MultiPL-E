name: HumanEval_77_iscube
language: php
prompt: "<?php\n// Write a function that takes an integer a and returns true \n//\
  \ if this ingeger is a cube of some integer number.\n// Note: you may assume the\
  \ input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
  // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
  // true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n"
tests: "function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729)\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    if ($a == 0) {\n        return true;\n    }\n    if ($a < 0) {\n\
    \        $a = -$a;\n    }\n    $i = 1;\n    while ($i * $i * $i <= $a) {\n   \
    \     if ($i * $i * $i == $a) {\n            return true;\n        }\n       \
    \ $i++;\n    }\n    return false;\n}\n", "\t$b = sqrt($a);\n\tif ($b == round($b))\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1) .\
    \ \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";", "    if\
    \ ($a < 0) {\n        $a = -$a;\n    }\n    if ($a == 0) {\n        return true;\n\
    \    }\n    $i = 0;\n    while ($i * $i * $i < $a) {\n        $i++;\n    }\n \
    \   if ($i * $i * $i == $a) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n", "    if ($a < 0) {\n        $a = -$a;\n    }\n    if ($a\
    \ == 0) {\n        return true;\n    }\n    $i = 1;\n    while ($i * $i * $i <\
    \ $a) {\n        $i++;\n    }\n    if ($i * $i * $i == $a) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n", "    if ($a < 0) {\n      \
    \  $a = -$a;\n    }\n    if ($a == 0) {\n        return true;\n    }\n    $i =\
    \ 1;\n    while ($i * $i * $i < $a) {\n        $i++;\n    }\n    if ($i * $i *\
    \ $i == $a) {\n        return true;\n    } else {\n        return false;\n   \
    \ }\n}\n", "\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif ($a < 0) {\n\t\t$a =\
    \ -$a;\n\t}\n\t$i = 1;\n\twhile ($i * $i * $i < $a) {\n\t\t$i++;\n\t}\n\tif ($i\
    \ * $i * $i == $a) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n", "\t$b = sqrt($a);\n\
    \tif ($b == floor($b)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\necho iscube(1);\necho \"\\n\";\necho iscube(2);\necho \"\\n\";\necho iscube(-1);\n\
    echo \"\\n\";\necho iscube(64);\necho \"\\n\";\necho iscube(0);\necho \"\\n\"\
    ;\necho iscube(180);\necho \"\\n\";", "\t$b = sqrt($a);\n\t$c = $b * $b * $b;\n\
    \tif ($c == $a) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n\
    echo iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\"\
    ;\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\
    \\n\";\n", "\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif ($a < 0) {\n\t\t$a =\
    \ -$a;\n\t}\n\t$i = 1;\n\twhile ($i * $i * $i < $a) {\n\t\t$i++;\n\t}\n\tif ($i\
    \ * $i * $i == $a) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n", "    // Write\
    \ your code here\n    if ($a == 0) {\n        return true;\n    }\n    if ($a\
    \ < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i * $i * $i < $a)\
    \ {\n        $i++;\n    }\n    if ($i * $i * $i == $a) {\n        return true;\n\
    \    }\n    return false;\n}\n", "    if ($a == 0) {\n        return true;\n \
    \   }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i\
    \ * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\n", "    if ($a == 0) {\n\
    \        return true;\n    }\n    if ($a < 0) {\n        $a = -$a;\n    }\n  \
    \  $b = 1;\n    while ($b * $b * $b < $a) {\n        $b++;\n    }\n    if ($b\
    \ * $b * $b == $a) {\n        return true;\n    }\n    return false;\n}\n", " \
    \   return $a == pow(round(pow($a, 1 / 3)), 3);\n}\n", "    if ($a == 0) {\n \
    \       return true;\n    }\n    if ($a < 0) {\n        $a = -$a;\n    }\n   \
    \ $i = 1;\n    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n\
    \            return true;\n        }\n        $i++;\n    }\n    return false;\n\
    }\n", "    return $a == pow(round(pow($a, 1/3)), 3);\n}\n", "    $cube = round(pow($a,\
    \ 1/3));\n    return $cube * $cube * $cube == $a;\n}\n", "\t$cube = pow($a, 1/3);\n\
    \tif (is_int($cube)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n\
    }\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\
    \\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";", "    if ($a < 0) {\n        $a = -$a;\n    }\n    if ($a == 0)\
    \ {\n        return true;\n    }\n    $i = 1;\n    while ($i * $i * $i < $a) {\n\
    \        $i++;\n    }\n    if ($i * $i * $i == $a) {\n        return true;\n \
    \   } else {\n        return false;\n    }\n}\n", "    if ($a == 0) {\n      \
    \  return true;\n    }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i =\
    \ 1;\n    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n  \
    \          return true;\n        }\n        $i++;\n    }\n    return false;\n\
    }\n", "    return $a == pow(round(pow($a, 1/3)), 3);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
