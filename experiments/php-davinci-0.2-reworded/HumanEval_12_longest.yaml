name: HumanEval_12_longest
language: php
prompt: "<?php\n// Out of array of strings, return the longest one. Return the first\
  \ one in case of multiple\n// strings of the same length. Return null in case the\
  \ input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
  a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n//\
  \ \"ccc\"\nfunction longest($strings) {\n"
tests: "function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"\
  zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    if (count($strings) == 0) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    if (count($strings) == 0) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (count($strings) == 0)\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    if\
    \ (count($strings) == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    if (count($strings) == 0) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (count($strings) == 0)\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $str) {\n        if ($longest === null ||\
    \ strlen($str) > strlen($longest)) {\n            $longest = $str;\n        }\n\
    \    }\n    return $longest;\n}\n", "    if (count($strings) == 0) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n", "    if (count($strings)\
    \ == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "  $longest = null;\n  foreach\
    \ ($strings as $string) {\n    if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (count($strings) == 0)\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (count($strings) == 0)\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if (count($strings) == 0) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    // TODO: implement this function\n\
    }\n", "  $longest = null;\n  foreach ($strings as $string) {\n    if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n      $longest = $string;\n\
    \    }\n  }\n  return $longest;\n}\n", "    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    if (count($strings) == 0) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    if (count($strings) == 0) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (count($strings) == 0)\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    for ($i = 1;\
    \ $i < count($strings); $i++) {\n        if (strlen($strings[$i]) > strlen($longest))\
    \ {\n            $longest = $strings[$i];\n        }\n    }\n    return $longest;\n\
    }\n", "    if (count($strings) == 0) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n \
    \       return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if (count($strings) == 0) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if (count($strings) == 0) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if (count($strings) == 0) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n \
    \       return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (count($strings) == 0)\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n \
    \       return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if (count($strings) == 0) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "  $longest = null;\n  foreach ($strings as $string)\
    \ {\n    if ($longest === null || strlen($string) > strlen($longest)) {\n    \
    \  $longest = $string;\n    }\n  }\n  return $longest;\n}\n", "    $longest =\
    \ null;\n    foreach ($strings as $string) {\n        if ($longest === null ||\
    \ strlen($string) > strlen($longest)) {\n            $longest = $string;\n   \
    \     }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    if (count($strings) == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n \
    \       return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    if\
    \ (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    if (count($strings) == 0) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n \
    \       return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if(count($strings) == 0) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach($strings as $string) {\n    \
    \    if(strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (count($strings) == 0)\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    if\
    \ (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "  $longest = null;\n  foreach\
    \ ($strings as $string) {\n    if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n", "    //\
    \ TODO: implement this function\n}\n", "    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    if (count($strings) == 0) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n \
    \       return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "\t$longest = null;\n\tforeach\
    \ ($strings as $string) {\n\t\tif ($longest === null || strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n", "    if\
    \ (count($strings) == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    if (count($strings) == 0) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "\tif (count($strings) == 0) {\n\t\treturn null;\n\
    \t}\n\t$longest = $strings[0];\n\tforeach ($strings as $string) {\n\t\tif (strlen($string)\
    \ > strlen($longest)) {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n\
    }\n", "    if (count($strings) == 0) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    // TODO\n}\n", "    if (empty($strings)) {\n\
    \        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    if\
    \ (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (count($strings) == 0)\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (count($strings) == 0)\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    if\
    \ (count($strings) == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    if (count($strings) == 0) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "  $longest = null;\n  foreach ($strings as $string) {\n    if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n      $longest = $string;\n    }\n\
    \  }\n  return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if (is_null($longest) || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "  if (count($strings) == 0) {\n    return null;\n  }\n  $longest = $strings[0];\n\
    \  foreach ($strings as $string) {\n    if (strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n", "  // TODO:\
    \ implement this function\n}\n", "    if (count($strings) == 0) {\n        return\
    \ null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n", "    if (count($strings)\
    \ == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "  $longest = null;\n  foreach ($strings as $string) {\n    if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n      $longest = $string;\n    }\n\
    \  }\n  return $longest;\n}\n", "    $longest = null;\n    foreach ($strings as\
    \ $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (count($strings) == 0)\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "  if (empty($strings))\
    \ {\n    return null;\n  }\n  $longest = $strings[0];\n  foreach ($strings as\
    \ $string) {\n    if (strlen($string) > strlen($longest)) {\n      $longest =\
    \ $string;\n    }\n  }\n  return $longest;\n}\n", "    if (count($strings) ==\
    \ 0) {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "\tif (empty($strings)) {\n\t\t\
    return null;\n\t}\n\t$longest = $strings[0];\n\tforeach ($strings as $string)\
    \ {\n\t\tif (strlen($string) > strlen($longest)) {\n\t\t\t$longest = $string;\n\
    \t\t}\n\t}\n\treturn $longest;\n}\n", "\t$longest = null;\n\tforeach ($strings\
    \ as $string) {\n\t\tif ($longest === null || strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n", "  if (count($strings)\
    \ == 0) {\n    return null;\n  }\n  $longest = $strings[0];\n  foreach ($strings\
    \ as $string) {\n    if (strlen($string) > strlen($longest)) {\n      $longest\
    \ = $string;\n    }\n  }\n  return $longest;\n}\n", "    $longest = null;\n  \
    \  foreach ($strings as $string) {\n        if ($longest === null || strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (count($strings) == 0)\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    if\
    \ (count($strings) == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    if (count($strings) == 0) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    if (count($strings) == 0) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if (count($strings) == 0) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if (is_null($longest) || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if (count($strings) == 0) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (count($strings) == 0)\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if (strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    if (count($strings) == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "\tif (count($strings) == 0) {\n\t\treturn null;\n\t}\n\t$longest = $strings[0];\n\
    \tforeach ($strings as $string) {\n\t\tif (strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n", "    if\
    \ (count($strings) == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (count($strings) == 0)\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    if\
    \ (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (count($strings) == 0)\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    if\
    \ (count($strings) == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "  if (empty($strings)) {\n    return null;\n  }\n\n  $longest = $strings[0];\n\
    \  foreach ($strings as $string) {\n    if (strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n\n  return $longest;\n}\n", "    if\
    \ (count($strings) == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "\t$longest = null;\n\tforeach\
    \ ($strings as $string) {\n\t\tif ($longest === null || strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n", "\tif (count($strings)\
    \ == 0) {\n\t\treturn null;\n\t}\n\t$longest = $strings[0];\n\tforeach ($strings\
    \ as $string) {\n\t\tif (strlen($string) > strlen($longest)) {\n\t\t\t$longest\
    \ = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n", "    if (count($strings) ==\
    \ 0) {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "\tif (count($strings) == 0) {\n\t\treturn null;\n\t}\n\t$longest = $strings[0];\n\
    \tforeach ($strings as $string) {\n\t\tif (strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (count($strings) == 0)\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    if\
    \ (count($strings) == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if (count($strings) == 0) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (count($strings) == 0)\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "  $longest = null;\n  foreach\
    \ ($strings as $string) {\n    if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n \
    \       return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    if\
    \ (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    if (count($strings) == 0) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "  $longest = null;\n  foreach ($strings as $string)\
    \ {\n    if ($longest === null || strlen($string) > strlen($longest)) {\n    \
    \  $longest = $string;\n    }\n  }\n  return $longest;\n}\n", "\t$longest = null;\n\
    \tforeach ($strings as $string) {\n\t\tif ($longest === null || strlen($string)\
    \ > strlen($longest)) {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    if (count($strings) == 0) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    for ($i = 1; $i < count($strings); $i++)\
    \ {\n        if (strlen($strings[$i]) > strlen($longest)) {\n            $longest\
    \ = $strings[$i];\n        }\n    }\n    return $longest;\n}\n", "    if (count($strings)\
    \ == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    if (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    if (count($strings) == 0) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    if (count($strings) == 0) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    if (count($strings) == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if (count($strings) == 0) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if (count($strings) == 0) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n \
    \       return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    if\
    \ (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "  if (empty($strings)) {\n   \
    \ return null;\n  }\n  $longest = $strings[0];\n  foreach ($strings as $string)\
    \ {\n    if (strlen($string) > strlen($longest)) {\n      $longest = $string;\n\
    \    }\n  }\n  return $longest;\n}\n", "    if (count($strings) == 0) {\n    \
    \    return null;\n    }\n\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n\n    return $longest;\n}\n", "   \
    \ $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    // TODO\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (count($strings) == 0)\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "  $longest = null;\n  foreach\
    \ ($strings as $string) {\n    if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (count($strings) == 0)\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
