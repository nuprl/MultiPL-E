name: HumanEval_6_parse_nested_parens
language: php
prompt: "<?php\n// Input to this function is a string represented multiple groups\
  \ for nested parentheses separated by spaces.\n// For each of the group, output\
  \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels\
  \ of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((()))\
  \ () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
  \ {\n"
tests: "function candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
  ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $max_paren_count = 0;\n\
    \    $paren_count_array = array();\n    foreach ($paren_array as $paren) {\n \
    \       if ($paren == \"(\") {\n            $paren_count++;\n            if ($paren_count\
    \ > $max_paren_count) {\n                $max_paren_count = $paren_count;\n  \
    \          }\n        } elseif ($paren == \")\") {\n            $paren_count_array[]\
    \ = $paren_count;\n            $paren_count--;\n        }\n    }\n    return $paren_count_array;\n\
    }\n\n$paren_string = \"(()()) ((())) () ((())()())\";\n$paren_count_array = parse_nested_parens($paren_string);\n\
    print_r($paren_count_array);", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $max_depth = 0;\n    $depth_array = array();\n    foreach ($paren_array as\
    \ $paren_group) {\n        $depth = 0;\n        $max_depth = 0;\n        for ($i\
    \ = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i] ==\
    \ \"(\") {\n                $depth++;\n                if ($depth > $max_depth)\
    \ {\n                    $max_depth = $depth;\n                }\n           \
    \ } else {\n                $depth--;\n            }\n        }\n        $depth_array[]\
    \ = $max_depth;\n    }\n    return $depth_array;\n}\n", "    $paren_array = explode(\"\
    \ \", $paren_string);\n    $max_nesting = array();\n    foreach ($paren_array\
    \ as $paren_group) {\n        $max_nesting[] = get_max_nesting($paren_group);\n\
    \    }\n    return $max_nesting;\n}\n", "    $paren_string = str_replace(\" \"\
    , \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"1\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    1\", \"()\", $paren_string);\n    $paren_string = str_replace(\"()\", \"1\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    1\", \"()\", $paren_string);\n    $paren_string = str_replace(\"()\", \"1\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    1\", \"()\", $paren_string);\n    $paren_string = str_replace(\"()\", \"1\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    1\", \"()\", $paren_string);\n    $paren_string = str_replace(\"()\", \"1\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    1\", \"()\", $paren_string);\n    $paren_string = str_replace(\"()\", \"1\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    1\", \"()\", $paren_string);\n", "  $paren_array = explode(\" \", $paren_string);\n\
    \  $result = array();\n  foreach ($paren_array as $paren) {\n    $result[] = count_nested_parens($paren);\n\
    \  }\n  return $result;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $paren_level = 0;\n    $paren_levels = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $paren_stack[] = $paren;\n\
    \            $paren_level++;\n        } elseif ($paren == ')') {\n           \
    \ array_pop($paren_stack);\n            $paren_levels[] = $paren_level;\n    \
    \        $paren_level--;\n        }\n    }\n    return $paren_levels;\n}\n", " \
    \   $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_arr = explode(' ', $paren_string);\n    $max_nesting\
    \ = array();\n    foreach ($paren_arr as $paren) {\n        $max_nesting[] = max_nesting($paren);\n\
    \    }\n    return $max_nesting;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_array = array_filter($paren_array);\n    $paren_array = array_values($paren_array);\n\
    \    $paren_array_count = count($paren_array);\n    $paren_array_count_half =\
    \ $paren_array_count / 2;\n    $paren_array_count_half = floor($paren_array_count_half);\n\
    \    $paren_array_count_half_plus_one = $paren_array_count_half + 1;\n    $paren_array_count_half_plus_one\
    \ = floor($paren_array_count_half_plus_one);\n    $paren_array_count_half_minus_one\
    \ = $paren_array_count_half - 1;\n    $paren_array_count_half_minus_one = floor($paren_array_count_half_minus_one);\n\
    \    $paren_array_count_half_minus_two = $paren_array_count_half - 2;\n    $paren_array_count_half_minus_two\
    \ = floor($paren_array_count_half_minus_two);\n    $paren_array_count_half_minus_three\
    \ = $paren_array_count_half - 3;\n    $paren_array_count_half_minus_three = floor($paren_array_count_half_minus_three);\n\
    \    $paren_array_count_half_minus_four = $paren_array_count_half - 4;\n    $",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $", "    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $count = 0;\n        $max_count\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == \"(\") {\n                $count++;\n                if\
    \ ($count > $max_count) {\n                    $max_count = $count;\n        \
    \        }\n            } else {\n                $count--;\n            }\n \
    \       }\n        $result[] = $max_count;\n    }\n    return $result;\n}\n",
  "    $paren_array = explode(\" \", $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren) {\n        $nesting = 0;\n        $max_nesting[]\
    \ = 0;\n        for ($i = 0; $i < strlen($paren); $i++) {\n            if ($paren[$i]\
    \ == \"(\") {\n                $nesting++;\n                if ($nesting > $max_nesting[count($max_nesting)\
    \ - 1]) {\n                    $max_nesting[count($max_nesting) - 1] = $nesting;\n\
    \                }\n            } else if ($paren[$i] == \")\") {\n          \
    \      $nesting--;\n            }\n        }\n    }\n    return $max_nesting;\n\
    }\n", "    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $result[] = parse_nested_parens_helper($paren_group);\n\
    \    }\n    return $result;\n}\n", "    $paren_string = str_replace(\" \", \"\"\
    , $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(\" \", $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    return $paren_string;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $max_depth = 0;\n    $paren_depth = array();\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $max_depth = max($max_depth, count($paren_stack));\n \
    \       } elseif ($paren == ')') {\n            array_pop($paren_stack);\n   \
    \     }\n        array_push($paren_depth, $max_depth);\n    }\n    return $paren_depth;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_", "  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  $paren_array = str_split($paren_string);\n  $paren_stack\
    \ = array();\n  $max_depth = 0;\n  $current_depth = 0;\n  $paren_depth_array =\
    \ array();\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n \
    \     $current_depth++;\n      if ($current_depth > $max_depth) {\n        $max_depth\
    \ = $current_depth;\n      }\n      array_push($paren_stack, $paren);\n    }\n\
    \    elseif ($paren == ')') {\n      array_pop($paren_stack);\n      $current_depth--;\n\
    \      if (empty($paren_stack)) {\n        array_push($paren_depth_array, $max_depth);\n\
    \        $max_depth = 0;\n        $current_depth = 0;\n      }\n    }\n  }\n \
    \ return $paren_depth_array;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $max_depth = array();\n    foreach ($paren_array as $paren) {\n        $depth\
    \ = 0;\n        $max_depth_in_group = 0;\n        for ($i = 0; $i < strlen($paren);\
    \ $i++) {\n            if ($paren[$i] == \"(\") {\n                $depth++;\n\
    \            } else {\n                $depth--;\n            }\n            if\
    \ ($depth > $max_depth_in_group) {\n                $max_depth_in_group = $depth;\n\
    \            }\n        }\n        $max_depth[] = $max_depth_in_group;\n    }\n\
    \    return $max_depth;\n}\n", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $paren_depth = array();\n    $paren_count = 0;\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == \"(\") {\n            array_push($paren_stack,\
    \ $paren);\n            $paren_count++;\n        } else {\n            array_pop($paren_stack);\n\
    \            $paren_depth[] = $paren_count;\n            $paren_count--;\n   \
    \     }\n    }\n    return $paren_depth;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_count\
    \ = 0;\n    $paren_max = 0;\n    $paren_max_array = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $paren_count++;\n  \
    \          if ($paren_count > $paren_max) {\n                $paren_max = $paren_count;\n\
    \            }\n        } elseif ($paren == ')') {\n            $paren_count--;\n\
    \            if ($paren_count == 0) {\n                $paren_max_array[] = $paren_max;\n\
    \                $paren_max = 0;\n            }\n        }\n    }\n    return\
    \ $paren_max_array;\n}\n", "  $paren_array = explode(\" \", $paren_string);\n\
    \  $paren_count_array = array();\n  foreach ($paren_array as $paren_group) {\n\
    \    $paren_count_array[] = count_nested_parens($paren_group);\n  }\n  return\
    \ $paren_count_array;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_count = 0;\n    $max_count\
    \ = 0;\n    $max_count_array = array();\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == '(') {\n            $paren_count++;\n        } elseif\
    \ ($paren == ')') {\n            $paren_count--;\n        }\n        if ($paren_count\
    \ == 0) {\n            $max_count_array[] = $max_count;\n            $max_count\
    \ = 0;\n        } elseif ($paren_count > $max_count) {\n            $max_count\
    \ = $paren_count;\n        }\n    }\n    return $max_count_array;\n}\n", "   \
    \ $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_", "    $paren_string = trim($paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+\\(/', '(', $paren_string);\n    $paren_string = preg_replace('/\\)\\s+/', ')',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\(\\s+/', '(', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+\\(/', '(', $paren_string);\n    $paren_string = preg_replace('/\\)\\s+/', ')',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\(\\s+/', '(', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+\\(/', '(', $paren_string);\n    $paren_string = preg_replace('/\\)\\s+/', ')',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\(\\s+/', '(', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+\\(/', '(', $paren_string);\n    $paren_string = preg_replace('/\\)\\s+/', ')',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\(\\s+/', '(', $paren_",
  "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(\" \", $paren_string);\n\
    \    return $paren_string;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(\" \", $paren_string);\n    $paren_count = array();\n\
    \    foreach ($paren_array as $paren) {\n        $paren_count[] = count_parens($paren);\n\
    \    }\n    return $paren_count;\n}\n", "    $paren_string = str_replace(\" \"\
    , \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"0\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"1\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"0\", $paren_string);\n    $paren_string = str_replace(\"\
    0\", \")\", $paren_string);\n    $paren_string = str_replace(\"1\", \"(\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(\" \", $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $paren_string = implode(\"\
    \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(\" \", $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $paren_string = implode(\"\
    \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(\" \", $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_array = str_split($paren_string);\n  \
    \  $paren_stack = array();\n    $max_depth = 0;\n    $depth = 0;\n    $max_depth_array\
    \ = array();\n    foreach ($paren_array as $paren) {\n        if ($paren == \"\
    (\") {\n            $depth++;\n            if ($depth > $max_depth) {\n      \
    \          $max_depth = $depth;\n            }\n        } else if ($paren == \"\
    )\") {\n            $max_depth_array[] = $max_depth;\n            $max_depth =\
    \ 0;\n            $depth--;\n        }\n    }\n    return $max_depth_array;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $paren_count =\
    \ array();\n    $paren_count_index = 0;\n    $paren_count_max = 0;\n    $paren_count_max_index\
    \ = 0;\n    $paren_count_max_index_array = array();\n    $paren_count_max_index_array_index\
    \ = 0;\n    $paren_count_max_index_array_index_max = 0;\n    $paren_count_max_index_array_index_max_index\
    \ = 0;\n    $paren_count_max_index_array_index_max_index_array = array();\n  \
    \  $paren_count_max_index_array_index_max_index_array_index = 0;\n    $paren_count_max_index_array_index_max_index_array_index_max\
    \ = 0;\n    $paren_count_max_index_array_index_max_index_array_index_max_index\
    \ = 0;\n    $paren_count_max_index_array_index_max_index_array_index_max_index_array\
    \ = array();\n    $paren_count_max_index_array_index_max_index_array_index_max_index_array_index\
    \ = 0;\n    $paren_count_max_index_array_index_max_index_array_index_max_index_array_index_max\
    \ = 0;\n    $paren_count_max_index_array_index_max_index_array_index_max_index_array_index_max_index\
    \ = 0;\n    $paren_count_max_index_array_index_max_index_array_index_max_index_array_index_max_index_array\
    \ = array();\n    $paren_count_max_index_array_index_max_index_array_index_max_index_array_index_max_index_array_index\
    \ = 0;\n    $paren_count_max_index_array_index_max_index_array_index_max_index_array_index_max_",
  "    $paren_string = trim($paren_string);\n    $paren_array = explode(\" \", $paren_string);\n\
    \    $max_nesting = 0;\n    $max_nesting_array = array();\n    foreach ($paren_array\
    \ as $paren_group) {\n        $paren_group = trim($paren_group);\n        $nesting\
    \ = 0;\n        $nesting_array = array();\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == \"(\") {\n                $nesting++;\n\
    \                $nesting_array[] = $nesting;\n            } else if ($paren_group[$i]\
    \ == \")\") {\n                $nesting_array[] = $nesting;\n                $nesting--;\n\
    \            }\n        }\n        $max_nesting_array[] = max($nesting_array);\n\
    \    }\n    return $max_nesting_array;\n}\n\n$paren_string = \"(()()) ((())) ()\
    \ ((())()())\";\n$max_nesting_array = parse_nested_parens($paren_string);\nprint_r($max_nesting_array);",
  "    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n   ", "    $paren_groups = explode(' ', $paren_string);\n \
    \   $max_nesting = array();\n    foreach ($paren_groups as $paren_group) {\n \
    \       $max_nesting[] = get_max_nesting($paren_group);\n    }\n    return $max_nesting;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $max_count = 0;\n  \
    \  $max_count_array = array();\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == '(') {\n            $paren_count++;\n        } else {\n    \
    \        $paren_count--;\n        }\n        if ($paren_count > $max_count) {\n\
    \            $max_count = $paren_count;\n        }\n        if ($paren_count ==\
    \ 0) {\n            $max_count_array[] = $max_count;\n            $max_count =\
    \ 0;\n        }\n    }\n    return $max_count_array;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = array();\n    $max_depth = 0;\n    $depth = 0;\n    $result\
    \ = array();\n    foreach ($paren_array as $paren) {\n        if ($paren == '(')\
    \ {\n            $depth++;\n            if ($depth > $max_depth) {\n         \
    \       $max_depth = $depth;\n            }\n            array_push($paren_stack,\
    \ $paren);\n        } else {\n            if (empty($paren_stack)) {\n       \
    \         return false;\n            }\n            array_pop($paren_stack);\n\
    \            $depth--;\n            if ($depth == 0) {\n                array_push($result,\
    \ $max_depth);\n                $max_depth = 0;\n            }\n        }\n  \
    \  }\n    return $result;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $max_depth = 0;\n    $current_depth = 0;\n    $paren_depth_array = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      array_push($paren_stack, $paren);\n            $current_depth++;\n    \
    \        if ($current_depth > $max_depth) {\n                $max_depth = $current_depth;\n\
    \            }\n        } else {\n            array_pop($paren_stack);\n     \
    \       $current_depth--;\n            if (count($paren_stack) == 0) {\n     \
    \           array_push($paren_depth_array, $max_depth);\n                $max_depth\
    \ = 0;\n                $current_depth = 0;\n            }\n        }\n    }\n\
    \    return $paren_depth_array;\n}\n", "    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $max_nesting = array();\n    foreach ($paren_array\
    \ as $paren_group) {\n        $max_nesting[] = max_nesting($paren_group);\n  \
    \  }\n    return $max_nesting;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"((\", \"(\", $paren_string);\n    $paren_string\
    \ = str_replace(\"))\", \")\", $paren_string);\n    $paren_string = str_replace(\"\
    ))\", \")\", $paren_string);\n    $paren_string = str_replace(\"))\", \")\", $paren_string);\n\
    \    $paren_string = str_replace(\"))\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"))\", \")\", $paren_string);\n    $paren_string = str_replace(\"\
    ))\", \")\", $paren_string);\n    $paren_string = str_replace(\"))\", \")\", $paren_string);\n\
    \    $paren_string = str_replace(\"))\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"))\", \")\", $paren_string);\n    $paren_string = str_replace(\"\
    ))\", \")\", $paren_string);\n    $paren_string = str_replace(\"))\", \")\", $paren_string);\n\
    \    $paren_string = str_replace(\"))\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"))\", \")\", $paren_string);\n    $paren_string = str_replace(\"\
    ))\", \")\", $paren_string);\n    $paren_string = str_replace(\"))\", \")\", $paren_string);\n\
    \    $paren_string = str_replace(\"))\", \")\", $paren_string);\n    $paren_string\
    \ = str_replace(\"))\", \")\", $paren_string);\n    $paren_string = str_replace(\"\
    ))\", \")\", $paren_string);\n    $paren_string = str_replace(\"))\", \")\", $paren_string);\n\
    \    $paren_string = str_replace(\"))\", \")\", $paren_string);", "    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = array();\n    $max_nesting = 0;\n    $nesting_array = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == \"(\") {\n    \
    \        array_push($paren_stack, $paren);\n        } else {\n            array_pop($paren_stack);\n\
    \            $max_nesting = max($max_nesting, count($paren_stack));\n        }\n\
    \        if ($paren == \")\") {\n            array_push($nesting_array, $max_nesting);\n\
    \        }\n    }\n    return $nesting_array;\n}\n", "  $paren_string = trim($paren_string);\n\
    \  $paren_groups = explode(' ', $paren_string);\n  $max_nesting = 0;\n  $nesting_levels\
    \ = array();\n  foreach ($paren_groups as $paren_group) {\n    $nesting = 0;\n\
    \    $max_nesting = 0;\n    $paren_group_length = strlen($paren_group);\n    for\
    \ ($i = 0; $i < $paren_group_length; $i++) {\n      if ($paren_group[$i] == '(')\
    \ {\n        $nesting++;\n        if ($nesting > $max_nesting) {\n          $max_nesting\
    \ = $nesting;\n        }\n      } elseif ($paren_group[$i] == ')') {\n       \
    \ $nesting--;\n      }\n    }\n    $nesting_levels[] = $max_nesting;\n  }\n  return\
    \ $nesting_levels;\n}\n", "    $paren_groups = explode(' ', $paren_string);\n\
    \    $max_nesting = array();\n    foreach ($paren_groups as $group) {\n      \
    \  $max_nesting[] = get_max_nesting($group);\n    }\n    return $max_nesting;\n\
    }\n", "    $paren_groups = explode(' ', $paren_string);\n    $result = array();\n\
    \    foreach ($paren_groups as $group) {\n        $result[] = parse_nested_parens_helper($group);\n\
    \    }\n    return $result;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max\
    \ = 0;\n    $paren_max_array = array();\n    foreach ($paren_array as $char) {\n\
    \        if ($char == '(') {\n            $paren_count++;\n            if ($paren_count\
    \ > $paren_max) {\n                $paren_max = $paren_count;\n            }\n\
    \        } elseif ($char == ')') {\n            $paren_count--;\n            if\
    \ ($paren_count == 0) {\n                $paren_max_array[] = $paren_max;\n  \
    \              $paren_max = 0;\n            }\n        }\n    }\n    return $paren_max_array;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $depth = 0;\n    $max_depth_array = array();\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $depth++;\n            if ($depth > $max_depth) {\n  \
    \              $max_depth = $depth;\n            }\n        } else {\n       \
    \     array_pop($paren_stack);\n            $depth--;\n            array_push($max_depth_array,\
    \ $max_depth);\n            $max_depth = 0;\n        }\n    }\n    return $max_depth_array;\n\
    }\n", "    $paren_array = explode(\" \", $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $nesting = 0;\n       \
    \ $max_nesting_level = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++)\
    \ {\n            if ($paren_group[$i] == \"(\") {\n                $nesting++;\n\
    \            } else if ($paren_group[$i] == \")\") {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting_level) {\n           \
    \     $max_nesting_level = $nesting;\n            }\n        }\n        $max_nesting[]\
    \ = $max_nesting_level;\n    }\n    return $max_nesting;\n}\n", "    $paren_groups\
    \ = explode(' ', $paren_string);\n    $max_nesting = array();\n    foreach ($paren_groups\
    \ as $group) {\n        $max_nesting[] = get_max_nesting($group);\n    }\n   \
    \ return $max_nesting;\n}\n", "    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('trim', $paren_string);\n    $paren_string =", " \
    \ $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_", "    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren) {\n        $result[]\
    \ = parse_nested_paren($paren);\n    }\n    return $result;\n}\n", "    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = array();\n    $paren_count = array();\n    $paren_count_index\
    \ = 0;\n    $paren_count_max = 0;\n    $paren_count_max_index = 0;\n    $paren_count_max_index_array\
    \ = array();\n    $paren_count_max_index_array_index = 0;\n    $paren_count_max_index_array_index_max\
    \ = 0;\n    $paren_count_max_index_array_index_max_index = 0;\n    $paren_count_max_index_array_index_max_index_array\
    \ = array();\n    $paren_count_max_index_array_index_max_index_array_index = 0;\n\
    \    $paren_count_max_index_array_index_max_index_array_index_max = 0;\n    $paren_count_max_index_array_index_max_index_array_index_max_index\
    \ = 0;\n    $paren_count_max_index_array_index_max_index_array_index_max_index_array\
    \ = array();\n    $paren_count_max_index_array_index_max_index_array_index_max_index_array_index\
    \ = 0;\n    $paren_count_max_index_array_index_max_index_array_index_max_index_array_index_max\
    \ = 0;\n    $paren_count_max_index_array_index_max_index_array_index_max_index_array_index_max_index\
    \ = 0;\n    $paren_count_max_index_array_index_max_index_array_index_max_index_array_index_max_index_array\
    \ = array();\n    $paren_count_max_index_array_index_max_index_array_index_max_index_array_index_max_index_array_index\
    \ = 0;\n    $paren_count_max_index_array_index_max_index_array_index_max_index_array_index_max_",
  "    $paren_array = explode(\" \", $paren_string);\n    $paren_count = array();\n\
    \    foreach ($paren_array as $paren) {\n        $paren_count[] = parse_parens($paren);\n\
    \    }\n    return $paren_count;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $max_nesting = array();\n    foreach ($paren_array as $paren) {\n       \
    \ $max_nesting[] = parse_nested_paren($paren);\n    }\n    return $max_nesting;\n\
    }\n", "  $paren_array = explode(\" \", $paren_string);\n  $max_depth = array();\n\
    \  foreach ($paren_array as $paren_group) {\n    $depth = 0;\n    $max_depth_in_group\
    \ = 0;\n    for ($i = 0; $i < strlen($paren_group); $i++) {\n      if ($paren_group[$i]\
    \ == \"(\") {\n        $depth++;\n      } else if ($paren_group[$i] == \")\")\
    \ {\n        $depth--;\n      }\n      if ($depth > $max_depth_in_group) {\n \
    \       $max_depth_in_group = $depth;\n      }\n    }\n    $max_depth[] = $max_depth_in_group;\n\
    \  }\n  return $max_depth;\n}\n", "    $paren_string = str_replace(\" \", \"\"\
    , $paren_string);\n    $paren_array = str_split($paren_string);\n    $stack =\
    \ array();\n    $max_depth = 0;\n    $depth = 0;\n    $max_depth_array = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == \"(\") {\n    \
    \        array_push($stack, $paren);\n            $depth++;\n            if ($depth\
    \ > $max_depth) {\n                $max_depth = $depth;\n            }\n     \
    \   } elseif ($paren == \")\") {\n            array_pop($stack);\n           \
    \ $depth--;\n            array_push($max_depth_array, $max_depth);\n         \
    \   $max_depth = 0;\n        }\n    }\n    return $max_depth_array;\n}\n", " \
    \   $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups =\
    \ explode(')(', $paren_string);\n    $paren_groups = array_map(function($group)\
    \ {\n        return str_replace(array('(', ')'), '', $group);\n    }, $paren_groups);\n\
    \    $paren_groups = array_map(function($group) {\n        return strlen($group);\n\
    \    }, $paren_groups);\n    return $paren_groups;\n}\n", "    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $max_depth = 0;\n    $current_depth = 0;\n    $max_depth_array = array();\n\
    \    foreach ($paren_array as $char) {\n        if ($char == '(') {\n        \
    \    $current_depth++;\n            if ($current_depth > $max_depth) {\n     \
    \           $max_depth = $current_depth;\n            }\n        } elseif ($char\
    \ == ')') {\n            $current_depth--;\n            if ($current_depth ==\
    \ 0) {\n                $max_depth_array[] = $max_depth;\n                $max_depth\
    \ = 0;\n            }\n        }\n    }\n    return $max_depth_array;\n}\n", " \
    \   $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $max_nesting\
    \ = 0;\n    $current_nesting = 0;\n    $nesting_array = array();\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            $current_nesting++;\n\
    \            if ($current_nesting > $max_nesting) {\n                $max_nesting\
    \ = $current_nesting;\n            }\n        } elseif ($paren == ')') {\n   \
    \         $current_nesting--;\n            if ($current_nesting == 0) {\n    \
    \            $nesting_array[] = $max_nesting;\n                $max_nesting =\
    \ 0;\n            }\n        }\n    }\n    return $nesting_array;\n}\n", "   \
    \ $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \" ) \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(\" \", $paren_string);\n    $paren_string = array_values(array_filter($paren_string));\n\
    \    $paren_string = array_map(function($x) {\n        if ($x == \"(\") {\n  \
    \          return 1;\n        } else if ($x == \")\") {\n            return -1;\n\
    \        }\n    }, $paren_string);\n    $max_depth = 0;\n    $depth = 0;\n   \
    \ $paren_string = array_map(function($x) use (&$max_depth, &$depth) {\n      \
    \  $depth += $x;\n        if ($depth > $max_depth) {\n            $max_depth =\
    \ $depth;\n        }\n        return $depth;\n    }, $paren_string);\n    return\
    \ array_map(function($x) use ($max_depth) {\n        return $max_depth - $x;\n\
    \    }, $paren_string);\n}\n\n$test_cases = array(\n    array(\"(()()) ((()))\
    \ () ((())()())\", array(2, 3, 1, 3)),\n    array(\"(()()) ((())) () ((())()())\"\
    , array(2, 3, 1, 3)),\n    array(\"(()()) ((())) () ((())()())\", array(2, 3,\
    \ 1, 3)),\n    array(\"(()()) ((())) () ((())()())\", array(2, 3, 1, 3)),\n  \
    \  array(\"(()()) ((())) () ((())()())\", array(2, 3, 1, 3)),\n    array(\"(()())\
    \ ((())) () ((())()())\", array(2, 3, 1, 3)),\n    array(\"(()()) ((())) () ((())()())\"\
    , array(2, 3, 1, 3)),\n    array(\"(", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $max_nesting = array();\n    foreach ($paren_array as $paren) {\n       \
    \ $nesting = 0;\n        $max_nesting[] = 0;\n        for ($i = 0; $i < strlen($paren);\
    \ $i++) {\n            if ($paren[$i] == \"(\") {\n                $nesting++;\n\
    \                if ($nesting > $max_nesting[count($max_nesting) - 1]) {\n   \
    \                 $max_nesting[count($max_nesting) - 1] = $nesting;\n        \
    \        }\n            } else {\n                $nesting--;\n            }\n\
    \        }\n    }\n    return $max_nesting;\n}\n", "  $paren_string = trim($paren_string);\n\
    \  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\s/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    s\\)/', ')', $paren_string);\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_",
  "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $depth = 0;\n    $result = array();\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == \"(\") {\n            $depth++;\n            if ($depth\
    \ > $max_depth) {\n                $max_depth = $depth;\n            }\n     \
    \   } else if ($paren == \")\") {\n            $depth--;\n            if ($depth\
    \ == 0) {\n                array_push($result, $max_depth);\n                $max_depth\
    \ = 0;\n            }\n        }\n    }\n    return $result;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $", "    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_nested_paren($paren);\n\
    \    }\n    return $result;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n   ", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_", "    $paren_array = explode(\"\
    \ \", $paren_string);\n    $depth_array = array();\n    foreach ($paren_array\
    \ as $paren_group) {\n        $depth = 0;\n        $max_depth = 0;\n        for\
    \ ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == \"(\") {\n                $depth++;\n            } else {\n             \
    \   $depth--;\n            }\n            if ($depth > $max_depth) {\n       \
    \         $max_depth = $depth;\n            }\n        }\n        $depth_array[]\
    \ = $max_depth;\n    }\n    return $depth_array;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = array();\n    $max_level = 0;\n    $level = 0;\n    $max_level_array = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      array_push($paren_stack, $paren);\n            $level++;\n            if\
    \ ($level > $max_level) {\n                $max_level = $level;\n            }\n\
    \        } else {\n            array_pop($paren_stack);\n            $level--;\n\
    \            array_push($max_level_array, $max_level);\n            $max_level\
    \ = 0;\n        }\n    }\n    return $max_level_array;\n}\n", "    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"\", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n",
  "    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n   \
    \ foreach ($paren_array as $paren) {\n        $result[] = parse_paren($paren);\n\
    \    }\n    return $result;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $max_depth = 0;\n    $depth = 0;\n    $result = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $depth++;\n        \
    \    if ($depth > $max_depth) {\n                $max_depth = $depth;\n      \
    \      }\n            array_push($paren_stack, $paren);\n        } else {\n  \
    \          if ($depth == 0) {\n                $result[] = $max_depth;\n     \
    \           $max_depth = 0;\n            } else {\n                $depth--;\n\
    \                array_pop($paren_stack);\n            }\n        }\n    }\n \
    \   return $result;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n \
    \   $paren_string = array_map('strlen', $paren_string);\n    return $paren_string;\n\
    }\n", "    $paren_array = explode(\" \", $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $nesting = 0;\n       \
    \ $max_nesting_level = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++)\
    \ {\n            if ($paren_group[$i] == \"(\") {\n                $nesting++;\n\
    \            } elseif ($paren_group[$i] == \")\") {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting_level) {\n           \
    \     $max_nesting_level = $nesting;\n            }\n        }\n        $max_nesting[]\
    \ = $max_nesting_level;\n    }\n    return $max_nesting;\n}\n", "    $paren_array\
    \ = explode(\" \", $paren_string);\n    $max_nesting = array();\n    foreach ($paren_array\
    \ as $paren) {\n        $max_nesting[] = get_max_nesting($paren);\n    }\n   \
    \ return $max_nesting;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $max_nesting = array();\n    foreach ($paren_array as $paren_group) {\n \
    \       $max_nesting[] = max_nesting($paren_group);\n    }\n    return $max_nesting;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $current_depth = 0;\n    $paren_depth_array = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $paren_stack[] = $paren;\n\
    \            $current_depth++;\n            if ($current_depth > $max_depth) {\n\
    \                $max_depth = $current_depth;\n            }\n        } elseif\
    \ ($paren == ')') {\n            if (count($paren_stack) > 0) {\n            \
    \    array_pop($paren_stack);\n                $current_depth--;\n           \
    \ } else {\n                return false;\n            }\n        }\n    }\n \
    \   if (count($paren_stack) > 0) {\n        return false;\n    }\n    return $max_depth;\n\
    }\n\n$paren_string = \"(()()) ((())) () ((())()())\";\n$paren_depth_array = parse_nested_parens($paren_string);\n\
    print_r($paren_depth_array);", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren) {\n        $result[]\
    \ = parse_nested_paren($paren);\n    }\n    return $result;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $result = array();\n   \
    \ foreach ($paren_array as $paren) {\n        $result[] = strlen($paren);\n  \
    \  }\n    return $result;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    return $paren_string;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $max_depth = 0;\n    $max_depth_array = array();\n    foreach ($paren_array\
    \ as $paren_group) {\n        $depth = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == \"(\") {\n                $depth++;\n\
    \            } else {\n                $depth--;\n            }\n            if\
    \ ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n\
    \        }\n        $max_depth_array[] = $max_depth;\n    }\n    return $max_depth_array;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_array = array_filter($paren_array);\n    $paren_array = array_values($paren_array);\n\
    \    $paren_count = count($paren_array);\n    $paren_level = 0;\n    $paren_level_max\
    \ = 0;\n    $paren_level_array = array();\n    for ($i = 0; $i < $paren_count;\
    \ $i++) {\n        if ($paren_array[$i] == '(') {\n            $paren_level++;\n\
    \            if ($paren_level > $paren_level_max) {\n                $paren_level_max\
    \ = $paren_level;\n            }\n        } elseif ($paren_array[$i] == ')') {\n\
    \            $paren_level_array[] = $paren_level_max;\n            $paren_level_max\
    \ = 0;\n            $paren_level--;\n        }\n    }\n    return $paren_level_array;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $depth = 0;\n    $max_depth_array = array();\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $depth++;\n            if ($depth > $max_depth) {\n  \
    \              $max_depth = $depth;\n            }\n        } elseif ($paren ==\
    \ ')') {\n            array_pop($paren_stack);\n            $depth--;\n      \
    \      array_push($max_depth_array, $max_depth);\n            $max_depth = 0;\n\
    \        }\n    }\n    return $max_depth_array;\n}\n", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_array = str_split($paren_string);\n  \
    \  $paren_stack = array();\n    $paren_count = array();\n    $paren_count_index\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == \"(\") {\n\
    \            array_push($paren_stack, $paren);\n        } else {\n           \
    \ array_pop($paren_stack);\n            $paren_count[$paren_count_index] = count($paren_stack);\n\
    \            $paren_count_index++;\n        }\n    }\n    return $paren_count;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n   \
    \ return $paren_string;\n}\n", "    $paren_string = preg_replace('/\\s+/', ' ',\
    \ $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_groups\
    \ = explode(' ', $paren_string);\n    $paren_levels = array();\n    foreach ($paren_groups\
    \ as $group) {\n        $level = 0;\n        $max_level = 0;\n        for ($i\
    \ = 0; $i < strlen($group); $i++) {\n            if ($group[$i] == '(') {\n  \
    \              $level++;\n            } else if ($group[$i] == ')') {\n      \
    \          $level--;\n            }\n            if ($level > $max_level) {\n\
    \                $max_level = $level;\n            }\n        }\n        $paren_levels[]\
    \ = $max_level;\n    }\n    return $paren_levels;\n}\n", "    $paren_array = explode(\"\
    \ \", $paren_string);\n    $result = array();\n    foreach ($paren_array as $paren)\
    \ {\n        $result[] = parse_parens($paren);\n    }\n    return $result;\n}\n",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = array();\n    $max_depth = 0;\n    $depth = 0;\n    $result\
    \ = array();\n    foreach ($paren_array as $paren) {\n        if ($paren == '(')\
    \ {\n            $depth++;\n            if ($depth > $max_depth) {\n         \
    \       $max_depth = $depth;\n            }\n            array_push($paren_stack,\
    \ $paren);\n        } else {\n            if (count($paren_stack) == 0) {\n  \
    \              return false;\n            }\n            array_pop($paren_stack);\n\
    \            $depth--;\n            if ($depth == 0) {\n                array_push($result,\
    \ $max_depth);\n                $max_depth = 0;\n            }\n        }\n  \
    \  }\n    return $result;\n}\n", "    $paren_arr = explode(' ', $paren_string);\n\
    \    $result = array();\n    foreach ($paren_arr as $paren) {\n        $result[]\
    \ = parse_paren($paren);\n    }\n    return $result;\n}\n", "    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = array();\n    $max_depth = 0;\n    $depth = 0;\n    $max_depth_array\
    \ = array();\n    foreach ($paren_array as $paren) {\n        if ($paren == \"\
    (\") {\n            array_push($paren_stack, $paren);\n            $depth++;\n\
    \            if ($depth > $max_depth) {\n                $max_depth = $depth;\n\
    \            }\n        } else {\n            array_pop($paren_stack);\n     \
    \       $depth--;\n            array_push($max_depth_array, $max_depth);\n   \
    \         $max_depth = 0;\n        }\n    }\n    return $max_depth_array;\n}\n",
  "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $paren_depth =\
    \ array();\n    $paren_depth_index = 0;\n    $paren_depth_max = 0;\n    $paren_depth_current\
    \ = 0;\n    $paren_depth_last = 0;\n    foreach ($paren_array as $paren) {\n \
    \       if ($paren == \"(\") {\n            array_push($paren_stack, $paren);\n\
    \            $paren_depth_current++;\n            if ($paren_depth_current > $paren_depth_max)\
    \ {\n                $paren_depth_max = $paren_depth_current;\n            }\n\
    \        } elseif ($paren == \")\") {\n            array_pop($paren_stack);\n\
    \            $paren_depth_current--;\n            if ($paren_depth_current ==\
    \ 0) {\n                $paren_depth[$paren_depth_index] = $paren_depth_max;\n\
    \                $paren_depth_index++;\n                $paren_depth_max = 0;\n\
    \            }\n        }\n    }\n    return $paren_depth;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string =", "    $paren_array\
    \ = explode(\" \", $paren_string);\n    $max_depth = 0;\n    $max_depth_array\
    \ = array();\n    foreach ($paren_array as $paren_group) {\n        $depth = 0;\n\
    \        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == \"(\") {\n                $depth++;\n            } else if ($paren_group[$i]\
    \ == \")\") {\n                $depth--;\n            }\n        }\n        array_push($max_depth_array,\
    \ $depth);\n    }\n    return $max_depth_array;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n   ", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = array();\n    $max_depth = 0;\n    $current_depth = 0;\n \
    \   $paren_depth_array = array();\n    foreach ($paren_array as $paren) {\n  \
    \      if ($paren == '(') {\n            $paren_stack[] = $paren;\n          \
    \  $current_depth++;\n            if ($current_depth > $max_depth) {\n       \
    \         $max_depth = $current_depth;\n            }\n        } else {\n    \
    \        array_pop($paren_stack);\n            $current_depth--;\n           \
    \ if (empty($paren_stack)) {\n                $paren_depth_array[] = $max_depth;\n\
    \                $max_depth = 0;\n                $current_depth = 0;\n      \
    \      }\n        }\n    }\n    return $paren_depth_array;\n}\n\n$paren_string\
    \ = \"(()()) ((())) () ((())()())\";\n$paren_depth_array = parse_nested_parens($paren_string);\n\
    print_r($paren_depth_array);", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_count = 0;\n    $max_paren_count\
    \ = 0;\n    $max_paren_count_array = array();\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == \"(\") {\n            $paren_count++;\n           \
    \ if ($paren_count > $max_paren_count) {\n                $max_paren_count = $paren_count;\n\
    \            }\n        } elseif ($paren == \")\") {\n            $paren_count--;\n\
    \        } else {\n            $max_paren_count_array[] = $max_paren_count;\n\
    \            $max_paren_count = 0;\n            $paren_count = 0;\n        }\n\
    \    }\n    $max_paren_count_array[] = $max_paren_count;\n    return $max_paren_count_array;\n\
    }\n\n$paren_string = \"(()()) ((())) () ((())()())\";\n$max_paren_count_array\
    \ = parse_nested_parens($paren_string);\nprint_r($max_paren_count_array);", " \
    \   $paren_array = explode(\" \", $paren_string);\n    $max_depth = 0;\n    $depth_array\
    \ = array();\n    foreach ($paren_array as $paren_group) {\n        $depth = 0;\n\
    \        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == \"(\") {\n                $depth++;\n            } else if ($paren_group[$i]\
    \ == \")\") {\n                $depth--;\n            }\n        }\n        array_push($depth_array,\
    \ $depth);\n    }\n    return $depth_array;\n}\n", "    $paren_array = explode(\"\
    \ \", $paren_string);\n    $result = array();\n    foreach ($paren_array as $paren)\
    \ {\n        $result[] = parse_nested_paren($paren);\n    }\n    return $result;\n\
    }\n", "    $paren_array = explode(\" \", $paren_string);\n    $max_nested_levels\
    \ = array();\n    foreach ($paren_array as $paren_group) {\n        $max_nested_levels[]\
    \ = max_nested_parens($paren_group);\n    }\n    return $max_nested_levels;\n\
    }\n", "  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_array\
    \ = str_split($paren_string);\n  $paren_stack = array();\n  $max_depth = 0;\n\
    \  $depth = 0;\n  $depth_array = array();\n  foreach ($paren_array as $paren)\
    \ {\n    if ($paren == '(') {\n      $depth++;\n      if ($depth > $max_depth)\
    \ {\n        $max_depth = $depth;\n      }\n      array_push($paren_stack, $paren);\n\
    \    } elseif ($paren == ')') {\n      array_pop($paren_stack);\n      $depth_array[]\
    \ = $depth;\n      $depth--;\n    }\n  }\n  return $depth_array;\n}\n", "    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $", "    $paren_array\
    \ = explode(\" \", $paren_string);\n    $paren_count = array();\n    foreach ($paren_array\
    \ as $paren_group) {\n        $paren_count[] = parse_nested_parens_helper($paren_group);\n\
    \    }\n    return $paren_count;\n}\n", "    $paren_groups = explode(' ', $paren_string);\n\
    \    $max_nesting = array();\n    foreach ($paren_groups as $group) {\n      \
    \  $nesting = 0;\n        $max_nesting_in_group = 0;\n        for ($i = 0; $i\
    \ < strlen($group); $i++) {\n            if ($group[$i] == '(') {\n          \
    \      $nesting++;\n            } else if ($group[$i] == ')') {\n            \
    \    $nesting--;\n            }\n            if ($nesting > $max_nesting_in_group)\
    \ {\n                $max_nesting_in_group = $nesting;\n            }\n      \
    \  }\n        $max_nesting[] = $max_nesting_in_group;\n    }\n    return $max_nesting;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n   \
    \ $paren_string = array_map('strlen', $paren_string);\n    return $paren_string;\n\
    }\n", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $max_level = 0;\n    $level = 0;\n    $result\
    \ = array();\n    for ($i = 0; $i < count($paren_array); $i++) {\n        if ($paren_array[$i]\
    \ == \"(\") {\n            $level++;\n            if ($level > $max_level) {\n\
    \                $max_level = $level;\n            }\n        } else if ($paren_array[$i]\
    \ == \")\") {\n            $level--;\n            if ($level == 0) {\n       \
    \         array_push($result, $max_level);\n                $max_level = 0;\n\
    \            }\n        }\n    }\n    return $result;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $depth = 0;\n    $paren_depth_array = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == \"(\") {\n            array_push($paren_stack,\
    \ $paren);\n            $depth++;\n            if ($depth > $max_depth) {\n  \
    \              $max_depth = $depth;\n            }\n        } else {\n       \
    \     array_pop($paren_stack);\n            $depth--;\n            array_push($paren_depth_array,\
    \ $max_depth);\n            $max_depth = 0;\n        }\n    }\n    return $paren_depth_array;\n\
    }\n", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $max_depth = 0;\n    $current_depth = 0;\n\
    \    $max_depth_array = array();\n    foreach ($paren_array as $paren) {\n   \
    \     if ($paren == \"(\") {\n            $current_depth++;\n            if ($current_depth\
    \ > $max_depth) {\n                $max_depth = $current_depth;\n            }\n\
    \        } else {\n            $max_depth_array[] = $max_depth;\n            $max_depth\
    \ = 0;\n            $current_depth = 0;\n        }\n    }\n    return $max_depth_array;\n\
    }\n\n$paren_string = \"(()()) ((())) () ((())()())\";\n$max_depth_array = parse_nested_parens($paren_string);\n\
    print_r($max_depth_array);", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren) {\n        $result[]\
    \ = parse_paren($paren);\n    }\n    return $result;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_count = 0;\n    $max_count = 0;\n    $max_count_array = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $paren_count++;\n        } else {\n            $paren_count--;\n      \
    \  }\n        if ($paren_count > $max_count) {\n            $max_count = $paren_count;\n\
    \        }\n        if ($paren_count == 0) {\n            $max_count_array[] =\
    \ $max_count;\n            $max_count = 0;\n        }\n    }\n    return $max_count_array;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_nesting = 0;\n\
    \    $current_nesting = 0;\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $current_nesting++;\n            $max_nesting\
    \ = max($max_nesting, $current_nesting);\n        } else {\n            $current_nesting--;\n\
    \        }\n    }\n    return $max_nesting;\n}\n", "    $paren_array = explode(\"\
    \ \", $paren_string);\n    $max_depth = 0;\n    $depth_array = array();\n    foreach\
    \ ($paren_array as $paren_group) {\n        $depth = 0;\n        for ($i = 0;\
    \ $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i] == \"(\"\
    ) {\n                $depth++;\n            } else if ($paren_group[$i] == \"\
    )\") {\n                $depth--;\n            }\n        }\n        array_push($depth_array,\
    \ $depth);\n    }\n    return $depth_array;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $result\
    \ = array();\n    $max_depth = 0;\n    $depth = 0;\n    $paren_count = 0;\n  \
    \  foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n        \
    \    $depth++;\n            $paren_count++;\n        } else {\n            $depth--;\n\
    \            $paren_count++;\n        }\n        if ($depth > $max_depth) {\n\
    \            $max_depth = $depth;\n        }\n        if ($paren_count == strlen($paren_string))\
    \ {\n            $result[] = $max_depth;\n            $max_depth = 0;\n      \
    \      $depth = 0;\n            $paren_count = 0;\n        }\n    }\n    return\
    \ $result;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $nesting_level = 0;\n    $max_nesting_level\
    \ = 0;\n    $nesting_levels = array();\n    foreach ($paren_array as $paren) {\n\
    \        if ($paren == '(') {\n            $nesting_level++;\n            if ($nesting_level\
    \ > $max_nesting_level) {\n                $max_nesting_level = $nesting_level;\n\
    \            }\n        } elseif ($paren == ')') {\n            $nesting_levels[]\
    \ = $max_nesting_level;\n            $max_nesting_level = 0;\n            $nesting_level\
    \ = 0;\n        }\n    }\n    return $nesting_levels;\n}\n", "  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $", "    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\" \", \")(\", $paren_string);\n\
    \    $paren_string = \"(\" . $paren_string . \")\";\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\" \", \")(\", $paren_string);\n    $paren_string\
    \ = \"(\" . $paren_string . \")\";\n    $paren_string = str_replace(\"()\", \"\
    \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\" \", \")(\", $paren_string);\n    $paren_string\
    \ = \"(\" . $paren_string . \")\";\n    $paren_string = str_replace(\"()\", \"\
    \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\" \", \")(\", $paren_string);\n    $paren_string\
    \ = \"(\" . $paren_string . \")\";\n    $paren_string = str_replace(\"()\", \"\
    \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n   \
    \ $paren_array = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth\
    \ = 0;\n    $current_depth = 0;\n    $result = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == \"(\") {\n            array_push($paren_stack,\
    \ $paren);\n            $current_depth++;\n            if ($current_depth > $max_depth)\
    \ {\n                $max_depth = $current_depth;\n            }\n        } else\
    \ {\n            array_pop($paren_stack);\n            $current_depth--;\n   \
    \         if (count($paren_stack) == 0) {\n                array_push($result,\
    \ $max_depth);\n                $max_depth = 0;\n                $current_depth\
    \ = 0;\n            }\n        }\n    }\n    return $result;\n}\n", "    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(\" \", $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren_group) {\n      \
    \  $paren_group = trim($paren_group);\n        $paren_group_len = strlen($paren_group);\n\
    \        $paren_count = 0;\n        $max_paren_count = 0;\n        for ($i = 0;\
    \ $i < $paren_group_len; $i++) {\n            if ($paren_group[$i] == \"(\") {\n\
    \                $paren_count++;\n                if ($paren_count > $max_paren_count)\
    \ {\n                    $max_paren_count = $paren_count;\n                }\n\
    \            } else if ($paren_group[$i] == \")\") {\n                $paren_count--;\n\
    \            }\n        }\n        $result[] = $max_paren_count;\n    }\n    return\
    \ $result;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\";\n$result = parse_nested_parens($paren_string);\n\
    print_r($result);\n", "    $paren_string = trim($paren_string);\n    $paren_groups\
    \ = explode(' ', $paren_string);\n    $max_nesting = array();\n    foreach ($paren_groups\
    \ as $group) {\n        $max_nesting[] = parse_nested_parens_helper($group);\n\
    \    }\n    return $max_nesting;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = array();\n    $max_depth = 0;\n    $depth = 0;\n    $max_depth_array = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $depth++;\n            if ($depth > $max_depth) {\n                $max_depth\
    \ = $depth;\n            }\n        } elseif ($paren == ')') {\n            $depth--;\n\
    \            if ($depth == 0) {\n                $max_depth_array[] = $max_depth;\n\
    \                $max_depth = 0;\n            }\n        }\n    }\n    return\
    \ $max_depth_array;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $max_nesting = array();\n    foreach ($paren_array as $paren_group) {\n \
    \       $nesting = 0;\n        $max_nesting_level = 0;\n        for ($i = 0; $i\
    \ < strlen($paren_group); $i++) {\n            if ($paren_group[$i] == \"(\")\
    \ {\n                $nesting++;\n            } else if ($paren_group[$i] == \"\
    )\") {\n                $nesting--;\n            }\n            if ($nesting >\
    \ $max_nesting_level) {\n                $max_nesting_level = $nesting;\n    \
    \        }\n        }\n        $max_nesting[] = $max_nesting_level;\n    }\n \
    \   return $max_nesting;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $max_level = array();\n    foreach ($paren_array as $paren_group) {\n   \
    \     $level = 0;\n        $max_level_in_group = 0;\n        for ($i = 0; $i <\
    \ strlen($paren_group); $i++) {\n            if ($paren_group[$i] == \"(\") {\n\
    \                $level++;\n            } else if ($paren_group[$i] == \")\")\
    \ {\n                $level--;\n            }\n            if ($level > $max_level_in_group)\
    \ {\n                $max_level_in_group = $level;\n            }\n        }\n\
    \        $max_level[] = $max_level_in_group;\n    }\n    return $max_level;\n\
    }\n", "    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_levels = array();\n    foreach ($paren_array as $paren_group) {\n\
    \        $paren_levels[] = parse_nested_parens_helper($paren_group);\n    }\n\
    \    return $paren_levels;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_", "    $paren_string\
    \ = trim($paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+\\(/', '(', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\)\\s+/', ')', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s+$/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/^\\s+/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+$/', '', $paren_string);\n    $paren_string = preg_replace('/^\\s+/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+$/', '', $paren_string);\n    $paren_string = preg_replace('/^\\\
    s+/', '', $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+$/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/^\\s+/', '', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s+$/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/^\\s+/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = preg_", " \
    \ $paren_string = str_replace(' ', '', $paren_string);\n  $paren_array = str_split($paren_string);\n\
    \  $paren_stack = array();\n  $max_depth = 0;\n  $current_depth = 0;\n  $result\
    \ = array();\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n\
    \      $current_depth++;\n      if ($current_depth > $max_depth) {\n        $max_depth\
    \ = $current_depth;\n      }\n      array_push($paren_stack, $paren);\n    } elseif\
    \ ($paren == ')') {\n      $current_depth--;\n      array_pop($paren_stack);\n\
    \      if (count($paren_stack) == 0) {\n        array_push($result, $max_depth);\n\
    \        $max_depth = 0;\n        $current_depth = 0;\n      }\n    }\n  }\n \
    \ return $result;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $max_depth = 0;\n    $depth = 0;\n    $result = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $depth++;\n            if ($depth > $max_depth) {\n  \
    \              $max_depth = $depth;\n            }\n        } else {\n       \
    \     array_pop($paren_stack);\n            $depth--;\n            if ($depth\
    \ == 0) {\n                array_push($result, $max_depth);\n                $max_depth\
    \ = 0;\n            }\n        }\n    }\n    return $result;\n}\n", "    $paren_array\
    \ = explode(\" \", $paren_string);\n    $max_nesting = array();\n    foreach ($paren_array\
    \ as $paren_group) {\n        $max_nesting[] = max_nesting($paren_group);\n  \
    \  }\n    return $max_nesting;\n}\n", "    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = array();\n    $max_nesting = 0;\n    $current_nesting = 0;\n    $max_nesting_array\
    \ = array();\n    foreach ($paren_array as $paren) {\n        if ($paren == '(')\
    \ {\n            $current_nesting++;\n            $max_nesting = max($max_nesting,\
    \ $current_nesting);\n            array_push($paren_stack, $paren);\n        }\
    \ else {\n            $current_nesting--;\n            array_pop($paren_stack);\n\
    \            if (empty($paren_stack)) {\n                array_push($max_nesting_array,\
    \ $max_nesting);\n                $max_nesting = 0;\n            }\n        }\n\
    \    }\n    return $max_nesting_array;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = array();\n    $paren_level = 0;\n    $paren_max_level = 0;\n    $paren_max_level_array\
    \ = array();\n    foreach ($paren_array as $paren) {\n        if ($paren == '(')\
    \ {\n            $paren_level++;\n            if ($paren_level > $paren_max_level)\
    \ {\n                $paren_max_level = $paren_level;\n            }\n       \
    \     array_push($paren_stack, $paren);\n        } elseif ($paren == ')') {\n\
    \            $paren_level--;\n            array_pop($paren_stack);\n         \
    \   if (count($paren_stack) == 0) {\n                array_push($paren_max_level_array,\
    \ $paren_max_level);\n                $paren_max_level = 0;\n            }\n \
    \       }\n    }\n    return $paren_max_level_array;\n}\n", "    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"\", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(\" \", $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    return $paren_string;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_array_len = count($paren_array);\n\
    \    $paren_stack = array();\n    $paren_depth = array();\n    $paren_depth_max\
    \ = 0;\n    $paren_depth_max_index = 0;\n    $paren_depth_index = 0;\n    for\
    \ ($i = 0; $i < $paren_array_len; $i++) {\n        if ($paren_array[$i] == '(')\
    \ {\n            array_push($paren_stack, $paren_array[$i]);\n            $paren_depth[$paren_depth_index]\
    \ = count($paren_stack);\n            if ($paren_depth[$paren_depth_index] > $paren_depth_max)\
    \ {\n                $paren_depth_max = $paren_depth[$paren_depth_index];\n  \
    \              $paren_depth_max_index = $paren_depth_index;\n            }\n \
    \       } elseif ($paren_array[$i] == ')') {\n            array_pop($paren_stack);\n\
    \            $paren_depth_index++;\n        }\n    }\n    return $paren_depth;\n\
    }\n", "    $paren_array = explode(\" \", $paren_string);\n    $max_levels = array();\n\
    \    foreach ($paren_array as $paren) {\n        $max_levels[] = get_max_nesting_level($paren);\n\
    \    }\n    return $max_levels;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $levels = array();\n    foreach ($paren_array as $paren) {\n        $levels[]\
    \ = parse_parens($paren);\n    }\n    return $levels;\n}\n", "  $paren_array =\
    \ explode(\" \", $paren_string);\n  $max_nesting = array();\n  foreach ($paren_array\
    \ as $paren_group) {\n    $nesting = 0;\n    $max_nesting_in_group = 0;\n    for\
    \ ($i = 0; $i < strlen($paren_group); $i++) {\n      if ($paren_group[$i] == \"\
    (\") {\n        $nesting++;\n      } else if ($paren_group[$i] == \")\") {\n \
    \       $nesting--;\n      }\n      if ($nesting > $max_nesting_in_group) {\n\
    \        $max_nesting_in_group = $nesting;\n      }\n    }\n    $max_nesting[]\
    \ = $max_nesting_in_group;\n  }\n  return $max_nesting;\n}\n", "    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"\", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(\" \", $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $paren_string = array_map('strlen',\
    \ $paren_string);\n    return $paren_string;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $max_depth = 0;\n    $depth = 0;\n    $max_depth_array\
    \ = array();\n    foreach ($paren_array as $paren) {\n        if ($paren == '(')\
    \ {\n            $depth++;\n            if ($depth > $max_depth) {\n         \
    \       $max_depth = $depth;\n            }\n        } elseif ($paren == ')')\
    \ {\n            $depth--;\n            if ($depth == 0) {\n                $max_depth_array[]\
    \ = $max_depth;\n                $max_depth = 0;\n            }\n        }\n \
    \   }\n    return $max_depth_array;\n}\n", "    $paren_array = explode(\" \",\
    \ $paren_string);\n    $max_nesting = array();\n    foreach ($paren_array as $paren)\
    \ {\n        $max_nesting[] = count_nesting($paren);\n    }\n    return $max_nesting;\n\
    }\n", "  $paren_string = trim($paren_string);\n  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace('(', '', $paren_string);\n  $paren_string = str_replace(')',\
    \ '', $paren_string);\n  $paren_string = str_replace('', ' ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ', '',\
    \ $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n \
    \ $paren_string = str_replace('(', '', $paren_string);\n  $paren_string = str_replace(')',\
    \ '', $paren_string);\n  $paren_string = str_replace('', ' ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ', '',\
    \ $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n \
    \ $paren_string = str_replace('(', '', $paren_string);\n  $paren_string = str_replace(')',\
    \ '', $paren_string);\n  $paren_string = str_replace('', ' ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ', '',\
    \ $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n \
    \ $paren_string = str_replace('(', '', $paren_string);\n  $paren_string = str_replace(')',\
    \ '', $paren_string);\n  $paren_string = str_replace('', ' ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ', '',\
    \ $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n \
    \ $paren_string = str_replace('(', '', $", "    $paren_groups = explode(' ', $paren_string);\n\
    \    $paren_levels = array();\n    foreach ($paren_groups as $group) {\n     \
    \   $paren_levels[] = count_nested_parens($group);\n    }\n    return $paren_levels;\n\
    }\n", "  $paren_array = explode(\" \", $paren_string);\n  $max_nesting = array();\n\
    \  foreach ($paren_array as $paren_group) {\n    $nesting = 0;\n    $max_nesting_this_group\
    \ = 0;\n    for ($i = 0; $i < strlen($paren_group); $i++) {\n      if ($paren_group[$i]\
    \ == \"(\") {\n        $nesting++;\n      } elseif ($paren_group[$i] == \")\"\
    ) {\n        $nesting--;\n      }\n      if ($nesting > $max_nesting_this_group)\
    \ {\n        $max_nesting_this_group = $nesting;\n      }\n    }\n    $max_nesting[]\
    \ = $max_nesting_this_group;\n  }\n  return $max_nesting;\n}\n", "    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_groups = explode(' ', $paren_string);\n    $paren_groups_max_nesting\
    \ = array();\n    foreach ($paren_groups as $group) {\n        $max_nesting =\
    \ 0;\n        $current_nesting = 0;\n        for ($i = 0; $i < strlen($group);\
    \ $i++) {\n            if ($group[$i] == '(') {\n                $current_nesting++;\n\
    \            } else if ($group[$i] == ')') {\n                $current_nesting--;\n\
    \            }\n            if ($current_nesting > $max_nesting) {\n         \
    \       $max_nesting = $current_nesting;\n            }\n        }\n        $paren_groups_max_nesting[]\
    \ = $max_nesting;\n    }\n    return $paren_groups_max_nesting;\n}\n", "    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"\", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(\" \", $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_map('strlen', $paren_string);\n    return $paren_string;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $paren_levels\
    \ = array();\n    $max_level = 0;\n    foreach ($paren_array as $paren) {\n  \
    \      if ($paren == '(') {\n            array_push($paren_stack, $paren);\n \
    \       } elseif ($paren == ')') {\n            array_pop($paren_stack);\n   \
    \         $max_level = max($max_level, count($paren_stack));\n        }\n    }\n\
    \    return $max_level;\n}\n", "  $paren_string = trim($paren_string);\n  $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\\
    (/', ' ( ', $paren_string);\n  $paren_string = preg_replace('/\\)/', ' ) ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\s+/',\
    \ ' ', $paren_string);\n  $paren_string = explode(' ', $paren_string);\n  $paren_string\
    \ = array_filter($paren_string);\n  $paren_string = array_values($paren_string);\n\
    \  $paren_string = implode('', $paren_string);\n  $paren_string = str_split($paren_string);\n\
    \  $paren_string = array_filter($paren_string);\n  $paren_string = array_values($paren_string);\n\
    \  $paren_string = implode('', $paren_string);\n  $paren_string = str_split($paren_string);\n\
    \  $paren_string = array_filter($paren_string);\n  $paren_string = array_values($paren_string);\n\
    \  $paren_string = implode('', $paren_string);\n  $paren_string = str_split($paren_string);\n\
    \  $paren_string = array_filter($paren_string);\n  $paren_string = array_values($paren_string);\n\
    \  $paren_string = implode('', $paren_string);\n  $paren_string = str_split($paren_string);\n\
    \  $paren_string = array_filter($paren_string);\n  $paren_string = array_values($paren_string);\n\
    \  $paren_string = implode('', $paren_string);\n  $paren_string = str_split($paren_string);\n\
    \  $paren_string = array_filter($paren_string);\n  $paren_string = array_values($paren_string);\n\
    \  $paren_string = implode('', $paren_string);\n  $paren_string = str_split($paren_string);\n\
    \  $paren_string", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_", "    $paren_array\
    \ = explode(\" \", $paren_string);\n    $max_nesting = array();\n    foreach ($paren_array\
    \ as $paren_group) {\n        $max_nesting[] = get_max_nesting($paren_group);\n\
    \    }\n    return $max_nesting;\n}\n", "    $paren_string = str_replace(\" \"\
    , \"\", $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = array();\n    $max_depth = 0;\n    $paren_depth = array();\n    $paren_index\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == \"(\") {\n\
    \            array_push($paren_stack, $paren);\n            $max_depth = max($max_depth,\
    \ count($paren_stack));\n        } else {\n            array_pop($paren_stack);\n\
    \            $paren_depth[$paren_index] = $max_depth;\n            $paren_index++;\n\
    \        }\n    }\n    return $paren_depth;\n}\n", "    $paren_array = explode(\"\
    \ \", $paren_string);\n    $result = array();\n    foreach ($paren_array as $paren)\
    \ {\n        $result[] = parse_nested_paren($paren);\n    }\n    return $result;\n\
    }\n", "    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n \
    \   $max_nesting = array();\n    foreach ($paren_string as $paren_group) {\n \
    \       $nesting = 0;\n        $max_nesting_in_group = 0;\n        for ($i = 0;\
    \ $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i] == '(')\
    \ {\n                $nesting++;\n            } else if ($paren_group[$i] == ')')\
    \ {\n                $nesting--;\n            }\n            if ($nesting > $max_nesting_in_group)\
    \ {\n                $max_nesting_in_group = $nesting;\n            }\n      \
    \  }\n        $max_nesting[] = $max_nesting_in_group;\n    }\n    return $max_nesting;\n\
    }\n", "    $paren_array = explode(\" \", $paren_string);\n    $max_depth = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $depth = 0;\n        $max_depth_in_group\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == \"(\") {\n                $depth++;\n            } else\
    \ if ($paren_group[$i] == \")\") {\n                $depth--;\n            }\n\
    \            if ($depth > $max_depth_in_group) {\n                $max_depth_in_group\
    \ = $depth;\n            }\n        }\n        array_push($max_depth, $max_depth_in_group);\n\
    \    }\n    return $max_depth;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren_group) {\n      \
    \  $result[] = parse_parens($paren_group);\n    }\n    return $result;\n}\n",
  "    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s+$/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/^\\s+/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+$/', '', $paren_string);\n    $paren_string = preg_replace('/^\\s+/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+$/', '', $paren_string);\n    $paren_string = preg_replace('/^\\\
    s+/', '', $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+$/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/^\\s+/', '', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s+$/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/^\\s+/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+$/', '', $paren_string);\n    $paren_string = preg_replace('/^\\s+/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = preg_replace('", "    $paren_groups = explode(' ', $paren_string);\n    $max_depth\
    \ = array();\n    foreach ($paren_groups as $group) {\n        $depth = 0;\n \
    \       $max_depth_in_group = 0;\n        for ($i = 0; $i < strlen($group); $i++)\
    \ {\n            if ($group[$i] == '(') {\n                $depth++;\n       \
    \     } else {\n                $depth--;\n            }\n            if ($depth\
    \ > $max_depth_in_group) {\n                $max_depth_in_group = $depth;\n  \
    \          }\n        }\n        $max_depth[] = $max_depth_in_group;\n    }\n\
    \    return $max_depth;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n", "  $paren_array = explode(\" \"\
    , $paren_string);\n  $result = array();\n  foreach ($paren_array as $paren) {\n\
    \    $result[] = parse_nested_paren($paren);\n  }\n  return $result;\n}\n", " \
    \   $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_", "    $paren_array = explode(\"\
    \ \", $paren_string);\n    $result = array();\n    foreach ($paren_array as $paren)\
    \ {\n        $result[] = parse_nested_paren($paren);\n    }\n    return $result;\n\
    }\n", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(\" \", $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = array_map('strlen', $paren_string);\n    return $paren_string;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max = 0;\n  \
    \  $paren_max_array = array();\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == '(') {\n            $paren_count++;\n            if ($paren_count\
    \ > $paren_max) {\n                $paren_max = $paren_count;\n            }\n\
    \        } else {\n            $paren_count--;\n            if ($paren_count ==\
    \ 0) {\n                $paren_max_array[] = $paren_max;\n                $paren_max\
    \ = 0;\n            }\n        }\n    }\n    return $paren_max_array;\n}\n", " \
    \   $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strlen',\
    \ $paren_string);\n    return $paren_string;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = [];\n    $max_depth = 0;\n    $depth_array = [];\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $max_depth++;\n        } else {\n            array_pop($paren_stack);\n\
    \            array_push($depth_array, $max_depth);\n            $max_depth--;\n\
    \        }\n    }\n    return $depth_array;\n}\n", "    $paren_array = explode(\"\
    \ \", $paren_string);\n    $max_nesting = array();\n    foreach ($paren_array\
    \ as $paren_group) {\n        $max_nesting[] = max_nesting($paren_group);\n  \
    \  }\n    return $max_nesting;\n}\n", "    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = array();\n    $paren_depth = array();\n    $paren_depth_index = 0;\n    $paren_depth_max\
    \ = 0;\n    foreach ($paren_array as $char) {\n        if ($char == '(') {\n \
    \           array_push($paren_stack, $char);\n            $paren_depth_max++;\n\
    \        } elseif ($char == ')') {\n            array_pop($paren_stack);\n   \
    \         $paren_depth_max--;\n        }\n        if ($paren_depth_max == 0) {\n\
    \            $paren_depth[$paren_depth_index] = count($paren_stack);\n       \
    \     $paren_depth_index++;\n        }\n    }\n    return $paren_depth;\n}\n",
  "    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n   \
    \ foreach ($paren_array as $paren) {\n        $result[] = parse_parens($paren);\n\
    \    }\n    return $result;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren) {\n        $max_level\
    \ = 0;\n        $level = 0;\n        for ($i = 0; $i < strlen($paren); $i++) {\n\
    \            if ($paren[$i] == \"(\") {\n                $level++;\n         \
    \       if ($level > $max_level) {\n                    $max_level = $level;\n\
    \                }\n            } else if ($paren[$i] == \")\") {\n          \
    \      $level--;\n            }\n        }\n        $result[] = $max_level;\n\
    \    }\n    return $result;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\"\
    ;\n$result = parse_nested_parens($paren_string);\nprint_r($result);", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = array();\n    $max_nesting = 0;\n    $nesting_array = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      array_push($paren_stack, $paren);\n        } elseif ($paren == ')') {\n\
    \            array_pop($paren_stack);\n            $max_nesting = max($max_nesting,\
    \ count($paren_stack));\n        }\n        if (empty($paren_stack)) {\n     \
    \       array_push($nesting_array, $max_nesting);\n            $max_nesting =\
    \ 0;\n        }\n    }\n    return $nesting_array;\n}\n\n$paren_string = \"(()())\
    \ ((())) () ((())()())\";\n$nesting_array = parse_nested_parens($paren_string);\n\
    print_r($nesting_array);", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $max_depth = 0;\n    $depth = 0;\n    $max_depth_array = array();\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $depth++;\n            if ($depth > $max_depth) {\n  \
    \              $max_depth = $depth;\n            }\n        } else {\n       \
    \     array_pop($paren_stack);\n            $depth--;\n            array_push($max_depth_array,\
    \ $max_depth);\n            $max_depth = 0;\n        }\n    }\n    return $max_depth_array;\n\
    }\n", "    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s+\\(/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\)\\s+/', ')', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\s+/', '(', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+\\)/', ')', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s+\\(/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\)\\s+/', ')', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\s+/', '(', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+\\)/', ')', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s+\\(/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\)\\s+/', ')', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\s+/', '(', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+\\)/', ')', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s+\\(/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\)\\s+/', ')', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\s+/', '(', $paren_", "    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"0\", $paren_string);\n    $paren_string = str_replace(\"(\", \"1\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"0\", $paren_string);\n    $paren_string\
    \ = str_replace(\"0\", \")\", $paren_string);\n    $paren_string = str_replace(\"\
    1\", \"(\", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(\" \", $paren_string);\n    $max_depth = 0;\n    $depth\
    \ = 0;\n    $max_depth_array = array();\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == \"(\") {\n            $depth++;\n            if ($depth\
    \ > $max_depth) {\n                $max_depth = $depth;\n            }\n     \
    \   } else {\n            $depth--;\n        }\n    }\n    $depth = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == \"(\") {\n            $depth++;\n\
    \            if ($depth == $max_depth) {\n                $max_depth_array[] =\
    \ $max_depth;\n                $max_depth = 0;\n            }\n        } else\
    \ {\n            $depth--;\n        }\n    }\n    return $max_depth_array;\n}\n",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = array();\n    $max_depth = 0;\n    $current_depth = 0;\n \
    \   $max_depth_array = array();\n    foreach ($paren_array as $paren) {\n    \
    \    if ($paren == '(') {\n            array_push($paren_stack, $paren);\n   \
    \         $current_depth++;\n            if ($current_depth > $max_depth) {\n\
    \                $max_depth = $current_depth;\n            }\n        } else {\n\
    \            array_pop($paren_stack);\n            $current_depth--;\n       \
    \     if (empty($paren_stack)) {\n                array_push($max_depth_array,\
    \ $max_depth);\n                $max_depth = 0;\n                $current_depth\
    \ = 0;\n            }\n        }\n    }\n    return $max_depth_array;\n}\n\n$paren_string\
    \ = \"(()()) ((())) () ((())()())\";\n$max_depth_array = parse_nested_parens($paren_string);\n\
    print_r($max_depth_array);", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $paren_result = array();\n    foreach ($paren_array as $paren_group) {\n\
    \        $paren_group_array = str_split($paren_group);\n        $paren_level =\
    \ 0;\n        $paren_max_level = 0;\n        foreach ($paren_group_array as $paren_char)\
    \ {\n            if ($paren_char == \"(\") {\n                $paren_level++;\n\
    \            } else if ($paren_char == \")\") {\n                $paren_level--;\n\
    \            }\n            if ($paren_level > $paren_max_level) {\n         \
    \       $paren_max_level = $paren_level;\n            }\n        }\n        $paren_result[]\
    \ = $paren_max_level;\n    }\n    return $paren_result;\n}\n", "    $paren_groups\
    \ = explode(' ', $paren_string);\n    $max_nesting = array();\n    foreach ($paren_groups\
    \ as $group) {\n        $nesting = 0;\n        $max_nesting_in_group = 0;\n  \
    \      for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i] ==\
    \ '(') {\n                $nesting++;\n            } else if ($group[$i] == ')')\
    \ {\n                $nesting--;\n            }\n            if ($nesting > $max_nesting_in_group)\
    \ {\n                $max_nesting_in_group = $nesting;\n            }\n      \
    \  }\n        $max_nesting[] = $max_nesting_in_group;\n    }\n    return $max_nesting;\n\
    }\n", "    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n   ", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $max_depth = 0;\n    $paren_depth = array();\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $max_depth = max($max_depth, count($paren_stack));\n \
    \       } elseif ($paren == ')') {\n            array_pop($paren_stack);\n   \
    \     }\n        array_push($paren_depth, $max_depth);\n    }\n    return $paren_depth;\n\
    }\n", "    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_nested_paren($paren);\n\
    \    }\n    return $result;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n   ", "    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \   ", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_arr\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $paren_levels\
    \ = array();\n    $max_level = 0;\n    foreach ($paren_arr as $paren) {\n    \
    \    if ($paren == '(') {\n            array_push($paren_stack, $paren);\n   \
    \     } else {\n            array_pop($paren_stack);\n            $max_level =\
    \ max($max_level, count($paren_stack));\n            if (count($paren_stack) ==\
    \ 0) {\n                array_push($paren_levels, $max_level);\n             \
    \   $max_level = 0;\n            }\n        }\n    }\n    return $paren_levels;\n\
    }\n", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"()\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"()\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"()\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"()\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"()\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"()\", $paren_string);\n", "    $paren_array\
    \ = explode(\" \", $paren_string);\n    $max_depth = 0;\n    $depth_array = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $depth = 0;\n        $max_depth\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == \"(\") {\n                $depth++;\n                if\
    \ ($depth > $max_depth) {\n                    $max_depth = $depth;\n        \
    \        }\n            } else if ($paren_group[$i] == \")\") {\n            \
    \    $depth--;\n            }\n        }\n        array_push($depth_array, $max_depth);\n\
    \    }\n    return $depth_array;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = array();\n    $max_depth = 0;\n    $depth = 0;\n    $result = array();\n \
    \   foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n       \
    \     array_push($paren_stack, $paren);\n            $depth++;\n            if\
    \ ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n\
    \        } else {\n            array_pop($paren_stack);\n            $depth--;\n\
    \            if (count($paren_stack) == 0) {\n                array_push($result,\
    \ $max_depth);\n                $max_depth = 0;\n            }\n        }\n  \
    \  }\n    return $result;\n}\n", "    $paren_string = str_replace(\" \", \"\"\
    , $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = array();\n    $max_depth = 0;\n    $depth = 0;\n    $max_depth_array = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == \"(\") {\n    \
    \        array_push($paren_stack, $paren);\n            $depth++;\n          \
    \  if ($depth > $max_depth) {\n                $max_depth = $depth;\n        \
    \    }\n        } else {\n            if (count($paren_stack) > 0) {\n       \
    \         array_pop($paren_stack);\n                $depth--;\n              \
    \  array_push($max_depth_array, $max_depth);\n                $max_depth = 0;\n\
    \            }\n        }\n    }\n    return $max_depth_array;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren) {\n        $result[]\
    \ = parse_paren($paren);\n    }\n    return $result;\n}\n", "  $paren_string =\
    \ str_replace(\" \", \"\", $paren_string);\n  $paren_array = str_split($paren_string);\n\
    \  $paren_stack = array();\n  $paren_levels = array();\n  $paren_level = 0;\n\
    \  foreach ($paren_array as $paren) {\n    if ($paren == \"(\") {\n      array_push($paren_stack,\
    \ $paren);\n      $paren_level++;\n    } else {\n      array_pop($paren_stack);\n\
    \      array_push($paren_levels, $paren_level);\n      $paren_level--;\n    }\n\
    \  }\n  return $paren_levels;\n}\n", "    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = [];\n    $max_depth = 0;\n    $depth_array = [];\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $paren_stack[] = $paren;\n\
    \            $max_depth++;\n        } else {\n            array_pop($paren_stack);\n\
    \            $depth_array[] = $max_depth;\n            $max_depth--;\n       \
    \ }\n    }\n    return $depth_array;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_count\
    \ = 0;\n    $max_count = 0;\n    $max_count_array = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $paren_count++;\n  \
    \      } else {\n            $paren_count--;\n        }\n        if ($paren_count\
    \ > $max_count) {\n            $max_count = $paren_count;\n        }\n       \
    \ if ($paren_count == 0) {\n            $max_count_array[] = $max_count;\n   \
    \         $max_count = 0;\n        }\n    }\n    return $max_count_array;\n}\n",
  "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $current_depth = 0;\n    $paren_depth_array = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == \"(\") {\n            array_push($paren_stack,\
    \ $paren);\n            $current_depth++;\n            if ($current_depth > $max_depth)\
    \ {\n                $max_depth = $current_depth;\n            }\n        } elseif\
    \ ($paren == \")\") {\n            array_pop($paren_stack);\n            $current_depth--;\n\
    \            if (empty($paren_stack)) {\n                array_push($paren_depth_array,\
    \ $max_depth);\n                $max_depth = 0;\n                $current_depth\
    \ = 0;\n            }\n        }\n    }\n    return $paren_depth_array;\n}\n",
  "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"()\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"()\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"()\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"()\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"()\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"()\", $paren_string);\n", "    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $nested_parens = array();\n    $current_level = 0;\n    $max_level = 0;\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == \"(\") {\n    \
    \        $current_level++;\n            if ($current_level > $max_level) {\n \
    \               $max_level = $current_level;\n            }\n        } elseif\
    \ ($paren == \")\") {\n            $current_level--;\n        }\n    }\n    return\
    \ $max_level;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\";\n$result\
    \ = parse_nested_parens($paren_string);\nprint_r($result);\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    return $paren_array;\n}\n",
  "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(\" \", $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_map('strlen',\
    \ $paren_string);\n    return $paren_string;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n   ", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = array();\n    $max_depth = 0;\n    $paren_depth = array();\n\
    \    $paren_count = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            array_push($paren_stack, $paren);\n            $paren_count++;\n\
    \        } else {\n            array_pop($paren_stack);\n            $paren_count--;\n\
    \        }\n        $max_depth = max($max_depth, count($paren_stack));\n     \
    \   if ($paren_count == 0) {\n            array_push($paren_depth, $max_depth);\n\
    \            $max_depth = 0;\n        }\n    }\n    return $paren_depth;\n}\n",
  "    $paren_groups = explode(' ', $paren_string);\n    $result = array();\n    foreach\
    \ ($paren_groups as $group) {\n        $result[] = parse_parens($group);\n   \
    \ }\n    return $result;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $max_depth = 0;\n    $current_depth = 0;\n    $max_depth_array = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $current_depth++;\n            if ($current_depth > $max_depth) {\n   \
    \             $max_depth = $current_depth;\n            }\n        } elseif ($paren\
    \ == ')') {\n            $current_depth--;\n            if ($current_depth ==\
    \ 0) {\n                $max_depth_array[] = $max_depth;\n                $max_depth\
    \ = 0;\n            }\n        }\n    }\n    return $max_depth_array;\n}\n", " \
    \   $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $paren_depth =\
    \ array();\n    $max_depth = 0;\n    $max_depth_index = 0;\n    $current_depth\
    \ = 0;\n    $current_depth_index = 0;\n    $paren_count = 0;\n    $paren_index\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == \"(\") {\n\
    \            $paren_stack[] = $paren;\n            $current_depth++;\n       \
    \     $current_depth_index = $paren_index;\n        } elseif ($paren == \")\"\
    ) {\n            array_pop($paren_stack);\n            $current_depth--;\n   \
    \         if ($current_depth == 0) {\n                $paren_depth[] = $max_depth;\n\
    \                $max_depth = 0;\n                $max_depth_index = 0;\n    \
    \        }\n        }\n        if ($current_depth > $max_depth) {\n          \
    \  $max_depth = $current_depth;\n            $max_depth_index = $current_depth_index;\n\
    \        }\n        $paren_index++;\n    }\n    return $paren_depth;\n}\n", " \
    \   $paren_array = explode(\" \", $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren) {\n        $nesting = 0;\n        $max_nesting_level\
    \ = 0;\n        for ($i = 0; $i < strlen($paren); $i++) {\n            if ($paren[$i]\
    \ == \"(\") {\n                $nesting++;\n            } else if ($paren[$i]\
    \ == \")\") {\n                $nesting--;\n            }\n            if ($nesting\
    \ > $max_nesting_level) {\n                $max_nesting_level = $nesting;\n  \
    \          }\n        }\n        $max_nesting[] = $max_nesting_level;\n    }\n\
    \    return $max_nesting;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
