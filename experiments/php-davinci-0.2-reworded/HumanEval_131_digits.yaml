name: HumanEval_131_digits
language: php
prompt: "<?php\n// Given a positive integer n, return the product of the odd digits.\n\
  // Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n//\
  \ >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits($n) {\n"
tests: "function candidate(...$args) {\n    return digits(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(5) !== 5) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(54) !== 5) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(120) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(5014) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(98765)\
  \ !== 315) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5576543)\
  \ !== 2625) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2468)\
  \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $n = (string)$n;\n    $result = 1;\n    for ($i = 0; $i < strlen($n);\
    \ $i++) {\n        if ($n[$i] % 2 != 0) {\n            $result *= $n[$i];\n  \
    \      }\n    }\n    return $result;\n}\necho digits(1) . \"\\n\";\necho digits(4)\
    \ . \"\\n\";\necho digits(235) . \"\\n\";", "  $digits = str_split($n);\n  $odd_digits\
    \ = array_filter($digits, function($digit) {\n    return $digit % 2 !== 0;\n \
    \ });\n  if (empty($odd_digits)) {\n    return 0;\n  }\n  return array_product($odd_digits);\n\
    }", "    $n = str_split($n);\n    $odd = [];\n    foreach ($n as $value) {\n \
    \       if ($value % 2 != 0) {\n            $odd[] = $value;\n        }\n    }\n\
    \    if (empty($odd)) {\n        return 0;\n    }\n    return array_product($odd);\n\
    }\n", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 !== 0;\n    });\n    if (count($odd_digits) ===\
    \ 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n}",
  "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as $num) {\n      \
    \  if ($num % 2 !== 0) {\n            $product *= $num;\n        }\n    }\n  \
    \  return $product;\n}\necho digits(235);", "    $digits = str_split($n);\n  \
    \  $odd_digits = array_filter($digits, function($digit) {\n        return $digit\
    \ % 2 != 0;\n    });\n    return array_product($odd_digits);\n}\n", "    $n =\
    \ str_split($n);\n    $odd = 1;\n    foreach ($n as $num) {\n        if ($num\
    \ % 2 != 0) {\n            $odd *= $num;\n        }\n    }\n    return $odd;\n\
    }\n", "    $n = str_split($n);\n    $sum = 1;\n    foreach ($n as $num) {\n  \
    \      if ($num % 2 != 0) {\n            $sum *= $num;\n        }\n    }\n   \
    \ return $sum;\n}\necho digits(235);", "  $sum = 1;\n  $n = str_split($n);\n \
    \ foreach ($n as $num) {\n    if ($num % 2 != 0) {\n      $sum *= $num;\n    }\n\
    \  }\n  return $sum;\n}\n", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits,\
    \ function($digit) {\n        return $digit % 2 !== 0;\n    });\n    if (count($odd_digits)\
    \ === 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n\
    }", "    $n = str_split($n);\n    $product = 1;\n    foreach ($n as $digit) {\n\
    \        if ($digit % 2 == 1) {\n            $product *= $digit;\n        }\n\
    \    }\n    return $product;\n}\necho digits(1) . \"\\n\";\necho digits(4) . \"\
    \\n\";\necho digits(235) . \"\\n\";", "    $odds = array();\n    $n = str_split($n);\n\
    \    foreach ($n as $digit) {\n        if ($digit % 2 != 0) {\n            $odds[]\
    \ = $digit;\n        }\n    }\n    if (count($odds) == 0) {\n        return 0;\n\
    \    } else {\n        return array_product($odds);\n    }\n}", "    $result =\
    \ 1;\n    $n = (string)$n;\n    for ($i = 0; $i < strlen($n); $i++) {\n      \
    \  if ($n[$i] % 2 != 0) {\n            $result *= $n[$i];\n        }\n    }\n\
    \    return $result;\n}", "    $result = 1;\n    $n = (string)$n;\n    for ($i\
    \ = 0; $i < strlen($n); $i++) {\n        if ($n[$i] % 2 != 0) {\n            $result\
    \ *= $n[$i];\n        }\n    }\n    return $result;\n}\n", "    $n = str_split($n);\n\
    \    $odds = [];\n    foreach ($n as $num) {\n        if ($num % 2 !== 0) {\n\
    \            $odds[] = $num;\n        }\n    }\n    if (empty($odds)) {\n    \
    \    return 0;\n    }\n    return array_product($odds);\n}", "    $digits = str_split($n);\n\
    \    $odd_digits = array_filter($digits, function($digit) {\n        return $digit\
    \ % 2 == 1;\n    });\n    if (count($odd_digits) == 0) {\n        return 0;\n\
    \    }\n    return array_reduce($odd_digits, function($product, $digit) {\n  \
    \      return $product * $digit;\n    }, 1);\n}\n", "    $result = 1;\n    $n\
    \ = (string)$n;\n    for ($i = 0; $i < strlen($n); $i++) {\n        if ($n[$i]\
    \ % 2 != 0) {\n            $result *= $n[$i];\n        }\n    }\n    return $result;\n\
    }\n", "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as $number)\
    \ {\n        if ($number % 2 !== 0) {\n            $product *= $number;\n    \
    \    }\n    }\n    return $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4)\
    \ . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $digits = str_split($n);\n  \
    \  $odd_digits = array_filter($digits, function($digit) {\n        return $digit\
    \ % 2 == 1;\n    });\n    if (count($odd_digits) == 0) {\n        return 0;\n\
    \    }\n    return array_reduce($odd_digits, function($product, $digit) {\n  \
    \      return $product * $digit;\n    }, 1);\n}\n", "    $n = str_split($n);\n\
    \    $odds = array_filter($n, function($x) {\n        return $x % 2 != 0;\n  \
    \  });\n    if (count($odds) == 0) {\n        return 0;\n    }\n    return array_product($odds);\n\
    }\n", "    $sum = 1;\n    $n = str_split($n);\n    foreach ($n as $number) {\n\
    \        if ($number % 2 != 0) {\n            $sum *= $number;\n        }\n  \
    \  }\n    return $sum;\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\n\
    echo digits(235) . PHP_EOL;", "  $digits = str_split($n);\n  $odd_digits = array_filter($digits,\
    \ function($digit) {\n    return $digit % 2 !== 0;\n  });\n  if (count($odd_digits)\
    \ === 0) {\n    return 0;\n  }\n  return array_reduce($odd_digits, function($acc,\
    \ $digit) {\n    return $acc * $digit;\n  });\n}\n", "    $n = str_split($n);\n\
    \    $result = 1;\n    foreach ($n as $num) {\n        if ($num % 2 !== 0) {\n\
    \            $result *= $num;\n        }\n    }\n    return $result;\n}\n\necho\
    \ digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;",
  "    $n = str_split($n);\n    $odd = 1;\n    foreach ($n as $number) {\n       \
    \ if ($number % 2 !== 0) {\n            $odd *= $number;\n        }\n    }\n \
    \   return $odd;\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho\
    \ digits(235) . PHP_EOL;", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits,\
    \ function($digit) {\n        return $digit % 2 !== 0;\n    });\n    if (count($odd_digits)\
    \ === 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n\
    }\n", "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as $digit)\
    \ {\n        if ($digit % 2 != 0) {\n            $product *= $digit;\n       \
    \ }\n    }\n    return $product;\n}\n", "    $result = 1;\n    $n = str_split($n);\n\
    \    foreach ($n as $digit) {\n        if ($digit % 2 == 1) {\n            $result\
    \ *= $digit;\n        }\n    }\n    return $result;\n}\n", "    $n = str_split($n);\n\
    \    $odds = array_filter($n, function($x) {\n        return $x % 2 == 1;\n  \
    \  });\n    return array_product($odds);\n}\n", "    $product = 1;\n    $n = str_split($n);\n\
    \    foreach ($n as $digit) {\n        if ($digit % 2 !== 0) {\n            $product\
    \ *= $digit;\n        }\n    }\n    return $product;\n}", "    $odd_digits = [];\n\
    \    $digits = str_split($n);\n    foreach ($digits as $digit) {\n        if ($digit\
    \ % 2 !== 0) {\n            $odd_digits[] = $digit;\n        }\n    }\n    if\
    \ (count($odd_digits) === 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n\
    }", "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as $digit) {\n\
    \        if ($digit % 2 != 0) {\n            $product *= $digit;\n        }\n\
    \    }\n    return $product;\n}\necho digits(235);", "    $digits = str_split($n);\n\
    \    $odds = array_filter($digits, function($digit) {\n        return $digit %\
    \ 2 !== 0;\n    });\n    if (count($odds) === 0) {\n        return 0;\n    }\n\
    \    return array_product($odds);\n}\n", "    $digits = str_split($n);\n    $odds\
    \ = array_filter($digits, function($digit) {\n        return $digit % 2 == 1;\n\
    \    });\n    if (empty($odds)) {\n        return 0;\n    }\n    return array_product($odds);\n\
    }\n", "    $odds = array();\n    $n = str_split($n);\n    foreach ($n as $digit)\
    \ {\n        if ($digit % 2 != 0) {\n            $odds[] = $digit;\n        }\n\
    \    }\n    if (count($odds) == 0) {\n        return 0;\n    } else {\n      \
    \  return array_product($odds);\n    }\n}\n", "    $product = 1;\n    $n = (string)$n;\n\
    \    for ($i = 0; $i < strlen($n); $i++) {\n        if ($n[$i] % 2 == 1) {\n \
    \           $product *= $n[$i];\n        }\n    }\n    return $product;\n}\n",
  "    $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 == 1;\n    });\n    return array_product($odd_digits);\n\
    }\n", "    $digits = str_split($n);\n    $odds = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 == 1;\n    });\n    if (empty($odds)) {\n     \
    \   return 0;\n    }\n    return array_product($odds);\n}\n", "    $sum = 1;\n\
    \    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 != 0)\
    \ {\n            $sum *= $digit;\n        }\n        $n = floor($n / 10);\n  \
    \  }\n    return $sum;\n}\n", "    $digits = str_split($n);\n    $odd_digits =\
    \ array_filter($digits, function($digit) {\n        return $digit % 2 !== 0;\n\
    \    });\n    if (empty($odd_digits)) {\n        return 0;\n    }\n    return\
    \ array_product($odd_digits);\n}\n", "    $n = str_split($n);\n    $odds = array_filter($n,\
    \ function($n) {\n        return $n % 2 != 0;\n    });\n    if (count($odds) ==\
    \ 0) {\n        return 0;\n    }\n    return array_product($odds);\n}\n", "  \
    \  $digits = str_split($n);\n    $product = 1;\n    foreach ($digits as $digit)\
    \ {\n        if ($digit % 2 == 1) {\n            $product *= $digit;\n       \
    \ }\n    }\n    return $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4)\
    \ . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $result = 1;\n    $n = (string)$n;\n\
    \    for ($i = 0; $i < strlen($n); $i++) {\n        if ($n[$i] % 2 != 0) {\n \
    \           $result *= $n[$i];\n        }\n    }\n    return $result;\n}\n\necho\
    \ digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;",
  "    $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 !== 0;\n    });\n    if (empty($odd_digits)) {\n\
    \        return 0;\n    }\n    return array_product($odd_digits);\n}\n", "   \
    \ $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 != 0;\n    });\n    if (count($odd_digits) == 0)\
    \ {\n        return 0;\n    }\n    return array_product($odd_digits);\n}\n", " \
    \   $n = str_split($n);\n    $product = 1;\n    foreach ($n as $num) {\n     \
    \   if ($num % 2 !== 0) {\n            $product *= $num;\n        }\n    }\n \
    \   return $product;\n}\necho digits(235);", "    $n = str_split($n);\n    $sum\
    \ = 1;\n    foreach ($n as $value) {\n        if ($value % 2 != 0) {\n       \
    \     $sum *= $value;\n        }\n    }\n    return $sum;\n}\n", "    $product\
    \ = 1;\n    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit %\
    \ 2 != 0) {\n            $product *= $digit;\n        }\n        $n = floor($n\
    \ / 10);\n    }\n    return $product;\n}", "    $product = 1;\n    while ($n >\
    \ 0) {\n        $digit = $n % 10;\n        if ($digit % 2 == 1) {\n          \
    \  $product *= $digit;\n        }\n        $n = (int)($n / 10);\n    }\n    return\
    \ $product;\n}\n", "    $result = 1;\n    $n = (string)$n;\n    for ($i = 0; $i\
    \ < strlen($n); $i++) {\n        if ($n[$i] % 2 != 0) {\n            $result *=\
    \ $n[$i];\n        }\n    }\n    return $result;\n}\necho digits(1) . \"\\n\"\
    ;\necho digits(4) . \"\\n\";\necho digits(235) . \"\\n\";", "    $product = 1;\n\
    \    $n = str_split($n);\n    foreach ($n as $num) {\n        if ($num % 2 ==\
    \ 1) {\n            $product *= $num;\n        }\n    }\n    return $product;\n\
    }\n", "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as $digit)\
    \ {\n        if ($digit % 2 == 1) {\n            $product *= $digit;\n       \
    \ }\n    }\n    return $product;\n}\necho digits(235);", "    $n = str_split($n);\n\
    \    $product = 1;\n    for ($i = 0; $i < count($n); $i++) {\n        if ($n[$i]\
    \ % 2 != 0) {\n            $product *= $n[$i];\n        }\n    }\n    if ($product\
    \ == 1) {\n        return 0;\n    }\n    return $product;\n}\necho digits(1) .\
    \ PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $sum\
    \ = 1;\n    $n = str_split($n);\n    foreach ($n as $num) {\n        if ($num\
    \ % 2 != 0) {\n            $sum *= $num;\n        }\n    }\n    return $sum;\n\
    }\n", "    $odds = array();\n    $digits = str_split($n);\n    foreach ($digits\
    \ as $digit) {\n        if ($digit % 2 == 1) {\n            $odds[] = $digit;\n\
    \        }\n    }\n    if (count($odds) == 0) {\n        return 0;\n    }\n  \
    \  return array_product($odds);\n}\n", "    $odds = 1;\n    $n = str_split($n);\n\
    \    foreach ($n as $num) {\n        if ($num % 2 != 0) {\n            $odds *=\
    \ $num;\n        }\n    }\n    return $odds;\n}\n", "  $digits = str_split($n);\n\
    \  $odds = array_filter($digits, function($digit) {\n    return $digit % 2 !==\
    \ 0;\n  });\n  if (empty($odds)) {\n    return 0;\n  }\n  return array_product($odds);\n\
    }\n", "    $result = 1;\n    $n = (string)$n;\n    for ($i = 0; $i < strlen($n);\
    \ $i++) {\n        if ($n[$i] % 2 != 0) {\n            $result *= $n[$i];\n  \
    \      }\n    }\n    return $result;\n}\n", "    $digits = str_split($n);\n  \
    \  $odd_digits = array_filter($digits, function($digit) {\n        return $digit\
    \ % 2 !== 0;\n    });\n    if (count($odd_digits) === 0) {\n        return 0;\n\
    \    }\n    return array_product($odd_digits);\n}\n", "    $result = 1;\n    $n\
    \ = str_split($n);\n    foreach ($n as $value) {\n        if ($value % 2 !== 0)\
    \ {\n            $result *= $value;\n        }\n    }\n    return $result;\n}\n\
    echo digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;",
  "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as $num) {\n      \
    \  if ($num % 2 != 0) {\n            $product *= $num;\n        }\n    }\n   \
    \ return $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\n\
    echo digits(235) . PHP_EOL;", "    $digits = str_split($n);\n    $odds = array_filter($digits,\
    \ function($digit) {\n        return $digit % 2 == 1;\n    });\n    return array_product($odds);\n\
    }\n", "    $prod = 1;\n    $n = str_split($n);\n    foreach ($n as $digit) {\n\
    \        if ($digit % 2 != 0) {\n            $prod *= $digit;\n        }\n   \
    \ }\n    return $prod;\n}\n", "    $n = str_split($n);\n    $product = 1;\n  \
    \  foreach ($n as $num) {\n        if ($num % 2 !== 0) {\n            $product\
    \ *= $num;\n        }\n    }\n    return $product;\n}\necho digits(1) . PHP_EOL;\n\
    echo digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $odds = 1;\n   \
    \ while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 != 0) {\n\
    \            $odds *= $digit;\n        }\n        $n = floor($n / 10);\n    }\n\
    \    return $odds;\n}\n", "    $result = 1;\n    $n = (string)$n;\n    for ($i\
    \ = 0; $i < strlen($n); $i++) {\n        if ($n[$i] % 2 != 0) {\n            $result\
    \ *= $n[$i];\n        }\n    }\n    return $result;\n}", "    $digits = str_split($n);\n\
    \    $odd_digits = array_filter($digits, function($digit) {\n        return $digit\
    \ % 2 === 1;\n    });\n    if (count($odd_digits) === 0) {\n        return 0;\n\
    \    }\n    return array_reduce($odd_digits, function($acc, $digit) {\n      \
    \  return $acc * $digit;\n    }, 1);\n}", "    $digits = str_split($n);\n    $odds\
    \ = [];\n    foreach ($digits as $digit) {\n        if ($digit % 2 != 0) {\n \
    \           $odds[] = $digit;\n        }\n    }\n    if (count($odds) == 0) {\n\
    \        return 0;\n    }\n    return array_product($odds);\n}\n\necho digits(1)\
    \ . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $digits\
    \ = str_split($n);\n    $odd_digits = array_filter($digits, function($digit) {\n\
    \        return $digit % 2 == 1;\n    });\n    if (count($odd_digits) == 0) {\n\
    \        return 0;\n    }\n    return array_reduce($odd_digits, function($product,\
    \ $digit) {\n        return $product * $digit;\n    }, 1);\n}\n", "    $digits\
    \ = str_split($n);\n    $odds = array_filter($digits, function($digit) {\n   \
    \     return $digit % 2 == 1;\n    });\n    return array_product($odds);\n}\n",
  "    $product = 1;\n    while ($n > 0) {\n        $digit = $n % 10;\n        if\
    \ ($digit % 2 == 1) {\n            $product *= $digit;\n        }\n        $n\
    \ = (int)($n / 10);\n    }\n    return $product;\n}\n", "    $product = 1;\n \
    \   $n = str_split($n);\n    foreach ($n as $num) {\n        if ($num % 2 != 0)\
    \ {\n            $product *= $num;\n        }\n    }\n    return $product;\n}\n\
    echo digits(235);", "    $n = str_split($n);\n    $product = 1;\n    foreach ($n\
    \ as $digit) {\n        if ($digit % 2 !== 0) {\n            $product *= $digit;\n\
    \        }\n    }\n    return $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4)\
    \ . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $product = 1;\n    $n = str_split($n);\n\
    \    foreach ($n as $number) {\n        if ($number % 2 != 0) {\n            $product\
    \ *= $number;\n        }\n    }\n    return $product;\n}", "    $digits = str_split($n);\n\
    \    $odd_digits = array_filter($digits, function($digit) {\n        return $digit\
    \ % 2 == 1;\n    });\n    if (count($odd_digits) == 0) {\n        return 0;\n\
    \    }\n    return array_reduce($odd_digits, function($product, $digit) {\n  \
    \      return $product * $digit;\n    }, 1);\n}", "    $digits = str_split($n);\n\
    \    $odd_digits = array_filter($digits, function($digit) {\n        return $digit\
    \ % 2 == 1;\n    });\n    if (count($odd_digits) == 0) {\n        return 0;\n\
    \    }\n    return array_reduce($odd_digits, function($carry, $digit) {\n    \
    \    return $carry * $digit;\n    }, 1);\n}\n", "  $digits = str_split($n);\n\
    \  $odd_digits = array_filter($digits, function($digit) {\n    return $digit %\
    \ 2 !== 0;\n  });\n  if (count($odd_digits) === 0) {\n    return 0;\n  }\n  return\
    \ array_reduce($odd_digits, function($product, $digit) {\n    return $product\
    \ * $digit;\n  }, 1);\n}\n", "  $product = 1;\n  $n = str_split($n);\n  foreach\
    \ ($n as $digit) {\n    if ($digit % 2 == 1) {\n      $product *= $digit;\n  \
    \  }\n  }\n  return $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4) .\
    \ PHP_EOL;\necho digits(235) . PHP_EOL;", "    $odd_digits = array();\n    $digits\
    \ = str_split($n);\n    foreach ($digits as $digit) {\n        if ($digit % 2\
    \ == 1) {\n            array_push($odd_digits, $digit);\n        }\n    }\n  \
    \  if (count($odd_digits) == 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n\
    }", "    $product = 1;\n    while ($n > 0) {\n        $digit = $n % 10;\n    \
    \    if ($digit % 2 == 1) {\n            $product *= $digit;\n        }\n    \
    \    $n = floor($n / 10);\n    }\n    return $product;\n}\n", "  $digits = str_split($n);\n\
    \  $odd_digits = array_filter($digits, function($digit) {\n    return $digit %\
    \ 2 != 0;\n  });\n  if (count($odd_digits) == 0) {\n    return 0;\n  }\n  return\
    \ array_reduce($odd_digits, function($acc, $digit) {\n    return $acc * $digit;\n\
    \  });\n}\n", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits,\
    \ function($digit) {\n        return $digit % 2 != 0;\n    });\n    return array_product($odd_digits);\n\
    }", "    $result = 1;\n    $n = (string)$n;\n    for ($i = 0; $i < strlen($n);\
    \ $i++) {\n        if ($n[$i] % 2 !== 0) {\n            $result *= $n[$i];\n \
    \       }\n    }\n    return $result;\n}\necho digits(1) . PHP_EOL;\necho digits(4)\
    \ . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $digits = str_split($n);\n  \
    \  $odd_digits = array_filter($digits, function($digit) {\n        return $digit\
    \ % 2 == 1;\n    });\n    if (count($odd_digits) == 0) {\n        return 0;\n\
    \    }\n    return array_reduce($odd_digits, function($product, $digit) {\n  \
    \      return $product * $digit;\n    }, 1);\n}\n", "    $odds = array();\n  \
    \  $n = str_split($n);\n    foreach ($n as $digit) {\n        if ($digit % 2 !=\
    \ 0) {\n            $odds[] = $digit;\n        }\n    }\n    if (count($odds)\
    \ == 0) {\n        return 0;\n    } else {\n        return array_product($odds);\n\
    \    }\n}\n", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits,\
    \ function($digit) {\n        return $digit % 2 == 1;\n    });\n    if (count($odd_digits)\
    \ == 0) {\n        return 0;\n    }\n    return array_reduce($odd_digits, function($carry,\
    \ $digit) {\n        return $carry * $digit;\n    }, 1);\n}\n", "  $product =\
    \ 1;\n  $n = str_split($n);\n  foreach ($n as $value) {\n    if ($value % 2 !=\
    \ 0) {\n      $product *= $value;\n    }\n  }\n  return $product;\n}\n", "   \
    \ $n = str_split($n);\n    $product = 1;\n    foreach ($n as $digit) {\n     \
    \   if ($digit % 2 != 0) {\n            $product *= $digit;\n        }\n    }\n\
    \    return $product;\n}", "    $result = 1;\n    $n = str_split($n);\n    foreach\
    \ ($n as $digit) {\n        if ($digit % 2 == 1) {\n            $result *= $digit;\n\
    \        }\n    }\n    return $result;\n}\necho digits(1) . \"\\n\";\necho digits(4)\
    \ . \"\\n\";\necho digits(235) . \"\\n\";", "  $digits = str_split($n);\n  $odd_digits\
    \ = array_filter($digits, function($digit) {\n    return $digit % 2 !== 0;\n \
    \ });\n  if (count($odd_digits) === 0) {\n    return 0;\n  }\n  return array_reduce($odd_digits,\
    \ function($product, $digit) {\n    return $product * $digit;\n  }, 1);\n}\n",
  "    $product = 1;\n    while ($n > 0) {\n        $digit = $n % 10;\n        if\
    \ ($digit % 2 != 0) {\n            $product *= $digit;\n        }\n        $n\
    \ = floor($n / 10);\n    }\n    return $product;\n}\n", "    $digits = str_split($n);\n\
    \    $product = 1;\n    foreach ($digits as $digit) {\n        if ($digit % 2\
    \ != 0) {\n            $product *= $digit;\n        }\n    }\n    return $product;\n\
    }", "  $product = 1;\n  $n = (string)$n;\n  for ($i = 0; $i < strlen($n); $i++)\
    \ {\n    if ($n[$i] % 2 !== 0) {\n      $product *= $n[$i];\n    }\n  }\n  return\
    \ $product;\n}\n", "    $result = 1;\n    while ($n > 0) {\n        $digit = $n\
    \ % 10;\n        if ($digit % 2 == 1) {\n            $result *= $digit;\n    \
    \    }\n        $n = floor($n / 10);\n    }\n    return $result;\n}\n", "    $digits\
    \ = str_split($n);\n    $odd_digits = array_filter($digits, function($digit) {\n\
    \        return $digit % 2 == 1;\n    });\n    if (count($odd_digits) == 0) {\n\
    \        return 0;\n    }\n    return array_reduce($odd_digits, function($product,\
    \ $digit) {\n        return $product * $digit;\n    }, 1);\n}\n", "    $sum =\
    \ 1;\n    $n = str_split($n);\n    foreach ($n as $num) {\n        if ($num %\
    \ 2 != 0) {\n            $sum *= $num;\n        }\n    }\n    return $sum;\n}\n\
    echo digits(235);", "    $n = str_split($n);\n    $product = 1;\n    foreach ($n\
    \ as $number) {\n        if ($number % 2 !== 0) {\n            $product *= $number;\n\
    \        }\n    }\n    return $product;\n}\n", "    $digits = str_split($n);\n\
    \    $odd_digits = array_filter($digits, function($digit) {\n        return $digit\
    \ % 2 !== 0;\n    });\n    if (count($odd_digits) === 0) {\n        return 0;\n\
    \    }\n    return array_product($odd_digits);\n}", "    $product = 1;\n    while\
    \ ($n > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 != 0) {\n    \
    \        $product *= $digit;\n        }\n        $n = (int)($n / 10);\n    }\n\
    \    return $product;\n}\n", "    $product = 1;\n    while ($n > 0) {\n      \
    \  $digit = $n % 10;\n        if ($digit % 2 != 0) {\n            $product *=\
    \ $digit;\n        }\n        $n = floor($n / 10);\n    }\n    return $product;\n\
    }", "    $odds = array();\n    $n = str_split($n);\n    foreach ($n as $digit)\
    \ {\n        if ($digit % 2 != 0) {\n            $odds[] = $digit;\n        }\n\
    \    }\n    if (count($odds) == 0) {\n        return 0;\n    } else {\n      \
    \  return array_product($odds);\n    }\n}\n", "    $result = 1;\n    $n = (string)$n;\n\
    \    for ($i = 0; $i < strlen($n); $i++) {\n        if ($n[$i] % 2 === 1) {\n\
    \            $result *= $n[$i];\n        }\n    }\n    return $result;\n}\necho\
    \ digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(235) . \"\\n\";",
  "    $odds = array();\n    $n = str_split($n);\n    foreach ($n as $digit) {\n \
    \       if ($digit % 2 != 0) {\n            $odds[] = $digit;\n        }\n   \
    \ }\n    if (empty($odds)) {\n        return 0;\n    } else {\n        return\
    \ array_product($odds);\n    }\n}\n", "    $product = 1;\n    $n = str_split($n);\n\
    \    foreach ($n as $num) {\n        if ($num % 2 != 0) {\n            $product\
    \ *= $num;\n        }\n    }\n    return $product;\n}\n\necho digits(235);", " \
    \   $odds = array();\n    $n = str_split($n);\n    foreach ($n as $digit) {\n\
    \        if ($digit % 2 == 1) {\n            $odds[] = $digit;\n        }\n  \
    \  }\n    if (count($odds) == 0) {\n        return 0;\n    }\n    return array_product($odds);\n\
    }\n", "    $result = 1;\n    $n = str_split($n);\n    foreach ($n as $num) {\n\
    \        if ($num % 2 != 0) {\n            $result *= $num;\n        }\n    }\n\
    \    return $result;\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\n\
    echo digits(235) . PHP_EOL;", "    $odds = 1;\n    $n = str_split($n);\n    foreach\
    \ ($n as $digit) {\n        if ($digit % 2 != 0) {\n            $odds *= $digit;\n\
    \        }\n    }\n    return $odds;\n}\necho digits(1) . PHP_EOL;\necho digits(4)\
    \ . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $digits = str_split($n);\n  \
    \  $odd_digits = array_filter($digits, function($digit) {\n        return $digit\
    \ % 2 != 0;\n    });\n    if (count($odd_digits) == 0) {\n        return 0;\n\
    \    }\n    return array_product($odd_digits);\n}", "    $digits = str_split($n);\n\
    \    $odd_digits = array_filter($digits, function($digit) {\n        return $digit\
    \ % 2 !== 0;\n    });\n    if (count($odd_digits) === 0) {\n        return 0;\n\
    \    }\n    return array_product($odd_digits);\n}\n", "    $odd_digits = array();\n\
    \    $n_string = strval($n);\n    for ($i = 0; $i < strlen($n_string); $i++) {\n\
    \        if ($n_string[$i] % 2 != 0) {\n            array_push($odd_digits, $n_string[$i]);\n\
    \        }\n    }\n    if (count($odd_digits) == 0) {\n        return 0;\n   \
    \ }\n    $product = 1;\n    for ($i = 0; $i < count($odd_digits); $i++) {\n  \
    \      $product *= $odd_digits[$i];\n    }\n    return $product;\n}", "    $product\
    \ = 1;\n    $n = str_split($n);\n    foreach ($n as $number) {\n        if ($number\
    \ % 2 !== 0) {\n            $product *= $number;\n        }\n    }\n    return\
    \ $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235)\
    \ . PHP_EOL;", "    $n = str_split($n);\n    $result = 1;\n    foreach ($n as\
    \ $num) {\n        if ($num % 2 != 0) {\n            $result *= $num;\n      \
    \  }\n    }\n    return $result;\n}\n", "    $digits = str_split($n);\n    $odd_digits\
    \ = array_filter($digits, function($digit) {\n        return $digit % 2 == 1;\n\
    \    });\n    if (count($odd_digits) == 0) {\n        return 0;\n    }\n    return\
    \ array_reduce($odd_digits, function($product, $digit) {\n        return $product\
    \ * $digit;\n    }, 1);\n}\n", "    $product = 1;\n    while ($n > 0) {\n    \
    \    $digit = $n % 10;\n        if ($digit % 2 != 0) {\n            $product *=\
    \ $digit;\n        }\n        $n = floor($n / 10);\n    }\n    return $product;\n\
    }", "    $n = str_split($n);\n    $product = 1;\n    foreach ($n as $digit) {\n\
    \        if ($digit % 2 != 0) {\n            $product *= $digit;\n        }\n\
    \    }\n    return $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\n\
    echo digits(235) . PHP_EOL;", "    $digits = str_split($n);\n    $odd_digits =\
    \ array_filter($digits, function($digit) {\n        return $digit % 2 == 1;\n\
    \    });\n    if (count($odd_digits) == 0) {\n        return 0;\n    }\n    return\
    \ array_reduce($odd_digits, function($product, $digit) {\n        return $product\
    \ * $digit;\n    }, 1);\n}", "    $product = 1;\n    $n = str_split($n);\n   \
    \ foreach ($n as $digit) {\n        if ($digit % 2 !== 0) {\n            $product\
    \ *= $digit;\n        }\n    }\n    return $product;\n}\n", "    $product = 1;\n\
    \    $n = (string)$n;\n    for ($i = 0; $i < strlen($n); $i++) {\n        if ($n[$i]\
    \ % 2 == 1) {\n            $product *= $n[$i];\n        }\n    }\n    return $product;\n\
    }\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(235) . \"\
    \\n\";", "    $result = 1;\n    $n = str_split($n);\n    foreach ($n as $num)\
    \ {\n        if ($num % 2 != 0) {\n            $result *= $num;\n        }\n \
    \   }\n    return $result;\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\n\
    echo digits(235) . PHP_EOL;", "    $n = str_split($n);\n    $product = 1;\n  \
    \  foreach ($n as $num) {\n        if ($num % 2 != 0) {\n            $product\
    \ *= $num;\n        }\n    }\n    return $product;\n}\n", "    $n = str_split($n);\n\
    \    $odds = array_filter($n, function($num) {\n        return $num % 2 !== 0;\n\
    \    });\n    if (count($odds) === 0) {\n        return 0;\n    }\n    return\
    \ array_product($odds);\n}\n", "    $digits = str_split($n);\n    $odd_digits\
    \ = array_filter($digits, function($digit) {\n        return $digit % 2 != 0;\n\
    \    });\n    if (count($odd_digits) == 0) {\n        return 0;\n    }\n    return\
    \ array_product($odd_digits);\n}", "    $product = 1;\n    $n = str_split($n);\n\
    \    foreach ($n as $digit) {\n        if ($digit % 2 != 0) {\n            $product\
    \ *= $digit;\n        }\n    }\n    return $product;\n}\necho digits(1) . PHP_EOL;\n\
    echo digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $product = 1;\n\
    \    $n = (string)$n;\n    for ($i = 0; $i < strlen($n); $i++) {\n        if ($n[$i]\
    \ % 2 == 1) {\n            $product *= $n[$i];\n        }\n    }\n    return $product;\n\
    }", "  $product = 1;\n  $n = (string)$n;\n  for ($i = 0; $i < strlen($n); $i++)\
    \ {\n    if ($n[$i] % 2 != 0) {\n      $product *= $n[$i];\n    }\n  }\n  return\
    \ $product;\n}\n", "    $n = str_split($n);\n    $product = 1;\n    foreach ($n\
    \ as $number) {\n        if ($number % 2 != 0) {\n            $product *= $number;\n\
    \        }\n    }\n    return $product;\n}\n", "  $digits = str_split($n);\n \
    \ $odd_digits = array_filter($digits, function($digit) {\n    return $digit %\
    \ 2 !== 0;\n  });\n  if (count($odd_digits) === 0) {\n    return 0;\n  }\n  return\
    \ array_reduce($odd_digits, function($acc, $digit) {\n    return $acc * $digit;\n\
    \  });\n}\n", "    $product = 1;\n    $n = (string)$n;\n    for ($i = 0; $i <\
    \ strlen($n); $i++) {\n        if ($n[$i] % 2 !== 0) {\n            $product *=\
    \ $n[$i];\n        }\n    }\n    return $product;\n}\necho digits(1) . PHP_EOL;\n\
    echo digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $digits = str_split($n);\n\
    \    $odds = array_filter($digits, function($digit) {\n        return $digit %\
    \ 2 == 1;\n    });\n    return array_product($odds);\n}\n", "    $result = 1;\n\
    \    $n = str_split($n);\n    foreach ($n as $digit) {\n        if ($digit % 2\
    \ != 0) {\n            $result *= $digit;\n        }\n    }\n    return $result;\n\
    }\n", "    $product = 1;\n    $n = (string)$n;\n    for ($i = 0; $i < strlen($n);\
    \ $i++) {\n        if ($n[$i] % 2 != 0) {\n            $product *= $n[$i];\n \
    \       }\n    }\n    return $product;\n}\n", "    $odds = 1;\n    $n = str_split($n);\n\
    \    foreach ($n as $digit) {\n        if ($digit % 2 == 1) {\n            $odds\
    \ *= $digit;\n        }\n    }\n    return $odds;\n}", "    $odds = [];\n    $digits\
    \ = str_split($n);\n    foreach ($digits as $digit) {\n        if ($digit % 2\
    \ !== 0) {\n            $odds[] = $digit;\n        }\n    }\n    if (empty($odds))\
    \ {\n        return 0;\n    }\n    return array_product($odds);\n}\n", "    $digits\
    \ = str_split($n);\n    $odd_digits = array_filter($digits, function($digit) {\n\
    \        return $digit % 2 !== 0;\n    });\n    if (count($odd_digits) === 0)\
    \ {\n        return 0;\n    }\n    return array_product($odd_digits);\n}\n", " \
    \   $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 == 1;\n    });\n    return array_product($odd_digits);\n\
    }\n", "    $n = str_split($n);\n    $odd_digits = array_filter($n, function($n)\
    \ {\n        return $n % 2 !== 0;\n    });\n    if (count($odd_digits) === 0)\
    \ {\n        return 0;\n    }\n    return array_product($odd_digits);\n}\n", " \
    \   $digits = str_split($n);\n    $odds = [];\n    foreach ($digits as $digit)\
    \ {\n        if ($digit % 2 != 0) {\n            $odds[] = $digit;\n        }\n\
    \    }\n    if (count($odds) == 0) {\n        return 0;\n    }\n    $product =\
    \ 1;\n    foreach ($odds as $odd) {\n        $product *= $odd;\n    }\n    return\
    \ $product;\n}\n", "    $digits = str_split($n);\n    $odds = array_filter($digits,\
    \ function($digit) {\n        return $digit % 2 != 0;\n    });\n    return array_product($odds);\n\
    }", "    $n = (string)$n;\n    $result = 1;\n    for ($i = 0; $i < strlen($n);\
    \ $i++) {\n        if ($n[$i] % 2 != 0) {\n            $result *= $n[$i];\n  \
    \      }\n    }\n    return $result;\n}\n", "    $n = str_split($n);\n    $product\
    \ = 1;\n    foreach ($n as $digit) {\n        if ($digit % 2 != 0) {\n       \
    \     $product *= $digit;\n        }\n    }\n    return $product;\n}\necho digits(1)\
    \ . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $n\
    \ = str_split($n);\n    $product = 1;\n    foreach ($n as $digit) {\n        if\
    \ ($digit % 2 != 0) {\n            $product *= $digit;\n        }\n    }\n   \
    \ return $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\n\
    echo digits(235) . PHP_EOL;", "    $result = 1;\n    $n = (string)$n;\n    for\
    \ ($i = 0; $i < strlen($n); $i++) {\n        if ($n[$i] % 2 != 0) {\n        \
    \    $result *= $n[$i];\n        }\n    }\n    return $result;\n}", "    $product\
    \ = 1;\n    $n = str_split($n);\n    foreach ($n as $number) {\n        if ($number\
    \ % 2 != 0) {\n            $product *= $number;\n        }\n    }\n    return\
    \ $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235)\
    \ . PHP_EOL;", "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as\
    \ $number) {\n        if ($number % 2 != 0) {\n            $product *= $number;\n\
    \        }\n    }\n    return $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4)\
    \ . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $digits = str_split($n);\n  \
    \  $odds = array_filter($digits, function($digit) {\n        return $digit % 2\
    \ !== 0;\n    });\n    if (count($odds) === 0) {\n        return 0;\n    }\n \
    \   return array_product($odds);\n}\n", "    $product = 1;\n    $n = str_split($n);\n\
    \    foreach ($n as $number) {\n        if ($number % 2 !== 0) {\n           \
    \ $product *= $number;\n        }\n    }\n    return $product;\n}\necho digits(235);",
  "  $n = str_split($n);\n  $product = 1;\n  foreach ($n as $number) {\n    if ($number\
    \ % 2 != 0) {\n      $product *= $number;\n    }\n  }\n  return $product;\n}\n",
  "    $digits = str_split($n);\n    $odds = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 !== 0;\n    });\n    if (empty($odds)) {\n    \
    \    return 0;\n    }\n    return array_product($odds);\n}\n", "    $product =\
    \ 1;\n    $n = (string)$n;\n    for ($i = 0; $i < strlen($n); $i++) {\n      \
    \  if ($n[$i] % 2 == 1) {\n            $product *= $n[$i];\n        }\n    }\n\
    \    return $product;\n}\n", "    $odds = array();\n    $digits = str_split($n);\n\
    \    foreach ($digits as $digit) {\n        if ($digit % 2 != 0) {\n         \
    \   array_push($odds, $digit);\n        }\n    }\n    if (count($odds) == 0) {\n\
    \        return 0;\n    } else {\n        return array_product($odds);\n    }\n\
    }", "    $product = 1;\n    $n = (string)$n;\n    for ($i = 0; $i < strlen($n);\
    \ $i++) {\n        if ($n[$i] % 2 != 0) {\n            $product *= $n[$i];\n \
    \       }\n    }\n    return $product;\n}\n", "    $result = 1;\n    while ($n\
    \ > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 != 0) {\n        \
    \    $result *= $digit;\n        }\n        $n = floor($n / 10);\n    }\n    return\
    \ $result;\n}\n", "    $n = str_split($n);\n    $result = 1;\n    foreach ($n\
    \ as $num) {\n        if ($num % 2 != 0) {\n            $result *= $num;\n   \
    \     }\n    }\n    return $result;\n}\necho digits(235);", "    $odd_digits =\
    \ array();\n    $digits = str_split($n);\n    foreach ($digits as $digit) {\n\
    \        if ($digit % 2 == 1) {\n            array_push($odd_digits, $digit);\n\
    \        }\n    }\n    if (count($odd_digits) == 0) {\n        return 0;\n   \
    \ }\n    return array_product($odd_digits);\n}", "    $n = str_split($n);\n  \
    \  $result = 1;\n    foreach ($n as $num) {\n        if ($num % 2 != 0) {\n  \
    \          $result *= $num;\n        }\n    }\n    return $result;\n}\n", "  \
    \  $digits = str_split($n);\n    $odds = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 != 0;\n    });\n    if (count($odds) == 0) {\n\
    \        return 0;\n    }\n    return array_product($odds);\n}\n", "    $result\
    \ = 1;\n    $n = str_split($n);\n    foreach ($n as $number) {\n        if ($number\
    \ % 2 != 0) {\n            $result *= $number;\n        }\n    }\n    return $result;\n\
    }\necho digits(235);", "    $result = 1;\n    $n = (string)$n;\n    for ($i =\
    \ 0; $i < strlen($n); $i++) {\n        if ($n[$i] % 2 != 0) {\n            $result\
    \ *= $n[$i];\n        }\n    }\n    return $result;\n}\n", "    $n = (string)$n;\n\
    \    $product = 1;\n    for ($i = 0; $i < strlen($n); $i++) {\n        if ($n[$i]\
    \ % 2 != 0) {\n            $product *= $n[$i];\n        }\n    }\n    return $product;\n\
    }\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;",
  "    $digits = str_split($n);\n    $odds = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 !== 0;\n    });\n    if (empty($odds)) {\n    \
    \    return 0;\n    }\n    return array_product($odds);\n}\n", "    $digits =\
    \ str_split($n);\n    $odds = array_filter($digits, function($n) {\n        return\
    \ $n % 2 !== 0;\n    });\n    if (count($odds) === 0) {\n        return 0;\n \
    \   }\n    return array_product($odds);\n}", "    $result = 1;\n    while ($n\
    \ > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 != 0) {\n        \
    \    $result *= $digit;\n        }\n        $n = floor($n / 10);\n    }\n    return\
    \ $result;\n}\n", "    $n = str_split($n);\n    $odd = 1;\n    foreach ($n as\
    \ $number) {\n        if ($number % 2 !== 0) {\n            $odd *= $number;\n\
    \        }\n    }\n    return $odd;\n}\necho digits(1) . PHP_EOL;\necho digits(4)\
    \ . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $n = str_split($n);\n    $product\
    \ = 1;\n    foreach ($n as $digit) {\n        if ($digit % 2 != 0) {\n       \
    \     $product *= $digit;\n        }\n    }\n    return $product;\n}\n", "   \
    \ $n = str_split($n);\n    $product = 1;\n    foreach ($n as $num) {\n       \
    \ if ($num % 2 !== 0) {\n            $product *= $num;\n        }\n    }\n   \
    \ return $product;\n}\n", "    $result = 1;\n    $n = (string)$n;\n    for ($i\
    \ = 0; $i < strlen($n); $i++) {\n        if ($n[$i] % 2 != 0) {\n            $result\
    \ *= $n[$i];\n        }\n    }\n    return $result;\n}\n", "    $odd_digits =\
    \ [];\n    $n = str_split($n);\n    foreach ($n as $digit) {\n        if ($digit\
    \ % 2 != 0) {\n            $odd_digits[] = $digit;\n        }\n    }\n    if (count($odd_digits)\
    \ == 0) {\n        return 0;\n    } else {\n        return array_product($odd_digits);\n\
    \    }\n}\n", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits,\
    \ function($digit) {\n        return $digit % 2 == 1;\n    });\n    if (empty($odd_digits))\
    \ {\n        return 0;\n    }\n    return array_product($odd_digits);\n}", " \
    \   $odd_digits = array();\n    $n = (string)$n;\n    for ($i = 0; $i < strlen($n);\
    \ $i++) {\n        if ($n[$i] % 2 != 0) {\n            array_push($odd_digits,\
    \ $n[$i]);\n        }\n    }\n    if (count($odd_digits) == 0) {\n        return\
    \ 0;\n    }\n    return array_product($odd_digits);\n}", "    $n = str_split($n);\n\
    \    $product = 1;\n    foreach ($n as $num) {\n        if ($num % 2 != 0) {\n\
    \            $product *= $num;\n        }\n    }\n    return $product;\n}\necho\
    \ digits(235);", "    $odds = array();\n    $digits = str_split($n);\n    foreach\
    \ ($digits as $digit) {\n        if ($digit % 2 != 0) {\n            array_push($odds,\
    \ $digit);\n        }\n    }\n    if (count($odds) == 0) {\n        return 0;\n\
    \    } else {\n        return array_product($odds);\n    }\n}", "    $digits =\
    \ str_split($n);\n    $odds = array_filter($digits, function($digit) {\n     \
    \   return $digit % 2 !== 0;\n    });\n    if (empty($odds)) {\n        return\
    \ 0;\n    }\n    return array_product($odds);\n}\n", "    $n = str_split($n);\n\
    \    $sum = 1;\n    foreach ($n as $num) {\n        if ($num % 2 != 0) {\n   \
    \         $sum *= $num;\n        }\n    }\n    return $sum;\n}\necho digits(1)\
    \ . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $digits\
    \ = str_split($n);\n    $odd_digits = array_filter($digits, function($digit) {\n\
    \        return $digit % 2 !== 0;\n    });\n    if (empty($odd_digits)) {\n  \
    \      return 0;\n    }\n    return array_product($odd_digits);\n}\n", "    $n\
    \ = str_split($n);\n    $odd = 1;\n    foreach ($n as $number) {\n        if ($number\
    \ % 2 != 0) {\n            $odd *= $number;\n        }\n    }\n    return $odd;\n\
    }\necho digits(235);", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits,\
    \ function($digit) {\n        return $digit % 2 !== 0;\n    });\n    if (count($odd_digits)\
    \ === 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n\
    }", "    $result = 1;\n    $n = str_split($n);\n    foreach ($n as $num) {\n \
    \       if ($num % 2 !== 0) {\n            $result *= $num;\n        }\n    }\n\
    \    return $result;\n}", "    $n = str_split($n);\n    $product = 1;\n    foreach\
    \ ($n as $num) {\n        if ($num % 2 !== 0) {\n            $product *= $num;\n\
    \        }\n    }\n    return $product;\n}\n\necho digits(1) . PHP_EOL;\necho\
    \ digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "\t$n = str_split($n);\n\
    \t$result = 1;\n\tforeach ($n as $digit) {\n\t\tif ($digit % 2 == 1) {\n\t\t\t\
    $result *= $digit;\n\t\t}\n\t}\n\treturn $result;\n}\necho digits(1) . PHP_EOL;\n\
    echo digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $result = 1;\n \
    \   $n = (string)$n;\n    for ($i = 0; $i < strlen($n); $i++) {\n        if ($n[$i]\
    \ % 2 == 1) {\n            $result *= $n[$i];\n        }\n    }\n    return $result;\n\
    }\n", "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as $num) {\n\
    \        if ($num % 2 != 0) {\n            $product *= $num;\n        }\n    }\n\
    \    return $product;\n}", "    $product = 1;\n    $n = str_split($n);\n    foreach\
    \ ($n as $digit) {\n        if ($digit % 2 !== 0) {\n            $product *= $digit;\n\
    \        }\n    }\n    return $product;\n}\n", "    $digits = str_split($n);\n\
    \    $odd_digits = array_filter($digits, function($digit) {\n        return $digit\
    \ % 2 != 0;\n    });\n    if (count($odd_digits) == 0) {\n        return 0;\n\
    \    }\n    return array_product($odd_digits);\n}\n", "    $product = 1;\n   \
    \ $n = str_split($n);\n    foreach ($n as $digit) {\n        if ($digit % 2 ==\
    \ 1) {\n            $product *= $digit;\n        }\n    }\n    return $product;\n\
    }\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;",
  "    $n = str_split($n);\n    $total = 1;\n    foreach ($n as $num) {\n        if\
    \ ($num % 2 != 0) {\n            $total *= $num;\n        }\n    }\n    return\
    \ $total;\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235)\
    \ . PHP_EOL;", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits,\
    \ function($x) {\n        return $x % 2 == 1;\n    });\n    if (count($odd_digits)\
    \ == 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n\
    }\n", "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as $digit)\
    \ {\n        if ($digit % 2 !== 0) {\n            $product *= $digit;\n      \
    \  }\n    }\n    return $product;\n}\n", "    $n = str_split($n);\n    $odd_digits\
    \ = [];\n    foreach ($n as $digit) {\n        if ($digit % 2 !== 0) {\n     \
    \       $odd_digits[] = $digit;\n        }\n    }\n    if (empty($odd_digits))\
    \ {\n        return 0;\n    }\n    return array_product($odd_digits);\n}\n", " \
    \   $n = str_split($n);\n    $result = 1;\n    foreach ($n as $number) {\n   \
    \     if ($number % 2 != 0) {\n            $result *= $number;\n        }\n  \
    \  }\n    return $result;\n}\n", "    $result = 1;\n    $n = (string)$n;\n   \
    \ for ($i = 0; $i < strlen($n); $i++) {\n        if ($n[$i] % 2 == 1) {\n    \
    \        $result *= $n[$i];\n        }\n    }\n    return $result;\n}\n", "  $digits\
    \ = str_split($n);\n  $product = 1;\n  foreach ($digits as $digit) {\n    if ($digit\
    \ % 2 != 0) {\n      $product *= $digit;\n    }\n  }\n  return $product;\n}",
  "    $n = str_split($n);\n    $product = 1;\n    foreach ($n as $num) {\n      \
    \  if ($num % 2 !== 0) {\n            $product *= $num;\n        }\n    }\n  \
    \  return $product;\n}\necho digits(235);", "    $digits = str_split($n);\n  \
    \  $odds = array_filter($digits, function($num) {\n        return $num % 2 !=\
    \ 0;\n    });\n    if (count($odds) == 0) {\n        return 0;\n    }\n    return\
    \ array_product($odds);\n}", "  $sum = 1;\n  $n = str_split($n);\n  foreach ($n\
    \ as $key => $value) {\n    if ($value % 2 != 0) {\n      $sum *= $value;\n  \
    \  }\n  }\n  return $sum;\n}\n", "    $digits = str_split($n);\n    $odd_digits\
    \ = array_filter($digits, function($digit) {\n        return $digit % 2 !== 0;\n\
    \    });\n    if (count($odd_digits) === 0) {\n        return 0;\n    }\n    return\
    \ array_product($odd_digits);\n}\n", "    $n = str_split($n);\n    $product =\
    \ 1;\n    foreach ($n as $num) {\n        if ($num % 2 !== 0) {\n            $product\
    \ *= $num;\n        }\n    }\n    return $product;\n}\necho digits(1) . PHP_EOL;\n\
    echo digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $digits = str_split($n);\n\
    \    $odd_digits = array_filter($digits, function($digit) {\n        return $digit\
    \ % 2 == 1;\n    });\n    if (empty($odd_digits)) {\n        return 0;\n    }\n\
    \    return array_product($odd_digits);\n}", "    $digits = str_split($n);\n \
    \   $odd_digits = [];\n    foreach ($digits as $digit) {\n        if ($digit %\
    \ 2 !== 0) {\n            $odd_digits[] = $digit;\n        }\n    }\n    if (count($odd_digits)\
    \ === 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n\
    }\n", "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as $digit)\
    \ {\n        if ($digit % 2 != 0) {\n            $product *= $digit;\n       \
    \ }\n    }\n    return $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4)\
    \ . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $digits = str_split($n);\n  \
    \  $product = 1;\n    foreach ($digits as $digit) {\n        if ($digit % 2 !=\
    \ 0) {\n            $product *= $digit;\n        }\n    }\n    return $product;\n\
    }\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;",
  "    $n = str_split($n);\n    $odd = 0;\n    foreach ($n as $digit) {\n        if\
    \ ($digit % 2 !== 0) {\n            $odd *= $digit;\n        }\n    }\n    return\
    \ $odd;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
