name: HumanEval_131_digits
language: php
prompt: "<?php\n// Given a positive integer n, return the product of the odd digits.\n\
  // Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n//\
  \ >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits($n) {\n"
tests: "function candidate(...$args) {\n    return digits(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(5) !== 5) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(54) !== 5) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(120) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(5014) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(98765)\
  \ !== 315) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5576543)\
  \ !== 2625) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2468)\
  \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $n = (string)$n;\n    $result = 1;\n    for ($i = 0; $i < strlen($n);\
    \ $i++) {\n        if ($n[$i] % 2 != 0) {\n            $result *= $n[$i];\n  \
    \      }\n    }\n    return $result;\n}\necho digits(1) . \"\\n\";\necho digits(4)\
    \ . \"\\n\";\necho digits(235) . \"\\n\";", "  $digits = str_split($n);\n  $odd_digits\
    \ = array_filter($digits, function($digit) {\n    return $digit % 2 !== 0;\n \
    \ });\n  if (empty($odd_digits)) {\n    return 0;\n  }\n  return array_product($odd_digits);\n\
    }", "    $n = str_split($n);\n    $odd = [];\n    foreach ($n as $value) {\n \
    \       if ($value % 2 != 0) {\n            $odd[] = $value;\n        }\n    }\n\
    \    if (empty($odd)) {\n        return 0;\n    }\n    return array_product($odd);\n\
    }\n", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 !== 0;\n    });\n    if (count($odd_digits) ===\
    \ 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n}",
  "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as $num) {\n      \
    \  if ($num % 2 !== 0) {\n            $product *= $num;\n        }\n    }\n  \
    \  return $product;\n}\necho digits(235);", "    $digits = str_split($n);\n  \
    \  $odd_digits = array_filter($digits, function($digit) {\n        return $digit\
    \ % 2 != 0;\n    });\n    return array_product($odd_digits);\n}\n", "    $n =\
    \ str_split($n);\n    $odd = 1;\n    foreach ($n as $num) {\n        if ($num\
    \ % 2 != 0) {\n            $odd *= $num;\n        }\n    }\n    return $odd;\n\
    }\n", "    $n = str_split($n);\n    $sum = 1;\n    foreach ($n as $num) {\n  \
    \      if ($num % 2 != 0) {\n            $sum *= $num;\n        }\n    }\n   \
    \ return $sum;\n}\necho digits(235);", "  $sum = 1;\n  $n = str_split($n);\n \
    \ foreach ($n as $num) {\n    if ($num % 2 != 0) {\n      $sum *= $num;\n    }\n\
    \  }\n  return $sum;\n}\n", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits,\
    \ function($digit) {\n        return $digit % 2 !== 0;\n    });\n    if (count($odd_digits)\
    \ === 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n\
    }", "    $n = str_split($n);\n    $product = 1;\n    foreach ($n as $digit) {\n\
    \        if ($digit % 2 == 1) {\n            $product *= $digit;\n        }\n\
    \    }\n    return $product;\n}\necho digits(1) . \"\\n\";\necho digits(4) . \"\
    \\n\";\necho digits(235) . \"\\n\";", "    $odds = array();\n    $n = str_split($n);\n\
    \    foreach ($n as $digit) {\n        if ($digit % 2 != 0) {\n            $odds[]\
    \ = $digit;\n        }\n    }\n    if (count($odds) == 0) {\n        return 0;\n\
    \    } else {\n        return array_product($odds);\n    }\n}", "    $result =\
    \ 1;\n    $n = (string)$n;\n    for ($i = 0; $i < strlen($n); $i++) {\n      \
    \  if ($n[$i] % 2 != 0) {\n            $result *= $n[$i];\n        }\n    }\n\
    \    return $result;\n}", "    $result = 1;\n    $n = (string)$n;\n    for ($i\
    \ = 0; $i < strlen($n); $i++) {\n        if ($n[$i] % 2 != 0) {\n            $result\
    \ *= $n[$i];\n        }\n    }\n    return $result;\n}\n", "    $n = str_split($n);\n\
    \    $odds = [];\n    foreach ($n as $num) {\n        if ($num % 2 !== 0) {\n\
    \            $odds[] = $num;\n        }\n    }\n    if (empty($odds)) {\n    \
    \    return 0;\n    }\n    return array_product($odds);\n}", "    $digits = str_split($n);\n\
    \    $odd_digits = array_filter($digits, function($digit) {\n        return $digit\
    \ % 2 == 1;\n    });\n    if (count($odd_digits) == 0) {\n        return 0;\n\
    \    }\n    return array_reduce($odd_digits, function($product, $digit) {\n  \
    \      return $product * $digit;\n    }, 1);\n}\n", "    $result = 1;\n    $n\
    \ = (string)$n;\n    for ($i = 0; $i < strlen($n); $i++) {\n        if ($n[$i]\
    \ % 2 != 0) {\n            $result *= $n[$i];\n        }\n    }\n    return $result;\n\
    }\n", "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as $number)\
    \ {\n        if ($number % 2 !== 0) {\n            $product *= $number;\n    \
    \    }\n    }\n    return $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4)\
    \ . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $digits = str_split($n);\n  \
    \  $odd_digits = array_filter($digits, function($digit) {\n        return $digit\
    \ % 2 == 1;\n    });\n    if (count($odd_digits) == 0) {\n        return 0;\n\
    \    }\n    return array_reduce($odd_digits, function($product, $digit) {\n  \
    \      return $product * $digit;\n    }, 1);\n}\n", "    $n = str_split($n);\n\
    \    $odds = array_filter($n, function($x) {\n        return $x % 2 != 0;\n  \
    \  });\n    if (count($odds) == 0) {\n        return 0;\n    }\n    return array_product($odds);\n\
    }\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
