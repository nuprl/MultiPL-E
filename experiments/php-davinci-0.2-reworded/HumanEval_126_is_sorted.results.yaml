language: php
name: HumanEval_126_is_sorted
results:
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    foreach ($lst as $item) {\n\
    \        if ($prev !== null && $prev >= $item) {\n            return false;\n\
    \        }\n        $prev = $item;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp602z29al.php:49\n\
    Stack trace:\n#0 /tmp/tmp602z29al.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp602z29al.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $lst = array_unique($lst);\n    $count = count($lst);\n\
    \    $sorted = true;\n    for ($i = 0; $i < $count - 1; $i++) {\n        if ($lst[$i]\
    \ > $lst[$i + 1]) {\n            $sorted = false;\n            break;\n      \
    \  }\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpumz6b2ok.php:51\n\
    Stack trace:\n#0 /tmp/tmpumz6b2ok.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpumz6b2ok.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $i = 0;\n    $len = count($lst);\n    while ($i\
    \ < $len - 1) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbql0e2h.php:50\n\
    Stack trace:\n#0 /tmp/tmpxbql0e2h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpxbql0e2h.php\
    \ on line 50\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $lst_length = count($lst);\n    $i = 0;\n    $j\
    \ = 1;\n    while ($j < $lst_length) {\n        if ($lst[$i] > $lst[$j]) {\n \
    \           return false;\n        }\n        $i++;\n        $j++;\n    }\n  \
    \  return true;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp22rssag2.php:49\n\
    Stack trace:\n#0 /tmp/tmp22rssag2.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp22rssag2.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev !== null && $num <= $prev) {\n         \
    \   $sorted = false;\n            break;\n        }\n        $prev = $num;\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz1_bkufy.php:51\n\
    Stack trace:\n#0 /tmp/tmpz1_bkufy.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpz1_bkufy.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $len = count($lst);\n    if ($len == 1) {\n  \
    \      return true;\n    }\n    for ($i = 0; $i < $len - 1; $i++) {\n        if\
    \ ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu6nks3hh.php:51\n\
    Stack trace:\n#0 /tmp/tmpu6nks3hh.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpu6nks3hh.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    foreach\
    \ ($lst as $num) {\n        if ($num < $prev) {\n            $sorted = false;\n\
    \            break;\n        }\n        $prev = $num;\n    }\n    return $sorted;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpudw6h6ak.php:49\n\
    Stack trace:\n#0 /tmp/tmpudw6h6ak.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpudw6h6ak.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev !== null && $num <= $prev) {\n         \
    \   $sorted = false;\n            break;\n        }\n        $prev = $num;\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz1_bkufy.php:51\n\
    Stack trace:\n#0 /tmp/tmpz1_bkufy.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpz1_bkufy.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $count = count($lst);\n    if ($count == 1) {\n\
    \        return true;\n    }\n    for ($i = 0; $i < $count - 1; $i++) {\n    \
    \    if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n        }\n \
    \   }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdrx4hfbg.php:51\n\
    Stack trace:\n#0 /tmp/tmpdrx4hfbg.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpdrx4hfbg.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    if (count($lst) == 1) {\n        return true;\n\
    \    }\n    $last = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n   \
    \     if ($lst[$i] < $last) {\n            return false;\n        }\n        $last\
    \ = $lst[$i];\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2687q6g.php:50\n\
    Stack trace:\n#0 /tmp/tmpp2687q6g.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpp2687q6g.php\
    \ on line 50\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $item) {\n        if ($prev !== null && $item <= $prev) {\n       \
    \     $sorted = false;\n            break;\n        }\n        $prev = $item;\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppxxrkw5t.php:51\n\
    Stack trace:\n#0 /tmp/tmppxxrkw5t.php(55): test()\n#1 {main}\n  thrown in /tmp/tmppxxrkw5t.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    if (count($lst) == 1) {\n        return true;\n\
    \    }\n    for ($i = 0; $i < count($lst) - 1; $i++) {\n        if ($lst[$i] >=\
    \ $lst[$i + 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0j_4_xjb.php:50\n\
    Stack trace:\n#0 /tmp/tmp0j_4_xjb.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp0j_4_xjb.php\
    \ on line 50\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $lst_len = count($lst);\n    if ($lst_len == 1)\
    \ {\n        return true;\n    }\n    $prev = $lst[0];\n    for ($i = 1; $i <\
    \ $lst_len; $i++) {\n        if ($lst[$i] < $prev) {\n            return false;\n\
    \        }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bw0ur9i.php:51\n\
    Stack trace:\n#0 /tmp/tmp_bw0ur9i.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp_bw0ur9i.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    foreach ($lst as $item) {\n\
    \        if ($prev !== null && $prev >= $item) {\n            return false;\n\
    \        }\n        $prev = $item;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp602z29al.php:49\n\
    Stack trace:\n#0 /tmp/tmp602z29al.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp602z29al.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $lst_length = count($lst);\n    if ($lst_length\
    \ == 1) {\n        return true;\n    }\n    $prev = $lst[0];\n    for ($i = 1;\
    \ $i < $lst_length; $i++) {\n        if ($lst[$i] < $prev) {\n            return\
    \ false;\n        }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt5h4sp95.php:51\n\
    Stack trace:\n#0 /tmp/tmpt5h4sp95.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpt5h4sp95.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    foreach ($lst as $i) {\n  \
    \      if ($prev !== null && $i <= $prev) {\n            return false;\n     \
    \   }\n        $prev = $i;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnshzhqg0.php:49\n\
    Stack trace:\n#0 /tmp/tmpnshzhqg0.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpnshzhqg0.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev === null) {\n            $prev = $num;\n\
    \        } else if ($num < $prev) {\n            $sorted = false;\n          \
    \  break;\n        } else {\n            $prev = $num;\n        }\n    }\n   \
    \ return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc81rtj59.php:52\n\
    Stack trace:\n#0 /tmp/tmpc81rtj59.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpc81rtj59.php\
    \ on line 52\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    $duplicate = false;\n    foreach\
    \ ($lst as $num) {\n        if ($prev !== null && $num < $prev) {\n          \
    \  return false;\n        }\n        if ($prev !== null && $num == $prev) {\n\
    \            $duplicate = true;\n        }\n        $prev = $num;\n    }\n   \
    \ return !$duplicate;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgi_u9vn0.php:53\n\
    Stack trace:\n#0 /tmp/tmpgi_u9vn0.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpgi_u9vn0.php\
    \ on line 53\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n  $sorted = true;\n  $prev = $lst[0];\n  for ($i =\
    \ 1; $i < count($lst); $i++) {\n    if ($lst[$i] < $prev) {\n      $sorted = false;\n\
    \      break;\n    }\n    $prev = $lst[$i];\n  }\n  return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2s11z3tv.php:49\n\
    Stack trace:\n#0 /tmp/tmp2s11z3tv.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp2s11z3tv.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    foreach ($lst as $num) {\n\
    \        if ($prev !== null && $num <= $prev) {\n            return false;\n \
    \       }\n        $prev = $num;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwi63wb5.php:49\n\
    Stack trace:\n#0 /tmp/tmpqwi63wb5.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpqwi63wb5.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $item) {\n        if ($prev !== null && $item <= $prev) {\n       \
    \     $sorted = false;\n            break;\n        }\n        $prev = $item;\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppxxrkw5t.php:51\n\
    Stack trace:\n#0 /tmp/tmppxxrkw5t.php(55): test()\n#1 {main}\n  thrown in /tmp/tmppxxrkw5t.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $count = count($lst);\n    if ($count == 1) {\n\
    \        return true;\n    }\n    $prev = $lst[0];\n    for ($i = 1; $i < $count;\
    \ $i++) {\n        if ($lst[$i] < $prev) {\n            return false;\n      \
    \  }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8948207c.php:51\n\
    Stack trace:\n#0 /tmp/tmp8948207c.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp8948207c.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    if (count($lst) == 1) {\n        return true;\n\
    \    }\n    $prev = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n   \
    \     if ($lst[$i] < $prev) {\n            return false;\n        }\n        $prev\
    \ = $lst[$i];\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp107rsfcw.php:50\n\
    Stack trace:\n#0 /tmp/tmp107rsfcw.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp107rsfcw.php\
    \ on line 50\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev !== null && $num <= $prev) {\n         \
    \   $sorted = false;\n            break;\n        }\n        $prev = $num;\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz1_bkufy.php:51\n\
    Stack trace:\n#0 /tmp/tmpz1_bkufy.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpz1_bkufy.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $last = $lst[0];\n    for ($i = 1; $i < count($lst);\
    \ $i++) {\n        if ($lst[$i] < $last) {\n            return false;\n      \
    \  }\n        $last = $lst[$i];\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0aeohhoj.php:47\n\
    Stack trace:\n#0 /tmp/tmp0aeohhoj.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp0aeohhoj.php\
    \ on line 47\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    if (count($lst) == 1) {\n        return true;\n\
    \    }\n    for ($i = 0; $i < count($lst) - 1; $i++) {\n        if ($lst[$i] >\
    \ $lst[$i + 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0b50yoe_.php:48\n\
    Stack trace:\n#0 /tmp/tmp0b50yoe_.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp0b50yoe_.php\
    \ on line 48\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $len = count($lst);\n    if ($len == 1) {\n  \
    \      return true;\n    }\n    for ($i = 0; $i < $len - 1; $i++) {\n        if\
    \ ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu6nks3hh.php:51\n\
    Stack trace:\n#0 /tmp/tmpu6nks3hh.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpu6nks3hh.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $lst_len = count($lst);\n    if ($lst_len < 2)\
    \ {\n        return true;\n    }\n    $i = 0;\n    while ($i < $lst_len - 1) {\n\
    \        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n        }\n\
    \        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk704fvcf.php:51\n\
    Stack trace:\n#0 /tmp/tmpk704fvcf.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpk704fvcf.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    foreach ($lst as $num) {\n\
    \        if ($prev !== null && $num <= $prev) {\n            return false;\n \
    \       }\n        $prev = $num;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwi63wb5.php:49\n\
    Stack trace:\n#0 /tmp/tmpqwi63wb5.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpqwi63wb5.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev === null) {\n            $prev = $num;\n\
    \        } else {\n            if ($num < $prev) {\n                $sorted =\
    \ false;\n                break;\n            }\n            $prev = $num;\n \
    \       }\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n \
    \   return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzt9z7umq.php:53\n\
    Stack trace:\n#0 /tmp/tmpzt9z7umq.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpzt9z7umq.php\
    \ on line 53\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    foreach ($lst as $num) {\n\
    \        if ($prev && $num <= $prev) {\n            return false;\n        }\n\
    \        $prev = $num;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq36_k5rz.php:49\n\
    Stack trace:\n#0 /tmp/tmpq36_k5rz.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpq36_k5rz.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    foreach ($lst as $item) {\n\
    \        if ($prev !== null && $prev >= $item) {\n            return false;\n\
    \        }\n        $prev = $item;\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivfbszij.php:48\n\
    Stack trace:\n#0 /tmp/tmpivfbszij.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpivfbszij.php\
    \ on line 48\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $lst_length = count($lst);\n    $i = 0;\n    $j\
    \ = 1;\n    while ($j < $lst_length) {\n        if ($lst[$i] > $lst[$j]) {\n \
    \           return false;\n        }\n        $i++;\n        $j++;\n    }\n  \
    \  return true;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp22rssag2.php:49\n\
    Stack trace:\n#0 /tmp/tmp22rssag2.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp22rssag2.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    foreach ($lst as $num) {\n\
    \        if ($prev !== null && $num <= $prev) {\n            return false;\n \
    \       }\n        $prev = $num;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwi63wb5.php:49\n\
    Stack trace:\n#0 /tmp/tmpqwi63wb5.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpqwi63wb5.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $len = count($lst);\n    if ($len == 1) {\n  \
    \      return true;\n    }\n    for ($i = 0; $i < $len - 1; $i++) {\n        if\
    \ ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu6nks3hh.php:51\n\
    Stack trace:\n#0 /tmp/tmpu6nks3hh.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpu6nks3hh.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n\t$prev = $lst[0];\n\t$count = 0;\n\tforeach ($lst\
    \ as $val) {\n\t\tif ($val < $prev) {\n\t\t\treturn false;\n\t\t}\n\t\tif ($val\
    \ == $prev) {\n\t\t\t$count++;\n\t\t}\n\t\t$prev = $val;\n\t}\n\tif ($count >\
    \ 1) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplq6bba2k.php:56\n\
    Stack trace:\n#0 /tmp/tmplq6bba2k.php(60): test()\n#1 {main}\n  thrown in /tmp/tmplq6bba2k.php\
    \ on line 56\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $i = 0;\n    $len = count($lst);\n    while ($i\
    \ < $len - 1) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbql0e2h.php:50\n\
    Stack trace:\n#0 /tmp/tmpxbql0e2h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpxbql0e2h.php\
    \ on line 50\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $last = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $last) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $last = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe7jrxv9o.php:49\n\
    Stack trace:\n#0 /tmp/tmpe7jrxv9o.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpe7jrxv9o.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n  $sorted = true;\n  $prev = 0;\n  foreach ($lst as\
    \ $num) {\n    if ($num < $prev) {\n      $sorted = false;\n      break;\n   \
    \ }\n    $prev = $num;\n  }\n  return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5v08zqij.php:49\n\
    Stack trace:\n#0 /tmp/tmp5v08zqij.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp5v08zqij.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $item) {\n        if ($prev !== null && $item <= $prev) {\n       \
    \     $sorted = false;\n            break;\n        }\n        $prev = $item;\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppxxrkw5t.php:51\n\
    Stack trace:\n#0 /tmp/tmppxxrkw5t.php(55): test()\n#1 {main}\n  thrown in /tmp/tmppxxrkw5t.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $last = null;\n    foreach\
    \ ($lst as $item) {\n        if ($last !== null && $item <= $last) {\n       \
    \     $sorted = false;\n            break;\n        }\n        $last = $item;\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_hfl9nw.php:51\n\
    Stack trace:\n#0 /tmp/tmpf_hfl9nw.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpf_hfl9nw.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = NULL;\n    foreach ($lst as $num) {\n\
    \        if ($prev !== NULL && $num <= $prev) {\n            return false;\n \
    \       }\n        $prev = $num;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2o45r3dv.php:49\n\
    Stack trace:\n#0 /tmp/tmp2o45r3dv.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp2o45r3dv.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    foreach ($lst as $item) {\n\
    \        if ($prev !== null && $prev >= $item) {\n            return false;\n\
    \        }\n        $prev = $item;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp602z29al.php:49\n\
    Stack trace:\n#0 /tmp/tmp602z29al.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp602z29al.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $len = count($lst);\n    if ($len == 1) {\n  \
    \      return true;\n    } else {\n        for ($i = 0; $i < $len - 1; $i++) {\n\
    \            if ($lst[$i] >= $lst[$i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpps43jxm8.php:52\n\
    Stack trace:\n#0 /tmp/tmpps43jxm8.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpps43jxm8.php\
    \ on line 52\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev !== null && $num <= $prev) {\n         \
    \   $sorted = false;\n            break;\n        }\n        $prev = $num;\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz1_bkufy.php:51\n\
    Stack trace:\n#0 /tmp/tmpz1_bkufy.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpz1_bkufy.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $item) {\n        if ($prev !== null && $item <= $prev) {\n       \
    \     $sorted = false;\n            break;\n        }\n        $prev = $item;\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppxxrkw5t.php:51\n\
    Stack trace:\n#0 /tmp/tmppxxrkw5t.php(55): test()\n#1 {main}\n  thrown in /tmp/tmppxxrkw5t.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    if (count($lst) == 1) {\n        return true;\n\
    \    }\n    $prev = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n   \
    \     if ($lst[$i] < $prev) {\n            return false;\n        }\n        $prev\
    \ = $lst[$i];\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp107rsfcw.php:50\n\
    Stack trace:\n#0 /tmp/tmp107rsfcw.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp107rsfcw.php\
    \ on line 50\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n  $last = null;\n  foreach ($lst as $item) {\n   \
    \ if ($last !== null && $last >= $item) {\n      return false;\n    }\n    $last\
    \ = $item;\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0km_5qss.php:49\n\
    Stack trace:\n#0 /tmp/tmp0km_5qss.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp0km_5qss.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $len = count($lst);\n    if ($len == 1) {\n  \
    \      return true;\n    }\n    for ($i = 0; $i < $len - 1; $i++) {\n        if\
    \ ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu6nks3hh.php:51\n\
    Stack trace:\n#0 /tmp/tmpu6nks3hh.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpu6nks3hh.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n  $prev = null;\n  foreach ($lst as $num) {\n    if\
    \ ($prev !== null && $num <= $prev) {\n      return false;\n    }\n    $prev =\
    \ $num;\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5bn4m47k.php:49\n\
    Stack trace:\n#0 /tmp/tmp5bn4m47k.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp5bn4m47k.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n  $sorted = true;\n  $prev = $lst[0];\n  for ($i =\
    \ 1; $i < count($lst); $i++) {\n    if ($lst[$i] < $prev) {\n      $sorted = false;\n\
    \      break;\n    }\n    $prev = $lst[$i];\n  }\n  return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2s11z3tv.php:49\n\
    Stack trace:\n#0 /tmp/tmp2s11z3tv.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp2s11z3tv.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev !== null && $num <= $prev) {\n         \
    \   $sorted = false;\n            break;\n        }\n        $prev = $num;\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz1_bkufy.php:51\n\
    Stack trace:\n#0 /tmp/tmpz1_bkufy.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpz1_bkufy.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $len = count($lst);\n    if ($len == 1) {\n  \
    \      return true;\n    }\n    for ($i = 0; $i < $len - 1; $i++) {\n        if\
    \ ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu6nks3hh.php:51\n\
    Stack trace:\n#0 /tmp/tmpu6nks3hh.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpu6nks3hh.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n  $last = $lst[0];\n  $duplicate = false;\n  foreach\
    \ ($lst as $num) {\n    if ($num == $last) {\n      if ($duplicate) {\n      \
    \  return false;\n      }\n      $duplicate = true;\n    } else {\n      $duplicate\
    \ = false;\n    }\n    if ($num < $last) {\n      return false;\n    }\n    $last\
    \ = $num;\n  }\n  return true;\n}\n\necho is_sorted(array(5)) . \"\\n\";\necho\
    \ is_sorted(array(1, 2, 3, 4, 5)) . \"\\n\";\necho is_sorted(array(1, 3, 2, 4,\
    \ 5)) . \"\\n\";\necho is_sorted(array(1, 2, 3, 4, 5, 6)) . \"\\n\";\necho is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7)) . \"\\n\";\necho is_sorted(array(1, 3, 2, 4, 5, 6, 7)) .\
    \ \"\\n\";\necho is_sorted(array(1, 2, 2, 3, 3, 4)) . \"\\n\";\necho is_sorted(array(1,\
    \ 2, 2, 2, 3, 4)) . \"\\n\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    1


    1

    1


    1


    '
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev === null) {\n            $prev = $num;\n\
    \        } else {\n            if ($num < $prev) {\n                $sorted =\
    \ false;\n                break;\n            }\n            $prev = $num;\n \
    \       }\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n \
    \   return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzt9z7umq.php:53\n\
    Stack trace:\n#0 /tmp/tmpzt9z7umq.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpzt9z7umq.php\
    \ on line 53\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $last = 0;\n    $duplicate\
    \ = false;\n    foreach ($lst as $num) {\n        if ($num == $last) {\n     \
    \       $duplicate = true;\n        }\n        if ($num < $last) {\n         \
    \   $sorted = false;\n        }\n        $last = $num;\n    }\n    return $sorted\
    \ && !$duplicate;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphbx_qegn.php:53\n\
    Stack trace:\n#0 /tmp/tmphbx_qegn.php(57): test()\n#1 {main}\n  thrown in /tmp/tmphbx_qegn.php\
    \ on line 53\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $len = count($lst);\n    if ($len == 1) {\n  \
    \      return true;\n    }\n    for ($i = 0; $i < $len - 1; $i++) {\n        if\
    \ ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsc601z_x.php:50\n\
    Stack trace:\n#0 /tmp/tmpsc601z_x.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpsc601z_x.php\
    \ on line 50\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $len = count($lst);\n    if ($len == 1) {\n  \
    \      return true;\n    }\n    for ($i = 0; $i < $len - 1; $i++) {\n        if\
    \ ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu6nks3hh.php:51\n\
    Stack trace:\n#0 /tmp/tmpu6nks3hh.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpu6nks3hh.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $lst_len = count($lst);\n    if ($lst_len == 1)\
    \ {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len - 1; $i++) {\n\
    \        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8h1pls57.php:51\n\
    Stack trace:\n#0 /tmp/tmp8h1pls57.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp8h1pls57.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $len = count($lst);\n    if ($len == 1) {\n  \
    \      return true;\n    }\n    for ($i = 0; $i < $len - 1; $i++) {\n        if\
    \ ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu6nks3hh.php:51\n\
    Stack trace:\n#0 /tmp/tmpu6nks3hh.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpu6nks3hh.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $lst_len = count($lst);\n    for ($i = 0; $i <\
    \ $lst_len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqq0wo06q.php:46\n\
    Stack trace:\n#0 /tmp/tmpqq0wo06q.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpqq0wo06q.php\
    \ on line 46\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $lst_len = count($lst);\n    if ($lst_len == 1)\
    \ {\n        return true;\n    }\n    $prev = $lst[0];\n    for ($i = 1; $i <\
    \ $lst_len; $i++) {\n        if ($lst[$i] < $prev) {\n            return false;\n\
    \        }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bw0ur9i.php:51\n\
    Stack trace:\n#0 /tmp/tmp_bw0ur9i.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp_bw0ur9i.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $item) {\n        if ($prev !== null && $item <= $prev) {\n       \
    \     $sorted = false;\n            break;\n        }\n        $prev = $item;\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppxxrkw5t.php:51\n\
    Stack trace:\n#0 /tmp/tmppxxrkw5t.php(55): test()\n#1 {main}\n  thrown in /tmp/tmppxxrkw5t.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $lst_len = count($lst);\n    if ($lst_len == 1)\
    \ {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len - 1; $i++) {\n\
    \        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu4ajeg4s.php:49\n\
    Stack trace:\n#0 /tmp/tmpu4ajeg4s.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpu4ajeg4s.php\
    \ on line 49\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev !== null && $num <= $prev) {\n         \
    \   $sorted = false;\n            break;\n        }\n        $prev = $num;\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz1_bkufy.php:51\n\
    Stack trace:\n#0 /tmp/tmpz1_bkufy.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpz1_bkufy.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $item) {\n        if ($prev !== null && $item <= $prev) {\n       \
    \     $sorted = false;\n            break;\n        }\n        $prev = $item;\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppxxrkw5t.php:51\n\
    Stack trace:\n#0 /tmp/tmppxxrkw5t.php(55): test()\n#1 {main}\n  thrown in /tmp/tmppxxrkw5t.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $lst_len = count($lst);\n    if ($lst_len == 1)\
    \ {\n        return true;\n    }\n    $prev = $lst[0];\n    for ($i = 1; $i <\
    \ $lst_len; $i++) {\n        if ($lst[$i] < $prev) {\n            return false;\n\
    \        }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bw0ur9i.php:51\n\
    Stack trace:\n#0 /tmp/tmp_bw0ur9i.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp_bw0ur9i.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $i = 0;\n    $j = 1;\n    $len = count($lst);\n\
    \    while ($j < $len) {\n        if ($lst[$i] > $lst[$j]) {\n            return\
    \ false;\n        }\n        $i++;\n        $j++;\n    }\n    return true;\n}\n\
    \nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgse9w2il.php:50\n\
    Stack trace:\n#0 /tmp/tmpgse9w2il.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpgse9w2il.php\
    \ on line 50\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $last = -1;\n    foreach ($lst as $num) {\n  \
    \      if ($num <= $last) {\n            return false;\n        }\n        $last\
    \ = $num;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmkk64glk.php:49\n\
    Stack trace:\n#0 /tmp/tmpmkk64glk.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpmkk64glk.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    foreach ($lst as $num) {\n\
    \        if ($prev !== null && $num <= $prev) {\n            return false;\n \
    \       }\n        $prev = $num;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwi63wb5.php:49\n\
    Stack trace:\n#0 /tmp/tmpqwi63wb5.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpqwi63wb5.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n  // Your code here\n  $sorted = true;\n  $prev =\
    \ null;\n  foreach ($lst as $num) {\n    if ($prev === null) {\n      $prev =\
    \ $num;\n    } else if ($num < $prev) {\n      $sorted = false;\n      break;\n\
    \    } else if ($num === $prev) {\n      $sorted = false;\n      break;\n    }\
    \ else {\n      $prev = $num;\n    }\n  }\n  return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptnnvldac.php:58\n\
    Stack trace:\n#0 /tmp/tmptnnvldac.php(62): test()\n#1 {main}\n  thrown in /tmp/tmptnnvldac.php\
    \ on line 58\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n  $prev = null;\n  foreach ($lst as $num) {\n    if\
    \ ($prev !== null && $num <= $prev) {\n      return false;\n    }\n    $prev =\
    \ $num;\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5bn4m47k.php:49\n\
    Stack trace:\n#0 /tmp/tmp5bn4m47k.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp5bn4m47k.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev === null) {\n            $prev = $num;\n\
    \        } else if ($num < $prev) {\n            $sorted = false;\n          \
    \  break;\n        } else {\n            $prev = $num;\n        }\n    }\n   \
    \ return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc81rtj59.php:52\n\
    Stack trace:\n#0 /tmp/tmpc81rtj59.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpc81rtj59.php\
    \ on line 52\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n  $sorted = true;\n  $prev = 0;\n  $dup = false;\n\
    \  foreach ($lst as $num) {\n    if ($num == $prev) {\n      $dup = true;\n  \
    \  }\n    if ($num < $prev) {\n      $sorted = false;\n    }\n    $prev = $num;\n\
    \  }\n  return $sorted && !$dup;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4itgn_3y.php:54\n\
    Stack trace:\n#0 /tmp/tmp4itgn_3y.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp4itgn_3y.php\
    \ on line 54\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n\t$lst_len = count($lst);\n\tif ($lst_len == 1) {\n\
    \t\treturn true;\n\t}\n\tfor ($i = 0; $i < $lst_len - 1; $i++) {\n\t\tif ($lst[$i]\
    \ >= $lst[$i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprz3upogm.php:51\n\
    Stack trace:\n#0 /tmp/tmprz3upogm.php(55): test()\n#1 {main}\n  thrown in /tmp/tmprz3upogm.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    if (count($lst) == 1) {\n        return true;\n\
    \    }\n    for ($i = 0; $i < count($lst) - 1; $i++) {\n        if ($lst[$i] >=\
    \ $lst[$i + 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0j_4_xjb.php:50\n\
    Stack trace:\n#0 /tmp/tmp0j_4_xjb.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp0j_4_xjb.php\
    \ on line 50\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n  $sorted = true;\n  $prev = $lst[0];\n  for ($i =\
    \ 1; $i < count($lst); $i++) {\n    if ($lst[$i] < $prev) {\n      $sorted = false;\n\
    \      break;\n    }\n    $prev = $lst[$i];\n  }\n  return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2s11z3tv.php:49\n\
    Stack trace:\n#0 /tmp/tmp2s11z3tv.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp2s11z3tv.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev !== null && $num <= $prev) {\n         \
    \   $sorted = false;\n            break;\n        }\n        $prev = $num;\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz1_bkufy.php:51\n\
    Stack trace:\n#0 /tmp/tmpz1_bkufy.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpz1_bkufy.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    foreach ($lst as $item) {\n\
    \        if ($prev !== null && $prev >= $item) {\n            return false;\n\
    \        }\n        $prev = $item;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp602z29al.php:49\n\
    Stack trace:\n#0 /tmp/tmp602z29al.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp602z29al.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = 0;\n    foreach ($lst\
    \ as $num) {\n        if ($num < $prev) {\n            $sorted = false;\n    \
    \        break;\n        }\n        $prev = $num;\n    }\n    return $sorted;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9bkw51z6.php:49\n\
    Stack trace:\n#0 /tmp/tmp9bkw51z6.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp9bkw51z6.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    foreach ($lst as $num) {\n\
    \        if ($prev !== null && $num <= $prev) {\n            return false;\n \
    \       }\n        $prev = $num;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwi63wb5.php:49\n\
    Stack trace:\n#0 /tmp/tmpqwi63wb5.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpqwi63wb5.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $lst_len = count($lst);\n    if ($lst_len == 1)\
    \ {\n        return true;\n    }\n    $prev = $lst[0];\n    for ($i = 1; $i <\
    \ $lst_len; $i++) {\n        if ($lst[$i] < $prev) {\n            return false;\n\
    \        }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bw0ur9i.php:51\n\
    Stack trace:\n#0 /tmp/tmp_bw0ur9i.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp_bw0ur9i.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $len = count($lst);\n    if ($len == 1) {\n  \
    \      return true;\n    }\n    for ($i = 0; $i < $len - 1; $i++) {\n        if\
    \ ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu6nks3hh.php:51\n\
    Stack trace:\n#0 /tmp/tmpu6nks3hh.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpu6nks3hh.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $len = count($lst);\n    if ($len == 1) {\n  \
    \      return true;\n    }\n    for ($i = 0; $i < $len - 1; $i++) {\n        if\
    \ ($lst[$i] > $lst[$i + 1]) {\n            return false;\n        }\n    }\n \
    \   return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp06e7r21_.php:49\n\
    Stack trace:\n#0 /tmp/tmp06e7r21_.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp06e7r21_.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = NULL;\n    foreach\
    \ ($lst as $num) {\n        if ($prev != NULL && $num <= $prev) {\n          \
    \  $sorted = false;\n            break;\n        }\n        $prev = $num;\n  \
    \  }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5fjsgh3y.php:51\n\
    Stack trace:\n#0 /tmp/tmp5fjsgh3y.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp5fjsgh3y.php\
    \ on line 51\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev !== null && $num <= $prev) {\n         \
    \   $sorted = false;\n            break;\n        }\n        $prev = $num;\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz1_bkufy.php:51\n\
    Stack trace:\n#0 /tmp/tmpz1_bkufy.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpz1_bkufy.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    foreach ($lst as $item) {\n\
    \        if ($prev !== null && $prev >= $item) {\n            return false;\n\
    \        }\n        $prev = $item;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp602z29al.php:49\n\
    Stack trace:\n#0 /tmp/tmp602z29al.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp602z29al.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $count = count($lst);\n    if ($count == 1) {\n\
    \        return true;\n    }\n    for ($i = 0; $i < $count - 1; $i++) {\n    \
    \    if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn2oycvyw.php:49\n\
    Stack trace:\n#0 /tmp/tmpn2oycvyw.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpn2oycvyw.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\n$lst = array(1, 2, 3, 4, 5);\n$lst2 = array(1,\
    \ 3, 2, 4, 5);\n$lst3 = array(1, 2, 2, 3, 3, 4);\n$lst4 = array(1, 2, 2, 2, 3,\
    \ 4);\n\necho is_sorted($lst) . \"\\n\";\necho is_sorted($lst2) . \"\\n\";\necho\
    \ is_sorted($lst3) . \"\\n\";\necho is_sorted($lst4) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6it4_3wk.php:58\n\
    Stack trace:\n#0 /tmp/tmp6it4_3wk.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp6it4_3wk.php\
    \ on line 58\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $len = count($lst);\n   \
    \ for ($i = 0; $i < $len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n\
    \            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfy_c1kai.php:48\n\
    Stack trace:\n#0 /tmp/tmpfy_c1kai.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpfy_c1kai.php\
    \ on line 48\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n\t$sorted = true;\n\t$prev = $lst[0];\n\tfor ($i =\
    \ 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i] < $prev) {\n\t\t\t$sorted = false;\n\
    \t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\t}\n\treturn $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpspqbl4dg.php:49\n\
    Stack trace:\n#0 /tmp/tmpspqbl4dg.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpspqbl4dg.php\
    \ on line 49\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev !== null && $num <= $prev) {\n         \
    \   $sorted = false;\n            break;\n        }\n        $prev = $num;\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz1_bkufy.php:51\n\
    Stack trace:\n#0 /tmp/tmpz1_bkufy.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpz1_bkufy.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev !== null && $num <= $prev) {\n         \
    \   $sorted = false;\n            break;\n        }\n        $prev = $num;\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz1_bkufy.php:51\n\
    Stack trace:\n#0 /tmp/tmpz1_bkufy.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpz1_bkufy.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $count = count($lst);\n    if ($count == 1) {\n\
    \        return true;\n    } else {\n        for ($i = 0; $i < $count - 1; $i++)\
    \ {\n            if ($lst[$i] > $lst[$i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp09vq2_0g.php:50\n\
    Stack trace:\n#0 /tmp/tmp09vq2_0g.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp09vq2_0g.php\
    \ on line 50\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n  $sorted = true;\n  $prev = 0;\n  $dup = false;\n\
    \  foreach ($lst as $item) {\n    if ($item == $prev) {\n      $dup = true;\n\
    \    }\n    if ($item < $prev) {\n      $sorted = false;\n    }\n    $prev = $item;\n\
    \  }\n  return $sorted && !$dup;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd50vmxuf.php:54\n\
    Stack trace:\n#0 /tmp/tmpd50vmxuf.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpd50vmxuf.php\
    \ on line 54\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n  $len = count($lst);\n  if ($len == 1) {\n    return\
    \ true;\n  }\n  for ($i = 0; $i < $len - 1; $i++) {\n    if ($lst[$i] >= $lst[$i\
    \ + 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpakme1tz5.php:51\n\
    Stack trace:\n#0 /tmp/tmpakme1tz5.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpakme1tz5.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n\t$sorted = true;\n\t$prev = null;\n\tforeach ($lst\
    \ as $num) {\n\t\tif ($prev !== null && $num <= $prev) {\n\t\t\t$sorted = false;\n\
    \t\t\tbreak;\n\t\t}\n\t\t$prev = $num;\n\t}\n\treturn $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2obfd6g.php:51\n\
    Stack trace:\n#0 /tmp/tmpg2obfd6g.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpg2obfd6g.php\
    \ on line 51\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $last = 0;\n    foreach ($lst as $num) {\n   \
    \     if ($num < $last) {\n            return false;\n        }\n        $last\
    \ = $num;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcglplzwq.php:47\n\
    Stack trace:\n#0 /tmp/tmpcglplzwq.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpcglplzwq.php\
    \ on line 47\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev !== null && $num <= $prev) {\n         \
    \   $sorted = false;\n            break;\n        }\n        $prev = $num;\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz1_bkufy.php:51\n\
    Stack trace:\n#0 /tmp/tmpz1_bkufy.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpz1_bkufy.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev !== null && $num < $prev) {\n          \
    \  $sorted = false;\n            break;\n        }\n        $prev = $num;\n  \
    \  }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp89hdnvrg.php:49\n\
    Stack trace:\n#0 /tmp/tmp89hdnvrg.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp89hdnvrg.php\
    \ on line 49\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev !== null && $num <= $prev) {\n         \
    \   $sorted = false;\n            break;\n        }\n        $prev = $num;\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz1_bkufy.php:51\n\
    Stack trace:\n#0 /tmp/tmpz1_bkufy.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpz1_bkufy.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    foreach ($lst as $item) {\n\
    \        if ($prev !== null && $prev >= $item) {\n            return false;\n\
    \        }\n        $prev = $item;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp602z29al.php:49\n\
    Stack trace:\n#0 /tmp/tmp602z29al.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp602z29al.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $last = null;\n    foreach\
    \ ($lst as $item) {\n        if ($last === null) {\n            $last = $item;\n\
    \        } else if ($last !== $item) {\n            if ($last > $item) {\n   \
    \             $sorted = false;\n                break;\n            }\n      \
    \      $last = $item;\n        } else {\n            $sorted = false;\n      \
    \      break;\n        }\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fof3k67.php:58\n\
    Stack trace:\n#0 /tmp/tmp1fof3k67.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp1fof3k67.php\
    \ on line 58\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    foreach ($lst as $num) {\n\
    \        if ($prev !== null && $num <= $prev) {\n            return false;\n \
    \       }\n        $prev = $num;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwi63wb5.php:49\n\
    Stack trace:\n#0 /tmp/tmpqwi63wb5.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpqwi63wb5.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $lst_len = count($lst);\n    if ($lst_len == 1)\
    \ {\n        return true;\n    }\n    $prev = $lst[0];\n    for ($i = 1; $i <\
    \ $lst_len; $i++) {\n        if ($lst[$i] < $prev) {\n            return false;\n\
    \        }\n        $prev = $lst[$i];\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpppv_qjpx.php:50\n\
    Stack trace:\n#0 /tmp/tmpppv_qjpx.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpppv_qjpx.php\
    \ on line 50\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $lst_len = count($lst);\n    if ($lst_len == 1)\
    \ {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len - 1; $i++) {\n\
    \        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8h1pls57.php:51\n\
    Stack trace:\n#0 /tmp/tmp8h1pls57.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp8h1pls57.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    if (count($lst) == 1) {\n        return true;\n\
    \    }\n    $sorted = true;\n    for ($i = 0; $i < count($lst) - 1; $i++) {\n\
    \        if ($lst[$i] > $lst[$i + 1]) {\n            $sorted = false;\n      \
    \  }\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnipqj1n7.php:49\n\
    Stack trace:\n#0 /tmp/tmpnipqj1n7.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpnipqj1n7.php\
    \ on line 49\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    foreach ($lst as $num) {\n\
    \        if ($prev !== null && $num <= $prev) {\n            return false;\n \
    \       }\n        $prev = $num;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwi63wb5.php:49\n\
    Stack trace:\n#0 /tmp/tmpqwi63wb5.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpqwi63wb5.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $count = count($lst);\n    if ($count == 1) {\n\
    \        return true;\n    }\n    for ($i = 0; $i < $count - 1; $i++) {\n    \
    \    if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn2oycvyw.php:49\n\
    Stack trace:\n#0 /tmp/tmpn2oycvyw.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpn2oycvyw.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n\t$len = count($lst);\n\tif ($len == 1) {\n\t\treturn\
    \ true;\n\t}\n\tfor ($i = 0; $i < $len - 1; $i++) {\n\t\tif ($lst[$i] >= $lst[$i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc04dusx4.php:51\n\
    Stack trace:\n#0 /tmp/tmpc04dusx4.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpc04dusx4.php\
    \ on line 51\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n\t$lst_len = count($lst);\n\tif ($lst_len == 1) {\n\
    \t\treturn true;\n\t}\n\tfor ($i = 0; $i < $lst_len - 1; $i++) {\n\t\tif ($lst[$i]\
    \ >= $lst[$i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprz3upogm.php:51\n\
    Stack trace:\n#0 /tmp/tmprz3upogm.php(55): test()\n#1 {main}\n  thrown in /tmp/tmprz3upogm.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev !== null && $num <= $prev) {\n         \
    \   $sorted = false;\n            break;\n        }\n        $prev = $num;\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz1_bkufy.php:51\n\
    Stack trace:\n#0 /tmp/tmpz1_bkufy.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpz1_bkufy.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $lst_len = count($lst);\n    if ($lst_len == 1)\
    \ {\n        return true;\n    }\n    $prev = $lst[0];\n    for ($i = 1; $i <\
    \ $lst_len; $i++) {\n        if ($lst[$i] < $prev) {\n            return false;\n\
    \        }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bw0ur9i.php:51\n\
    Stack trace:\n#0 /tmp/tmp_bw0ur9i.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp_bw0ur9i.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $len = count($lst);\n    if ($len <= 1) {\n  \
    \      return true;\n    }\n    for ($i = 1; $i < $len; $i++) {\n        if ($lst[$i]\
    \ < $lst[$i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv1vg0onm.php:49\n\
    Stack trace:\n#0 /tmp/tmpv1vg0onm.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpv1vg0onm.php\
    \ on line 49\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    if (count($lst) == 1) {\n        return true;\n\
    \    }\n    $prev = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n   \
    \     if ($lst[$i] < $prev) {\n            return false;\n        }\n        $prev\
    \ = $lst[$i];\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp107rsfcw.php:50\n\
    Stack trace:\n#0 /tmp/tmp107rsfcw.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp107rsfcw.php\
    \ on line 50\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $count = count($lst);\n    if ($count == 1) {\n\
    \        return true;\n    }\n    for ($i = 0; $i < $count - 1; $i++) {\n    \
    \    if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n        }\n \
    \   }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdrx4hfbg.php:51\n\
    Stack trace:\n#0 /tmp/tmpdrx4hfbg.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpdrx4hfbg.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n  $sorted = true;\n  $last = null;\n  foreach ($lst\
    \ as $item) {\n    if ($last !== null && $item <= $last) {\n      $sorted = false;\n\
    \      break;\n    }\n    $last = $item;\n  }\n  return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr10jne25.php:51\n\
    Stack trace:\n#0 /tmp/tmpr10jne25.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpr10jne25.php\
    \ on line 51\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $lst_length = count($lst);\n    if ($lst_length\
    \ == 1) {\n        return true;\n    }\n    $prev = $lst[0];\n    for ($i = 1;\
    \ $i < $lst_length; $i++) {\n        if ($lst[$i] < $prev) {\n            return\
    \ false;\n        }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt5h4sp95.php:51\n\
    Stack trace:\n#0 /tmp/tmpt5h4sp95.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpt5h4sp95.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $last = null;\n    foreach\
    \ ($lst as $item) {\n        if ($last !== null && $item <= $last) {\n       \
    \     $sorted = false;\n            break;\n        }\n        $last = $item;\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_hfl9nw.php:51\n\
    Stack trace:\n#0 /tmp/tmpf_hfl9nw.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpf_hfl9nw.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n  $sorted = true;\n  $prev = null;\n  foreach ($lst\
    \ as $item) {\n    if ($prev !== null && $item <= $prev) {\n      $sorted = false;\n\
    \      break;\n    }\n    $prev = $item;\n  }\n  return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy6v4ve9v.php:51\n\
    Stack trace:\n#0 /tmp/tmpy6v4ve9v.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpy6v4ve9v.php\
    \ on line 51\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $last = -1;\n    foreach ($lst as $i) {\n    \
    \    if ($i <= $last) {\n            return false;\n        }\n        $last =\
    \ $i;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzqf1d_59.php:49\n\
    Stack trace:\n#0 /tmp/tmpzqf1d_59.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpzqf1d_59.php\
    \ on line 49\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $lst_len = count($lst);\n    if ($lst_len == 1)\
    \ {\n        return true;\n    }\n    $prev = $lst[0];\n    for ($i = 1; $i <\
    \ $lst_len; $i++) {\n        if ($lst[$i] < $prev) {\n            return false;\n\
    \        }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bw0ur9i.php:51\n\
    Stack trace:\n#0 /tmp/tmp_bw0ur9i.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp_bw0ur9i.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $len = count($lst);\n    for ($i = 0; $i < $len\
    \ - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqpq6h9m2.php:48\n\
    Stack trace:\n#0 /tmp/tmpqpq6h9m2.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpqpq6h9m2.php\
    \ on line 48\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    if (count($lst) == 1) {\n        return true;\n\
    \    }\n    $prev = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n   \
    \     if ($lst[$i] < $prev) {\n            return false;\n        }\n        $prev\
    \ = $lst[$i];\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp107rsfcw.php:50\n\
    Stack trace:\n#0 /tmp/tmp107rsfcw.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp107rsfcw.php\
    \ on line 50\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $item) {\n        if ($prev !== null && $item <= $prev) {\n       \
    \     $sorted = false;\n            break;\n        }\n        $prev = $item;\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppxxrkw5t.php:51\n\
    Stack trace:\n#0 /tmp/tmppxxrkw5t.php(55): test()\n#1 {main}\n  thrown in /tmp/tmppxxrkw5t.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    $dup = false;\n    foreach\
    \ ($lst as $item) {\n        if ($prev !== null && $item < $prev) {\n        \
    \    return false;\n        }\n        if ($prev !== null && $item == $prev) {\n\
    \            $dup = true;\n        }\n        $prev = $item;\n    }\n    return\
    \ !$dup;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuj1tahe6.php:53\n\
    Stack trace:\n#0 /tmp/tmpuj1tahe6.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpuj1tahe6.php\
    \ on line 53\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $last = 0;\n    foreach ($lst\
    \ as $num) {\n        if ($num < $last) {\n            $sorted = false;\n    \
    \        break;\n        }\n        $last = $num;\n    }\n    return $sorted;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp036y9a6i.php:49\n\
    Stack trace:\n#0 /tmp/tmp036y9a6i.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp036y9a6i.php\
    \ on line 49\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $len = count($lst);\n    if ($len == 1) {\n  \
    \      return true;\n    }\n    $prev = $lst[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($lst[$i] < $prev) {\n            return false;\n      \
    \  }\n        $prev = $lst[$i];\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps5_40tej.php:50\n\
    Stack trace:\n#0 /tmp/tmps5_40tej.php(56): test()\n#1 {main}\n  thrown in /tmp/tmps5_40tej.php\
    \ on line 50\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev !== null && $num <= $prev) {\n         \
    \   $sorted = false;\n            break;\n        }\n        $prev = $num;\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz1_bkufy.php:51\n\
    Stack trace:\n#0 /tmp/tmpz1_bkufy.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpz1_bkufy.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    if (count($lst) == 1) {\n        return true;\n\
    \    }\n    $prev = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n   \
    \     if ($lst[$i] < $prev) {\n            return false;\n        }\n        $prev\
    \ = $lst[$i];\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp107rsfcw.php:50\n\
    Stack trace:\n#0 /tmp/tmp107rsfcw.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp107rsfcw.php\
    \ on line 50\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    $duplicate\
    \ = false;\n    foreach ($lst as $num) {\n        if ($prev === null) {\n    \
    \        $prev = $num;\n        } else {\n            if ($num < $prev) {\n  \
    \              $sorted = false;\n            }\n            if ($num === $prev)\
    \ {\n                $duplicate = true;\n            }\n            $prev = $num;\n\
    \        }\n    }\n    return $sorted && !$duplicate;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn70lhpjd.php:58\n\
    Stack trace:\n#0 /tmp/tmpn70lhpjd.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpn70lhpjd.php\
    \ on line 58\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n\t$count = count($lst);\n\tif ($count == 1) {\n\t\t\
    return true;\n\t}\n\tfor ($i = 0; $i < $count - 1; $i++) {\n\t\tif ($lst[$i] >\
    \ $lst[$i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphek_bhww.php:49\n\
    Stack trace:\n#0 /tmp/tmphek_bhww.php(55): test()\n#1 {main}\n  thrown in /tmp/tmphek_bhww.php\
    \ on line 49\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    foreach ($lst as $num) {\n\
    \        if ($prev !== null && $num <= $prev) {\n            return false;\n \
    \       }\n        $prev = $num;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwi63wb5.php:49\n\
    Stack trace:\n#0 /tmp/tmpqwi63wb5.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpqwi63wb5.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $last = -1;\n    foreach\
    \ ($lst as $num) {\n        if ($num <= $last) {\n            $sorted = false;\n\
    \            break;\n        }\n        $last = $num;\n    }\n    return $sorted;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp87ll2if8.php:51\n\
    Stack trace:\n#0 /tmp/tmp87ll2if8.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp87ll2if8.php\
    \ on line 51\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $last = null;\n    foreach\
    \ ($lst as $num) {\n        if ($last != null && $num <= $last) {\n          \
    \  $sorted = false;\n            break;\n        }\n        $last = $num;\n  \
    \  }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt91nbw1p.php:51\n\
    Stack trace:\n#0 /tmp/tmpt91nbw1p.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpt91nbw1p.php\
    \ on line 51\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    foreach ($lst as $num) {\n\
    \        if ($prev !== null && $num <= $prev) {\n            return false;\n \
    \       }\n        $prev = $num;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwi63wb5.php:49\n\
    Stack trace:\n#0 /tmp/tmpqwi63wb5.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpqwi63wb5.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    foreach ($lst as $num) {\n\
    \        if ($prev !== null && $num <= $prev) {\n            return false;\n \
    \       }\n        $prev = $num;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwi63wb5.php:49\n\
    Stack trace:\n#0 /tmp/tmpqwi63wb5.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpqwi63wb5.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    // Your code here\n}\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmbdybp78.php:30\n\
    Stack trace:\n#0 /tmp/tmpmbdybp78.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpmbdybp78.php\
    \ on line 30\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    foreach ($lst as $num) {\n\
    \        if ($prev !== null && $num <= $prev) {\n            return false;\n \
    \       }\n        $prev = $num;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwi63wb5.php:49\n\
    Stack trace:\n#0 /tmp/tmpqwi63wb5.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpqwi63wb5.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $i = 0;\n    $len = count($lst);\n    while ($i\
    \ < $len - 1) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n\
    \        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuyeu8dts.php:48\n\
    Stack trace:\n#0 /tmp/tmpuyeu8dts.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpuyeu8dts.php\
    \ on line 48\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $lst_length = count($lst);\n    if ($lst_length\
    \ == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $lst_length - 1;\
    \ $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpar5bjpdj.php:51\n\
    Stack trace:\n#0 /tmp/tmpar5bjpdj.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpar5bjpdj.php\
    \ on line 51\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $last = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $last) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $last = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe7jrxv9o.php:49\n\
    Stack trace:\n#0 /tmp/tmpe7jrxv9o.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpe7jrxv9o.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $last = null;\n    foreach ($lst as $item) {\n\
    \        if ($last !== null && $last >= $item) {\n            return false;\n\
    \        }\n        $last = $item;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_0d2uafv.php:49\n\
    Stack trace:\n#0 /tmp/tmp_0d2uafv.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp_0d2uafv.php\
    \ on line 49\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $last = -1;\n    foreach\
    \ ($lst as $num) {\n        if ($num <= $last) {\n            $sorted = false;\n\
    \            break;\n        }\n        $last = $num;\n    }\n    return $sorted;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp87ll2if8.php:51\n\
    Stack trace:\n#0 /tmp/tmp87ll2if8.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp87ll2if8.php\
    \ on line 51\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n  $prev = null;\n  foreach ($lst as $num) {\n    if\
    \ ($prev !== null && $num <= $prev) {\n      return false;\n    }\n    $prev =\
    \ $num;\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5bn4m47k.php:49\n\
    Stack trace:\n#0 /tmp/tmp5bn4m47k.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp5bn4m47k.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev !== null && $num <= $prev) {\n         \
    \   $sorted = false;\n            break;\n        }\n        $prev = $num;\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz1_bkufy.php:51\n\
    Stack trace:\n#0 /tmp/tmpz1_bkufy.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpz1_bkufy.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev !== null && $num <= $prev) {\n         \
    \   $sorted = false;\n            break;\n        }\n        $prev = $num;\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz1_bkufy.php:51\n\
    Stack trace:\n#0 /tmp/tmpz1_bkufy.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpz1_bkufy.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    if (count($lst) == 1) {\n        return true;\n\
    \    }\n    $prev = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n   \
    \     if ($lst[$i] < $prev) {\n            return false;\n        }\n        $prev\
    \ = $lst[$i];\n    }\n    return true;\n}\nfunction candidate(...$args) {\n  \
    \  return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8n3rp1ru.php:49\n\
    Stack trace:\n#0 /tmp/tmp8n3rp1ru.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp8n3rp1ru.php\
    \ on line 49\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $count = count($lst);\n    if ($count == 1) {\n\
    \        return true;\n    }\n    $prev = $lst[0];\n    for ($i = 1; $i < $count;\
    \ $i++) {\n        if ($lst[$i] < $prev) {\n            return false;\n      \
    \  }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8948207c.php:51\n\
    Stack trace:\n#0 /tmp/tmp8948207c.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp8948207c.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n  $prev = 0;\n  $dup = false;\n  foreach ($lst as\
    \ $num) {\n    if ($num == $prev) {\n      $dup = true;\n    }\n    if ($num <\
    \ $prev) {\n      return false;\n    }\n    $prev = $num;\n  }\n  return !$dup;\n\
    }\n\n$lst = array(5);\necho is_sorted($lst) . \"\\n\";\n$lst = array(1, 2, 3,\
    \ 4, 5);\necho is_sorted($lst) . \"\\n\";\n$lst = array(1, 3, 2, 4, 5);\necho\
    \ is_sorted($lst) . \"\\n\";\n$lst = array(1, 2, 3, 4, 5, 6);\necho is_sorted($lst)\
    \ . \"\\n\";\n$lst = array(1, 2, 3, 4, 5, 6, 7);\necho is_sorted($lst) . \"\\\
    n\";\n$lst = array(1, 3, 2, 4, 5, 6, 7);\necho is_sorted($lst) . \"\\n\";\n$lst\
    \ = array(1, 2, 2, 3, 3, 4);\necho is_sorted($lst) . \"\\n\";\n$lst = array(1,\
    \ 2, 2, 2, 3, 4);\necho is_sorted($lst) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n\n1\n1\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpgh4mjoyz.php:69\nStack trace:\n#0 /tmp/tmpgh4mjoyz.php(73): test()\n\
    #1 {main}\n  thrown in /tmp/tmpgh4mjoyz.php on line 69\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $item) {\n        if ($prev !== null && $item <= $prev) {\n       \
    \     $sorted = false;\n            break;\n        }\n        $prev = $item;\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppxxrkw5t.php:51\n\
    Stack trace:\n#0 /tmp/tmppxxrkw5t.php(55): test()\n#1 {main}\n  thrown in /tmp/tmppxxrkw5t.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n  $sorted = true;\n  $last = $lst[0];\n  for ($i =\
    \ 1; $i < count($lst); $i++) {\n    if ($lst[$i] < $last) {\n      $sorted = false;\n\
    \      break;\n    }\n    $last = $lst[$i];\n  }\n  return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe02dfw9q.php:49\n\
    Stack trace:\n#0 /tmp/tmpe02dfw9q.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpe02dfw9q.php\
    \ on line 49\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = $lst[0];\n    for ($i = 1; $i < count($lst);\
    \ $i++) {\n        if ($lst[$i] < $prev) {\n            return false;\n      \
    \  }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu83f8cnf.php:47\n\
    Stack trace:\n#0 /tmp/tmpu83f8cnf.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpu83f8cnf.php\
    \ on line 47\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = $lst[0];\n    foreach ($lst as $num) {\n\
    \        if ($num < $prev) {\n            return false;\n        }\n        $prev\
    \ = $num;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpme1p_wib.php:47\n\
    Stack trace:\n#0 /tmp/tmpme1p_wib.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpme1p_wib.php\
    \ on line 47\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = $lst[0];\n    for ($i = 1; $i < count($lst);\
    \ $i++) {\n        if ($lst[$i] < $prev) {\n            return false;\n      \
    \  }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu83f8cnf.php:47\n\
    Stack trace:\n#0 /tmp/tmpu83f8cnf.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpu83f8cnf.php\
    \ on line 47\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = 0;\n    $duplicate\
    \ = false;\n    foreach ($lst as $num) {\n        if ($num == $prev) {\n     \
    \       $duplicate = true;\n        }\n        if ($num < $prev) {\n         \
    \   $sorted = false;\n        }\n        $prev = $num;\n    }\n    return $sorted\
    \ && !$duplicate;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxi80liqp.php:53\n\
    Stack trace:\n#0 /tmp/tmpxi80liqp.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpxi80liqp.php\
    \ on line 53\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $len = count($lst);\n    if ($len == 1) {\n  \
    \      return true;\n    }\n    for ($i = 0; $i < $len - 1; $i++) {\n        if\
    \ ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsc601z_x.php:50\n\
    Stack trace:\n#0 /tmp/tmpsc601z_x.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpsc601z_x.php\
    \ on line 50\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppj2tsmyh.php:48\n\
    Stack trace:\n#0 /tmp/tmppj2tsmyh.php(54): test()\n#1 {main}\n  thrown in /tmp/tmppj2tsmyh.php\
    \ on line 48\n"
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    $count = 0;\n    foreach ($lst\
    \ as $num) {\n        if ($prev !== null && $num < $prev) {\n            return\
    \ false;\n        }\n        if ($prev === $num) {\n            $count++;\n  \
    \      } else {\n            $count = 0;\n        }\n        if ($count > 1) {\n\
    \            return false;\n        }\n        $prev = $num;\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n  $sorted = true;\n  $prev = null;\n  foreach ($lst\
    \ as $num) {\n    if ($prev !== null && $num <= $prev) {\n      $sorted = false;\n\
    \      break;\n    }\n    $prev = $num;\n  }\n  return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7c3kf1jp.php:51\n\
    Stack trace:\n#0 /tmp/tmp7c3kf1jp.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp7c3kf1jp.php\
    \ on line 51\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $i = 0;\n    $j = 1;\n    $len = count($lst);\n\
    \    while ($j < $len) {\n        if ($lst[$i] > $lst[$j]) {\n            return\
    \ false;\n        }\n        $i++;\n        $j++;\n    }\n    return true;\n}\n\
    \nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgse9w2il.php:50\n\
    Stack trace:\n#0 /tmp/tmpgse9w2il.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpgse9w2il.php\
    \ on line 50\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $sorted = true;\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuqnaml3.php:49\n\
    Stack trace:\n#0 /tmp/tmpfuqnaml3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfuqnaml3.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $last = null;\n    foreach ($lst as $item) {\n\
    \        if ($last !== null && $last >= $item) {\n            return false;\n\
    \        }\n        $last = $item;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_0d2uafv.php:49\n\
    Stack trace:\n#0 /tmp/tmp_0d2uafv.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp_0d2uafv.php\
    \ on line 49\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n\t$i = 0;\n\t$j = 1;\n\t$len = count($lst);\n\twhile\
    \ ($j < $len) {\n\t\tif ($lst[$i] > $lst[$j]) {\n\t\t\treturn false;\n\t\t}\n\t\
    \t$i++;\n\t\t$j++;\n\t}\n\treturn true;\n}\nfunction candidate(...$args) {\n \
    \   return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp79ko2g2l.php:49\n\
    Stack trace:\n#0 /tmp/tmp79ko2g2l.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp79ko2g2l.php\
    \ on line 49\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $len = count($lst);\n    if ($len == 1) {\n  \
    \      return true;\n    }\n    for ($i = 0; $i < $len - 1; $i++) {\n        if\
    \ ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu6nks3hh.php:51\n\
    Stack trace:\n#0 /tmp/tmpu6nks3hh.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpu6nks3hh.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    foreach ($lst as $item) {\n\
    \        if ($prev !== null && $prev >= $item) {\n            return false;\n\
    \        }\n        $prev = $item;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp602z29al.php:49\n\
    Stack trace:\n#0 /tmp/tmp602z29al.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp602z29al.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $lst_len = count($lst);\n    if ($lst_len == 1)\
    \ {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len - 1; $i++) {\n\
    \        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu4ajeg4s.php:49\n\
    Stack trace:\n#0 /tmp/tmpu4ajeg4s.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpu4ajeg4s.php\
    \ on line 49\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    if (count($lst) == 1) {\n        return true;\n\
    \    }\n    for ($i = 0; $i < count($lst) - 1; $i++) {\n        if ($lst[$i] >=\
    \ $lst[$i + 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0j_4_xjb.php:50\n\
    Stack trace:\n#0 /tmp/tmp0j_4_xjb.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp0j_4_xjb.php\
    \ on line 50\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    foreach ($lst as $num) {\n\
    \        if ($prev !== null && $num <= $prev) {\n            return false;\n \
    \       }\n        $prev = $num;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwi63wb5.php:49\n\
    Stack trace:\n#0 /tmp/tmpqwi63wb5.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpqwi63wb5.php\
    \ on line 49\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $len = count($lst);\n    if ($len == 1) {\n  \
    \      return true;\n    }\n    for ($i = 0; $i < $len - 1; $i++) {\n        if\
    \ ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu6nks3hh.php:51\n\
    Stack trace:\n#0 /tmp/tmpu6nks3hh.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpu6nks3hh.php\
    \ on line 51\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $i = 0;\n    $j = 1;\n    while ($j < count($lst))\
    \ {\n        if ($lst[$i] > $lst[$j]) {\n            return false;\n        }\n\
    \        $i++;\n        $j++;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdjqotpze.php:49\n\
    Stack trace:\n#0 /tmp/tmpdjqotpze.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpdjqotpze.php\
    \ on line 49\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $last = null;\n    $duplicate = false;\n    foreach\
    \ ($lst as $num) {\n        if ($last !== null && $num < $last) {\n          \
    \  return false;\n        }\n        if ($last !== null && $num == $last) {\n\
    \            $duplicate = true;\n        }\n        $last = $num;\n    }\n   \
    \ return !$duplicate;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaxafarxi.php:53\n\
    Stack trace:\n#0 /tmp/tmpaxafarxi.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpaxafarxi.php\
    \ on line 53\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = NULL;\n    foreach ($lst as $item) {\n\
    \        if ($prev !== NULL && $prev >= $item) {\n            return false;\n\
    \        }\n        $prev = $item;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz1zo1pcd.php:49\n\
    Stack trace:\n#0 /tmp/tmpz1zo1pcd.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpz1zo1pcd.php\
    \ on line 49\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    if (count($lst) == 1) {\n        return true;\n\
    \    }\n    $prev = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n   \
    \     if ($lst[$i] < $prev) {\n            return false;\n        }\n        $prev\
    \ = $lst[$i];\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp107rsfcw.php:50\n\
    Stack trace:\n#0 /tmp/tmp107rsfcw.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp107rsfcw.php\
    \ on line 50\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
    // in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n//\
    \ true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n\
    // >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
    \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
    function is_sorted($lst) {\n    $prev = null;\n    foreach ($lst as $i) {\n  \
    \      if ($prev !== null && $i <= $prev) {\n            return false;\n     \
    \   }\n        $prev = $i;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnshzhqg0.php:49\n\
    Stack trace:\n#0 /tmp/tmpnshzhqg0.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpnshzhqg0.php\
    \ on line 49\n"
  timestamp: 1659730810
