name: HumanEval_90_next_smallest
language: php
prompt: "<?php\n// You are given an array of integers.\n// Write a function next_smallest()\
  \ that returns the 2nd smallest element of the array.\n// Return null if there is\
  \ no such element.\n// >>> next_smallest(array(1, 2, 3, 4, 5))\n// 2\n// >>> next_smallest(array(5,\
  \ 1, 4, 3, 2))\n// 2\n// >>> next_smallest(array())\n// null\n// >>> next_smallest(array(1,\
  \ 1))\n// null\nfunction next_smallest($lst) {\n"
tests: "function candidate(...$args) {\n    return next_smallest(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(array(1, 2, 3, 4, 5)) !== 2) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 1, 4, 3, 2)) !==\
  \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
  \ null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1))\
  \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 1, 1, 1, 0)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 1)) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-35,\
  \ 34, 12, -45)) !== -35) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    if (count($lst) < 2) {\n        return null;\n    }\n    $min =\
    \ $lst[0];\n    $second_min = null;\n    for ($i = 1; $i < count($lst); $i++)\
    \ {\n        if ($lst[$i] < $min) {\n            $second_min = $min;\n       \
    \     $min = $lst[$i];\n        } else if ($lst[$i] < $second_min || $second_min\
    \ === null) {\n            $second_min = $lst[$i];\n        }\n    }\n    return\
    \ $second_min;\n}\n", "    if (count($lst) < 2) {\n        return null;\n    }\n\
    \    $min = $lst[0];\n    $second_min = $lst[1];\n    for ($i = 1; $i < count($lst);\
    \ $i++) {\n        if ($lst[$i] < $min) {\n            $second_min = $min;\n \
    \           $min = $lst[$i];\n        } else if ($lst[$i] < $second_min) {\n \
    \           $second_min = $lst[$i];\n        }\n    }\n    return $second_min;\n\
    }\n", "    if (count($lst) < 2) {\n        return null;\n    }\n    $min = $lst[0];\n\
    \    $second_min = null;\n    for ($i = 1; $i < count($lst); $i++) {\n       \
    \ if ($lst[$i] < $min) {\n            $second_min = $min;\n            $min =\
    \ $lst[$i];\n        } else if ($lst[$i] > $min && ($second_min === null || $lst[$i]\
    \ < $second_min)) {\n            $second_min = $lst[$i];\n        }\n    }\n \
    \   return $second_min;\n}\n", "    if (count($lst) < 2) {\n        return null;\n\
    \    }\n    $min = $lst[0];\n    $sec_min = null;\n    for ($i = 1; $i < count($lst);\
    \ $i++) {\n        if ($lst[$i] < $min) {\n            $sec_min = $min;\n    \
    \        $min = $lst[$i];\n        } else if ($lst[$i] < $sec_min || $sec_min\
    \ === null) {\n            $sec_min = $lst[$i];\n        }\n    }\n    return\
    \ $sec_min;\n}\n", "    if (count($lst) < 2) {\n        return null;\n    }\n\
    \    $min = $lst[0];\n    $second_min = null;\n    for ($i = 1; $i < count($lst);\
    \ $i++) {\n        if ($lst[$i] < $min) {\n            $second_min = $min;\n \
    \           $min = $lst[$i];\n        } else if ($lst[$i] < $second_min || $second_min\
    \ === null) {\n            $second_min = $lst[$i];\n        }\n    }\n    return\
    \ $second_min;\n}\n", "    if (count($lst) < 2) {\n        return null;\n    }\n\
    \    $smallest = $lst[0];\n    $second_smallest = null;\n    for ($i = 1; $i <\
    \ count($lst); $i++) {\n        if ($lst[$i] < $smallest) {\n            $second_smallest\
    \ = $smallest;\n            $smallest = $lst[$i];\n        } elseif ($lst[$i]\
    \ < $second_smallest || $second_smallest === null) {\n            $second_smallest\
    \ = $lst[$i];\n        }\n    }\n    return $second_smallest;\n}\n", "    if (count($lst)\
    \ < 2) {\n        return null;\n    }\n    $min = min($lst);\n    $min_index =\
    \ array_search($min, $lst);\n    unset($lst[$min_index]);\n    return min($lst);\n\
    }\n", "    $min = min($lst);\n    $min_count = 0;\n    foreach ($lst as $item)\
    \ {\n        if ($item == $min) {\n            $min_count++;\n        }\n    }\n\
    \    if ($min_count > 1) {\n        return null;\n    }\n    $min_index = array_search($min,\
    \ $lst);\n    $lst[$min_index] = PHP_INT_MAX;\n    return min($lst);\n}\n", " \
    \   if (count($lst) < 2) {\n        return null;\n    }\n    $min = $lst[0];\n\
    \    $min2 = $lst[1];\n    for ($i = 1; $i < count($lst); $i++) {\n        if\
    \ ($lst[$i] < $min) {\n            $min2 = $min;\n            $min = $lst[$i];\n\
    \        } else if ($lst[$i] < $min2) {\n            $min2 = $lst[$i];\n     \
    \   }\n    }\n    return $min2;\n}\n", "    $smallest = null;\n    $second_smallest\
    \ = null;\n    foreach ($lst as $item) {\n        if ($smallest === null) {\n\
    \            $smallest = $item;\n        } else if ($item < $smallest) {\n   \
    \         $second_smallest = $smallest;\n            $smallest = $item;\n    \
    \    } else if ($second_smallest === null || $item < $second_smallest) {\n   \
    \         $second_smallest = $item;\n        }\n    }\n    return $second_smallest;\n\
    }\n", "    if (empty($lst)) {\n        return null;\n    }\n    $min = min($lst);\n\
    \    $min_count = count(array_keys($lst, $min));\n    if ($min_count > 1) {\n\
    \        return null;\n    }\n    $lst = array_diff($lst, array($min));\n    return\
    \ min($lst);\n}\n", "    if (count($lst) < 2) {\n        return null;\n    }\n\
    \    $min = min($lst);\n    $min_count = 0;\n    foreach ($lst as $v) {\n    \
    \    if ($v == $min) {\n            $min_count++;\n        }\n    }\n    if ($min_count\
    \ > 1) {\n        return null;\n    }\n    $min_index = array_search($min, $lst);\n\
    \    $lst[$min_index] = PHP_INT_MAX;\n    return min($lst);\n}\n", "    if (count($lst)\
    \ < 2) {\n        return null;\n    }\n    $min = min($lst);\n    $min_index =\
    \ array_search($min, $lst);\n    unset($lst[$min_index]);\n    $min2 = min($lst);\n\
    \    return $min2;\n}\n", "    if (count($lst) < 2) {\n        return null;\n\
    \    }\n    $min = min($lst);\n    $lst = array_diff($lst, [$min]);\n    return\
    \ min($lst);\n}\n", "    $min = min($lst);\n    $min_count = count(array_keys($lst,\
    \ $min));\n    if ($min_count > 1) {\n        return null;\n    }\n    $min_index\
    \ = array_search($min, $lst);\n    $lst[$min_index] = null;\n    return min($lst);\n\
    }\n", "\tif (count($lst) < 2) {\n\t\treturn null;\n\t}\n\t$min = $lst[0];\n\t\
    $min2 = null;\n\tforeach ($lst as $n) {\n\t\tif ($n < $min) {\n\t\t\t$min2 = $min;\n\
    \t\t\t$min = $n;\n\t\t} else if ($n < $min2 || $min2 === null) {\n\t\t\t$min2\
    \ = $n;\n\t\t}\n\t}\n\treturn $min2;\n}\n", "    $min = min($lst);\n    $min_count\
    \ = 0;\n    foreach ($lst as $item) {\n        if ($item == $min) {\n        \
    \    $min_count++;\n        }\n    }\n    if ($min_count > 1) {\n        return\
    \ null;\n    }\n    $min_index = array_search($min, $lst);\n    $lst_copy = $lst;\n\
    \    unset($lst_copy[$min_index]);\n    return min($lst_copy);\n}\n", "    if\
    \ (count($lst) < 2) {\n        return null;\n    }\n    $min = $lst[0];\n    $second_min\
    \ = null;\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] <\
    \ $min) {\n            $second_min = $min;\n            $min = $lst[$i];\n   \
    \     } else if ($lst[$i] < $second_min || $second_min === null) {\n         \
    \   $second_min = $lst[$i];\n        }\n    }\n    return $second_min;\n}\n",
  "    $smallest = $lst[0];\n    $second_smallest = null;\n    foreach ($lst as $item)\
    \ {\n        if ($item < $smallest) {\n            $second_smallest = $smallest;\n\
    \            $smallest = $item;\n        } else if ($item > $smallest && ($second_smallest\
    \ === null || $item < $second_smallest)) {\n            $second_smallest = $item;\n\
    \        }\n    }\n    return $second_smallest;\n}\n", "  if (count($lst) < 2)\
    \ {\n    return null;\n  }\n  $smallest = $lst[0];\n  $second_smallest = null;\n\
    \  for ($i = 1; $i < count($lst); $i++) {\n    if ($lst[$i] < $smallest) {\n \
    \     $second_smallest = $smallest;\n      $smallest = $lst[$i];\n    } else if\
    \ ($lst[$i] < $second_smallest || $second_smallest == null) {\n      $second_smallest\
    \ = $lst[$i];\n    }\n  }\n  return $second_smallest;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
