language: php
name: HumanEval_86_anti_shuffle
results:
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_words = array_map(function($word)\
    \ {\n        return implode(\"\", $word);\n    }, $new_words);\n    return implode(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $newArr = [];\n    foreach ($arr as $word) {\n  \
    \      $newArr[] = implode('', str_split($word));\n    }\n    $newStr = implode('\
    \ ', $newArr);\n    return $newStr;\n}\n\necho anti_shuffle(\"Hi\") . \"\\n\"\
    ;\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi\nhello\nHello World!!!\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpojx7v_kw.php:33\nStack trace:\n#0 /tmp/tmpojx7v_kw.php(41): test()\n\
    #1 {main}\n  thrown in /tmp/tmpojx7v_kw.php on line 33\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_words = array_map(function($word)\
    \ {\n        return implode(\"\", $word);\n    }, $new_words);\n    return implode(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return trim($result);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpj_ckn257.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpj_ckn257.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj_ckn257.php:31\n\
    Stack trace:\n#0 /tmp/tmpj_ckn257.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpj_ckn257.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_words_str = [];\n\
    \    foreach ($new_words as $word) {\n        $new_words_str[] = implode(\"\"\
    , $word);\n    }\n    return implode(\" \", $new_words_str);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpzkof7o0h.php\
    \ on line 19\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpzkof7o0h.php on line 19\nArray Array \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpzkof7o0h.php on line 19\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpzkof7o0h.php:30\nStack trace:\n\
    #0 /tmp/tmpzkof7o0h.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpzkof7o0h.php\
    \ on line 30\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_words_str = [];\n\
    \    foreach ($new_words as $word) {\n        $new_words_str[] = implode(\"\"\
    , $word);\n    }\n    return implode(\" \", $new_words_str);\n}\n\necho anti_shuffle(\"\
    Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    $new_string = \"\";\n \
    \   foreach ($new_arr as $key => $value) {\n        $new_string .= implode($new_arr[$key])\
    \ . \" \";\n    }\n    return $new_string;\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello !!!Wdlor \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdtk49yad.php:35\n\
    Stack trace:\n#0 /tmp/tmpdtk49yad.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpdtk49yad.php\
    \ on line 35\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = anti_shuffle_word($word);\n    }\n    return implode(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmphxys73l6.php:18\nStack trace:\n#0 /tmp/tmphxys73l6.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmphxys73l6.php(28): candidate('Hi')\n#2 /tmp/tmphxys73l6.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmphxys73l6.php on line 18\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpr076hi95.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpr076hi95.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr076hi95.php:31\n\
    Stack trace:\n#0 /tmp/tmpr076hi95.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpr076hi95.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmppyg2ltkf.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmppyg2ltkf.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppyg2ltkf.php:30\n\
    Stack trace:\n#0 /tmp/tmppyg2ltkf.php(39): test()\n#1 {main}\n  thrown in /tmp/tmppyg2ltkf.php\
    \ on line 30\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($s as $word) {\n  \
    \      $result .= str_split($word);\n        sort($result);\n        $result =\
    \ implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmp2nehhwsg.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp2nehhwsg.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmp2nehhwsg.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmp2nehhwsg.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmp2nehhwsg.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmp2nehhwsg.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp2nehhwsg.php:31\nStack trace:\n\
    #0 /tmp/tmp2nehhwsg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp2nehhwsg.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= implode(\"\", str_split($word)) . \" \";\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpislsji3f.php:28\n\
    Stack trace:\n#0 /tmp/tmpislsji3f.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpislsji3f.php\
    \ on line 28\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmplwvrk5jx.php\
    \ on line 19\n\nWarning: implode(): Argument must be an array in /tmp/tmplwvrk5jx.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmplwvrk5jx.php on line 19\n\nWarning: implode(): Argument must be an\
    \ array in /tmp/tmplwvrk5jx.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmplwvrk5jx.php on line 19\n\nWarning: implode():\
    \ Argument must be an array in /tmp/tmplwvrk5jx.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmplwvrk5jx.php:32\nStack trace:\n\
    #0 /tmp/tmplwvrk5jx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmplwvrk5jx.php\
    \ on line 32\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_words = array_map(function($word)\
    \ {\n        return implode(\"\", $word);\n    }, $new_words);\n    return implode(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ .= \" \";\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpa8h40gnw.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa8h40gnw.php:30\n\
    Stack trace:\n#0 /tmp/tmpa8h40gnw.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpa8h40gnw.php\
    \ on line 30\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    $new_arr2 = [];\n    foreach\
    \ ($new_arr as $key => $value) {\n        $new_arr2[] = implode($new_arr[$key]);\n\
    \    }\n    return implode(\" \", $new_arr2);\n}\necho anti_shuffle(\"Hi\") .\
    \ PHP_EOL;\necho anti_shuffle(\"hello\") . PHP_EOL;\necho anti_shuffle(\"Hello\
    \ World!!!\") . PHP_EOL;\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpzyc2l8oe.php\
    \ on line 19\n\nWarning: implode(): Argument must be an array in /tmp/tmpzyc2l8oe.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzyc2l8oe.php:31\n\
    Stack trace:\n#0 /tmp/tmpzyc2l8oe.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpzyc2l8oe.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $result = [];\n  foreach ($arr as $word) {\n    $result[]\
    \ = str_split($word);\n  }\n  foreach ($result as $key => $value) {\n    sort($result[$key]);\n\
    \  }\n  $result = array_map(function($v) { return implode($v); }, $result);\n\
    \  return implode(\" \", $result);\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    for ($i = 0; $i < count($arr); $i++) {\n        $arr[$i]\
    \ = str_split($arr[$i]);\n        sort($arr[$i]);\n        $arr[$i] = implode($arr[$i]);\n\
    \    }\n    return implode(\" \", $arr);\n}\n\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    foreach ($words as $key => $word) {\n        $words[$key]\
    \ = str_split($word);\n        sort($words[$key]);\n        $words[$key] = implode(\"\
    \", $words[$key]);\n    }\n    return implode(\" \", $words);\n}\n\necho anti_shuffle(\"\
    Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = anti_shuffle_word($word);\n    }\n    return implode(\" \"\
    , $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpgh1r_937.php:18\nStack trace:\n#0 /tmp/tmpgh1r_937.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmpgh1r_937.php(28): candidate('Hi')\n#2 /tmp/tmpgh1r_937.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgh1r_937.php on line 18\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = anti_shuffle_word($word);\n    }\n    return implode(\" \"\
    , $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpgh1r_937.php:18\nStack trace:\n#0 /tmp/tmpgh1r_937.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmpgh1r_937.php(28): candidate('Hi')\n#2 /tmp/tmpgh1r_937.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgh1r_937.php on line 18\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = join(\"\", str_split($word));\n    }\n    return join(\"\
    \ \", $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjmh8oypl.php:29\n\
    Stack trace:\n#0 /tmp/tmpjmh8oypl.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpjmh8oypl.php\
    \ on line 29\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_s = \"\";\n  \
    \  foreach ($new_words as $key => $word) {\n        $new_s .= implode(\"\", $word);\n\
    \        if ($key < count($new_words) - 1) {\n            $new_s .= \" \";\n \
    \       }\n    }\n    return $new_s;\n}\n\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    foreach ($s as $key => $value) {\n        $s[$key]\
    \ = str_split($value);\n        sort($s[$key]);\n        $s[$key] = implode($s[$key]);\n\
    \    }\n    return implode(\" \", $s);\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpr076hi95.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpr076hi95.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr076hi95.php:31\n\
    Stack trace:\n#0 /tmp/tmpr076hi95.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpr076hi95.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmph9k7pif0.php\
    \ on line 19\n\nWarning: implode(): Argument must be an array in /tmp/tmph9k7pif0.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmph9k7pif0.php on line 19\n\nWarning: implode(): Argument must be an\
    \ array in /tmp/tmph9k7pif0.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmph9k7pif0.php on line 19\n\nWarning: implode():\
    \ Argument must be an array in /tmp/tmph9k7pif0.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmph9k7pif0.php:31\nStack trace:\n\
    #0 /tmp/tmph9k7pif0.php(40): test()\n#1 {main}\n  thrown in /tmp/tmph9k7pif0.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = join(\"\", str_split($word));\n    }\n    return join(\"\
    \ \", $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjmh8oypl.php:29\n\
    Stack trace:\n#0 /tmp/tmpjmh8oypl.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpjmh8oypl.php\
    \ on line 29\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    $new_words = array_map(function($word)\
    \ {\n        sort($word);\n        return implode(\"\", $word);\n    }, $new_words);\n\
    \    return implode(\" \", $new_words);\n}\n\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    $new_s = \"\";\n    foreach\
    \ ($new_arr as $key => $value) {\n        $new_s .= implode($new_arr[$key]) .\
    \ \" \";\n    }\n    return trim($new_s);\n}\n\necho anti_shuffle(\"Hi\") . \"\
    \\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = array();\n    foreach ($words as $word)\
    \ {\n        $result[] = implode(str_split($word));\n    }\n    return implode(\"\
    \ \", $result);\n}\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi\nhello\nHello World!!!\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpznh2hk5o.php:31\nStack trace:\n#0 /tmp/tmpznh2hk5o.php(39): test()\n\
    #1 {main}\n  thrown in /tmp/tmpznh2hk5o.php on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = implode(array_unique(str_split($word)));\n    }\n    return\
    \ implode(\" \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxcw9lpc8.php:29\n\
    Stack trace:\n#0 /tmp/tmpxcw9lpc8.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxcw9lpc8.php\
    \ on line 29\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($arr as $word) {\n  \
    \      $result[] = str_split($word);\n    }\n    foreach ($result as $key => $value)\
    \ {\n        sort($result[$key]);\n    }\n    foreach ($result as $key => $value)\
    \ {\n        $result[$key] = implode($result[$key]);\n    }\n    return implode(\"\
    \ \", $result);\n}\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    $new_words = array_map(function($word)\
    \ {\n        sort($word);\n        return implode(\"\", $word);\n    }, $new_words);\n\
    \    return implode(\" \", $new_words);\n}\n\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = anti_shuffle_word($word);\n    }\n    return implode(\" \"\
    , $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpgh1r_937.php:18\nStack trace:\n#0 /tmp/tmpgh1r_937.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmpgh1r_937.php(28): candidate('Hi')\n#2 /tmp/tmpgh1r_937.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgh1r_937.php on line 18\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    foreach ($new_words\
    \ as $key => $word) {\n        $new_words[$key] = implode(\"\", $word);\n    }\n\
    \    return implode(\" \", $new_words);\n}\n\necho anti_shuffle(\"Hi\") . \"\\\
    n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = anti_shuffle_word($word);\n    }\n    return implode(\" \"\
    , $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpgh1r_937.php:18\nStack trace:\n#0 /tmp/tmpgh1r_937.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmpgh1r_937.php(28): candidate('Hi')\n#2 /tmp/tmpgh1r_937.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgh1r_937.php on line 18\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    $new_words = array_map(function($word)\
    \ {\n        sort($word);\n        return implode(\"\", $word);\n    }, $new_words);\n\
    \    return implode(\" \", $new_words);\n}\necho anti_shuffle(\"Hi\") . \"\\n\"\
    ;\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $new_words = [];\n  foreach ($words as $word) {\n \
    \   $new_words[] = str_split($word);\n  }\n  foreach ($new_words as $key => $word)\
    \ {\n    sort($new_words[$key]);\n  }\n  $new_words = array_map(function($word)\
    \ {\n    return implode(\"\", $word);\n  }, $new_words);\n  return implode(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    $new_words = array_map(function($word)\
    \ {\n        sort($word);\n        return implode(\"\", $word);\n    }, $new_words);\n\
    \    return implode(\" \", $new_words);\n}\n\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpk1txiljg.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpk1txiljg.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpk1txiljg.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpk1txiljg.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpk1txiljg.php:31\nStack trace:\n\
    #0 /tmp/tmpk1txiljg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpk1txiljg.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $new_words = [];\n  foreach ($words as $word) {\n \
    \   $new_words[] = anti_shuffle_word($word);\n  }\n  return implode(\" \", $new_words);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmppw1dfrzs.php:18\nStack trace:\n#0 /tmp/tmppw1dfrzs.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmppw1dfrzs.php(28): candidate('Hi')\n#2 /tmp/tmppw1dfrzs.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmppw1dfrzs.php on line 18\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= sort_word($word) . \" \";\n    }\n    return trim($result);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_word() in\
    \ /tmp/tmpdkdsummv.php:18\nStack trace:\n#0 /tmp/tmpdkdsummv.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmpdkdsummv.php(28): candidate('Hi')\n#2 /tmp/tmpdkdsummv.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdkdsummv.php on line 18\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_string = \"\"\
    ;\n    foreach ($new_words as $key => $word) {\n        $new_string .= implode($new_words[$key])\
    \ . \" \";\n    }\n    return $new_string;\n}\n\necho anti_shuffle(\"Hi\") . \"\
    \\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpcm45m2du.php:38\nStack trace:\n#0 /tmp/tmpcm45m2du.php(47): test()\n\
    #1 {main}\n  thrown in /tmp/tmpcm45m2du.php on line 38\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    $new_str = \"\";\n    foreach\
    \ ($new_arr as $key => $value) {\n        $new_str .= implode($new_arr[$key])\
    \ . \" \";\n    }\n    return $new_str;\n}\necho anti_shuffle(\"Hi\") . \"\\n\"\
    ;\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpf8r81ans.php:37\nStack trace:\n#0 /tmp/tmpf8r81ans.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpf8r81ans.php on line 37\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    foreach ($new_words\
    \ as $key => $word) {\n        $new_words[$key] = implode(\"\", $word);\n    }\n\
    \    return implode(\" \", $new_words);\n}\necho anti_shuffle(\"Hi\") . \"\\n\"\
    ;\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_sentence = \"\"\
    ;\n    foreach ($new_words as $word) {\n        $new_sentence .= implode(\"\"\
    , $word) . \" \";\n    }\n    return trim($new_sentence);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmph9k7pif0.php\
    \ on line 19\n\nWarning: implode(): Argument must be an array in /tmp/tmph9k7pif0.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmph9k7pif0.php on line 19\n\nWarning: implode(): Argument must be an\
    \ array in /tmp/tmph9k7pif0.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmph9k7pif0.php on line 19\n\nWarning: implode():\
    \ Argument must be an array in /tmp/tmph9k7pif0.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmph9k7pif0.php:31\nStack trace:\n\
    #0 /tmp/tmph9k7pif0.php(40): test()\n#1 {main}\n  thrown in /tmp/tmph9k7pif0.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[]\
    \ = str_split($word);\n  }\n  foreach ($new_arr as $key => $value) {\n    sort($new_arr[$key]);\n\
    \  }\n  $new_str = \"\";\n  foreach ($new_arr as $key => $value) {\n    $new_str\
    \ .= implode($new_arr[$key]) . \" \";\n  }\n  return $new_str;\n}\necho anti_shuffle(\"\
    Hi\");\necho \"\\n\";\necho anti_shuffle(\"hello\");\necho \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\");\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpfymt368g.php:40\nStack trace:\n#0 /tmp/tmpfymt368g.php(49): test()\n\
    #1 {main}\n  thrown in /tmp/tmpfymt368g.php on line 40\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    $new_arr2 = [];\n    foreach\
    \ ($new_arr as $key => $value) {\n        $new_arr2[] = implode(\"\", $new_arr[$key]);\n\
    \    }\n    return implode(\" \", $new_arr2);\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($s as $word) {\n  \
    \      $result .= implode(\"\", str_split($word)) . \" \";\n    }\n    return\
    \ $result;\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello World!!! \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ves5q5x.php:28\n\
    Stack trace:\n#0 /tmp/tmp1ves5q5x.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp1ves5q5x.php\
    \ on line 28\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $result = [];\n  foreach ($words as $word) {\n    $chars\
    \ = str_split($word);\n    sort($chars);\n    $result[] = implode(\"\", $chars);\n\
    \  }\n  return implode(\" \", $result);\n}\necho anti_shuffle(\"Hi\") . \"\\n\"\
    ;\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    foreach ($words as $key => $word) {\n        $words[$key]\
    \ = str_split($word);\n        sort($words[$key]);\n        $words[$key] = implode(\"\
    \", $words[$key]);\n    }\n    return implode(\" \", $words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_string = \"\"\
    ;\n    foreach ($new_words as $word) {\n        $new_string .= implode(\"\", $word);\n\
    \        $new_string .= \" \";\n    }\n    return trim($new_string);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpk1txiljg.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpk1txiljg.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpk1txiljg.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpk1txiljg.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpk1txiljg.php:31\nStack trace:\n\
    #0 /tmp/tmpk1txiljg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpk1txiljg.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $res = [];\n    foreach ($arr as $word) {\n     \
    \   $res[] = anti_shuffle_word($word);\n    }\n    return implode(\" \", $res);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpt3sw8riu.php:18\nStack trace:\n#0 /tmp/tmpt3sw8riu.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmpt3sw8riu.php(28): candidate('Hi')\n#2 /tmp/tmpt3sw8riu.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpt3sw8riu.php on line 18\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $new_words = [];\n  foreach ($words as $word) {\n \
    \   $new_words[] = str_split($word);\n  }\n  foreach ($new_words as $key => $word)\
    \ {\n    sort($new_words[$key]);\n  }\n  $new_words = array_map(function($word)\
    \ {\n    return implode(\"\", $word);\n  }, $new_words);\n  return implode(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($arr as $word) {\n  \
    \      $result[] = anti_shuffle_word($word);\n    }\n    return implode(\" \"\
    , $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpuzgugtqa.php:18\nStack trace:\n#0 /tmp/tmpuzgugtqa.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmpuzgugtqa.php(28): candidate('Hi')\n#2 /tmp/tmpuzgugtqa.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpuzgugtqa.php on line 18\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ .= \" \";\n    }\n    return $result;\n}\n\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmp3cximt_p.php\
    \ on line 19\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmp3cximt_p.php on line 19\nArray Array \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmp3cximt_p.php on line 19\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp3cximt_p.php:31\nStack trace:\n\
    #0 /tmp/tmp3cximt_p.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp3cximt_p.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = str_split($word);\n    }\n    foreach ($result as $key =>\
    \ $word) {\n        sort($result[$key]);\n    }\n    $result = array_map(function($word)\
    \ {\n        return implode(\"\", $word);\n    }, $result);\n    return implode(\"\
    \ \", $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key\
    \ => $value) {\n        $new_arr[$key] = implode($new_arr[$key]);\n    }\n   \
    \ return implode(\" \", $new_arr);\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = implode(str_split($word));\n    }\n    return implode(\"\
    \ \", $new_arr);\n}\necho anti_shuffle(\"Hi\");\necho \"\\n\";\necho anti_shuffle(\"\
    hello\");\necho \"\\n\";\necho anti_shuffle(\"Hello World!!!\");\necho \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi\nhello\nHello World!!!\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpx18gtqn1.php:34\nStack trace:\n#0 /tmp/tmpx18gtqn1.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmpx18gtqn1.php on line 34\n"
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    foreach ($new_words\
    \ as $key => $word) {\n        $new_words[$key] = implode($new_words[$key]);\n\
    \    }\n    return implode(\" \", $new_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = sort_word($word);\n    }\n    return implode(\" \", $new_words);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_word() in\
    \ /tmp/tmpo1amin5o.php:18\nStack trace:\n#0 /tmp/tmpo1amin5o.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmpo1amin5o.php(28): candidate('Hi')\n#2 /tmp/tmpo1amin5o.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpo1amin5o.php on line 18\n"
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    foreach ($new_words\
    \ as $key => $word) {\n        $new_words[$key] = implode(\"\", $word);\n    }\n\
    \    return implode(\" \", $new_words);\n}\n\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = implode(array_unique(str_split($word)));\n    }\n    return\
    \ implode(\" \", $new_arr);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1p8koirl.php:29\n\
    Stack trace:\n#0 /tmp/tmp1p8koirl.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp1p8koirl.php\
    \ on line 29\n"
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $new_words = [];\n  foreach ($words as $word) {\n \
    \   $new_words[] = str_split($word);\n  }\n  $new_words = array_map(function($word)\
    \ {\n    sort($word);\n    return implode(\"\", $word);\n  }, $new_words);\n \
    \ return implode(\" \", $new_words);\n}\n\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = implode(str_split($word));\n    }\n    return implode(\"\
    \ \", $result);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello World!!!\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbizw9sau.php:29\n\
    Stack trace:\n#0 /tmp/tmpbizw9sau.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpbizw9sau.php\
    \ on line 29\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpk1txiljg.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpk1txiljg.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpk1txiljg.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpk1txiljg.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpk1txiljg.php:31\nStack trace:\n\
    #0 /tmp/tmpk1txiljg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpk1txiljg.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($arr as $word) {\n  \
    \      $result[] = str_split($word);\n    }\n    foreach ($result as $key => $value)\
    \ {\n        sort($result[$key]);\n    }\n    $result = implode(\" \", $result);\n\
    \    return $result;\n}\n\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwcl6f_bs.php:33\n\
    Stack trace:\n#0 /tmp/tmpwcl6f_bs.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpwcl6f_bs.php\
    \ on line 33\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $new_word) {\n        sort($new_words[$key]);\n    }\n    $new_string = \"\
    \";\n    foreach ($new_words as $new_word) {\n        $new_string .= implode(\"\
    \", $new_word) . \" \";\n    }\n    return $new_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyusq3jvu.php:35\n\
    Stack trace:\n#0 /tmp/tmpyusq3jvu.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpyusq3jvu.php\
    \ on line 35\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpr076hi95.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpr076hi95.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr076hi95.php:31\n\
    Stack trace:\n#0 /tmp/tmpr076hi95.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpr076hi95.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($s as $word) {\n  \
    \      $result .= str_split($word);\n        sort($result);\n        $result =\
    \ implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmp2nehhwsg.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp2nehhwsg.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmp2nehhwsg.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmp2nehhwsg.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmp2nehhwsg.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmp2nehhwsg.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp2nehhwsg.php:31\nStack trace:\n\
    #0 /tmp/tmp2nehhwsg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp2nehhwsg.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($arr as $word) {\n  \
    \      $result[] = str_split($word);\n    }\n    foreach ($result as $key => $value)\
    \ {\n        sort($result[$key]);\n    }\n    foreach ($result as $key => $value)\
    \ {\n        $result[$key] = implode($result[$key]);\n    }\n    return implode(\"\
    \ \", $result);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = str_split($word);\n    }\n    foreach ($result as $key =>\
    \ $word) {\n        sort($result[$key]);\n    }\n    $result = implode(\"\", $result);\n\
    \    $result = str_split($result);\n    $result = implode(\"\", $result);\n  \
    \  return $result;\n}\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\nArray\nArrayArray\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpt8dh29gl.php:37\nStack trace:\n#0 /tmp/tmpt8dh29gl.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpt8dh29gl.php on line 37\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $new_word) {\n        sort($new_words[$key]);\n    }\n    $new_s = \"\";\n\
    \    foreach ($new_words as $new_word) {\n        $new_s .= implode(\"\", $new_word)\
    \ . \" \";\n    }\n    return $new_s;\n}\necho anti_shuffle(\"Hi\") . \"\\n\"\
    ;\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpzvcok7ki.php:37\nStack trace:\n#0 /tmp/tmpzvcok7ki.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpzvcok7ki.php on line 37\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\\
    n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpui8i_ptt.php\
    \ on line 19\n\nWarning: implode(): Argument must be an array in /tmp/tmpui8i_ptt.php\
    \ on line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpui8i_ptt.php on line 19\n\nWarning: implode(): Argument must be an\
    \ array in /tmp/tmpui8i_ptt.php on line 20\n \n\nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpui8i_ptt.php on line 19\n\nWarning: implode():\
    \ Argument must be an array in /tmp/tmpui8i_ptt.php on line 20\n\nWarning: sort()\
    \ expects parameter 1 to be array, string given in /tmp/tmpui8i_ptt.php on line\
    \ 19\n\nWarning: implode(): Argument must be an array in /tmp/tmpui8i_ptt.php\
    \ on line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpui8i_ptt.php on line 19\n\nWarning: implode(): Argument must be an\
    \ array in /tmp/tmpui8i_ptt.php on line 20\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpui8i_ptt.php:34\nStack trace:\n#0 /tmp/tmpui8i_ptt.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpui8i_ptt.php on line 34\n"
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = str_split($word);\n    }\n    foreach ($result as $key =>\
    \ $value) {\n        sort($result[$key]);\n    }\n    foreach ($result as $key\
    \ => $value) {\n        $result[$key] = implode($result[$key]);\n    }\n    return\
    \ implode(\" \", $result);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = join(\"\", str_split($word));\n    }\n    return join(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjte4034g.php:29\n\
    Stack trace:\n#0 /tmp/tmpjte4034g.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpjte4034g.php\
    \ on line 29\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = implode(str_split($word));\n    }\n    return implode(\"\
    \ \", $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9bn9awu3.php:29\n\
    Stack trace:\n#0 /tmp/tmp9bn9awu3.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9bn9awu3.php\
    \ on line 29\n"
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    foreach ($s as $key => $value) {\n        $s[$key]\
    \ = str_split($value);\n        sort($s[$key]);\n        $s[$key] = implode(\"\
    \", $s[$key]);\n    }\n    return implode(\" \", $s);\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\\
    n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpikxep6o3.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpikxep6o3.php\
    \ on line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpikxep6o3.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpikxep6o3.php on line 20\n \n\nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpikxep6o3.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpikxep6o3.php on line 20\n\nWarning: sort()\
    \ expects parameter 1 to be array, string given in /tmp/tmpikxep6o3.php on line\
    \ 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpikxep6o3.php on\
    \ line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpikxep6o3.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpikxep6o3.php on line 20\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpikxep6o3.php:34\nStack trace:\n#0 /tmp/tmpikxep6o3.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpikxep6o3.php on line 34\n"
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[]\
    \ = str_split($word);\n  }\n  foreach ($new_arr as $key => $word) {\n    sort($new_arr[$key]);\n\
    \  }\n  $new_s = \"\";\n  foreach ($new_arr as $word) {\n    $new_s .= implode(\"\
    \", $word) . \" \";\n  }\n  return trim($new_s);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return trim($result);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpj_ckn257.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpj_ckn257.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj_ckn257.php:31\n\
    Stack trace:\n#0 /tmp/tmpj_ckn257.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpj_ckn257.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $new_words = [];\n  foreach ($words as $word) {\n \
    \   $new_words[] = anti_shuffle_word($word);\n  }\n  return implode(\" \", $new_words);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmppw1dfrzs.php:18\nStack trace:\n#0 /tmp/tmppw1dfrzs.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmppw1dfrzs.php(28): candidate('Hi')\n#2 /tmp/tmppw1dfrzs.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmppw1dfrzs.php on line 18\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_s = \"\";\n  \
    \  foreach ($new_words as $key => $word) {\n        $new_s .= implode(\"\", $word);\n\
    \        if ($key < count($new_words) - 1) {\n            $new_s .= \" \";\n \
    \       }\n    }\n    return $new_s;\n}\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($s as $word) {\n    \
    \    $result[] = str_split($word);\n        sort($result[count($result) - 1]);\n\
    \        $result[count($result) - 1] = implode(\"\", $result[count($result) -\
    \ 1]);\n    }\n    return implode(\" \", $result);\n}\necho anti_shuffle(\"Hi\"\
    ) . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello\
    \ World!!!\") . \"\\n\";\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $word) {\n        sort($new_arr[$key]);\n    }\n    $new_s = \"\";\n    foreach\
    \ ($new_arr as $key => $word) {\n        $new_s .= implode(\"\", $new_arr[$key])\
    \ . \" \";\n    }\n    return $new_s;\n}\necho anti_shuffle(\"Hi\") . \"\\n\"\
    ;\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpr2c2fij2.php:37\nStack trace:\n#0 /tmp/tmpr2c2fij2.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpr2c2fij2.php on line 37\n"
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key\
    \ => $value) {\n        $new_arr[$key] = implode(\"\", $new_arr[$key]);\n    }\n\
    \    return implode(\" \", $new_arr);\n}\n\nfunction candidate(...$args) {\n \
    \   return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\\
    n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpikxep6o3.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpikxep6o3.php\
    \ on line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpikxep6o3.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpikxep6o3.php on line 20\n \n\nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpikxep6o3.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpikxep6o3.php on line 20\n\nWarning: sort()\
    \ expects parameter 1 to be array, string given in /tmp/tmpikxep6o3.php on line\
    \ 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpikxep6o3.php on\
    \ line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpikxep6o3.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpikxep6o3.php on line 20\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpikxep6o3.php:34\nStack trace:\n#0 /tmp/tmpikxep6o3.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpikxep6o3.php on line 34\n"
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($arr as $word) {\n  \
    \      $result[] = str_split($word);\n    }\n    foreach ($result as $key => $value)\
    \ {\n        sort($result[$key]);\n    }\n    $result = array_map(function($value)\
    \ {\n        return implode($value);\n    }, $result);\n    return implode(\"\
    \ \", $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    $new_str = \"\";\n    foreach\
    \ ($new_arr as $key => $value) {\n        $new_str .= implode($new_arr[$key])\
    \ . \" \";\n    }\n    return $new_str;\n}\necho anti_shuffle(\"Hi\") . \"\\n\"\
    ;\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpf8r81ans.php:37\nStack trace:\n#0 /tmp/tmpf8r81ans.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpf8r81ans.php on line 37\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key\
    \ => $value) {\n        $new_arr[$key] = implode($new_arr[$key]);\n    }\n   \
    \ return implode(\" \", $new_arr);\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $result = \"\";\n  foreach ($arr as $word) {\n    $result\
    \ .= str_split($word);\n    sort($result);\n    $result .= \" \";\n  }\n  return\
    \ $result;\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpv6rcklgd.php\
    \ on line 19\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpv6rcklgd.php on line 19\nArray Array \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpv6rcklgd.php on line 19\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpv6rcklgd.php:30\nStack trace:\n\
    #0 /tmp/tmpv6rcklgd.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpv6rcklgd.php\
    \ on line 30\n"
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($s as $word) {\n    \
    \    $result[] = str_split($word);\n        sort($result[count($result) - 1]);\n\
    \        $result[count($result) - 1] = implode($result[count($result) - 1]);\n\
    \    }\n    return implode(\" \", $result);\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n\t$arr\
    \ = explode(\" \", $s);\n\t$new_arr = [];\n\tforeach ($arr as $word) {\n\t\t$new_arr[]\
    \ = str_split($word);\n\t}\n\tforeach ($new_arr as $key => $word) {\n\t\tsort($new_arr[$key]);\n\
    \t}\n\tforeach ($new_arr as $key => $word) {\n\t\t$new_arr[$key] = implode($new_arr[$key]);\n\
    \t}\n\treturn implode(\" \", $new_arr);\n}\necho anti_shuffle(\"Hi\") . \"\\n\"\
    ;\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = str_split($word);\n    }\n    foreach ($result as $key =>\
    \ $value) {\n        sort($result[$key]);\n    }\n    foreach ($result as $key\
    \ => $value) {\n        $result[$key] = implode(\"\", $result[$key]);\n    }\n\
    \    return implode(\" \", $result);\n}\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = anti_shuffle_word($word);\n    }\n    return implode(\" \"\
    , $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpgh1r_937.php:18\nStack trace:\n#0 /tmp/tmpgh1r_937.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmpgh1r_937.php(28): candidate('Hi')\n#2 /tmp/tmpgh1r_937.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgh1r_937.php on line 18\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmph9k7pif0.php\
    \ on line 19\n\nWarning: implode(): Argument must be an array in /tmp/tmph9k7pif0.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmph9k7pif0.php on line 19\n\nWarning: implode(): Argument must be an\
    \ array in /tmp/tmph9k7pif0.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmph9k7pif0.php on line 19\n\nWarning: implode():\
    \ Argument must be an array in /tmp/tmph9k7pif0.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmph9k7pif0.php:31\nStack trace:\n\
    #0 /tmp/tmph9k7pif0.php(40): test()\n#1 {main}\n  thrown in /tmp/tmph9k7pif0.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key\
    \ => $value) {\n        $new_arr[$key] = implode(\"\", $new_arr[$key]);\n    }\n\
    \    return implode(\" \", $new_arr);\n}\necho anti_shuffle(\"Hi\") . \"\\n\"\
    ;\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $result = \"\";\n  foreach ($words as $word) {\n  \
    \  $result .= implode(\"\", str_split($word)) . \" \";\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplm_bmv7n.php:28\n\
    Stack trace:\n#0 /tmp/tmplm_bmv7n.php(37): test()\n#1 {main}\n  thrown in /tmp/tmplm_bmv7n.php\
    \ on line 28\n"
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $word) {\n        sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key\
    \ => $word) {\n        $new_arr[$key] = implode($new_arr[$key]);\n    }\n    return\
    \ implode(\" \", $new_arr);\n}\necho anti_shuffle(\"Hi\") . PHP_EOL;\necho anti_shuffle(\"\
    hello\") . PHP_EOL;\necho anti_shuffle(\"Hello World!!!\") . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $result = \"\";\n  foreach ($words as $word) {\n  \
    \  $result .= str_split($word);\n    sort($result);\n    $result = implode($result);\n\
    \    $result .= \" \";\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmp2_6rgo2x.php\
    \ on line 19\n\nWarning: implode(): Argument must be an array in /tmp/tmp2_6rgo2x.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2_6rgo2x.php:31\n\
    Stack trace:\n#0 /tmp/tmp2_6rgo2x.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp2_6rgo2x.php\
    \ on line 31\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    $new_s = [];\n    foreach ($s as $word) {\n     \
    \   $new_s[] = implode(str_split($word), \"\");\n    }\n    return implode($new_s,\
    \ \" \");\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpac1f6dzk.php:29\n\
    Stack trace:\n#0 /tmp/tmpac1f6dzk.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpac1f6dzk.php\
    \ on line 29\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_string = \"\"\
    ;\n    foreach ($new_words as $key => $word) {\n        $new_string .= implode($new_words[$key])\
    \ . \" \";\n    }\n    return $new_string;\n}\necho anti_shuffle(\"Hi\") . \"\\\
    n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpepm23kow.php:37\nStack trace:\n#0 /tmp/tmpepm23kow.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpepm23kow.php on line 37\n"
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    foreach ($s as $key => $value) {\n        $s[$key]\
    \ = str_split($value);\n        sort($s[$key]);\n        $s[$key] = implode(\"\
    \", $s[$key]);\n    }\n    return implode(\" \", $s);\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $result = \"\";\n  foreach ($arr as $word) {\n    $result\
    \ .= str_split($word);\n    sort($result);\n    $result .= \" \";\n  }\n  return\
    \ $result;\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpv6rcklgd.php\
    \ on line 19\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpv6rcklgd.php on line 19\nArray Array \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpv6rcklgd.php on line 19\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpv6rcklgd.php:30\nStack trace:\n\
    #0 /tmp/tmpv6rcklgd.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpv6rcklgd.php\
    \ on line 30\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $new_words = [];\n  foreach ($words as $word) {\n \
    \   $new_words[] = str_split($word);\n  }\n  foreach ($new_words as $key => $word)\
    \ {\n    sort($new_words[$key]);\n  }\n  $new_string = \"\";\n  foreach ($new_words\
    \ as $word) {\n    $new_string .= implode(\"\", $word) . \" \";\n  }\n  return\
    \ $new_string;\n}\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp5lymuds7.php:39\nStack trace:\n#0 /tmp/tmp5lymuds7.php(48): test()\n\
    #1 {main}\n  thrown in /tmp/tmp5lymuds7.php on line 39\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n\
    \        $result .= str_shuffle($word) . \" \";\n    }\n    return $result;\n\
    }\n\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "lloHe roW!!ld! \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc7sa98rz.php:29\n\
    Stack trace:\n#0 /tmp/tmpc7sa98rz.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpc7sa98rz.php\
    \ on line 29\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpr076hi95.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpr076hi95.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr076hi95.php:31\n\
    Stack trace:\n#0 /tmp/tmpr076hi95.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpr076hi95.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = join(\"\", str_split($word));\n    }\n    return join(\"\
    \ \", $new_words);\n}\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi\nhello\nHello World!!!\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmprge74adj.php:32\nStack trace:\n#0 /tmp/tmprge74adj.php(40): test()\n\
    #1 {main}\n  thrown in /tmp/tmprge74adj.php on line 32\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = anti_shuffle_word($word);\n    }\n    return implode(\" \"\
    , $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpgh1r_937.php:18\nStack trace:\n#0 /tmp/tmpgh1r_937.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmpgh1r_937.php(28): candidate('Hi')\n#2 /tmp/tmpgh1r_937.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgh1r_937.php on line 18\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmph9k7pif0.php\
    \ on line 19\n\nWarning: implode(): Argument must be an array in /tmp/tmph9k7pif0.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmph9k7pif0.php on line 19\n\nWarning: implode(): Argument must be an\
    \ array in /tmp/tmph9k7pif0.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmph9k7pif0.php on line 19\n\nWarning: implode():\
    \ Argument must be an array in /tmp/tmph9k7pif0.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmph9k7pif0.php:31\nStack trace:\n\
    #0 /tmp/tmph9k7pif0.php(40): test()\n#1 {main}\n  thrown in /tmp/tmph9k7pif0.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $word) {\n        sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key\
    \ => $word) {\n        $new_arr[$key] = implode($new_arr[$key]);\n    }\n    return\
    \ implode(\" \", $new_arr);\n}\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $new_words = [];\n  foreach ($words as $word) {\n \
    \   $new_words[] = str_split($word);\n  }\n  $new_words = array_map(function($word)\
    \ {\n    sort($word);\n    return implode(\"\", $word);\n  }, $new_words);\n \
    \ return implode(\" \", $new_words);\n}\n\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $result = [];\n  foreach ($words as $word) {\n    $result[]\
    \ = str_split($word);\n    sort($result[count($result) - 1]);\n    $result[count($result)\
    \ - 1] = implode(\"\", $result[count($result) - 1]);\n  }\n  return implode(\"\
    \ \", $result);\n}\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $result = \"\";\n  foreach ($words as $word) {\n  \
    \  $result .= str_split($word);\n    sort($result);\n    $result = implode(\"\"\
    , $result);\n    $result .= \" \";\n  }\n  return $result;\n}\necho anti_shuffle(\"\
    Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpironcby6.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpironcby6.php\
    \ on line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpironcby6.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpironcby6.php on line 20\n \n\nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpironcby6.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpironcby6.php on line 20\n\nWarning: sort()\
    \ expects parameter 1 to be array, string given in /tmp/tmpironcby6.php on line\
    \ 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpironcby6.php on\
    \ line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpironcby6.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpironcby6.php on line 20\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpironcby6.php:33\nStack trace:\n#0 /tmp/tmpironcby6.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpironcby6.php on line 33\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ .= \" \";\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpa8h40gnw.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa8h40gnw.php:30\n\
    Stack trace:\n#0 /tmp/tmpa8h40gnw.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpa8h40gnw.php\
    \ on line 30\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpk1txiljg.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpk1txiljg.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpk1txiljg.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpk1txiljg.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpk1txiljg.php:31\nStack trace:\n\
    #0 /tmp/tmpk1txiljg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpk1txiljg.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $result = array();\n  foreach ($words as $word) {\n\
    \    $result[] = implode(str_split($word));\n  }\n  return implode(\" \", $result);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbiodiy51.php:29\n\
    Stack trace:\n#0 /tmp/tmpbiodiy51.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpbiodiy51.php\
    \ on line 29\n"
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $chars = str_split($word);\n        sort($chars);\n        $result[]\
    \ = implode(\"\", $chars);\n    }\n    return implode(\" \", $result);\n}\n\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_words_str = [];\n\
    \    foreach ($new_words as $word) {\n        $new_words_str[] = implode($word);\n\
    \    }\n    return implode(\" \", $new_words_str);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $new_words = [];\n  foreach ($words as $word) {\n \
    \   $new_words[] = anti_shuffle_word($word);\n  }\n  return implode(\" \", $new_words);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmppw1dfrzs.php:18\nStack trace:\n#0 /tmp/tmppw1dfrzs.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmppw1dfrzs.php(28): candidate('Hi')\n#2 /tmp/tmppw1dfrzs.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmppw1dfrzs.php on line 18\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $new_words = [];\n  foreach ($words as $word) {\n \
    \   $new_words[] = str_split($word);\n  }\n  foreach ($new_words as $key => $word)\
    \ {\n    sort($new_words[$key]);\n  }\n  foreach ($new_words as $key => $word)\
    \ {\n    $new_words[$key] = implode($new_words[$key]);\n  }\n  return implode(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    $new_str = \"\";\n    foreach\
    \ ($new_arr as $key => $value) {\n        $new_str .= implode($new_arr[$key])\
    \ . \" \";\n    }\n    return $new_str;\n}\necho anti_shuffle(\"Hi\") . \"\\n\"\
    ;\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpf8r81ans.php:37\nStack trace:\n#0 /tmp/tmpf8r81ans.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpf8r81ans.php on line 37\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = anti_shuffle_word($word);\n    }\n    return implode(\" \"\
    , $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpgh1r_937.php:18\nStack trace:\n#0 /tmp/tmpgh1r_937.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmpgh1r_937.php(28): candidate('Hi')\n#2 /tmp/tmpgh1r_937.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgh1r_937.php on line 18\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpr076hi95.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpr076hi95.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr076hi95.php:31\n\
    Stack trace:\n#0 /tmp/tmpr076hi95.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpr076hi95.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = implode(array_unique(str_split($word)));\n    }\n    return\
    \ implode(\" \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxcw9lpc8.php:29\n\
    Stack trace:\n#0 /tmp/tmpxcw9lpc8.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxcw9lpc8.php\
    \ on line 29\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    $new_str = \"\";\n    foreach\
    \ ($new_arr as $key => $value) {\n        $new_str .= implode(\"\", $new_arr[$key])\
    \ . \" \";\n    }\n    return $new_str;\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello !!!Wdlor \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8j8juc10.php:35\n\
    Stack trace:\n#0 /tmp/tmp8j8juc10.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp8j8juc10.php\
    \ on line 35\n"
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    foreach ($new_words\
    \ as $key => $word) {\n        $new_words[$key] = implode(\"\", $word);\n    }\n\
    \    return implode(\" \", $new_words);\n}\n\necho anti_shuffle(\"Hi\") . \"\\\
    n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $new_words = [];\n  foreach ($words as $word) {\n \
    \   $new_words[] = str_split($word);\n  }\n  foreach ($new_words as $i => $word)\
    \ {\n    sort($new_words[$i]);\n  }\n  $new_string = \"\";\n  foreach ($new_words\
    \ as $i => $word) {\n    $new_string .= implode($new_words[$i]);\n    if ($i <\
    \ count($new_words) - 1) {\n      $new_string .= \" \";\n    }\n  }\n  return\
    \ $new_string;\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_string = \"\"\
    ;\n    foreach ($new_words as $word) {\n        $new_string .= implode(\"\", $word)\
    \ . \" \";\n    }\n    return $new_string;\n}\necho anti_shuffle(\"Hi\") . \"\\\
    n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp4vkzsmjh.php:37\nStack trace:\n#0 /tmp/tmp4vkzsmjh.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmp4vkzsmjh.php on line 37\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = implode(str_split($word));\n    }\n    return implode(\"\
    \ \", $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9bn9awu3.php:29\n\
    Stack trace:\n#0 /tmp/tmp9bn9awu3.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9bn9awu3.php\
    \ on line 29\n"
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_words = array_map(function($word)\
    \ {\n        return implode(\"\", $word);\n    }, $new_words);\n    return implode(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = anti_shuffle_word($word);\n    }\n    return implode(\" \"\
    , $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpgh1r_937.php:18\nStack trace:\n#0 /tmp/tmpgh1r_937.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmpgh1r_937.php(28): candidate('Hi')\n#2 /tmp/tmpgh1r_937.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgh1r_937.php on line 18\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[]\
    \ = str_split($word);\n  }\n  foreach ($new_arr as $key => $value) {\n    sort($new_arr[$key]);\n\
    \  }\n  $new_string = \"\";\n  foreach ($new_arr as $key => $value) {\n    $new_string\
    \ .= implode($new_arr[$key]) . \" \";\n  }\n  return $new_string;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello !!!Wdlor \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzcmd631o.php:35\n\
    Stack trace:\n#0 /tmp/tmpzcmd631o.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzcmd631o.php\
    \ on line 35\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpzkof7o0h.php\
    \ on line 19\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpzkof7o0h.php on line 19\nArray Array \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpzkof7o0h.php on line 19\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpzkof7o0h.php:30\nStack trace:\n\
    #0 /tmp/tmpzkof7o0h.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpzkof7o0h.php\
    \ on line 30\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = str_split($word);\n    }\n    foreach ($result as $key =>\
    \ $value) {\n        sort($result[$key]);\n    }\n    foreach ($result as $key\
    \ => $value) {\n        $result[$key] = implode($result[$key]);\n    }\n    return\
    \ implode(\" \", $result);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[]\
    \ = str_split($word);\n  }\n  foreach ($new_arr as $key => $word) {\n    sort($new_arr[$key]);\n\
    \  }\n  $new_str = \"\";\n  foreach ($new_arr as $key => $word) {\n    $new_str\
    \ .= implode($new_arr[$key]) . \" \";\n  }\n  return $new_str;\n}\necho anti_shuffle(\"\
    Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmphgqi8bnp.php:37\nStack trace:\n#0 /tmp/tmphgqi8bnp.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmphgqi8bnp.php on line 37\n"
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_string = \"\"\
    ;\n    foreach ($new_words as $key => $word) {\n        $new_string .= implode($new_words[$key])\
    \ . \" \";\n    }\n    return trim($new_string);\n}\necho anti_shuffle(\"Hi\"\
    ) . PHP_EOL;\necho anti_shuffle(\"hello\") . PHP_EOL;\necho anti_shuffle(\"Hello\
    \ World!!!\") . PHP_EOL;\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[]\
    \ = str_split($word);\n  }\n  foreach ($new_arr as $key => $value) {\n    sort($new_arr[$key]);\n\
    \  }\n  $new_str = \"\";\n  foreach ($new_arr as $key => $value) {\n    $new_str\
    \ .= implode($new_arr[$key]) . \" \";\n  }\n  return $new_str;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello !!!Wdlor \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqzqam2re.php:35\n\
    Stack trace:\n#0 /tmp/tmpqzqam2re.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpqzqam2re.php\
    \ on line 35\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $new_word) {\n        sort($new_words[$key]);\n    }\n    $new_string = \"\
    \";\n    foreach ($new_words as $key => $new_word) {\n        $new_string .= implode(\"\
    \", $new_words[$key]) . \" \";\n    }\n    return $new_string;\n}\necho anti_shuffle(\"\
    Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpfq_k79r8.php:37\nStack trace:\n#0 /tmp/tmpfq_k79r8.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpfq_k79r8.php on line 37\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmph9k7pif0.php\
    \ on line 19\n\nWarning: implode(): Argument must be an array in /tmp/tmph9k7pif0.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmph9k7pif0.php on line 19\n\nWarning: implode(): Argument must be an\
    \ array in /tmp/tmph9k7pif0.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmph9k7pif0.php on line 19\n\nWarning: implode():\
    \ Argument must be an array in /tmp/tmph9k7pif0.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmph9k7pif0.php:31\nStack trace:\n\
    #0 /tmp/tmph9k7pif0.php(40): test()\n#1 {main}\n  thrown in /tmp/tmph9k7pif0.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = anti_shuffle_word($word);\n    }\n    return implode(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmphxys73l6.php:18\nStack trace:\n#0 /tmp/tmphxys73l6.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmphxys73l6.php(28): candidate('Hi')\n#2 /tmp/tmphxys73l6.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmphxys73l6.php on line 18\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($arr as $word) {\n  \
    \      $result[] = str_split($word);\n    }\n    foreach ($result as $key => $value)\
    \ {\n        sort($result[$key]);\n    }\n    foreach ($result as $key => $value)\
    \ {\n        $result[$key] = implode($result[$key]);\n    }\n    return implode(\"\
    \ \", $result);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = anti_shuffle_word($word);\n    }\n    return implode(\" \"\
    , $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpgh1r_937.php:18\nStack trace:\n#0 /tmp/tmpgh1r_937.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmpgh1r_937.php(28): candidate('Hi')\n#2 /tmp/tmpgh1r_937.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgh1r_937.php on line 18\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    foreach ($words as $key => $word) {\n        $words[$key]\
    \ = str_split($word);\n        sort($words[$key]);\n        $words[$key] = implode(\"\
    \", $words[$key]);\n    }\n    return implode(\" \", $words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    foreach ($s as $key => $value) {\n        $s[$key]\
    \ = str_split($value);\n        sort($s[$key]);\n        $s[$key] = implode($s[$key]);\n\
    \    }\n    return implode(\" \", $s);\n}\n\nfunction candidate(...$args) {\n\
    \    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpzkof7o0h.php\
    \ on line 19\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpzkof7o0h.php on line 19\nArray Array \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpzkof7o0h.php on line 19\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpzkof7o0h.php:30\nStack trace:\n\
    #0 /tmp/tmpzkof7o0h.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpzkof7o0h.php\
    \ on line 30\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\\
    n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpikxep6o3.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpikxep6o3.php\
    \ on line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpikxep6o3.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpikxep6o3.php on line 20\n \n\nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpikxep6o3.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpikxep6o3.php on line 20\n\nWarning: sort()\
    \ expects parameter 1 to be array, string given in /tmp/tmpikxep6o3.php on line\
    \ 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpikxep6o3.php on\
    \ line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpikxep6o3.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpikxep6o3.php on line 20\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpikxep6o3.php:34\nStack trace:\n#0 /tmp/tmpikxep6o3.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpikxep6o3.php on line 34\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    $new_str = \"\";\n    foreach\
    \ ($new_arr as $key => $value) {\n        $new_str .= implode(\"\", $new_arr[$key])\
    \ . \" \";\n    }\n    return $new_str;\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello !!!Wdlor \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8j8juc10.php:35\n\
    Stack trace:\n#0 /tmp/tmp8j8juc10.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp8j8juc10.php\
    \ on line 35\n"
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    $new_s = [];\n    foreach ($s as $word) {\n     \
    \   $new_s[] = str_split($word);\n    }\n    foreach ($new_s as $key => $word)\
    \ {\n        sort($new_s[$key]);\n    }\n    foreach ($new_s as $key => $word)\
    \ {\n        $new_s[$key] = implode(\"\", $new_s[$key]);\n    }\n    return implode(\"\
    \ \", $new_s);\n}\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($s as $word) {\n  \
    \      $result .= str_split($word);\n        sort($result);\n        $result =\
    \ implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmp2nehhwsg.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp2nehhwsg.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmp2nehhwsg.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmp2nehhwsg.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmp2nehhwsg.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmp2nehhwsg.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp2nehhwsg.php:31\nStack trace:\n\
    #0 /tmp/tmp2nehhwsg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp2nehhwsg.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = implode(str_split($word));\n    }\n    return implode(\"\
    \ \", $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9bn9awu3.php:29\n\
    Stack trace:\n#0 /tmp/tmp9bn9awu3.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9bn9awu3.php\
    \ on line 29\n"
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $s =\
    \ explode(\" \", $s);\n  for ($i = 0; $i < count($s); $i++) {\n    $s[$i] = str_split($s[$i]);\n\
    \    sort($s[$i]);\n    $s[$i] = implode($s[$i]);\n  }\n  return implode(\" \"\
    , $s);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $chars = str_split($word);\n        sort($chars);\n        $result[]\
    \ = implode($chars);\n    }\n    return implode(\" \", $result);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\\
    n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpikxep6o3.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpikxep6o3.php\
    \ on line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpikxep6o3.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpikxep6o3.php on line 20\n \n\nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpikxep6o3.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpikxep6o3.php on line 20\n\nWarning: sort()\
    \ expects parameter 1 to be array, string given in /tmp/tmpikxep6o3.php on line\
    \ 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpikxep6o3.php on\
    \ line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpikxep6o3.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpikxep6o3.php on line 20\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpikxep6o3.php:34\nStack trace:\n#0 /tmp/tmpikxep6o3.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpikxep6o3.php on line 34\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = implode(array_map(\"chr\", range(ord(\"a\"), ord(\"z\"))));\n\
    \    }\n    return implode(\" \", $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpml_6v7qi.php:28\n\
    Stack trace:\n#0 /tmp/tmpml_6v7qi.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpml_6v7qi.php\
    \ on line 28\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_string = \"\"\
    ;\n    foreach ($new_words as $key => $word) {\n        $new_string .= implode($new_words[$key])\
    \ . \" \";\n    }\n    return $new_string;\n}\necho anti_shuffle(\"Hi\") . \"\\\
    n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpepm23kow.php:37\nStack trace:\n#0 /tmp/tmpepm23kow.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpepm23kow.php on line 37\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    $new_str = \"\";\n    foreach\
    \ ($new_arr as $key => $value) {\n        $new_str .= implode(\"\", $new_arr[$key])\
    \ . \" \";\n    }\n    return $new_str;\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello !!!Wdlor \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8j8juc10.php:35\n\
    Stack trace:\n#0 /tmp/tmp8j8juc10.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp8j8juc10.php\
    \ on line 35\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpk1txiljg.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpk1txiljg.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpk1txiljg.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpk1txiljg.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpk1txiljg.php:31\nStack trace:\n\
    #0 /tmp/tmpk1txiljg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpk1txiljg.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmph9k7pif0.php\
    \ on line 19\n\nWarning: implode(): Argument must be an array in /tmp/tmph9k7pif0.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmph9k7pif0.php on line 19\n\nWarning: implode(): Argument must be an\
    \ array in /tmp/tmph9k7pif0.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmph9k7pif0.php on line 19\n\nWarning: implode():\
    \ Argument must be an array in /tmp/tmph9k7pif0.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmph9k7pif0.php:31\nStack trace:\n\
    #0 /tmp/tmph9k7pif0.php(40): test()\n#1 {main}\n  thrown in /tmp/tmph9k7pif0.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_words_str = [];\n\
    \    foreach ($new_words as $word) {\n        $new_words_str[] = implode(\"\"\
    , $word);\n    }\n    return implode(\" \", $new_words_str);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = str_split($word);\n    }\n    foreach ($result as $key =>\
    \ $value) {\n        sort($result[$key]);\n    }\n    foreach ($result as $key\
    \ => $value) {\n        $result[$key] = implode($result[$key]);\n    }\n    return\
    \ implode(\" \", $result);\n}\necho anti_shuffle(\"Hello World!!!\");\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hello !!!Wdlor

    '
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = str_split($word);\n    }\n    foreach ($result as $key =>\
    \ $value) {\n        sort($result[$key]);\n    }\n    foreach ($result as $key\
    \ => $value) {\n        $result[$key] = implode($result[$key]);\n    }\n    return\
    \ implode(\" \", $result);\n}\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($s as $word) {\n    \
    \    $result[] = str_split($word);\n        sort($result[count($result) - 1]);\n\
    \        $result[count($result) - 1] = implode(\"\", $result[count($result) -\
    \ 1]);\n    }\n    return implode(\" \", $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\necho anti_shuffle(\"Hi\");\necho \"\\n\";\necho anti_shuffle(\"hello\");\n\
    echo \"\\n\";\necho anti_shuffle(\"Hello World!!!\");\necho \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmp7m0bbtdb.php\
    \ on line 19\n\nWarning: implode(): Argument must be an array in /tmp/tmp7m0bbtdb.php\
    \ on line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmp7m0bbtdb.php on line 19\n\nWarning: implode(): Argument must be an\
    \ array in /tmp/tmp7m0bbtdb.php on line 20\n \n\nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmp7m0bbtdb.php on line 19\n\nWarning: implode():\
    \ Argument must be an array in /tmp/tmp7m0bbtdb.php on line 20\n\nWarning: sort()\
    \ expects parameter 1 to be array, string given in /tmp/tmp7m0bbtdb.php on line\
    \ 19\n\nWarning: implode(): Argument must be an array in /tmp/tmp7m0bbtdb.php\
    \ on line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmp7m0bbtdb.php on line 19\n\nWarning: implode(): Argument must be an\
    \ array in /tmp/tmp7m0bbtdb.php on line 20\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp7m0bbtdb.php:38\nStack trace:\n#0 /tmp/tmp7m0bbtdb.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7m0bbtdb.php on line 38\n"
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = str_split($word);\n    }\n    foreach ($result as $key =>\
    \ $value) {\n        sort($result[$key]);\n    }\n    foreach ($result as $key\
    \ => $value) {\n        $result[$key] = implode($result[$key]);\n    }\n    return\
    \ implode(\" \", $result);\n}\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpr076hi95.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpr076hi95.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr076hi95.php:31\n\
    Stack trace:\n#0 /tmp/tmpr076hi95.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpr076hi95.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    $new_s = \"\";\n    foreach ($s as $word) {\n   \
    \     $new_s .= str_split($word);\n        sort($new_s);\n        $new_s = implode(\"\
    \", $new_s);\n        $new_s .= \" \";\n    }\n    return $new_s;\n}\n\necho anti_shuffle(\"\
    Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmp0_13bv5v.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp0_13bv5v.php\
    \ on line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmp0_13bv5v.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmp0_13bv5v.php on line 20\n \n\nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmp0_13bv5v.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmp0_13bv5v.php on line 20\n\nWarning: sort()\
    \ expects parameter 1 to be array, string given in /tmp/tmp0_13bv5v.php on line\
    \ 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp0_13bv5v.php on\
    \ line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmp0_13bv5v.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmp0_13bv5v.php on line 20\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp0_13bv5v.php:34\nStack trace:\n#0 /tmp/tmp0_13bv5v.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0_13bv5v.php on line 34\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\\
    n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpikxep6o3.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpikxep6o3.php\
    \ on line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpikxep6o3.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpikxep6o3.php on line 20\n \n\nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpikxep6o3.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpikxep6o3.php on line 20\n\nWarning: sort()\
    \ expects parameter 1 to be array, string given in /tmp/tmpikxep6o3.php on line\
    \ 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpikxep6o3.php on\
    \ line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpikxep6o3.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpikxep6o3.php on line 20\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpikxep6o3.php:34\nStack trace:\n#0 /tmp/tmpikxep6o3.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpikxep6o3.php on line 34\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = sort_word($word);\n    }\n    return implode(\" \", $new_words);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_word() in\
    \ /tmp/tmpo1amin5o.php:18\nStack trace:\n#0 /tmp/tmpo1amin5o.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmpo1amin5o.php(28): candidate('Hi')\n#2 /tmp/tmpo1amin5o.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpo1amin5o.php on line 18\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $s =\
    \ explode(\" \", $s);\n  $result = \"\";\n  foreach ($s as $word) {\n    $result\
    \ .= str_split($word);\n    sort($result);\n    $result = implode(\"\", $result);\n\
    \    $result .= \" \";\n  }\n  return $result;\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmp5xy58l9v.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp5xy58l9v.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmp5xy58l9v.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmp5xy58l9v.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmp5xy58l9v.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmp5xy58l9v.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp5xy58l9v.php:31\nStack trace:\n\
    #0 /tmp/tmp5xy58l9v.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5xy58l9v.php\
    \ on line 31\n"
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_words = array_map(function($word)\
    \ {\n        return implode(\"\", $word);\n    }, $new_words);\n    return implode(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[]\
    \ = str_split($word);\n  }\n  foreach ($new_arr as $key => $value) {\n    sort($new_arr[$key]);\n\
    \  }\n  $new_string = \"\";\n  foreach ($new_arr as $key => $value) {\n    $new_string\
    \ .= implode($new_arr[$key]) . \" \";\n  }\n  return $new_string;\n}\necho anti_shuffle(\"\
    Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp2ta23i1p.php:37\nStack trace:\n#0 /tmp/tmp2ta23i1p.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmp2ta23i1p.php on line 37\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmph9k7pif0.php\
    \ on line 19\n\nWarning: implode(): Argument must be an array in /tmp/tmph9k7pif0.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmph9k7pif0.php on line 19\n\nWarning: implode(): Argument must be an\
    \ array in /tmp/tmph9k7pif0.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmph9k7pif0.php on line 19\n\nWarning: implode():\
    \ Argument must be an array in /tmp/tmph9k7pif0.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmph9k7pif0.php:31\nStack trace:\n\
    #0 /tmp/tmph9k7pif0.php(40): test()\n#1 {main}\n  thrown in /tmp/tmph9k7pif0.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpzyc2l8oe.php\
    \ on line 19\n\nWarning: implode(): Argument must be an array in /tmp/tmpzyc2l8oe.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzyc2l8oe.php:31\n\
    Stack trace:\n#0 /tmp/tmpzyc2l8oe.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpzyc2l8oe.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpk1txiljg.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpk1txiljg.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpk1txiljg.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpk1txiljg.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpk1txiljg.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpk1txiljg.php:31\nStack trace:\n\
    #0 /tmp/tmpk1txiljg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpk1txiljg.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = str_split($word);\n    }\n    foreach ($result as $key =>\
    \ $value) {\n        sort($result[$key]);\n    }\n    foreach ($result as $key\
    \ => $value) {\n        $result[$key] = implode(\"\", $result[$key]);\n    }\n\
    \    return implode(\" \", $result);\n}\necho anti_shuffle(\"Hi\") . \"\\n\";\n\
    echo anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode(\"\", $result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\n\necho anti_shuffle(\"Hi\");\necho \"\\n\";\necho anti_shuffle(\"hello\");\n\
    echo \"\\n\";\necho anti_shuffle(\"Hello World!!!\");\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmp27ktu77g.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp27ktu77g.php\
    \ on line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmp27ktu77g.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmp27ktu77g.php on line 20\n \n\nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmp27ktu77g.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmp27ktu77g.php on line 20\n\nWarning: sort()\
    \ expects parameter 1 to be array, string given in /tmp/tmp27ktu77g.php on line\
    \ 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmp27ktu77g.php on\
    \ line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmp27ktu77g.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmp27ktu77g.php on line 20\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp27ktu77g.php:37\nStack trace:\n#0 /tmp/tmp27ktu77g.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp27ktu77g.php on line 37\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = sort_word($word);\n    }\n    return implode(\" \", $result);\n\
    }\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_word() in\
    \ /tmp/tmpkbhy85bf.php:18\nStack trace:\n#0 /tmp/tmpkbhy85bf.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmpkbhy85bf.php(28): candidate('Hi')\n#2 /tmp/tmpkbhy85bf.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkbhy85bf.php on line 18\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $s\
    \ = explode(\" \", $s);\n    $new_s = \"\";\n    foreach ($s as $word) {\n   \
    \     $new_s .= str_split($word);\n        sort($new_s);\n        $new_s = implode(\"\
    \", $new_s);\n        $new_s .= \" \";\n    }\n    return $new_s;\n}\n\necho anti_shuffle(\"\
    Hi\") . PHP_EOL;\necho anti_shuffle(\"hello\") . PHP_EOL;\necho anti_shuffle(\"\
    Hello World!!!\") . PHP_EOL;\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpg2zt1bxl.php\
    \ on line 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpg2zt1bxl.php\
    \ on line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpg2zt1bxl.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpg2zt1bxl.php on line 20\n \n\nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpg2zt1bxl.php on line 19\n\nWarning: implode():\
    \ Invalid arguments passed in /tmp/tmpg2zt1bxl.php on line 20\n\nWarning: sort()\
    \ expects parameter 1 to be array, string given in /tmp/tmpg2zt1bxl.php on line\
    \ 19\n\nWarning: implode(): Invalid arguments passed in /tmp/tmpg2zt1bxl.php on\
    \ line 20\n \n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpg2zt1bxl.php on line 19\n\nWarning: implode(): Invalid arguments\
    \ passed in /tmp/tmpg2zt1bxl.php on line 20\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpg2zt1bxl.php:34\nStack trace:\n#0 /tmp/tmpg2zt1bxl.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpg2zt1bxl.php on line 34\n"
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = str_split($word);\n    }\n    foreach ($result as $key =>\
    \ $value) {\n        sort($result[$key]);\n    }\n    foreach ($result as $key\
    \ => $value) {\n        $result[$key] = implode(\"\", $result[$key]);\n    }\n\
    \    return implode(\" \", $result);\n}\necho anti_shuffle(\"Hi\") . \"\\n\";\n\
    echo anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = str_split($word);\n    }\n    foreach ($result as $key =>\
    \ $value) {\n        sort($result[$key]);\n    }\n    foreach ($result as $key\
    \ => $value) {\n        $result[$key] = implode($result[$key]);\n    }\n    return\
    \ implode(\" \", $result);\n}\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = anti_shuffle_word($word);\n    }\n    return implode(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmphxys73l6.php:18\nStack trace:\n#0 /tmp/tmphxys73l6.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmphxys73l6.php(28): candidate('Hi')\n#2 /tmp/tmphxys73l6.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmphxys73l6.php on line 18\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    $new_str = \"\";\n    foreach\
    \ ($new_arr as $key => $value) {\n        $new_str .= implode(\"\", $new_arr[$key])\
    \ . \" \";\n    }\n    return $new_str;\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello !!!Wdlor \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8j8juc10.php:35\n\
    Stack trace:\n#0 /tmp/tmp8j8juc10.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp8j8juc10.php\
    \ on line 35\n"
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    foreach ($new_words\
    \ as $key => $word) {\n        $new_words[$key] = implode($new_words[$key]);\n\
    \    }\n    return implode(\" \", $new_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $value) {\n        sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key\
    \ => $value) {\n        $new_arr[$key] = implode($new_arr[$key]);\n    }\n   \
    \ return implode(\" \", $new_arr);\n}\n\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $result = [];\n  foreach ($words as $word) {\n    $result[]\
    \ = anti_shuffle_word($word);\n  }\n  return implode(\" \", $result);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmp33a5fmqz.php:18\nStack trace:\n#0 /tmp/tmp33a5fmqz.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmp33a5fmqz.php(28): candidate('Hi')\n#2 /tmp/tmp33a5fmqz.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp33a5fmqz.php on line 18\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = implode(str_split($word));\n    }\n    return implode(\"\
    \ \", $new_words);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6o2iwfn0.php:29\n\
    Stack trace:\n#0 /tmp/tmp6o2iwfn0.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp6o2iwfn0.php\
    \ on line 29\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $result = \"\";\n  foreach ($arr as $word) {\n    $result\
    \ .= str_split($word);\n    sort($result);\n    $result .= \" \";\n  }\n  return\
    \ $result;\n}\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"hello\"\
    ) . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmprtpl_8k_.php\
    \ on line 19\nArray \n\nWarning: sort() expects parameter 1 to be array, string\
    \ given in /tmp/tmprtpl_8k_.php on line 19\nArray \n\nWarning: sort() expects\
    \ parameter 1 to be array, string given in /tmp/tmprtpl_8k_.php on line 19\n\n\
    Warning: sort() expects parameter 1 to be array, string given in /tmp/tmprtpl_8k_.php\
    \ on line 19\nArray Array \n\nWarning: sort() expects parameter 1 to be array,\
    \ string given in /tmp/tmprtpl_8k_.php on line 19\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmprtpl_8k_.php:33\nStack trace:\n#0 /tmp/tmprtpl_8k_.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmprtpl_8k_.php on line 33\n"
  timestamp: 1659730811
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key\
    \ => $word) {\n        sort($new_words[$key]);\n    }\n    $new_string = \"\"\
    ;\n    foreach ($new_words as $word) {\n        $new_string .= implode(\"\", $word)\
    \ . \" \";\n    }\n    return trim($new_string);\n}\n\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($words as $word) {\n\
    \        $result[] = anti_shuffle_word($word);\n    }\n    return implode(\" \"\
    , $result);\n}\n\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmpgh1r_937.php:18\nStack trace:\n#0 /tmp/tmpgh1r_937.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmpgh1r_937.php(28): candidate('Hi')\n#2 /tmp/tmpgh1r_937.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgh1r_937.php on line 18\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n \
    \       $new_arr[] = str_split($word);\n    }\n    foreach ($new_arr as $key =>\
    \ $word) {\n        sort($new_arr[$key]);\n    }\n    $new_s = \"\";\n    foreach\
    \ ($new_arr as $key => $word) {\n        $new_s .= implode(\"\", $new_arr[$key])\
    \ . \" \";\n    }\n    return trim($new_s);\n}\necho anti_shuffle(\"Hi\");\necho\
    \ \"\\n\";\necho anti_shuffle(\"hello\");\necho \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\");\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ = implode($result);\n        $result .= \" \";\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmph9k7pif0.php\
    \ on line 19\n\nWarning: implode(): Argument must be an array in /tmp/tmph9k7pif0.php\
    \ on line 20\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmph9k7pif0.php on line 19\n\nWarning: implode(): Argument must be an\
    \ array in /tmp/tmph9k7pif0.php on line 20\n \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmph9k7pif0.php on line 19\n\nWarning: implode():\
    \ Argument must be an array in /tmp/tmph9k7pif0.php on line 20\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmph9k7pif0.php:31\nStack trace:\n\
    #0 /tmp/tmph9k7pif0.php(40): test()\n#1 {main}\n  thrown in /tmp/tmph9k7pif0.php\
    \ on line 31\n"
  timestamp: 1659730810
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $words\
    \ = explode(\" \", $s);\n  $result = [];\n  foreach ($words as $word) {\n    $result[]\
    \ = anti_shuffle_word($word);\n  }\n  return implode(\" \", $result);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmp33a5fmqz.php:18\nStack trace:\n#0 /tmp/tmp33a5fmqz.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmp33a5fmqz.php(28): candidate('Hi')\n#2 /tmp/tmp33a5fmqz.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp33a5fmqz.php on line 18\n"
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n\
    \        $result .= str_split($word);\n        sort($result);\n        $result\
    \ .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 1 to be array, string given in /tmp/tmpzkof7o0h.php\
    \ on line 19\n\nWarning: sort() expects parameter 1 to be array, string given\
    \ in /tmp/tmpzkof7o0h.php on line 19\nArray Array \nWarning: sort() expects parameter\
    \ 1 to be array, string given in /tmp/tmpzkof7o0h.php on line 19\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpzkof7o0h.php:30\nStack trace:\n\
    #0 /tmp/tmpzkof7o0h.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpzkof7o0h.php\
    \ on line 30\n"
  timestamp: 1659730810
- exit_code: 0
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[]\
    \ = str_split($word);\n  }\n  foreach ($new_arr as $key => $value) {\n    sort($new_arr[$key]);\n\
    \  }\n  foreach ($new_arr as $key => $value) {\n    $new_arr[$key] = implode(\"\
    \", $new_arr[$key]);\n  }\n  return implode(\" \", $new_arr);\n}\necho anti_shuffle(\"\
    Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659730811
- exit_code: 255
  program: "<?php\n// Write a function that takes a string and returns an ordered\
    \ version of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n  $arr\
    \ = explode(\" \", $s);\n  $result = [];\n  foreach ($arr as $word) {\n    $result[]\
    \ = anti_shuffle_word($word);\n  }\n  return implode(\" \", $result);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function anti_shuffle_word()\
    \ in /tmp/tmp00smjqs0.php:18\nStack trace:\n#0 /tmp/tmp00smjqs0.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmp00smjqs0.php(28): candidate('Hi')\n#2 /tmp/tmp00smjqs0.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp00smjqs0.php on line 18\n"
  timestamp: 1659730811
