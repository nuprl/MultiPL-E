language: php
name: HumanEval_112_reverse_delete
results:
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n  $s = str_split($s);\n\
    \  $c = str_split($c);\n  $result = [];\n  foreach ($s as $key => $value) {\n\
    \    if (!in_array($value, $c)) {\n      $result[] = $value;\n    }\n  }\n  $result\
    \ = implode('', $result);\n  $result = str_split($result);\n  $result_reversed\
    \ = array_reverse($result);\n  $result = implode('', $result);\n  $result_reversed\
    \ = implode('', $result_reversed);\n  if ($result === $result_reversed) {\n  \
    \  return [$result, true];\n  } else {\n    return [$result, false];\n  }\n}\n\
    \nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $s = implode('', $s);\n    $result[] = $s;\n    $result[]\
    \ = $s == strrev($s) ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $c =\
    \ str_split($c);\n    $s = str_split($s);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $check\
    \ = $result == strrev($result) ? true : false;\n    return [$result, $check];\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $value) {\n        if (!in_array($value, $c)) {\n            $result[] =\
    \ $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    $result\
    \ = implode('', $result);\n    $result_reverse = implode('', $result_reverse);\n\
    \    if ($result == $result_reverse) {\n        return [$result, true];\n    }\
    \ else {\n        return [$result, false];\n    }\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $arr\
    \ = str_split($s);\n    $arr2 = str_split($c);\n    $arr3 = [];\n    foreach ($arr\
    \ as $value) {\n        if (!in_array($value, $arr2)) {\n            $arr3[] =\
    \ $value;\n        }\n    }\n    $str = implode($arr3);\n    $arr4 = str_split($str);\n\
    \    $arr5 = array_reverse($arr4);\n    $str2 = implode($arr5);\n    if ($str\
    \ == $str2) {\n        return [$str, true];\n    } else {\n        return [$str,\
    \ false];\n    }\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n  $s = str_split($s);\n\
    \  $c = str_split($c);\n  $result = [];\n  foreach ($s as $key => $value) {\n\
    \    if (!in_array($value, $c)) {\n      $result[] = $value;\n    }\n  }\n  $result\
    \ = implode('', $result);\n  $result = str_split($result);\n  $result_reverse\
    \ = array_reverse($result);\n  if ($result == $result_reverse) {\n    return [implode('',\
    \ $result), true];\n  } else {\n    return [implode('', $result), false];\n  }\n\
    }\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        foreach ($c as $key2 => $value2) {\n         \
    \   if ($value == $value2) {\n                unset($s[$key]);\n            }\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $c =\
    \ str_split($c);\n    $s = str_split($s);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode(\"\", $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    $result_reverse\
    \ = implode(\"\", $result_reverse);\n    $result = implode(\"\", $result);\n \
    \   if ($result === $result_reverse) {\n        return [$result, true];\n    }\
    \ else {\n        return [$result, false];\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        foreach ($c as $key2 => $value2) {\n         \
    \   if ($value == $value2) {\n                unset($s[$key]);\n            }\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n  $s = str_split($s);\n\
    \  $c = str_split($c);\n  $result = [];\n  foreach ($s as $key => $value) {\n\
    \    if (in_array($value, $c)) {\n      unset($s[$key]);\n    }\n  }\n  $result[]\
    \ = implode('', $s);\n  $result[] = $result[0] == strrev($result[0]) ? true :\
    \ false;\n  return $result;\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\n\
    print_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\"\
    , \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $s = implode('', $s);\n    $result[] = $s;\n    $result[]\
    \ = $s == strrev($s) ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        foreach ($c as $key2 => $value2) {\n         \
    \   if ($value == $value2) {\n                unset($s[$key]);\n            }\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $s = implode($s);\n    $result[] = $s;\n    $result[] =\
    \ $s == strrev($s) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    if\
    \ ($result == $result_reverse) {\n        return [implode('', $result), true];\n\
    \    } else {\n        return [implode('', $result), false];\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode(\"\", $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    $result\
    \ = implode(\"\", $result);\n    $result_reverse = implode(\"\", $result_reverse);\n\
    \    if ($result == $result_reverse) {\n        return [$result, true];\n    }\
    \ else {\n        return [$result, false];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n  $s = str_split($s);\n\
    \  $c = str_split($c);\n  $result = [];\n  foreach ($s as $key => $value) {\n\
    \    if (in_array($value, $c)) {\n      unset($s[$key]);\n    }\n  }\n  $result[]\
    \ = implode($s);\n  $result[] = $result[0] == strrev($result[0]) ? true : false;\n\
    \  return $result;\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    $result\
    \ = implode('', $result);\n    $result_reverse = implode('', $result_reverse);\n\
    \    if ($result == $result_reverse) {\n        return [$result, true];\n    }\
    \ else {\n        return [$result, false];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $s = implode('', $s);\n    $s = str_split($s);\n    $s_reverse\
    \ = array_reverse($s);\n    if ($s == $s_reverse) {\n        $result[] = implode('',\
    \ $s);\n        $result[] = true;\n    } else {\n        $result[] = implode('',\
    \ $s);\n        $result[] = false;\n    }\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        foreach ($c as $key2 => $value2) {\n         \
    \   if ($value == $value2) {\n                unset($s[$key]);\n            }\n\
    \        }\n    }\n    $s = implode($s);\n    $result[] = $s;\n    if ($s == strrev($s))\
    \ {\n        $result[] = true;\n    } else {\n        $result[] = false;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    $result\
    \ = implode('', $result);\n    $result_reverse = implode('', $result_reverse);\n\
    \    if ($result === $result_reverse) {\n        return [$result, true];\n   \
    \ } else {\n        return [$result, false];\n    }\n}\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $s = implode($s);\n    $result[] = $s;\n    $result[] =\
    \ $s == strrev($s) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n  $s = str_split($s);\n\
    \  $c = str_split($c);\n  $result = [];\n  foreach ($s as $key => $value) {\n\
    \    foreach ($c as $key2 => $value2) {\n      if ($value == $value2) {\n    \
    \    unset($s[$key]);\n      }\n    }\n  }\n  $s = implode($s);\n  $result[] =\
    \ $s;\n  $result[] = ($s == strrev($s)) ? true : false;\n  return $result;\n}\n\
    print_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\"\
    , \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        foreach ($c as $k => $v) {\n            if ($value\
    \ == $v) {\n                unset($s[$key]);\n            }\n        }\n    }\n\
    \    $result[] = implode('', $s);\n    $result[] = $result[0] == strrev($result[0])\
    \ ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\"\
    ) !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !==\
    \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !==\
    \ array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $s = implode($s);\n    $result[] = $s;\n    $result[] =\
    \ $s == strrev($s) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key => $value)\
    \ {\n        foreach ($c as $key2 => $value2) {\n            if ($value == $value2)\
    \ {\n                unset($s[$key]);\n            }\n        }\n    }\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = implode($s);\n    $s = str_split($s);\n\
    \    $s = array_reverse($s);\n    $s = implode($s);\n    $s = str_split($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = array_reverse($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = array_reverse($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = array_reverse($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = impl\nfunction candidate(...$args) {\n    return\
    \ reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\"\
    ) !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !==\
    \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !==\
    \ array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2lfhjsyt.php on line 65

    '
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $result\
    \ = str_replace(str_split($c), \"\", $s);\n    $result = str_split($result);\n\
    \    $reverse = array_reverse($result);\n    if ($result == $reverse) {\n    \
    \    return [implode($result), true];\n    } else {\n        return [implode($result),\
    \ false];\n    }\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $s = implode('', $s);\n    $result[] = $s;\n    $result[]\
    \ = $s == strrev($s) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key => $value)\
    \ {\n        foreach ($c as $key2 => $value2) {\n            if ($value == $value2)\
    \ {\n                unset($s[$key]);\n            }\n        }\n    }\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = implode($s);\n    $s = str_split($s);\n\
    \    $s = array_reverse($s);\n    $s = implode($s);\n    $s = str_split($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = array_reverse($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = array_reverse($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = array_reverse($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = impl\nfunction candidate(...$args) {\n    return\
    \ reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\"\
    ) !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !==\
    \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !==\
    \ array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2lfhjsyt.php on line 65

    '
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $result\
    \ = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strpos($c, $s[$i])\
    \ === false) {\n            $result .= $s[$i];\n        }\n    }\n    return array($result,\
    \ $result === strrev($result));\n}\nfunction candidate(...$args) {\n    return\
    \ reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\"\
    ) !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !==\
    \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !==\
    \ array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    if\
    \ ($result === $result_reverse) {\n        return [implode('', $result), true];\n\
    \    } else {\n        return [implode('', $result), false];\n    }\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $res = [];\n    foreach ($s as\
    \ $key => $value) {\n        if (!in_array($value, $c)) {\n            $res[]\
    \ = $value;\n        }\n    }\n    $res = implode('', $res);\n    $res = str_split($res);\n\
    \    $res_rev = array_reverse($res);\n    $res = implode('', $res);\n    $res_rev\
    \ = implode('', $res_rev);\n    if ($res == $res_rev) {\n        return [$res,\
    \ true];\n    } else {\n        return [$res, false];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    for ($i = 0;\
    \ $i < count($s); $i++) {\n        if (!in_array($s[$i], $c)) {\n            $result[]\
    \ = $s[$i];\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    if\
    \ ($result == $result_reverse) {\n        return [implode('', $result), true];\n\
    \    } else {\n        return [implode('', $result), false];\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = [$result, $result == strrev($result)];\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $c =\
    \ str_split($c);\n    $s = str_split($s);\n    $s = array_diff($s, $c);\n    $s\
    \ = array_values($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s\
    \ = array_reverse($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s\
    \ = array_reverse($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s\
    \ = array_reverse($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s\
    \ = array_reverse($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s\
    \ = array_reverse($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s\
    \ = array_reverse($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s\
    \ = array_reverse($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s\
    \ = array_reverse($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s\
    \ = array_reverse($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s\
    \ = array_reverse($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s\
    \ = array_reverse($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s\
    \ = array_reverse($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s\
    \ = array_reverse($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s\
    \ = array_reverse($s);\n    $s = implode($s);\n    $s = str_\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpw22xyxp6.php on line 63

    '
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $result\
    \ = str_replace($c, \"\", $s);\n    $reverse = strrev($result);\n    $check =\
    \ ($result == $reverse) ? true : false;\n    return array($result, $check);\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13ew0pwb.php:25\n\
    Stack trace:\n#0 /tmp/tmp13ew0pwb.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp13ew0pwb.php\
    \ on line 25\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $result\
    \ = str_replace($c, \"\", $s);\n    $reverse = strrev($result);\n    $check =\
    \ ($result == $reverse) ? true : false;\n    return array($result, $check);\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13ew0pwb.php:25\n\
    Stack trace:\n#0 /tmp/tmp13ew0pwb.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp13ew0pwb.php\
    \ on line 25\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $arr = [];\n    foreach ($s as\
    \ $key => $value) {\n        if (!in_array($value, $c)) {\n            $arr[]\
    \ = $value;\n        }\n    }\n    $str = implode('', $arr);\n    $arr = [];\n\
    \    $arr[] = $str;\n    $arr[] = $str == strrev($str) ? true : false;\n    return\
    \ $arr;\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        foreach ($c as $key2 => $value2) {\n         \
    \   if ($value == $value2) {\n                unset($s[$key]);\n            }\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    for ($i = 0;\
    \ $i < count($s); $i++) {\n        if (!in_array($s[$i], $c)) {\n            $result[]\
    \ = $s[$i];\n        }\n    }\n    $result = implode(\"\", $result);\n    $check\
    \ = $result == strrev($result) ? true : false;\n    return [$result, $check];\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        foreach ($c as $key2 => $value2) {\n         \
    \   if ($value == $value2) {\n                unset($s[$key]);\n            }\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $result\
    \ = '';\n    $s = str_split($s);\n    $c = str_split($c);\n    foreach ($s as\
    \ $value) {\n        if (!in_array($value, $c)) {\n            $result .= $value;\n\
    \        }\n    }\n    $result = str_split($result);\n    $result = array_reverse($result);\n\
    \    $result = implode('', $result);\n    $result = [$result, $result == strrev($result)];\n\
    \    return $result;\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsoz_13oj.php:34\n\
    Stack trace:\n#0 /tmp/tmpsoz_13oj.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpsoz_13oj.php\
    \ on line 34\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $result\
    \ = str_replace(str_split($c), \"\", $s);\n    $result = str_split($result);\n\
    \    $result = array_reverse($result);\n    $result = implode(\"\", $result);\n\
    \    if ($result == $s) {\n        return [$result, true];\n    } else {\n   \
    \     return [$result, false];\n    }\n}\nfunction candidate(...$args) {\n   \
    \ return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\"\
    ) !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !==\
    \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !==\
    \ array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdu3efzmh.php:30\n\
    Stack trace:\n#0 /tmp/tmpdu3efzmh.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdu3efzmh.php\
    \ on line 30\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $value) {\n        if (!in_array($value, $c)) {\n            $result[] =\
    \ $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    $result\
    \ = implode('', $result);\n    $result_reverse = implode('', $result_reverse);\n\
    \    if ($result == $result_reverse) {\n        return [$result, true];\n    }\
    \ else {\n        return [$result, false];\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $result\
    \ = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strpos($c, $s[$i])\
    \ === false) {\n            $result .= $s[$i];\n        }\n    }\n    return array($result,\
    \ $result === strrev($result));\n}\nfunction candidate(...$args) {\n    return\
    \ reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\"\
    ) !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !==\
    \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !==\
    \ array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = [$result, $result === strrev($result)];\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n  $s = str_split($s);\n\
    \  $c = str_split($c);\n  $result = [];\n  foreach ($s as $key => $value) {\n\
    \    if (in_array($value, $c)) {\n      unset($s[$key]);\n    }\n  }\n  $result[]\
    \ = implode('', $s);\n  $result[] = $result[0] == strrev($result[0]) ? true :\
    \ false;\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $value) {\n        if (!in_array($value, $c)) {\n            $result[] =\
    \ $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    $result\
    \ = implode('', $result);\n    $result_reverse = implode('', $result_reverse);\n\
    \    if ($result == $result_reverse) {\n        return [$result, true];\n    }\
    \ else {\n        return [$result, false];\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    if\
    \ ($result == $result_reverse) {\n        return [implode('', $result), true];\n\
    \    } else {\n        return [implode('', $result), false];\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $result\
    \ = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strpos($c, $s[$i])\
    \ === false) {\n            $result .= $s[$i];\n        }\n    }\n    $result_reverse\
    \ = strrev($result);\n    return array($result, $result === $result_reverse);\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        foreach ($c as $k => $v) {\n            if ($value\
    \ == $v) {\n                unset($s[$key]);\n            }\n        }\n    }\n\
    \    $result[] = implode($s);\n    $result[] = $result[0] == strrev($result[0])\
    \ ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"abcde\", \"\
    ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        foreach ($c as $key1 => $value1) {\n         \
    \   if ($value == $value1) {\n                unset($s[$key]);\n            }\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    if\
    \ ($result === $result_reverse) {\n        return [implode('', $result), true];\n\
    \    } else {\n        return [implode('', $result), false];\n    }\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        foreach ($c as $key2 => $value2) {\n         \
    \   if ($value == $value2) {\n                unset($s[$key]);\n            }\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key => $value)\
    \ {\n        foreach ($c as $value2) {\n            if ($value == $value2) {\n\
    \                unset($s[$key]);\n            }\n        }\n    }\n    $s = implode($s);\n\
    \    $s = str_split($s);\n    $s = array_reverse($s);\n    $s = implode($s);\n\
    \    $s = str_split($s);\n    $s = implode($s);\n    $s = str_split($s);\n   \
    \ $s = array_reverse($s);\n    $s = implode($s);\n    $s = str_split($s);\n  \
    \  $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n \
    \   $s = implode($s);\n    $s = str_split($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = array_reverse($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = array_reverse($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = array_reverse($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = implode($s);\nfunction candidate(...$args) {\n  \
    \  return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\"\
    ) !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !==\
    \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !==\
    \ array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpohlyxw3e.php on line 81

    '
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    $result\
    \ = implode('', $result);\n    $result_reverse = implode('', $result_reverse);\n\
    \    if ($result == $result_reverse) {\n        return [$result, true];\n    }\
    \ else {\n        return [$result, false];\n    }\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $result\
    \ = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strpos($c, $s[$i])\
    \ === false) {\n            $result .= $s[$i];\n        }\n    }\n    $result\
    \ = strrev($result);\n    return array($result, $result === $s);\n}\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptp7yre8_.php:29\n\
    Stack trace:\n#0 /tmp/tmptp7yre8_.php(40): test()\n#1 {main}\n  thrown in /tmp/tmptp7yre8_.php\
    \ on line 29\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        foreach ($c as $k => $v) {\n            if ($value\
    \ == $v) {\n                unset($s[$key]);\n            }\n        }\n    }\n\
    \    $result[] = implode($s);\n    $result[] = $result[0] == strrev($result[0])\
    \ ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"abcde\", \"\
    ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n  $s = str_split($s);\n\
    \  $c = str_split($c);\n  $result = [];\n  foreach ($s as $key => $value) {\n\
    \    if (in_array($value, $c)) {\n      unset($s[$key]);\n    }\n  }\n  $result[]\
    \ = implode($s);\n  $result[] = $result[0] == strrev($result[0]) ? true : false;\n\
    \  return $result;\n}\n\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $result\
    \ = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strpos($c, $s[$i])\
    \ === false) {\n            $result .= $s[$i];\n        }\n    }\n    return [$result,\
    \ $result === strrev($result)];\n}\nfunction candidate(...$args) {\n    return\
    \ reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\"\
    ) !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !==\
    \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !==\
    \ array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key => $value)\
    \ {\n        foreach ($c as $key2 => $value2) {\n            if ($value == $value2)\
    \ {\n                unset($s[$key]);\n            }\n        }\n    }\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = implode($s);\n    $s = str_split($s);\n\
    \    $s = array_reverse($s);\n    $s = implode($s);\n    $s = str_split($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = array_reverse($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = array_reverse($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = array_reverse($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = impl\nfunction candidate(...$args) {\n    return\
    \ reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\"\
    ) !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !==\
    \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !==\
    \ array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2lfhjsyt.php on line 65

    '
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n  $s = str_split($s);\n\
    \  $c = str_split($c);\n  $result = [];\n  foreach ($s as $key => $value) {\n\
    \    if (in_array($value, $c)) {\n      unset($s[$key]);\n    }\n  }\n  $result[]\
    \ = implode($s);\n  $result[] = $result[0] == strrev($result[0]) ? true : false;\n\
    \  return $result;\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $result\
    \ = [];\n    $result[0] = str_replace(str_split($c), \"\", $s);\n    $result[1]\
    \ = $result[0] == strrev($result[0]) ? true : false;\n    return $result;\n}\n\
    function candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"\
    b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    if\
    \ ($result == $result_reverse) {\n        return [implode('', $result), true];\n\
    \    } else {\n        return [implode('', $result), false];\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    if\
    \ ($result == $result_reverse) {\n        return [implode('', $result), true];\n\
    \    } else {\n        return [implode('', $result), false];\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n  $result\
    \ = str_replace($c, \"\", $s);\n  $result = strrev($result);\n  if ($result ==\
    \ $s) {\n    return array($result, true);\n  } else {\n    return array($result,\
    \ false);\n  }\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi37xyxzk.php:28\n\
    Stack trace:\n#0 /tmp/tmpi37xyxzk.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpi37xyxzk.php\
    \ on line 28\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        foreach ($c as $key1 => $value1) {\n         \
    \   if ($value == $value1) {\n                unset($s[$key]);\n            }\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n  $result\
    \ = '';\n  for ($i = 0; $i < strlen($s); $i++) {\n    if (strpos($c, $s[$i]) ===\
    \ false) {\n      $result .= $s[$i];\n    }\n  }\n  return [$result, $result ===\
    \ strrev($result)];\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n  $s = str_split($s);\n\
    \  $c = str_split($c);\n  $result = [];\n  foreach ($s as $key => $value) {\n\
    \    if (!in_array($value, $c)) {\n      $result[] = $value;\n    }\n  }\n  $result\
    \ = implode('', $result);\n  $result = str_split($result);\n  $reverse = array_reverse($result);\n\
    \  if ($result == $reverse) {\n    return [implode('', $result), true];\n  } else\
    \ {\n    return [implode('', $result), false];\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        foreach ($c as $key2 => $value2) {\n         \
    \   if ($value == $value2) {\n                unset($s[$key]);\n            }\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $res = [];\n    foreach ($s as\
    \ $key => $value) {\n        if (!in_array($value, $c)) {\n            $res[]\
    \ = $value;\n        }\n    }\n    $res = implode('', $res);\n    $res = str_split($res);\n\
    \    $res_rev = array_reverse($res);\n    if ($res == $res_rev) {\n        return\
    \ [implode('', $res), true];\n    } else {\n        return [implode('', $res),\
    \ false];\n    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $result\
    \ = str_replace($c, \"\", $s);\n    $check = strrev($result) == $result ? true\
    \ : false;\n    return [$result, $check];\n}\nfunction candidate(...$args) {\n\
    \    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\"\
    ) !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !==\
    \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !==\
    \ array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo9_k8po4.php:24\n\
    Stack trace:\n#0 /tmp/tmpo9_k8po4.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpo9_k8po4.php\
    \ on line 24\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    if\
    \ ($result == $result_reverse) {\n        return [implode('', $result), true];\n\
    \    } else {\n        return [implode('', $result), false];\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $c =\
    \ str_split($c);\n    $s = str_split($s);\n    foreach ($c as $char) {\n     \
    \   $s = array_diff($s, [$char]);\n    }\n    $s = implode($s);\n    return [$s,\
    \ $s == strrev($s)];\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n  $s = str_split($s);\n\
    \  $c = str_split($c);\n  $result = [];\n  foreach ($s as $key => $value) {\n\
    \    if (in_array($value, $c)) {\n      unset($s[$key]);\n    }\n  }\n  $result[]\
    \ = implode($s);\n  $result[] = $result[0] == strrev($result[0]) ? true : false;\n\
    \  return $result;\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result = array_reverse($result);\n    $result =\
    \ implode('', $result);\n    $result = str_split($result);\n    $result = implode('',\
    \ $result);\n    $result = str_split($result);\n    $result = array_reverse($result);\n\
    \    $result = implode('', $result);\n    $result = str_split($result);\n    $result\
    \ = implode('', $result);\n    $result = str_split($result);\n    $result = array_reverse($result);\n\
    \    $result = implode('', $result);\n    $result = str_split($result);\n    $result\
    \ = implode('', $result);\n    $result = str_split($result);\n    $result = array_reverse($result);\n\
    \    $result = implode('', $result);\n    $result = str_split($result);\n    $result\
    \ = implode('', $result);\n    $result = str_split($result);\n    $result = array_reverse($result);\n\
    \    $result = implode('', $result);\n    $result = str_split($result);\n    $result\
    \ = implode('', $result);\n    $result = str_split($result);\n    $result = array_reverse($result);\n\
    \    $result = implode('', $result);\n    $result = str_split($result);\n    $result\
    \ = implode('', $result);\n    $result = str_split($result);\n    $result = array_reverse($result);\n\
    \    $result = implode('', $result);\n    $result = str_split($result);\n    $result\
    \ = implode('', $result);\n    $result = str_split($result);\n    $result = array_reverse($result);\n\
    \    $result = implode('\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmprq323esq.php on line 61

    '
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    $result\
    \ = implode('', $result);\n    $result_reverse = implode('', $result_reverse);\n\
    \    if ($result == $result_reverse) {\n        return [$result, true];\n    }\
    \ else {\n        return [$result, false];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    $result\
    \ = implode('', $result);\n    $result_reverse = implode('', $result_reverse);\n\
    \    if ($result == $result_reverse) {\n        return [$result, true];\n    }\
    \ else {\n        return [$result, false];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode(\"\", $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    if\
    \ ($result == $result_reverse) {\n        return [implode(\"\", $result), true];\n\
    \    } else {\n        return [implode(\"\", $result), false];\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $s = implode('', $s);\n    $result[] = $s;\n    $result[]\
    \ = $s == strrev($s) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    if\
    \ ($result == $result_reverse) {\n        return [implode('', $result), true];\n\
    \    } else {\n        return [implode('', $result), false];\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result_array\
    \ = [$result, false];\n    if ($result == strrev($result)) {\n        $result_array[1]\
    \ = true;\n    }\n    return $result_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = [$result, $result === strrev($result)];\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s_array\
    \ = str_split($s);\n    $c_array = str_split($c);\n    $result = [];\n    foreach\
    \ ($s_array as $key => $value) {\n        if (!in_array($value, $c_array)) {\n\
    \            $result[] = $value;\n        }\n    }\n    $result = implode('',\
    \ $result);\n    $result_array = [$result, false];\n    if ($result == strrev($result))\
    \ {\n        $result_array[1] = true;\n    }\n    return $result_array;\n}\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        foreach ($c as $key_c => $value_c) {\n       \
    \     if ($value == $value_c) {\n                unset($s[$key]);\n          \
    \  }\n        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $result\
    \ = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strpos($c, $s[$i])\
    \ === false) {\n            $result .= $s[$i];\n        }\n    }\n    return array($result,\
    \ $result === strrev($result));\n}\nfunction candidate(...$args) {\n    return\
    \ reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\"\
    ) !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !==\
    \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !==\
    \ array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s, $c);\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = array_\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpk1ia3pnz.php on line 63

    '
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $s = implode($s);\n    $result[] = $s;\n    $result[] =\
    \ $s == strrev($s) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    if\
    \ ($result == $result_reverse) {\n        return [implode('', $result), true];\n\
    \    } else {\n        return [implode('', $result), false];\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        foreach ($c as $key2 => $value2) {\n         \
    \   if ($value == $value2) {\n                unset($s[$key]);\n            }\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $result\
    \ = str_replace(str_split($c), \"\", $s);\n    $result = str_split($result);\n\
    \    $result = array_reverse($result);\n    $result = implode(\"\", $result);\n\
    \    if ($result == $s) {\n        return [$result, true];\n    } else {\n   \
    \     return [$result, false];\n    }\n}\nfunction candidate(...$args) {\n   \
    \ return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\"\
    ) !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !==\
    \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !==\
    \ array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdu3efzmh.php:30\n\
    Stack trace:\n#0 /tmp/tmpdu3efzmh.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdu3efzmh.php\
    \ on line 30\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n  $s = str_split($s);\n\
    \  $c = str_split($c);\n  $result = [];\n  foreach ($s as $key => $value) {\n\
    \    if (in_array($value, $c)) {\n      unset($s[$key]);\n    }\n  }\n  $s = implode($s);\n\
    \  $result[] = $s;\n  $result[] = $s == strrev($s) ? true : false;\n  return $result;\n\
    }\n\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\"\
    , \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $s = implode($s);\n    $result[] = $s;\n    $result[] =\
    \ $s == strrev($s) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $res = [];\n    foreach ($s as\
    \ $key => $value) {\n        if (!in_array($value, $c)) {\n            $res[]\
    \ = $value;\n        }\n    }\n    $res = implode(\"\", $res);\n    $res = str_split($res);\n\
    \    $res_rev = array_reverse($res);\n    $res_rev = implode(\"\", $res_rev);\n\
    \    if ($res_rev == $res) {\n        return [$res_rev, true];\n    } else {\n\
    \        return [$res_rev, false];\n    }\n}\n\nprint_r(reverse_delete(\"abcde\"\
    , \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => dcb\n    [1] => \n)\nArray\n(\n    [0] => fedca\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => \n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp4wwilsq0.php:42\nStack trace:\n#0 /tmp/tmp4wwilsq0.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4wwilsq0.php on line 42\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key => $value)\
    \ {\n        foreach ($c as $key2 => $value2) {\n            if ($value == $value2)\
    \ {\n                unset($s[$key]);\n            }\n        }\n    }\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = implode($s);\n    $s = str_split($s);\n\
    \    $s = array_reverse($s);\n    $s = implode($s);\n    $s = str_split($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = array_reverse($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = array_reverse($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = array_reverse($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = impl\nfunction candidate(...$args) {\n    return\
    \ reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\"\
    ) !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !==\
    \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !==\
    \ array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2lfhjsyt.php on line 65

    '
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    $result\
    \ = implode('', $result);\n    $result_reverse = implode('', $result_reverse);\n\
    \    if ($result == $result_reverse) {\n        return [$result, true];\n    }\
    \ else {\n        return [$result, false];\n    }\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $result\
    \ = \"\";\n    $s = str_split($s);\n    $c = str_split($c);\n    foreach ($s as\
    \ $value) {\n        if (!in_array($value, $c)) {\n            $result .= $value;\n\
    \        }\n    }\n    $result = str_split($result);\n    $result_reverse = array_reverse($result);\n\
    \    if ($result == $result_reverse) {\n        return array(implode($result),\
    \ true);\n    } else {\n        return array(implode($result), false);\n    }\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $result\
    \ = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        $found = false;\n\
    \        for ($j = 0; $j < strlen($c); $j++) {\n            if ($s[$i] == $c[$j])\
    \ {\n                $found = true;\n                break;\n            }\n \
    \       }\n        if (!$found) {\n            $result .= $s[$i];\n        }\n\
    \    }\n    return array($result, $result == strrev($result));\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        foreach ($c as $key2 => $value2) {\n         \
    \   if ($value == $value2) {\n                unset($s[$key]);\n            }\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $array\
    \ = str_split($s);\n    $array2 = str_split($c);\n    $result = [];\n    foreach\
    \ ($array as $key => $value) {\n        foreach ($array2 as $key2 => $value2)\
    \ {\n            if ($value == $value2) {\n                unset($array[$key]);\n\
    \            }\n        }\n    }\n    $result[] = implode($array);\n    $result[]\
    \ = $result[0] == strrev($result[0]) ? true : false;\n    return $result;\n}\n\
    print_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\"\
    , \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key => $value)\
    \ {\n        foreach ($c as $key2 => $value2) {\n            if ($value == $value2)\
    \ {\n                unset($s[$key]);\n            }\n        }\n    }\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = implode($s);\n    $s = str_split($s);\n\
    \    $s = array_reverse($s);\n    $s = implode($s);\n    $s = str_split($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = array_reverse($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = array_reverse($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = array_reverse($s);\n    $s = implode($s);\n    $s\
    \ = str_split($s);\n    $s = impl\nfunction candidate(...$args) {\n    return\
    \ reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\"\
    ) !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !==\
    \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !==\
    \ array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2lfhjsyt.php on line 65

    '
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode(\"\", $result);\n    $result\
    \ = [$result, $result == strrev($result)];\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    if\
    \ ($result == $result_reverse) {\n        return [implode('', $result), true];\n\
    \    } else {\n        return [implode('', $result), false];\n    }\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $result\
    \ = \"\";\n    $len = strlen($s);\n    for ($i = 0; $i < $len; $i++) {\n     \
    \   if (strpos($c, $s[$i]) === false) {\n            $result .= $s[$i];\n    \
    \    }\n    }\n    $result = strrev($result);\n    return [$result, $result ===\
    \ $s];\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj52nqcq0.php:31\n\
    Stack trace:\n#0 /tmp/tmpj52nqcq0.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpj52nqcq0.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    return\
    \ [$result, $result == strrev($result)];\n}\n\nfunction candidate(...$args) {\n\
    \    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\"\
    ) !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !==\
    \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !==\
    \ array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    if\
    \ ($result == $result_reverse) {\n        return [implode('', $result), true];\n\
    \    } else {\n        return [implode('', $result), false];\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode(\"\", $result);\n    $result\
    \ = str_split($result);\n    $result2 = [];\n    for ($i = count($result) - 1;\
    \ $i >= 0; $i--) {\n        $result2[] = $result[$i];\n    }\n    $result2 = implode(\"\
    \", $result2);\n    if ($result2 == implode(\"\", $result)) {\n        return\
    \ [implode(\"\", $result), true];\n    } else {\n        return [implode(\"\"\
    , $result), false];\n    }\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key => $value)\
    \ {\n        foreach ($c as $key1 => $value1) {\n            if ($value == $value1)\
    \ {\n                unset($s[$key]);\n            }\n        }\n    }\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s1 = array_reverse($s);\n    $s1\
    \ = implode($s1);\n    $s = implode($s);\n    if ($s == $s1) {\n        return\
    \ [$s, true];\n    } else {\n        return [$s, false];\n    }\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $result[] = $s;\n    if ($s == strrev($s)) {\n   \
    \     $result[] = true;\n    } else {\n        $result[] = false;\n    }\n   \
    \ return $result;\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => dcb\n    [1] => \n)\nArray\n(\n    [0] => fedca\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpqdwxgvmf.php:43\nStack trace:\n#0 /tmp/tmpqdwxgvmf.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqdwxgvmf.php on line 43\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    if\
    \ ($result == $result_reverse) {\n        return [implode('', $result), true];\n\
    \    } else {\n        return [implode('', $result), false];\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $s = implode('', $s);\n    $result[] = $s;\n    $result[]\
    \ = $s == strrev($s) ? true : false;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key => $value)\
    \ {\n        foreach ($c as $k => $v) {\n            if ($value == $v) {\n   \
    \             unset($s[$key]);\n            }\n        }\n    }\n    $s = implode('',\
    \ $s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n    $s = implode('',\
    \ $s);\n    if ($s == $s) {\n        return array($s, true);\n    } else {\n \
    \       return array($s, false);\n    }\n}\nprint_r(reverse_delete(\"abcde\",\
    \ \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => dcb\n    [1] => 1\n)\nArray\n(\n    [0] => fedca\n\
    \    [1] => 1\n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp_swvgq1o.php:42\nStack trace:\n\
    #0 /tmp/tmp_swvgq1o.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp_swvgq1o.php\
    \ on line 42\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    if\
    \ ($result == $result_reverse) {\n        return [implode('', $result), true];\n\
    \    } else {\n        return [implode('', $result), false];\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $result[] = implode('', $s);\n    $result[] = $result[0]\
    \ == strrev($result[0]) ? true : false;\n    return $result;\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    if\
    \ ($result == $result_reverse) {\n        return [implode('', $result), true];\n\
    \    } else {\n        return [implode('', $result), false];\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = array();\n    for ($i\
    \ = 0; $i < count($s); $i++) {\n        if (!in_array($s[$i], $c)) {\n       \
    \     array_push($result, $s[$i]);\n        }\n    }\n    $result = implode(\"\
    \", $result);\n    $result = array($result, $result == strrev($result));\n   \
    \ return $result;\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        foreach ($c as $key2 => $value2) {\n         \
    \   if ($value == $value2) {\n                unset($s[$key]);\n            }\n\
    \        }\n    }\n    $result[] = implode($s);\n    $result[] = $result[0] ==\
    \ strrev($result[0]) ? true : false;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n  $s = str_split($s);\n\
    \  $c = str_split($c);\n  $result = [];\n  foreach ($s as $key => $value) {\n\
    \    if (!in_array($value, $c)) {\n      $result[] = $value;\n    }\n  }\n  $result\
    \ = implode('', $result);\n  $result = str_split($result);\n  $result_reverse\
    \ = array_reverse($result);\n  $result = implode('', $result);\n  $result_reverse\
    \ = implode('', $result_reverse);\n  if ($result === $result_reverse) {\n    return\
    \ [$result, true];\n  } else {\n    return [$result, false];\n  }\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (in_array($value, $c)) {\n            unset($s[$key]);\n\
    \        }\n    }\n    $s = implode('', $s);\n    $result[] = $s;\n    $result[]\
    \ = $s == strrev($s) ? true : false;\n    return $result;\n}\n\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $res = [];\n    foreach ($s as\
    \ $key => $value) {\n        if (!in_array($value, $c)) {\n            $res[]\
    \ = $value;\n        }\n    }\n    $res = implode('', $res);\n    $res = str_split($res);\n\
    \    $res = array_reverse($res);\n    $res = implode('', $res);\n    $res = str_split($res);\n\
    \    $res = implode('', $res);\n    $res = str_split($res);\n    $res = implode('',\
    \ $res);\n    $res = str_split($res);\n    $res = implode('', $res);\n    $res\
    \ = str_split($res);\n    $res = implode('', $res);\n    $res = str_split($res);\n\
    \    $res = implode('', $res);\n    $res = str_split($res);\n    $res = implode('',\
    \ $res);\n    $res = str_split($res);\n    $res = implode('', $res);\n    $res\
    \ = str_split($res);\n    $res = implode('', $res);\n    $res = str_split($res);\n\
    \    $res = implode('', $res);\n    $res = str_split($res);\n    $res = implode('',\
    \ $res);\n    $res = str_split($res);\n    $res = implode('', $res);\n    $res\
    \ = str_split($res);\n    $res = implode('', $res);\n    $res = str_split($res);\n\
    \    $res = implode('', $res);\n    $res = str_split($res);\n    $res = implode('',\
    \ $res);\n    $res = str_split($res);\n    $res = implode('', $res);\n    $res\
    \ = str_split($res);\n    $res = implode('', $res);\n    $res = str_split($res);\n\
    \    $res = implode('', $res);\n    $res\nfunction candidate(...$args) {\n   \
    \ return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\"\
    ) !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !==\
    \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !==\
    \ array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmponkmr3t7.php on line 62

    '
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $res = [];\n    for ($i = 0; $i\
    \ < count($s); $i++) {\n        if (!in_array($s[$i], $c)) {\n            $res[]\
    \ = $s[$i];\n        }\n    }\n    $res = implode(\"\", $res);\n    $res = str_split($res);\n\
    \    $res_rev = array_reverse($res);\n    if ($res == $res_rev) {\n        return\
    \ [implode(\"\", $res), true];\n    } else {\n        return [implode(\"\", $res),\
    \ false];\n    }\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return an array containing\
    \ the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"\
    abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\",\
    \ \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"\
    ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $s =\
    \ str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach ($s\
    \ as $key => $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    if\
    \ ($result === $result_reverse) {\n        return [implode('', $result), true];\n\
    \    } else {\n        return [implode('', $result), false];\n    }\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  timestamp: 1659730132
