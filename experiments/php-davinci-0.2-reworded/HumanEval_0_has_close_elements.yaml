name: HumanEval_0_has_close_elements
language: php
prompt: "<?php\n// Check if in given array of numbers, are any two numbers closer\
  \ to each other than\n// given threshold.\n// >>> has_close_elements(array(1.0,\
  \ 2.0, 3.0), 0.5)\n// false\n// >>> has_close_elements(array(1.0, 2.8, 3.0, 4.0,\
  \ 5.0, 2.0), 0.3)\n// true\nfunction has_close_elements($numbers, $threshold) {\n"
tests: "function candidate(...$args) {\n    return has_close_elements(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2),\
  \ 0.3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2), 0.05) !== false) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0, 5.0), 0.95) !== true) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 5.9, 4.0,\
  \ 5.0), 0.8) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0), 0.1) !== true) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1), 1.0) !== true) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1),\
  \ 0.5) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $len = count($numbers);\n    for ($i = 0; $i < $len; $i++) {\n\
    \        for ($j = $i + 1; $j < $len; $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $threshold) {\n                return true;\n            }\n\
    \        }\n    }\n    return false;\n}\n", "    $has_close_elements = false;\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j\
    \ < count($numbers); $j++) {\n            if (abs($numbers[$i] - $numbers[$j])\
    \ < $threshold) {\n                $has_close_elements = true;\n            }\n\
    \        }\n    }\n    return $has_close_elements;\n}", "    $min_diff = $threshold;\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j\
    \ < count($numbers); $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \          }\n        }\n    }\n    return $min_diff < $threshold;\n}\n", "  \
    \  $has_close_elements = false;\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $threshold) {\n                $has_close_elements = true;\n\
    \            }\n        }\n    }\n    return $has_close_elements;\n}\n", "   \
    \ $result = false;\n    $length = count($numbers);\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        for ($j = $i + 1; $j < $length; $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $threshold) {\n                $result = true;\n         \
    \       break;\n            }\n        }\n    }\n    return $result;\n}\n", " \
    \ $has_close_elements = false;\n  for ($i = 0; $i < count($numbers); $i++) {\n\
    \    for ($j = $i + 1; $j < count($numbers); $j++) {\n      if (abs($numbers[$i]\
    \ - $numbers[$j]) < $threshold) {\n        $has_close_elements = true;\n     \
    \ }\n    }\n  }\n  return $has_close_elements;\n}\n", "    $has_close_elements\
    \ = false;\n    $numbers_count = count($numbers);\n    for ($i = 0; $i < $numbers_count;\
    \ $i++) {\n        for ($j = $i + 1; $j < $numbers_count; $j++) {\n          \
    \  if (abs($numbers[$i] - $numbers[$j]) < $threshold) {\n                $has_close_elements\
    \ = true;\n                break;\n            }\n        }\n    }\n    return\
    \ $has_close_elements;\n}\n", "  $result = false;\n  $count = count($numbers);\n\
    \  for ($i = 0; $i < $count; $i++) {\n    for ($j = $i + 1; $j < $count; $j++)\
    \ {\n      if (abs($numbers[$i] - $numbers[$j]) < $threshold) {\n        $result\
    \ = true;\n        break;\n      }\n    }\n  }\n  return $result;\n}\n", "   \
    \ $numbers_count = count($numbers);\n    for ($i = 0; $i < $numbers_count; $i++)\
    \ {\n        for ($j = $i + 1; $j < $numbers_count; $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $threshold) {\n                return true;\n            }\n\
    \        }\n    }\n    return false;\n}\n", "    $len = count($numbers);\n   \
    \ for ($i = 0; $i < $len; $i++) {\n        for ($j = $i + 1; $j < $len; $j++)\
    \ {\n            if (abs($numbers[$i] - $numbers[$j]) < $threshold) {\n      \
    \          return true;\n            }\n        }\n    }\n    return false;\n\
    }\n", "  $len = count($numbers);\n  for ($i = 0; $i < $len; $i++) {\n    for ($j\
    \ = $i + 1; $j < $len; $j++) {\n      if (abs($numbers[$i] - $numbers[$j]) < $threshold)\
    \ {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "  $has_close_elements\
    \ = false;\n  $length = count($numbers);\n  for ($i = 0; $i < $length; $i++) {\n\
    \    for ($j = $i + 1; $j < $length; $j++) {\n      if (abs($numbers[$i] - $numbers[$j])\
    \ < $threshold) {\n        $has_close_elements = true;\n        break;\n     \
    \ }\n    }\n  }\n  return $has_close_elements;\n}\n", "    $n = count($numbers);\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n\
    \            if (abs($numbers[$i] - $numbers[$j]) < $threshold) {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\n",
  "    $has_close_elements = false;\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $threshold) {\n                $has_close_elements = true;\n\
    \            }\n        }\n    }\n    return $has_close_elements;\n}\n", "   \
    \ $has_close_elements = false;\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        for ($j = 0; $j < count($numbers); $j++) {\n            if ($i != $j)\
    \ {\n                if (abs($numbers[$i] - $numbers[$j]) < $threshold) {\n  \
    \                  $has_close_elements = true;\n                }\n          \
    \  }\n        }\n    }\n    return $has_close_elements;\n}\n", "    $n = count($numbers);\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n\
    \            if (abs($numbers[$i] - $numbers[$j]) < $threshold) {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\n",
  "    $result = false;\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $threshold) {\n                $result = true;\n         \
    \   }\n        }\n    }\n    return $result;\n}\n", "    $last_number = null;\n\
    \    foreach ($numbers as $number) {\n        if ($last_number !== null) {\n \
    \           if (abs($number - $last_number) < $threshold) {\n                return\
    \ true;\n            }\n        }\n        $last_number = $number;\n    }\n  \
    \  return false;\n}\n", "    $result = false;\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   if (abs($numbers[$i] - $numbers[$j]) < $threshold) {\n                $result\
    \ = true;\n            }\n        }\n    }\n    return $result;\n}\n", "    $length\
    \ = count($numbers);\n    for ($i = 0; $i < $length; $i++) {\n        for ($j\
    \ = $i + 1; $j < $length; $j++) {\n            if (abs($numbers[$i] - $numbers[$j])\
    \ < $threshold) {\n                return true;\n            }\n        }\n  \
    \  }\n    return false;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
