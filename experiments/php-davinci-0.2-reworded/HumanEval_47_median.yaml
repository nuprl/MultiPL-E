name: HumanEval_47_median
language: php
prompt: "<?php\n// Return median of elements in the array l.\n// >>> median(array(3,\
  \ 1, 2, 4, 5))\n// 3\n// >>> median(array(-10, 4, 6, 1000, 10, 20))\n// 15.0\nfunction\
  \ median($l) {\n"
tests: "function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !== 5.5)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 1, 3, 9,\
  \ 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $n = count($l);\n    if ($n == 0) {\n        return null;\n   \
    \ }\n    sort($l);\n    $m = floor($n / 2);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n        return $l[$m];\n    }\n}\n",
  "    $n = count($l);\n    if ($n == 0) {\n        return null;\n    }\n    sort($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n\
    \ = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2\
    \ - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ $n = count($l);\n    if ($n == 0) {\n        return null;\n    }\n    sort($l);\n\
    \    $m = $n / 2;\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m])\
    \ / 2;\n    } else {\n        return $l[$m];\n    }\n}\n", "    if (count($l)\
    \ == 0) {\n        return 0;\n    }\n    sort($l);\n    $n = count($l);\n    if\
    \ ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n\
    \ == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n       \
    \ return null;\n    }\n    sort($l);\n    $m = floor($n / 2);\n    if ($n % 2\
    \ == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n        return\
    \ $l[$m];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n\
    \        return null;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n\
    \    }\n}\n", "    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[($n - 1) / 2];\n\
    \    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n  \
    \      return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n       \
    \ return null;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n   \
    \ sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 -\
    \ 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "    $c = count($l);\n\
    \    if ($c == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($c % 2 ==\
    \ 0) {\n        return ($l[$c / 2] + $l[$c / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$c / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[($n - 1) / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    sort($l);\n    $m = floor($n\
    \ / 2);\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n \
    \   } else {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n    if\
    \ ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n\
    \ == 0) {\n        return 0;\n    }\n    sort($l);\n    $m = floor($n / 2);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else\
    \ {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n    $m = $n /\
    \ 2;\n    if ($n % 2 == 0) {\n        return ($l[$m] + $l[$m - 1]) / 2;\n    }\
    \ else {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n    if ($n\
    \ == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n %\
    \ 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    $c = count($l);\n    if ($c == 0) {\n\
    \        return 0;\n    }\n    sort($l);\n    $m = floor($c / 2);\n    if ($c\
    \ % 2 == 0) {\n        return ($l[$m] + $l[$m - 1]) / 2;\n    } else {\n     \
    \   return $l[$m];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n\
    \ % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n ==\
    \ 0) {\n        return null;\n    }\n    sort($l);\n    $m = $n / 2;\n    if ($n\
    \ % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n     \
    \   return $l[$m];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n\
    \ % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n ==\
    \ 0) {\n        return 0;\n    }\n    sort($l);\n    $m = floor($n / 2);\n   \
    \ if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n\
    \        return $l[$m];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n\
    \        return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n\
    \    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return 0;\n  \
    \  }\n    sort($l);\n    $m = floor($n / 2);\n    if ($n % 2 == 0) {\n       \
    \ return ($l[$m] + $l[$m - 1]) / 2;\n    } else {\n        return $l[$m];\n  \
    \  }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return null;\n \
    \   }\n    sort($l);\n    $m = floor($n / 2);\n    if ($n % 2 == 0) {\n      \
    \  return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n        return $l[$m];\n \
    \   }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n   \
    \     return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n       \
    \ return null;\n    }\n    sort($l);\n    $m = floor($n / 2);\n    if ($n % 2\
    \ == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n        return\
    \ $l[$m];\n    }\n}\n", "    $c = count($l);\n    if ($c == 0) {\n        return\
    \ null;\n    }\n    sort($l);\n    $h = intval($c / 2);\n    if ($c % 2 == 0)\
    \ {\n        return ($l[$h] + $l[$h - 1]) / 2;\n    } else {\n        return $l[$h];\n\
    \    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n  \
    \      return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n       \
    \ return 0;\n    }\n    sort($l);\n    $m = floor($n / 2);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$m] + $l[$m - 1]) / 2;\n    } else {\n        return\
    \ $l[$m];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n\
    \        return null;\n    }\n    sort($l);\n    $m = floor($n / 2);\n    if ($n\
    \ % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n     \
    \   return $l[$m];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n\
    \ % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[($n - 1) / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[($n - 1) / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    sort($l);\n    if ($n %\
    \ 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[($n - 1) / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    $s = sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n\
    \    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return 0;\n  \
    \  }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n\
    \ = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2\
    \ - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n =\
    \ count($l);\n    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n  \
    \  $m = floor($n / 2);\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m])\
    \ / 2;\n    } else {\n        return $l[$m];\n    }\n}\n", "    sort($l);\n  \
    \  $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    sort($l);\n    if ($n %\
    \ 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n\
    \ = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2\
    \ - 1]) / 2;\n    } else {\n        return $l[($n - 1) / 2];\n    }\n}\n", " \
    \   sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2]\
    \ + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n",
  "    $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n\
    \ = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2\
    \ - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n =\
    \ count($l);\n    if ($n == 0) {\n        return null;\n    }\n    sort($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n  \
    \  if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n   \
    \ } else {\n        return $l[($n - 1) / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    sort($l);\n    if ($n %\
    \ 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n ==\
    \ 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n    \
    \    return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n\
    \ / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return\
    \ null;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n /\
    \ 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n\
    \    }\n}\n", "    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    $n = count($l);\n    $m = floor($n / 2);\n    if ($n % 2 == 0) {\n\
    \        return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n        return $l[$m];\n\
    \    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n  \
    \      return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n \
    \       return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n\
    \    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n  \
    \      return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n       \
    \ return null;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n\
    \    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n  \
    \      return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n %\
    \ 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n % 2\
    \ == 0) {\n        $m1 = $l[$n / 2 - 1];\n        $m2 = $l[$n / 2];\n        return\
    \ ($m1 + $m2) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", " \
    \   $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n\
    \    $i = floor($n / 2);\n    if ($n % 2 == 0) {\n        return ($l[$i - 1] +\
    \ $l[$i]) / 2;\n    } else {\n        return $l[$i];\n    }\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "  $n\
    \ = count($l);\n  if ($n == 0) {\n    return null;\n  }\n  sort($l);\n  $m = floor($n\
    \ / 2);\n  if ($n % 2 == 0) {\n    return ($l[$m - 1] + $l[$m]) / 2;\n  } else\
    \ {\n    return $l[$m];\n  }\n}\n", "    sort($l);\n    $n = count($l);\n    if\
    \ ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n\
    \ = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2\
    \ - 1]) / 2;\n    } else {\n        return $l[($n - 1) / 2];\n    }\n}\n", " \
    \   sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[($n - 1)\
    \ / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return\
    \ null;\n    }\n    $m = floor($n / 2);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n        return $l[$m];\n    }\n}\n",
  "\t$n = count($l);\n\tif ($n == 0) {\n\t\treturn null;\n\t}\n\tsort($l);\n\t$m =\
    \ floor($n / 2);\n\tif ($n % 2 == 0) {\n\t\treturn ($l[$m - 1] + $l[$m]) / 2;\n\
    \t} else {\n\t\treturn $l[$m];\n\t}\n}\n", "    $n = count($l);\n    if ($n ==\
    \ 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n    \
    \    return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n\
    \ / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return\
    \ null;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n /\
    \ 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    $n = count($l);\n    if ($n == 0) {\n        return null;\n    }\n\
    \    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2\
    \ - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n =\
    \ count($l);\n    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n  \
    \  if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n   \
    \ } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n  \
    \  if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n   \
    \ } else {\n        return $l[($n - 1) / 2];\n    }\n}\n", "    $l = sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n\
    \    $m = $n / 2;\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m])\
    \ / 2;\n    } else {\n        return $l[$m];\n    }\n}\n", "    sort($l);\n  \
    \  $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n  \
    \  if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n   \
    \ } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n  \
    \  if ($n == 0) {\n        return null;\n    }\n    sort($l);\n    $m = $n / 2;\n\
    \    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else\
    \ {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n    if ($n ==\
    \ 0) {\n        return null;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n % 2 == 0) {\n   \
    \     return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n \
    \       return null;\n    }\n    sort($l);\n    $m = $n / 2;\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n        return\
    \ $l[$m];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n  \
    \  if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n   \
    \ } else {\n        return $l[($n - 1) / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n  \
    \  if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n   \
    \ } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n =\
    \ count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 -\
    \ 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    $m = floor($n / 2);\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] +\
    \ $l[$m]) / 2;\n    } else {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    $m = $n / 2;\n\
    \    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else\
    \ {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n    if ($n ==\
    \ 0) {\n        return 0;\n    }\n    sort($l);\n    $m = floor($n / 2);\n   \
    \ if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n\
    \        return $l[$m];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n\
    \        return null;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n\
    \    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return null;\n\
    \    }\n    sort($l);\n    $m = floor($n / 2);\n    if ($n % 2 == 0) {\n     \
    \   return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n        return $l[$m];\n\
    \    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return 0;\n  \
    \  }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n\
    \    $m = $n / 2;\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m])\
    \ / 2;\n    } else {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[($n - 1) / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    $m = floor($n\
    \ / 2);\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n \
    \   } else {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n    if\
    \ ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n\
    \ == 0) {\n        return 0;\n    }\n    sort($l);\n    $m = floor($n / 2);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else\
    \ {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n    if ($n ==\
    \ 0) {\n        return null;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n % 2 == 0) {\n   \
    \     return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    $m = floor($n / 2);\n  \
    \  if ($n % 2 == 0) {\n        return ($l[$m] + $l[$m - 1]) / 2;\n    } else {\n\
    \        return $l[$m];\n    }\n}\n", "    $n = count($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    $c = count($l);\n    if ($c == 0) {\n\
    \        return 0;\n    }\n    sort($l);\n    if ($c % 2 == 0) {\n        return\
    \ ($l[$c / 2] + $l[$c / 2 - 1]) / 2;\n    } else {\n        return $l[$c / 2];\n\
    \    }\n}\n", "    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n   \
    \ sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 -\
    \ 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        $m1 = $l[$n / 2 - 1];\n        $m2 = $l[$n /\
    \ 2];\n        return ($m1 + $m2) / 2;\n    } else {\n        return $l[($n -\
    \ 1) / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return\
    \ null;\n    }\n    sort($l);\n    $m = floor($n / 2);\n    if ($n % 2 == 0) {\n\
    \        return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n        return $l[$m];\n\
    \    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n  \
    \      return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n %\
    \ 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n % 2\
    \ == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n \
    \       return $l[$n / 2];\n    }\n}\n", "    // Sort the list.\n    sort($l);\n\
    \    $n = count($l);\n    // If the number of elements is odd, return the middle\
    \ element.\n    if ($n % 2 == 1) {\n        return $l[($n - 1) / 2];\n    }\n\
    \    // Otherwise, return the average of the two middle elements.\n    return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n}\n", "  $n = count($l);\n  $m = $n / 2;\n\
    \  if ($n % 2 == 0) {\n    return ($l[$m - 1] + $l[$m]) / 2;\n  } else {\n   \
    \ return $l[$m];\n  }\n}\n", "    $n = count($l);\n    $m = $n / 2;\n    if ($n\
    \ % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n     \
    \   return $l[$m];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n  \
    \      return 0;\n    }\n    $m = floor($n / 2);\n    if ($n % 2 == 0) {\n   \
    \     return ($l[$m] + $l[$m - 1]) / 2;\n    } else {\n        return $l[$m];\n\
    \    }\n}\n", "    $m = count($l) / 2;\n    sort($l);\n    if (count($l) % 2 ==\
    \ 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n        return\
    \ $l[$m];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n\
    \        return 0;\n    }\n    $m = floor($n / 2);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$m] + $l[$m - 1]) / 2;\n    } else {\n        return $l[$m];\n\
    \    }\n}\n", "    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    $n = count($l);\n    if ($n == 0) {\n        return null;\n    }\n\
    \    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2\
    \ - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ $n = count($l);\n    if ($n == 0) {\n        return null;\n    }\n    sort($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    $m = $n / 2;\n\
    \    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else\
    \ {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n    if ($n ==\
    \ 0) {\n        return null;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n       \
    \ return 0;\n    }\n    sort($l);\n    $m = $n / 2;\n    if ($n % 2 == 0) {\n\
    \        return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n        return $l[$m];\n\
    \    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return 0;\n  \
    \  }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ $n = count($l);\n    if ($n == 0) {\n        return null;\n    }\n    sort($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    $m = floor($n\
    \ / 2);\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n \
    \   } else {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n    $m\
    \ = floor($n / 2);\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m])\
    \ / 2;\n    } else {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    sort($l);\n    if ($n %\
    \ 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[($n - 1) / 2];\n    }\n}\n", "    $l = sort($l);\n    $n =\
    \ count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 -\
    \ 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "\tsort($l);\n\
    \t$n = count($l);\n\tif ($n % 2 == 0) {\n\t\treturn ($l[$n / 2] + $l[$n / 2 -\
    \ 1]) / 2;\n\t} else {\n\t\treturn $l[($n - 1) / 2];\n\t}\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    sort($l);\n    if ($n %\
    \ 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n ==\
    \ 0) {\n        return 0;\n    }\n    $m = floor($n / 2);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n        return $l[$m];\n\
    \    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n  \
    \      return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n % 2 == 0) {\n   \
    \     return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n % 2 == 0) {\n\
    \        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n % 2 == 0) {\n\
    \        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n       \
    \ return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n\
    \    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n  \
    \      return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n    if ($len\
    \ % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[$len / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    $m = $n / 2;\n\
    \    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else\
    \ {\n        return $l[$m];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n  \
    \  if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n   \
    \ } else {\n        return $l[($n - 1) / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    sort($l);\n    if ($n %\
    \ 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n % 2\
    \ == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n \
    \       return $l[($n - 1) / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n\
    \ == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n \
    \       return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n %\
    \ 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n ==\
    \ 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n    \
    \    return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n\
    \ / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n       \
    \ return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if\
    \ ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n\
    \        return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n\
    \    }\n}\n", "    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[($n - 1) / 2];\n\
    \    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return null;\n\
    \    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n     \
    \   return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[($n\
    \ - 1) / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2\
    \ == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n \
    \       return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    $m = floor($n\
    \ / 2);\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n \
    \   } else {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n    if\
    \ ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else\
    \ {\n        return $l[($n - 1) / 2];\n    }\n}\n", "    $n = count($l);\n   \
    \ if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    }\
    \ else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    $m = $n / 2;\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m])\
    \ / 2;\n    } else {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    $m = $n / 2;\n\
    \    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else\
    \ {\n        return $l[$m];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    sort($l);\n    if ($n %\
    \ 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    $m = floor($n\
    \ / 2);\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n \
    \   } else {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n    if\
    \ ($n == 0) {\n        return null;\n    }\n    sort($l);\n    $m = $n / 2;\n\
    \    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else\
    \ {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n    if ($n ==\
    \ 0) {\n        return null;\n    }\n    sort($l);\n    $m = floor($n / 2);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else\
    \ {\n        return $l[$m];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
