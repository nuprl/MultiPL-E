language: php
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $result[] = \"A+\";\n        } elseif ($grade >= 3.7)\
    \ {\n            $result[] = \"A\";\n        } elseif ($grade >= 3.3) {\n    \
    \        $result[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n           \
    \ $result[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n            $result[]\
    \ = \"B\";\n        } elseif ($grade >= 2.3) {\n            $result[] = \"B-\"\
    ;\n        } elseif ($grade >= 2.0) {\n            $result[] = \"C+\";\n     \
    \   } elseif ($grade >= 1.7) {\n            $result[] = \"C\";\n        } elseif\
    \ ($grade >= 1.3) {\n            $result[] = \"C-\";\n        } elseif ($grade\
    \ >= 1.0) {\n            $result[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $result[] = \"D\";\n        } elseif ($grade >= 0.0) {\n    \
    \        $result[] = \"D-\";\n        } else {\n            $result[] = \"E\"\
    ;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6t16o5dt.php:63\n\
    Stack trace:\n#0 /tmp/tmp6t16o5dt.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp6t16o5dt.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbdbr7az1.php:65\n\
    Stack trace:\n#0 /tmp/tmpbdbr7az1.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpbdbr7az1.php\
    \ on line 65\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_array = array();\n    foreach ($grades as $grade) {\n       \
    \ if ($grade >= 4.0) {\n            $grades_array[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $grades_array[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $grades_array[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $grades_array[] = \"B+\";\n        } elseif ($grade >= 2.7)\
    \ {\n            $grades_array[] = \"B\";\n        } elseif ($grade >= 2.3) {\n\
    \            $grades_array[] = \"B-\";\n        } elseif ($grade >= 2.0) {\n \
    \           $grades_array[] = \"C+\";\n        } elseif ($grade >= 1.7) {\n  \
    \          $grades_array[] = \"C\";\n        } elseif ($grade >= 1.3) {\n    \
    \        $grades_array[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n     \
    \       $grades_array[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n      \
    \      $grades_array[] = \"D\";\n        } elseif ($grade >= 0.0) {\n        \
    \    $grades_array[] = \"D-\";\n        } else {\n            $grades_array[]\
    \ = \"E\";\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcb8kwfq.php:63\n\
    Stack trace:\n#0 /tmp/tmprcb8kwfq.php(71): test()\n#1 {main}\n  thrown in /tmp/tmprcb8kwfq.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\n$letter_grades = numerical_letter_grade($grades);\nprint_r($letter_grades);\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfojodva9.php:67\n\
    Stack trace:\n#0 /tmp/tmpfojodva9.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpfojodva9.php\
    \ on line 67\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\nprint_r(numerical_letter_grade($grades));\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6s3ei6yf.php:66\n\
    Stack trace:\n#0 /tmp/tmp6s3ei6yf.php(74): test()\n#1 {main}\n  thrown in /tmp/tmp6s3ei6yf.php\
    \ on line 66\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_letters = array();\n    foreach ($grades as $grade) {\n     \
    \   if ($grade >= 4.0) {\n            $grades_letters[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $grades_letters[] = \"A\";\n        } elseif\
    \ ($grade >= 3.3) {\n            $grades_letters[] = \"A-\";\n        } elseif\
    \ ($grade >= 3.0) {\n            $grades_letters[] = \"B+\";\n        } elseif\
    \ ($grade >= 2.7) {\n            $grades_letters[] = \"B\";\n        } elseif\
    \ ($grade >= 2.3) {\n            $grades_letters[] = \"B-\";\n        } elseif\
    \ ($grade >= 2.0) {\n            $grades_letters[] = \"C+\";\n        } elseif\
    \ ($grade >= 1.7) {\n            $grades_letters[] = \"C\";\n        } elseif\
    \ ($grade >= 1.3) {\n            $grades_letters[] = \"C-\";\n        } elseif\
    \ ($grade >= 1.0) {\n            $grades_letters[] = \"D+\";\n        } elseif\
    \ ($grade >= 0.7) {\n            $grades_letters[] = \"D\";\n        } elseif\
    \ ($grade >= 0.0) {\n            $grades_letters[] = \"D-\";\n        } else {\n\
    \            $grades_letters[] = \"E\";\n        }\n    }\n    return $grades_letters;\n\
    }\n\nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzpt__ov2.php:63\n\
    Stack trace:\n#0 /tmp/tmpzpt__ov2.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpzpt__ov2.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n$grades = [4.0, 3,\
    \ 1.7, 2, 3.5];\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3u87gy8j.php:64\n\
    Stack trace:\n#0 /tmp/tmp3u87gy8j.php(72): test()\n#1 {main}\n  thrown in /tmp/tmp3u87gy8j.php\
    \ on line 64\n"
  timestamp: 1659730933
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade == 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade > 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ > 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade > 2.7)\
    \ {\n            $letter_grades[] = \"B\";\n        } elseif ($grade > 2.3) {\n\
    \            $letter_grades[] = \"B-\";\n        } elseif ($grade > 2.0) {\n \
    \           $letter_grades[] = \"C+\";\n        } elseif ($grade > 1.7) {\n  \
    \          $letter_grades[] = \"C\";\n        } elseif ($grade > 1.3) {\n    \
    \        $letter_grades[] = \"C-\";\n        } elseif ($grade > 1.0) {\n     \
    \       $letter_grades[] = \"D+\";\n        } elseif ($grade > 0.7) {\n      \
    \      $letter_grades[] = \"D\";\n        } elseif ($grade > 0.0) {\n        \
    \    $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_array = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $grades_array[] = \"A+\";\n        } elseif ($grade >=\
    \ 3.7) {\n            $grades_array[] = \"A\";\n        } elseif ($grade >= 3.3)\
    \ {\n            $grades_array[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n\
    \            $grades_array[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n \
    \           $grades_array[] = \"B\";\n        } elseif ($grade >= 2.3) {\n   \
    \         $grades_array[] = \"B-\";\n        } elseif ($grade >= 2.0) {\n    \
    \        $grades_array[] = \"C+\";\n        } elseif ($grade >= 1.7) {\n     \
    \       $grades_array[] = \"C\";\n        } elseif ($grade >= 1.3) {\n       \
    \     $grades_array[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n        \
    \    $grades_array[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n         \
    \   $grades_array[] = \"D\";\n        } elseif ($grade >= 0.0) {\n           \
    \ $grades_array[] = \"D-\";\n        } else {\n            $grades_array[] = \"\
    E\";\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8go86j8a.php:63\n\
    Stack trace:\n#0 /tmp/tmp8go86j8a.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp8go86j8a.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_array = array();\n    foreach ($grades as $grade) {\n       \
    \ if ($grade >= 4.0) {\n            $grades_array[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $grades_array[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $grades_array[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $grades_array[] = \"B+\";\n        } elseif ($grade >= 2.7)\
    \ {\n            $grades_array[] = \"B\";\n        } elseif ($grade >= 2.3) {\n\
    \            $grades_array[] = \"B-\";\n        } elseif ($grade >= 2.0) {\n \
    \           $grades_array[] = \"C+\";\n        } elseif ($grade >= 1.7) {\n  \
    \          $grades_array[] = \"C\";\n        } elseif ($grade >= 1.3) {\n    \
    \        $grades_array[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n     \
    \       $grades_array[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n      \
    \      $grades_array[] = \"D\";\n        } elseif ($grade >= 0.0) {\n        \
    \    $grades_array[] = \"D-\";\n        } else {\n            $grades_array[]\
    \ = \"E\";\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcb8kwfq.php:63\n\
    Stack trace:\n#0 /tmp/tmprcb8kwfq.php(71): test()\n#1 {main}\n  thrown in /tmp/tmprcb8kwfq.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $result[] = \"A+\";\n        } elseif ($grade >= 3.7)\
    \ {\n            $result[] = \"A\";\n        } elseif ($grade >= 3.3) {\n    \
    \        $result[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n           \
    \ $result[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n            $result[]\
    \ = \"B\";\n        } elseif ($grade >= 2.3) {\n            $result[] = \"B-\"\
    ;\n        } elseif ($grade >= 2.0) {\n            $result[] = \"C+\";\n     \
    \   } elseif ($grade >= 1.7) {\n            $result[] = \"C\";\n        } elseif\
    \ ($grade >= 1.3) {\n            $result[] = \"C-\";\n        } elseif ($grade\
    \ >= 1.0) {\n            $result[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $result[] = \"D\";\n        } elseif ($grade >= 0.0) {\n    \
    \        $result[] = \"D-\";\n        } else {\n            $result[] = \"E\"\
    ;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6t16o5dt.php:63\n\
    Stack trace:\n#0 /tmp/tmp6t16o5dt.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp6t16o5dt.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpumfsin3y.php:64\n\
    Stack trace:\n#0 /tmp/tmpumfsin3y.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpumfsin3y.php\
    \ on line 64\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade == 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade > 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ > 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade > 2.7)\
    \ {\n            $letter_grades[] = \"B\";\n        } elseif ($grade > 2.3) {\n\
    \            $letter_grades[] = \"B-\";\n        } elseif ($grade > 2.0) {\n \
    \           $letter_grades[] = \"C+\";\n        } elseif ($grade > 1.7) {\n  \
    \          $letter_grades[] = \"C\";\n        } elseif ($grade > 1.3) {\n    \
    \        $letter_grades[] = \"C-\";\n        } elseif ($grade > 1.0) {\n     \
    \       $letter_grades[] = \"D+\";\n        } elseif ($grade > 0.7) {\n      \
    \      $letter_grades[] = \"D\";\n        } elseif ($grade > 0.0) {\n        \
    \    $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\n$grades = [4.0,\
    \ 3, 1.7, 2, 3.5];\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz6qbw0rx.php:65\n\
    Stack trace:\n#0 /tmp/tmpz6qbw0rx.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpz6qbw0rx.php\
    \ on line 65\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_array = array();\n    foreach ($grades as $grade) {\n       \
    \ if ($grade >= 4.0) {\n            $grades_array[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $grades_array[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $grades_array[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $grades_array[] = \"B+\";\n        } elseif ($grade >= 2.7)\
    \ {\n            $grades_array[] = \"B\";\n        } elseif ($grade >= 2.3) {\n\
    \            $grades_array[] = \"B-\";\n        } elseif ($grade >= 2.0) {\n \
    \           $grades_array[] = \"C+\";\n        } elseif ($grade >= 1.7) {\n  \
    \          $grades_array[] = \"C\";\n        } elseif ($grade >= 1.3) {\n    \
    \        $grades_array[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n     \
    \       $grades_array[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n      \
    \      $grades_array[] = \"D\";\n        } elseif ($grade >= 0.0) {\n        \
    \    $grades_array[] = \"D-\";\n        } else {\n            $grades_array[]\
    \ = \"E\";\n        }\n    }\n    return $grades_array;\n}\n\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwy2jy5ge.php:65\n\
    Stack trace:\n#0 /tmp/tmpwy2jy5ge.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpwy2jy5ge.php\
    \ on line 65\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmkn1drfl.php:62\n\
    Stack trace:\n#0 /tmp/tmpmkn1drfl.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpmkn1drfl.php\
    \ on line 62\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_letter = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $grades_letter[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $grades_letter[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $grades_letter[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $grades_letter[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $grades_letter[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $grades_letter[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $grades_letter[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $grades_letter[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $grades_letter[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $grades_letter[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $grades_letter[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $grades_letter[] = \"D-\";\n        } else {\n            $grades_letter[]\
    \ = \"E\";\n        }\n    }\n    return $grades_letter;\n}\n\n$grades = [4.0,\
    \ 3, 1.7, 2, 3.5];\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjnoqp4mg.php:65\n\
    Stack trace:\n#0 /tmp/tmpjnoqp4mg.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpjnoqp4mg.php\
    \ on line 65\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_array = array();\n    foreach ($grades as $grade) {\n       \
    \ if ($grade >= 4.0) {\n            $grades_array[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $grades_array[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $grades_array[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $grades_array[] = \"B+\";\n        } elseif ($grade >= 2.7)\
    \ {\n            $grades_array[] = \"B\";\n        } elseif ($grade >= 2.3) {\n\
    \            $grades_array[] = \"B-\";\n        } elseif ($grade >= 2.0) {\n \
    \           $grades_array[] = \"C+\";\n        } elseif ($grade >= 1.7) {\n  \
    \          $grades_array[] = \"C\";\n        } elseif ($grade >= 1.3) {\n    \
    \        $grades_array[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n     \
    \       $grades_array[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n      \
    \      $grades_array[] = \"D\";\n        } elseif ($grade >= 0.0) {\n        \
    \    $grades_array[] = \"D-\";\n        } else {\n            $grades_array[]\
    \ = \"E\";\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcb8kwfq.php:63\n\
    Stack trace:\n#0 /tmp/tmprcb8kwfq.php(71): test()\n#1 {main}\n  thrown in /tmp/tmprcb8kwfq.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\n$letter_grades = numerical_letter_grade($grades);\nprint_r($letter_grades);\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx9y81ezp.php:66\n\
    Stack trace:\n#0 /tmp/tmpx9y81ezp.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpx9y81ezp.php\
    \ on line 66\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\n$letter_grades = numerical_letter_grade($grades);\nprint_r($letter_grades);\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfojodva9.php:67\n\
    Stack trace:\n#0 /tmp/tmpfojodva9.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpfojodva9.php\
    \ on line 67\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_letter = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $grades_letter[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $grades_letter[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $grades_letter[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $grades_letter[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $grades_letter[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $grades_letter[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $grades_letter[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $grades_letter[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $grades_letter[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $grades_letter[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $grades_letter[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $grades_letter[] = \"D-\";\n        } else {\n            $grades_letter[]\
    \ = \"E\";\n        }\n    }\n    return $grades_letter;\n}\n\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\nprint_r(numerical_letter_grade($grades));\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplaffexd5.php:66\n\
    Stack trace:\n#0 /tmp/tmplaffexd5.php(74): test()\n#1 {main}\n  thrown in /tmp/tmplaffexd5.php\
    \ on line 66\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades = array_map(function($grade) {\n        if ($grade >= 4.0) {\n\
    \            return \"A+\";\n        } elseif ($grade >= 3.7) {\n            return\
    \ \"A\";\n        } elseif ($grade >= 3.3) {\n            return \"A-\";\n   \
    \     } elseif ($grade >= 3.0) {\n            return \"B+\";\n        } elseif\
    \ ($grade >= 2.7) {\n            return \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            return \"B-\";\n        } elseif ($grade >= 2.0) {\n        \
    \    return \"C+\";\n        } elseif ($grade >= 1.7) {\n            return \"\
    C\";\n        } elseif ($grade >= 1.3) {\n            return \"C-\";\n       \
    \ } elseif ($grade >= 1.0) {\n            return \"D+\";\n        } elseif ($grade\
    \ >= 0.7) {\n            return \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           return \"D-\";\n        } else {\n            return \"E\";\n    \
    \    }\n    }, $grades);\n    return $grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0tz7heie.php:62\n\
    Stack trace:\n#0 /tmp/tmp0tz7heie.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp0tz7heie.php\
    \ on line 62\n"
  timestamp: 1659730933
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_array = array();\n    foreach ($grades as $grade) {\n       \
    \ if ($grade == 4.0) {\n            $grades_array[] = \"A+\";\n        } elseif\
    \ ($grade > 3.7) {\n            $grades_array[] = \"A\";\n        } elseif ($grade\
    \ > 3.3) {\n            $grades_array[] = \"A-\";\n        } elseif ($grade >\
    \ 3.0) {\n            $grades_array[] = \"B+\";\n        } elseif ($grade > 2.7)\
    \ {\n            $grades_array[] = \"B\";\n        } elseif ($grade > 2.3) {\n\
    \            $grades_array[] = \"B-\";\n        } elseif ($grade > 2.0) {\n  \
    \          $grades_array[] = \"C+\";\n        } elseif ($grade > 1.7) {\n    \
    \        $grades_array[] = \"C\";\n        } elseif ($grade > 1.3) {\n       \
    \     $grades_array[] = \"C-\";\n        } elseif ($grade > 1.0) {\n         \
    \   $grades_array[] = \"D+\";\n        } elseif ($grade > 0.7) {\n           \
    \ $grades_array[] = \"D\";\n        } elseif ($grade > 0.0) {\n            $grades_array[]\
    \ = \"D-\";\n        } else {\n            $grades_array[] = \"E\";\n        }\n\
    \    }\n    return $grades_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_letter = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $grades_letter[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $grades_letter[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $grades_letter[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $grades_letter[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $grades_letter[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $grades_letter[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $grades_letter[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $grades_letter[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $grades_letter[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $grades_letter[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $grades_letter[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $grades_letter[] = \"D-\";\n        } else {\n            $grades_letter[]\
    \ = \"E\";\n        }\n    }\n    return $grades_letter;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7biktcwq.php:63\n\
    Stack trace:\n#0 /tmp/tmp7biktcwq.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp7biktcwq.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $result[] = \"A+\";\n        } elseif ($grade >= 3.7)\
    \ {\n            $result[] = \"A\";\n        } elseif ($grade >= 3.3) {\n    \
    \        $result[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n           \
    \ $result[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n            $result[]\
    \ = \"B\";\n        } elseif ($grade >= 2.3) {\n            $result[] = \"B-\"\
    ;\n        } elseif ($grade >= 2.0) {\n            $result[] = \"C+\";\n     \
    \   } elseif ($grade >= 1.7) {\n            $result[] = \"C\";\n        } elseif\
    \ ($grade >= 1.3) {\n            $result[] = \"C-\";\n        } elseif ($grade\
    \ >= 1.0) {\n            $result[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $result[] = \"D\";\n        } elseif ($grade >= 0.0) {\n    \
    \        $result[] = \"D-\";\n        } else {\n            $result[] = \"E\"\
    ;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6t16o5dt.php:63\n\
    Stack trace:\n#0 /tmp/tmp6t16o5dt.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp6t16o5dt.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n\t$grades_array = array();\n\tforeach ($grades as $grade) {\n\t\tif ($grade\
    \ >= 4.0) {\n\t\t\t$grades_array[] = \"A+\";\n\t\t} elseif ($grade >= 3.7) {\n\
    \t\t\t$grades_array[] = \"A\";\n\t\t} elseif ($grade >= 3.3) {\n\t\t\t$grades_array[]\
    \ = \"A-\";\n\t\t} elseif ($grade >= 3.0) {\n\t\t\t$grades_array[] = \"B+\";\n\
    \t\t} elseif ($grade >= 2.7) {\n\t\t\t$grades_array[] = \"B\";\n\t\t} elseif ($grade\
    \ >= 2.3) {\n\t\t\t$grades_array[] = \"B-\";\n\t\t} elseif ($grade >= 2.0) {\n\
    \t\t\t$grades_array[] = \"C+\";\n\t\t} elseif ($grade >= 1.7) {\n\t\t\t$grades_array[]\
    \ = \"C\";\n\t\t} elseif ($grade >= 1.3) {\n\t\t\t$grades_array[] = \"C-\";\n\t\
    \t} elseif ($grade >= 1.0) {\n\t\t\t$grades_array[] = \"D+\";\n\t\t} elseif ($grade\
    \ >= 0.7) {\n\t\t\t$grades_array[] = \"D\";\n\t\t} elseif ($grade >= 0.0) {\n\t\
    \t\t$grades_array[] = \"D-\";\n\t\t} else {\n\t\t\t$grades_array[] = \"E\";\n\t\
    \t}\n\t}\n\treturn $grades_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4.0,\
    \ 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.2)) !== array(\"D+\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5)) !==\
    \ array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn7n0wbr_.php:63\n\
    Stack trace:\n#0 /tmp/tmpn7n0wbr_.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpn7n0wbr_.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $result[] = \"A+\";\n        } elseif ($grade >= 3.7)\
    \ {\n            $result[] = \"A\";\n        } elseif ($grade >= 3.3) {\n    \
    \        $result[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n           \
    \ $result[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n            $result[]\
    \ = \"B\";\n        } elseif ($grade >= 2.3) {\n            $result[] = \"B-\"\
    ;\n        } elseif ($grade >= 2.0) {\n            $result[] = \"C+\";\n     \
    \   } elseif ($grade >= 1.7) {\n            $result[] = \"C\";\n        } elseif\
    \ ($grade >= 1.3) {\n            $result[] = \"C-\";\n        } elseif ($grade\
    \ >= 1.0) {\n            $result[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $result[] = \"D\";\n        } elseif ($grade >= 0.0) {\n    \
    \        $result[] = \"D-\";\n        } else {\n            $result[] = \"E\"\
    ;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6t16o5dt.php:63\n\
    Stack trace:\n#0 /tmp/tmp6t16o5dt.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp6t16o5dt.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\nprint_r(numerical_letter_grade($grades));\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6s3ei6yf.php:66\n\
    Stack trace:\n#0 /tmp/tmp6s3ei6yf.php(74): test()\n#1 {main}\n  thrown in /tmp/tmp6s3ei6yf.php\
    \ on line 66\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpumfsin3y.php:64\n\
    Stack trace:\n#0 /tmp/tmpumfsin3y.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpumfsin3y.php\
    \ on line 64\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n  $letter_grades = array();\n  foreach ($grades as $grade) {\n    if ($grade\
    \ >= 4.0) {\n      $letter_grades[] = \"A+\";\n    } elseif ($grade >= 3.7) {\n\
    \      $letter_grades[] = \"A\";\n    } elseif ($grade >= 3.3) {\n      $letter_grades[]\
    \ = \"A-\";\n    } elseif ($grade >= 3.0) {\n      $letter_grades[] = \"B+\";\n\
    \    } elseif ($grade >= 2.7) {\n      $letter_grades[] = \"B\";\n    } elseif\
    \ ($grade >= 2.3) {\n      $letter_grades[] = \"B-\";\n    } elseif ($grade >=\
    \ 2.0) {\n      $letter_grades[] = \"C+\";\n    } elseif ($grade >= 1.7) {\n \
    \     $letter_grades[] = \"C\";\n    } elseif ($grade >= 1.3) {\n      $letter_grades[]\
    \ = \"C-\";\n    } elseif ($grade >= 1.0) {\n      $letter_grades[] = \"D+\";\n\
    \    } elseif ($grade >= 0.7) {\n      $letter_grades[] = \"D\";\n    } elseif\
    \ ($grade >= 0.0) {\n      $letter_grades[] = \"D-\";\n    } else {\n      $letter_grades[]\
    \ = \"E\";\n    }\n  }\n  return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7_fxh1qe.php:63\n\
    Stack trace:\n#0 /tmp/tmp7_fxh1qe.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp7_fxh1qe.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade == 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade > 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ > 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade > 2.7)\
    \ {\n            $letter_grades[] = \"B\";\n        } elseif ($grade > 2.3) {\n\
    \            $letter_grades[] = \"B-\";\n        } elseif ($grade > 2.0) {\n \
    \           $letter_grades[] = \"C+\";\n        } elseif ($grade > 1.7) {\n  \
    \          $letter_grades[] = \"C\";\n        } elseif ($grade > 1.3) {\n    \
    \        $letter_grades[] = \"C-\";\n        } elseif ($grade > 1.0) {\n     \
    \       $letter_grades[] = \"D+\";\n        } elseif ($grade > 0.7) {\n      \
    \      $letter_grades[] = \"D\";\n        } elseif ($grade > 0.0) {\n        \
    \    $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\n$letter_grades = numerical_letter_grade($grades);\nprint_r($letter_grades);\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx9y81ezp.php:66\n\
    Stack trace:\n#0 /tmp/tmpx9y81ezp.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpx9y81ezp.php\
    \ on line 66\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $numerical_letter_grade = array();\n    foreach ($grades as $grade) {\n\
    \        if ($grade >= 4.0) {\n            $numerical_letter_grade[] = \"A+\"\
    ;\n        } elseif ($grade >= 3.7) {\n            $numerical_letter_grade[] =\
    \ \"A\";\n        } elseif ($grade >= 3.3) {\n            $numerical_letter_grade[]\
    \ = \"A-\";\n        } elseif ($grade >= 3.0) {\n            $numerical_letter_grade[]\
    \ = \"B+\";\n        } elseif ($grade >= 2.7) {\n            $numerical_letter_grade[]\
    \ = \"B\";\n        } elseif ($grade >= 2.3) {\n            $numerical_letter_grade[]\
    \ = \"B-\";\n        } elseif ($grade >= 2.0) {\n            $numerical_letter_grade[]\
    \ = \"C+\";\n        } elseif ($grade >= 1.7) {\n            $numerical_letter_grade[]\
    \ = \"C\";\n        } elseif ($grade >= 1.3) {\n            $numerical_letter_grade[]\
    \ = \"C-\";\n        } elseif ($grade >= 1.0) {\n            $numerical_letter_grade[]\
    \ = \"D+\";\n        } elseif ($grade >= 0.7) {\n            $numerical_letter_grade[]\
    \ = \"D\";\n        } elseif ($grade >= 0.0) {\n            $numerical_letter_grade[]\
    \ = \"D-\";\n        } else {\n            $numerical_letter_grade[] = \"E\";\n\
    \        }\n    }\n    return $numerical_letter_grade;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe2byz3sa.php:63\n\
    Stack trace:\n#0 /tmp/tmpe2byz3sa.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpe2byz3sa.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\n$letter_grades = numerical_letter_grade($grades);\nprint_r($letter_grades);\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx9y81ezp.php:66\n\
    Stack trace:\n#0 /tmp/tmpx9y81ezp.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpx9y81ezp.php\
    \ on line 66\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_array = array();\n    foreach ($grades as $grade) {\n       \
    \ if ($grade >= 4.0) {\n            $grades_array[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $grades_array[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $grades_array[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $grades_array[] = \"B+\";\n        } elseif ($grade >= 2.7)\
    \ {\n            $grades_array[] = \"B\";\n        } elseif ($grade >= 2.3) {\n\
    \            $grades_array[] = \"B-\";\n        } elseif ($grade >= 2.0) {\n \
    \           $grades_array[] = \"C+\";\n        } elseif ($grade >= 1.7) {\n  \
    \          $grades_array[] = \"C\";\n        } elseif ($grade >= 1.3) {\n    \
    \        $grades_array[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n     \
    \       $grades_array[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n      \
    \      $grades_array[] = \"D\";\n        } elseif ($grade >= 0.0) {\n        \
    \    $grades_array[] = \"D-\";\n        } else {\n            $grades_array[]\
    \ = \"E\";\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcb8kwfq.php:63\n\
    Stack trace:\n#0 /tmp/tmprcb8kwfq.php(71): test()\n#1 {main}\n  thrown in /tmp/tmprcb8kwfq.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\n$letter_grades = numerical_letter_grade($grades);\nprint_r($letter_grades);\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfojodva9.php:67\n\
    Stack trace:\n#0 /tmp/tmpfojodva9.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpfojodva9.php\
    \ on line 67\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_letter = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $grades_letter[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $grades_letter[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $grades_letter[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $grades_letter[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $grades_letter[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $grades_letter[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $grades_letter[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $grades_letter[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $grades_letter[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $grades_letter[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $grades_letter[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $grades_letter[] = \"D-\";\n        } else {\n            $grades_letter[]\
    \ = \"E\";\n        }\n    }\n    return $grades_letter;\n}\n\n$grades = [4.0,\
    \ 3, 1.7, 2, 3.5];\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjnoqp4mg.php:65\n\
    Stack trace:\n#0 /tmp/tmpjnoqp4mg.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpjnoqp4mg.php\
    \ on line 65\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $result[] = \"A+\";\n        } elseif ($grade >= 3.7)\
    \ {\n            $result[] = \"A\";\n        } elseif ($grade >= 3.3) {\n    \
    \        $result[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n           \
    \ $result[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n            $result[]\
    \ = \"B\";\n        } elseif ($grade >= 2.3) {\n            $result[] = \"B-\"\
    ;\n        } elseif ($grade >= 2.0) {\n            $result[] = \"C+\";\n     \
    \   } elseif ($grade >= 1.7) {\n            $result[] = \"C\";\n        } elseif\
    \ ($grade >= 1.3) {\n            $result[] = \"C-\";\n        } elseif ($grade\
    \ >= 1.0) {\n            $result[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $result[] = \"D\";\n        } elseif ($grade >= 0.0) {\n    \
    \        $result[] = \"D-\";\n        } else {\n            $result[] = \"E\"\
    ;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6t16o5dt.php:63\n\
    Stack trace:\n#0 /tmp/tmp6t16o5dt.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp6t16o5dt.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $result[] = \"A+\";\n        } elseif ($grade >= 3.7)\
    \ {\n            $result[] = \"A\";\n        } elseif ($grade >= 3.3) {\n    \
    \        $result[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n           \
    \ $result[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n            $result[]\
    \ = \"B\";\n        } elseif ($grade >= 2.3) {\n            $result[] = \"B-\"\
    ;\n        } elseif ($grade >= 2.0) {\n            $result[] = \"C+\";\n     \
    \   } elseif ($grade >= 1.7) {\n            $result[] = \"C\";\n        } elseif\
    \ ($grade >= 1.3) {\n            $result[] = \"C-\";\n        } elseif ($grade\
    \ >= 1.0) {\n            $result[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $result[] = \"D\";\n        } elseif ($grade >= 0.0) {\n    \
    \        $result[] = \"D-\";\n        } else {\n            $result[] = \"E\"\
    ;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6t16o5dt.php:63\n\
    Stack trace:\n#0 /tmp/tmp6t16o5dt.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp6t16o5dt.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\n$grades = [4.0,\
    \ 3, 1.7, 2, 3.5];\nprint_r(numerical_letter_grade($grades));\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplex7wjqi.php:66\n\
    Stack trace:\n#0 /tmp/tmplex7wjqi.php(74): test()\n#1 {main}\n  thrown in /tmp/tmplex7wjqi.php\
    \ on line 66\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $result[] = \"A+\";\n        } elseif ($grade >= 3.7)\
    \ {\n            $result[] = \"A\";\n        } elseif ($grade >= 3.3) {\n    \
    \        $result[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n           \
    \ $result[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n            $result[]\
    \ = \"B\";\n        } elseif ($grade >= 2.3) {\n            $result[] = \"B-\"\
    ;\n        } elseif ($grade >= 2.0) {\n            $result[] = \"C+\";\n     \
    \   } elseif ($grade >= 1.7) {\n            $result[] = \"C\";\n        } elseif\
    \ ($grade >= 1.3) {\n            $result[] = \"C-\";\n        } elseif ($grade\
    \ >= 1.0) {\n            $result[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $result[] = \"D\";\n        } elseif ($grade >= 0.0) {\n    \
    \        $result[] = \"D-\";\n        } else {\n            $result[] = \"E\"\
    ;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6t16o5dt.php:63\n\
    Stack trace:\n#0 /tmp/tmp6t16o5dt.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp6t16o5dt.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\n$letter_grades = numerical_letter_grade($grades);\nprint_r($letter_grades);\n\
    function candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx9y81ezp.php:66\n\
    Stack trace:\n#0 /tmp/tmpx9y81ezp.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpx9y81ezp.php\
    \ on line 66\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\n$grades = [4.0,\
    \ 3, 1.7, 2, 3.5];\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz6qbw0rx.php:65\n\
    Stack trace:\n#0 /tmp/tmpz6qbw0rx.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpz6qbw0rx.php\
    \ on line 65\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_array = array();\n    foreach ($grades as $grade) {\n       \
    \ if ($grade >= 4.0) {\n            $grades_array[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $grades_array[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $grades_array[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $grades_array[] = \"B+\";\n        } elseif ($grade >= 2.7)\
    \ {\n            $grades_array[] = \"B\";\n        } elseif ($grade >= 2.3) {\n\
    \            $grades_array[] = \"B-\";\n        } elseif ($grade >= 2.0) {\n \
    \           $grades_array[] = \"C+\";\n        } elseif ($grade >= 1.7) {\n  \
    \          $grades_array[] = \"C\";\n        } elseif ($grade >= 1.3) {\n    \
    \        $grades_array[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n     \
    \       $grades_array[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n      \
    \      $grades_array[] = \"D\";\n        } elseif ($grade >= 0.0) {\n        \
    \    $grades_array[] = \"D-\";\n        } else {\n            $grades_array[]\
    \ = \"E\";\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcb8kwfq.php:63\n\
    Stack trace:\n#0 /tmp/tmprcb8kwfq.php(71): test()\n#1 {main}\n  thrown in /tmp/tmprcb8kwfq.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $result[] = \"A+\";\n        } elseif ($grade >= 3.7)\
    \ {\n            $result[] = \"A\";\n        } elseif ($grade >= 3.3) {\n    \
    \        $result[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n           \
    \ $result[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n            $result[]\
    \ = \"B\";\n        } elseif ($grade >= 2.3) {\n            $result[] = \"B-\"\
    ;\n        } elseif ($grade >= 2.0) {\n            $result[] = \"C+\";\n     \
    \   } elseif ($grade >= 1.7) {\n            $result[] = \"C\";\n        } elseif\
    \ ($grade >= 1.3) {\n            $result[] = \"C-\";\n        } elseif ($grade\
    \ >= 1.0) {\n            $result[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $result[] = \"D\";\n        } elseif ($grade >= 0.0) {\n    \
    \        $result[] = \"D-\";\n        } else {\n            $result[] = \"E\"\
    ;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6t16o5dt.php:63\n\
    Stack trace:\n#0 /tmp/tmp6t16o5dt.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp6t16o5dt.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $result[] = \"A+\";\n        } elseif ($grade >= 3.7)\
    \ {\n            $result[] = \"A\";\n        } elseif ($grade >= 3.3) {\n    \
    \        $result[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n           \
    \ $result[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n            $result[]\
    \ = \"B\";\n        } elseif ($grade >= 2.3) {\n            $result[] = \"B-\"\
    ;\n        } elseif ($grade >= 2.0) {\n            $result[] = \"C+\";\n     \
    \   } elseif ($grade >= 1.7) {\n            $result[] = \"C\";\n        } elseif\
    \ ($grade >= 1.3) {\n            $result[] = \"C-\";\n        } elseif ($grade\
    \ >= 1.0) {\n            $result[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $result[] = \"D\";\n        } elseif ($grade >= 0.0) {\n    \
    \        $result[] = \"D-\";\n        } else {\n            $result[] = \"E\"\
    ;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6t16o5dt.php:63\n\
    Stack trace:\n#0 /tmp/tmp6t16o5dt.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp6t16o5dt.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $result[] = \"A+\";\n        } elseif ($grade >= 3.7)\
    \ {\n            $result[] = \"A\";\n        } elseif ($grade >= 3.3) {\n    \
    \        $result[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n           \
    \ $result[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n            $result[]\
    \ = \"B\";\n        } elseif ($grade >= 2.3) {\n            $result[] = \"B-\"\
    ;\n        } elseif ($grade >= 2.0) {\n            $result[] = \"C+\";\n     \
    \   } elseif ($grade >= 1.7) {\n            $result[] = \"C\";\n        } elseif\
    \ ($grade >= 1.3) {\n            $result[] = \"C-\";\n        } elseif ($grade\
    \ >= 1.0) {\n            $result[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $result[] = \"D\";\n        } elseif ($grade >= 0.0) {\n    \
    \        $result[] = \"D-\";\n        } else {\n            $result[] = \"E\"\
    ;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6t16o5dt.php:63\n\
    Stack trace:\n#0 /tmp/tmp6t16o5dt.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp6t16o5dt.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\n$letter_grades = numerical_letter_grade($grades);\nprint_r($letter_grades);\n\
    \nfunction candidate(...$args) {\n    return numerical_letter_grade(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !==\
    \ array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.2)) !== array(\"D+\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0.5)) !== array(\"D-\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== array(\"E\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 0.3,\
    \ 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B+\n    [2] => C\n    [3] => C+\n \
    \   [4] => A-\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfojodva9.php:67\n\
    Stack trace:\n#0 /tmp/tmpfojodva9.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpfojodva9.php\
    \ on line 67\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_array = array();\n    foreach ($grades as $grade) {\n       \
    \ if ($grade >= 4.0) {\n            $grades_array[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $grades_array[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $grades_array[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $grades_array[] = \"B+\";\n        } elseif ($grade >= 2.7)\
    \ {\n            $grades_array[] = \"B\";\n        } elseif ($grade >= 2.3) {\n\
    \            $grades_array[] = \"B-\";\n        } elseif ($grade >= 2.0) {\n \
    \           $grades_array[] = \"C+\";\n        } elseif ($grade >= 1.7) {\n  \
    \          $grades_array[] = \"C\";\n        } elseif ($grade >= 1.3) {\n    \
    \        $grades_array[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n     \
    \       $grades_array[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n      \
    \      $grades_array[] = \"D\";\n        } elseif ($grade >= 0.0) {\n        \
    \    $grades_array[] = \"D-\";\n        } else {\n            $grades_array[]\
    \ = \"E\";\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcb8kwfq.php:63\n\
    Stack trace:\n#0 /tmp/tmprcb8kwfq.php(71): test()\n#1 {main}\n  thrown in /tmp/tmprcb8kwfq.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $result = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $result[] = \"A+\";\n        } elseif ($grade >= 3.7)\
    \ {\n            $result[] = \"A\";\n        } elseif ($grade >= 3.3) {\n    \
    \        $result[] = \"A-\";\n        } elseif ($grade >= 3.0) {\n           \
    \ $result[] = \"B+\";\n        } elseif ($grade >= 2.7) {\n            $result[]\
    \ = \"B\";\n        } elseif ($grade >= 2.3) {\n            $result[] = \"B-\"\
    ;\n        } elseif ($grade >= 2.0) {\n            $result[] = \"C+\";\n     \
    \   } elseif ($grade >= 1.7) {\n            $result[] = \"C\";\n        } elseif\
    \ ($grade >= 1.3) {\n            $result[] = \"C-\";\n        } elseif ($grade\
    \ >= 1.0) {\n            $result[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $result[] = \"D\";\n        } elseif ($grade >= 0.0) {\n    \
    \        $result[] = \"D-\";\n        } else {\n            $result[] = \"E\"\
    ;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6t16o5dt.php:63\n\
    Stack trace:\n#0 /tmp/tmp6t16o5dt.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp6t16o5dt.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 0
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade == 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade > 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ > 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade > 2.7)\
    \ {\n            $letter_grades[] = \"B\";\n        } elseif ($grade > 2.3) {\n\
    \            $letter_grades[] = \"B-\";\n        } elseif ($grade > 2.0) {\n \
    \           $letter_grades[] = \"C+\";\n        } elseif ($grade > 1.7) {\n  \
    \          $letter_grades[] = \"C\";\n        } elseif ($grade > 1.3) {\n    \
    \        $letter_grades[] = \"C-\";\n        } elseif ($grade > 1.0) {\n     \
    \       $letter_grades[] = \"D+\";\n        } elseif ($grade > 0.7) {\n      \
    \      $letter_grades[] = \"D\";\n        } elseif ($grade > 0.0) {\n        \
    \    $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n$grades = array(4.0,\
    \ 3, 1.7, 2, 3.5);\nprint_r(numerical_letter_grade($grades));\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => A+\n    [1] => B\n    [2] => C-\n    [3] => C\n  \
    \  [4] => A-\n)\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $grades_array = array();\n    foreach ($grades as $grade) {\n       \
    \ if ($grade >= 4.0) {\n            $grades_array[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $grades_array[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $grades_array[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $grades_array[] = \"B+\";\n        } elseif ($grade >= 2.7)\
    \ {\n            $grades_array[] = \"B\";\n        } elseif ($grade >= 2.3) {\n\
    \            $grades_array[] = \"B-\";\n        } elseif ($grade >= 2.0) {\n \
    \           $grades_array[] = \"C+\";\n        } elseif ($grade >= 1.7) {\n  \
    \          $grades_array[] = \"C\";\n        } elseif ($grade >= 1.3) {\n    \
    \        $grades_array[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n     \
    \       $grades_array[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n      \
    \      $grades_array[] = \"D\";\n        } elseif ($grade >= 0.0) {\n        \
    \    $grades_array[] = \"D-\";\n        } else {\n            $grades_array[]\
    \ = \"E\";\n        }\n    }\n    return $grades_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcb8kwfq.php:63\n\
    Stack trace:\n#0 /tmp/tmprcb8kwfq.php(71): test()\n#1 {main}\n  thrown in /tmp/tmprcb8kwfq.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n      \
    \  if ($grade >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif\
    \ ($grade >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade\
    \ >= 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade\
    \ >= 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade\
    \ >= 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >=\
    \ 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >=\
    \ 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >=\
    \ 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3)\
    \ {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0)\
    \ {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7)\
    \ {\n            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n\
    \            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwfg4yif.php:63\n\
    Stack trace:\n#0 /tmp/tmpuwfg4yif.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpuwfg4yif.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
- exit_code: 255
  program: "<?php\n// It is the last week of the semester and the teacher has to give\
    \ the grades\n// to students. The teacher has been making her own algorithm for\
    \ grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you an array of GPAs for some students and you have to write\
    \ \n// a function that can output an array of letter grades using the following\
    \ table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7 \
    \               A \n// > 3.3                A- \n// > 3.0                B+\n\
    // > 2.7                B \n// > 2.3                B-\n// > 2.0             \
    \   C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0      \
    \          D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0\
    \                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n\
    // array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades)\
    \ {\n    $letter_grades = [];\n    foreach ($grades as $grade) {\n        if ($grade\
    \ >= 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade\
    \ >= 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade >=\
    \ 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade >=\
    \ 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade >=\
    \ 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade >= 2.3)\
    \ {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade >= 2.0)\
    \ {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade >= 1.7)\
    \ {\n            $letter_grades[] = \"C\";\n        } elseif ($grade >= 1.3) {\n\
    \            $letter_grades[] = \"C-\";\n        } elseif ($grade >= 1.0) {\n\
    \            $letter_grades[] = \"D+\";\n        } elseif ($grade >= 0.7) {\n\
    \            $letter_grades[] = \"D\";\n        } elseif ($grade >= 0.0) {\n \
    \           $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[]\
    \ = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\nfunction candidate(...$args)\
    \ {\n    return numerical_letter_grade(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4.0, 3, 1.7, 2, 3.5)) !== array(\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.2))\
    \ !== array(\"D+\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.5))\
    \ !== array(\"D-\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0))\
    \ !== array(\"E\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 0.3, 1.5, 2.8, 3.3)) !== array(\"D\", \"D-\", \"C-\", \"B\", \"B+\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0, 0.7)) !== array(\"\
    E\", \"D-\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyagx8jf.php:63\n\
    Stack trace:\n#0 /tmp/tmpkyagx8jf.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpkyagx8jf.php\
    \ on line 63\n"
  timestamp: 1659730933
