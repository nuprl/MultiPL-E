language: php
name: HumanEval_144_simplify
results:
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  return is_int($result);\n}\n\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_4o0a17.php:27\n\
    Stack trace:\n#0 /tmp/tmp0_4o0a17.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0_4o0a17.php\
    \ on line 27\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    if (is_int($result))\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1gcm9mt6.php:31\n\
    Stack trace:\n#0 /tmp/tmp1gcm9mt6.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1gcm9mt6.php\
    \ on line 31\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\necho simplify(\"1/5\"\
    , \"5/1\") . \"\\n\";\necho simplify(\"1/6\", \"2/1\") . \"\\n\";\necho simplify(\"\
    7/10\", \"10/2\") . \"\\n\";\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwa3a9ts3.php:29\n\
    Stack trace:\n#0 /tmp/tmpwa3a9ts3.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpwa3a9ts3.php\
    \ on line 29\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  if (is_int($result)) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr2lzckdn.php:31\n\
    Stack trace:\n#0 /tmp/tmpr2lzckdn.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpr2lzckdn.php\
    \ on line 31\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    if (is_int($result))\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1gcm9mt6.php:31\n\
    Stack trace:\n#0 /tmp/tmp1gcm9mt6.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1gcm9mt6.php\
    \ on line 31\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 0
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x_arr = explode('/', $x);\n  $n_arr = explode('/', $n);\n  $x_num\
    \ = $x_arr[0];\n  $x_den = $x_arr[1];\n  $n_num = $n_arr[0];\n  $n_den = $n_arr[1];\n\
    \  $result = $x_num * $n_num / ($x_den * $n_den);\n  if (is_int($result)) {\n\
    \    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  return is_int($result);\n}\n\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_4o0a17.php:27\n\
    Stack trace:\n#0 /tmp/tmp0_4o0a17.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0_4o0a17.php\
    \ on line 27\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  return is_int($result);\n}\n\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_4o0a17.php:27\n\
    Stack trace:\n#0 /tmp/tmp0_4o0a17.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0_4o0a17.php\
    \ on line 27\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $x = $x * $n;\n    if (is_int($x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcqa0sbtd.php:31\n\
    Stack trace:\n#0 /tmp/tmpcqa0sbtd.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpcqa0sbtd.php\
    \ on line 31\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjgyq8rm.php:25\n\
    Stack trace:\n#0 /tmp/tmphjgyq8rm.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphjgyq8rm.php\
    \ on line 25\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  if (is_int($result)) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n\necho simplify(\"1/5\", \"5/1\"\
    ) . PHP_EOL;\necho simplify(\"1/6\", \"2/1\") . PHP_EOL;\necho simplify(\"7/10\"\
    , \"10/2\") . PHP_EOL;\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcz84s4nt.php:34\n\
    Stack trace:\n#0 /tmp/tmpcz84s4nt.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpcz84s4nt.php\
    \ on line 34\n"
  timestamp: 1659730072
- exit_code: 0
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x_numerator =\
    \ $x[0];\n  $x_denominator = $x[1];\n  $n_numerator = $n[0];\n  $n_denominator\
    \ = $n[1];\n  $result = $x_numerator * $n_numerator / ($x_denominator * $n_denominator);\n\
    \  if (is_int($result)) {\n    return true;\n  } else {\n    return false;\n \
    \ }\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\"\
    , \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    if ($result %\
    \ 1 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\necho simplify(\"1/5\", \"5/1\") . \"\\n\";\necho simplify(\"1/6\", \"2/1\"\
    ) . \"\\n\";\necho simplify(\"7/10\", \"10/2\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp9zc9xwd.php:34\n\
    Stack trace:\n#0 /tmp/tmpp9zc9xwd.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpp9zc9xwd.php\
    \ on line 34\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\necho simplify(\"1/5\"\
    , \"5/1\") . PHP_EOL;\necho simplify(\"1/6\", \"2/1\") . PHP_EOL;\necho simplify(\"\
    7/10\", \"10/2\") . PHP_EOL;\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0vmygz0.php:29\n\
    Stack trace:\n#0 /tmp/tmpw0vmygz0.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpw0vmygz0.php\
    \ on line 29\n"
  timestamp: 1659730072
- exit_code: 0
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return $x * $n == floor($x * $n);\n}\n\
    \nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\necho simplify(\"1/5\"\
    , \"5/1\") . PHP_EOL;\necho simplify(\"1/6\", \"2/1\") . PHP_EOL;\necho simplify(\"\
    7/10\", \"10/2\") . PHP_EOL;\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0vmygz0.php:29\n\
    Stack trace:\n#0 /tmp/tmpw0vmygz0.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpw0vmygz0.php\
    \ on line 29\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\necho simplify(\"1/5\"\
    , \"5/1\") . \"\\n\";\necho simplify(\"1/6\", \"2/1\") . \"\\n\";\necho simplify(\"\
    7/10\", \"10/2\") . \"\\n\";\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwa3a9ts3.php:29\n\
    Stack trace:\n#0 /tmp/tmpwa3a9ts3.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpwa3a9ts3.php\
    \ on line 29\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    if (is_int($result))\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1gcm9mt6.php:31\n\
    Stack trace:\n#0 /tmp/tmp1gcm9mt6.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1gcm9mt6.php\
    \ on line 31\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 0
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return $x * $n == round($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    if (is_int($result))\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1gcm9mt6.php:31\n\
    Stack trace:\n#0 /tmp/tmp1gcm9mt6.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1gcm9mt6.php\
    \ on line 31\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    return is_int($result);\n\
    }\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpanjvoy1w.php:27\n\
    Stack trace:\n#0 /tmp/tmpanjvoy1w.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpanjvoy1w.php\
    \ on line 27\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjgyq8rm.php:25\n\
    Stack trace:\n#0 /tmp/tmphjgyq8rm.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphjgyq8rm.php\
    \ on line 25\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  if (is_int($result)) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n\necho simplify(\"1/5\", \"5/1\"\
    ) . \"\\n\";\necho simplify(\"1/6\", \"2/1\") . \"\\n\";\necho simplify(\"7/10\"\
    , \"10/2\") . \"\\n\";\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmynfdtz8.php:35\n\
    Stack trace:\n#0 /tmp/tmpmynfdtz8.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpmynfdtz8.php\
    \ on line 35\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  return is_int($result);\n}\n\n\
    echo simplify(\"1/5\", \"5/1\") . PHP_EOL;\necho simplify(\"1/6\", \"2/1\") .\
    \ PHP_EOL;\necho simplify(\"7/10\", \"10/2\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2v9h_ht2.php:30\n\
    Stack trace:\n#0 /tmp/tmp2v9h_ht2.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp2v9h_ht2.php\
    \ on line 30\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  if (is_int($result)) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr2lzckdn.php:31\n\
    Stack trace:\n#0 /tmp/tmpr2lzckdn.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpr2lzckdn.php\
    \ on line 31\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $x = $x * $n;\n  if ($x % 1 === 0) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n\nfunction candidate(...$args) {\n   \
    \ return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa1xar8wp.php:32\n\
    Stack trace:\n#0 /tmp/tmpa1xar8wp.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpa1xar8wp.php\
    \ on line 32\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    if (is_int($result))\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1gcm9mt6.php:31\n\
    Stack trace:\n#0 /tmp/tmp1gcm9mt6.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1gcm9mt6.php\
    \ on line 31\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\necho simplify(\"1/5\"\
    , \"5/1\") . PHP_EOL;\necho simplify(\"1/6\", \"2/1\") . PHP_EOL;\necho simplify(\"\
    7/10\", \"10/2\") . PHP_EOL;\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0vmygz0.php:29\n\
    Stack trace:\n#0 /tmp/tmpw0vmygz0.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpw0vmygz0.php\
    \ on line 29\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  return ($x[0] *\
    \ $n[1]) % ($x[1] * $n[0]) === 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"1/5\"\
    , \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi_fb63hn.php:24\n\
    Stack trace:\n#0 /tmp/tmpi_fb63hn.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpi_fb63hn.php\
    \ on line 24\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  if (is_int($result)) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr2lzckdn.php:31\n\
    Stack trace:\n#0 /tmp/tmpr2lzckdn.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpr2lzckdn.php\
    \ on line 31\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\necho simplify(\"1/5\"\
    , \"5/1\") . PHP_EOL;\necho simplify(\"1/6\", \"2/1\") . PHP_EOL;\necho simplify(\"\
    7/10\", \"10/2\") . PHP_EOL;\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0vmygz0.php:29\n\
    Stack trace:\n#0 /tmp/tmpw0vmygz0.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpw0vmygz0.php\
    \ on line 29\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    return is_int($result);\n\
    }\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpanjvoy1w.php:27\n\
    Stack trace:\n#0 /tmp/tmpanjvoy1w.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpanjvoy1w.php\
    \ on line 27\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    if (is_int($result))\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\nvar_dump(simplify(\"\
    1/5\", \"5/1\"));\nvar_dump(simplify(\"1/6\", \"2/1\"));\nvar_dump(simplify(\"\
    7/10\", \"10/2\"));\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(false)\nbool(false)\nbool(false)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpofbs9ob8.php:33\nStack trace:\n#0 /tmp/tmpofbs9ob8.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpofbs9ob8.php on line 33\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjgyq8rm.php:25\n\
    Stack trace:\n#0 /tmp/tmphjgyq8rm.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphjgyq8rm.php\
    \ on line 25\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  return is_int($result);\n}\n\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_4o0a17.php:27\n\
    Stack trace:\n#0 /tmp/tmp0_4o0a17.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0_4o0a17.php\
    \ on line 27\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    return is_int($result);\n\
    }\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8942buko.php:26\n\
    Stack trace:\n#0 /tmp/tmp8942buko.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp8942buko.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  return is_int($result);\n}\n\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_4o0a17.php:27\n\
    Stack trace:\n#0 /tmp/tmp0_4o0a17.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0_4o0a17.php\
    \ on line 27\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjgyq8rm.php:25\n\
    Stack trace:\n#0 /tmp/tmphjgyq8rm.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphjgyq8rm.php\
    \ on line 25\n"
  timestamp: 1659730072
- exit_code: 0
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return $x * $n == round($x * $n) ? true\
    \ : false;\n}\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  if (is_int($result)) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr2lzckdn.php:31\n\
    Stack trace:\n#0 /tmp/tmpr2lzckdn.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpr2lzckdn.php\
    \ on line 31\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 0
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return $x * $n == (int)($x * $n);\n}\n\
    \nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 0
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return $x * $n == (int)($x * $n);\n}\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730072
- exit_code: 0
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return $x * $n == round($x * $n);\n}\n\
    \nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 0
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return (int) ($x * $n) == $x * $n;\n\
    }\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    return is_int($result);\n\
    }\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpanjvoy1w.php:27\n\
    Stack trace:\n#0 /tmp/tmpanjvoy1w.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpanjvoy1w.php\
    \ on line 27\n"
  timestamp: 1659730072
- exit_code: 0
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return $x * $n == round($x * $n);\n}\n\
    \nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 0
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return $x * $n == (int)($x * $n);\n}\n\
    \nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    return is_int($result);\n\
    }\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpanjvoy1w.php:27\n\
    Stack trace:\n#0 /tmp/tmpanjvoy1w.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpanjvoy1w.php\
    \ on line 27\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  return is_int($result);\n}\n\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_4o0a17.php:27\n\
    Stack trace:\n#0 /tmp/tmp0_4o0a17.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0_4o0a17.php\
    \ on line 27\n"
  timestamp: 1659730072
- exit_code: 0
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return $x * $n == (int)($x * $n);\n}\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    return is_int($result);\n\
    }\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpanjvoy1w.php:27\n\
    Stack trace:\n#0 /tmp/tmpanjvoy1w.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpanjvoy1w.php\
    \ on line 27\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  return is_int($result);\n}\n\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_4o0a17.php:27\n\
    Stack trace:\n#0 /tmp/tmp0_4o0a17.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0_4o0a17.php\
    \ on line 27\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\necho simplify(\"1/5\"\
    , \"5/1\") . PHP_EOL;\necho simplify(\"1/6\", \"2/1\") . PHP_EOL;\necho simplify(\"\
    7/10\", \"10/2\") . PHP_EOL;\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0vmygz0.php:29\n\
    Stack trace:\n#0 /tmp/tmpw0vmygz0.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpw0vmygz0.php\
    \ on line 29\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  if (is_int($result)) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\necho simplify(\"1/5\", \"5/1\"\
    ) . PHP_EOL;\necho simplify(\"1/6\", \"2/1\") . PHP_EOL;\necho simplify(\"7/10\"\
    , \"10/2\") . PHP_EOL;\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph86r0wlk.php:33\n\
    Stack trace:\n#0 /tmp/tmph86r0wlk.php(48): test()\n#1 {main}\n  thrown in /tmp/tmph86r0wlk.php\
    \ on line 33\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  if (is_int($result)) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr2lzckdn.php:31\n\
    Stack trace:\n#0 /tmp/tmpr2lzckdn.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpr2lzckdn.php\
    \ on line 31\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  return is_int($result);\n}\necho\
    \ simplify(\"1/5\", \"5/1\") . PHP_EOL;\necho simplify(\"1/6\", \"2/1\") . PHP_EOL;\n\
    echo simplify(\"7/10\", \"10/2\") . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2020452i.php:29\n\
    Stack trace:\n#0 /tmp/tmp2020452i.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp2020452i.php\
    \ on line 29\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  return $result % 1 == 0;\n}\n\n\
    echo simplify(\"1/5\", \"5/1\") . PHP_EOL;\necho simplify(\"1/6\", \"2/1\") .\
    \ PHP_EOL;\necho simplify(\"7/10\", \"10/2\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaoow0jb0.php:31\n\
    Stack trace:\n#0 /tmp/tmpaoow0jb0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpaoow0jb0.php\
    \ on line 31\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  return is_int($result);\n}\n\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_4o0a17.php:27\n\
    Stack trace:\n#0 /tmp/tmp0_4o0a17.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0_4o0a17.php\
    \ on line 27\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  return is_int($result);\n}\n\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_4o0a17.php:27\n\
    Stack trace:\n#0 /tmp/tmp0_4o0a17.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0_4o0a17.php\
    \ on line 27\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 0
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x_numerator = (int)explode('/', $x)[0];\n  $x_denominator = (int)explode('/',\
    \ $x)[1];\n  $n_numerator = (int)explode('/', $n)[0];\n  $n_denominator = (int)explode('/',\
    \ $n)[1];\n  $result = $x_numerator * $n_numerator / ($x_denominator * $n_denominator);\n\
    \  return is_int($result);\n}\n\necho simplify(\"1/5\", \"5/1\");\necho simplify(\"\
    1/6\", \"2/1\");\necho simplify(\"7/10\", \"10/2\");\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 0
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x_arr = explode('/', $x);\n  $n_arr = explode('/', $n);\n  $x_num\
    \ = $x_arr[0];\n  $x_den = $x_arr[1];\n  $n_num = $n_arr[0];\n  $n_den = $n_arr[1];\n\
    \  $result = $x_num * $n_num / ($x_den * $n_den);\n  return is_int($result);\n\
    }\n\necho simplify(\"1/5\", \"5/1\") . PHP_EOL;\necho simplify(\"1/6\", \"2/1\"\
    ) . PHP_EOL;\necho simplify(\"7/10\", \"10/2\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1



    '
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\necho simplify(\"\
    1/5\", \"5/1\") . \"\\n\";\necho simplify(\"1/6\", \"2/1\") . \"\\n\";\necho simplify(\"\
    7/10\", \"10/2\") . \"\\n\";\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6nu29ku_.php:28\n\
    Stack trace:\n#0 /tmp/tmp6nu29ku_.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp6nu29ku_.php\
    \ on line 28\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    if (is_int($result))\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\necho\
    \ simplify(\"1/5\", \"5/1\");\necho simplify(\"1/6\", \"2/1\");\necho simplify(\"\
    7/10\", \"10/2\");\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplpcvqz75.php:33\n\
    Stack trace:\n#0 /tmp/tmplpcvqz75.php(48): test()\n#1 {main}\n  thrown in /tmp/tmplpcvqz75.php\
    \ on line 33\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    // Your code here\n    $x = explode(\"/\", $x);\n    $n = explode(\"\
    /\", $n);\n    $x = $x[0] / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x\
    \ * $n;\n    if (is_int($result)) {\n        return true;\n    } else {\n    \
    \    return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo_62ahke.php:32\n\
    Stack trace:\n#0 /tmp/tmpo_62ahke.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpo_62ahke.php\
    \ on line 32\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $x = $x * $n;\n  if (is_int($x)) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n\nfunction candidate(...$args) {\n   \
    \ return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6wznaai8.php:31\n\
    Stack trace:\n#0 /tmp/tmp6wznaai8.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6wznaai8.php\
    \ on line 31\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    if (is_int($result))\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1gcm9mt6.php:31\n\
    Stack trace:\n#0 /tmp/tmp1gcm9mt6.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1gcm9mt6.php\
    \ on line 31\n"
  timestamp: 1659730072
- exit_code: 0
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return $x * $n == (int)($x * $n);\n}\n\
    \nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  if (is_int($result)) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\necho simplify(\"1/5\", \"5/1\"\
    ) . PHP_EOL;\necho simplify(\"1/6\", \"2/1\") . PHP_EOL;\necho simplify(\"7/10\"\
    , \"10/2\") . PHP_EOL;\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph86r0wlk.php:33\n\
    Stack trace:\n#0 /tmp/tmph86r0wlk.php(48): test()\n#1 {main}\n  thrown in /tmp/tmph86r0wlk.php\
    \ on line 33\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    return is_int($result);\n\
    }\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpanjvoy1w.php:27\n\
    Stack trace:\n#0 /tmp/tmpanjvoy1w.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpanjvoy1w.php\
    \ on line 27\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  return is_int($result);\n}\necho\
    \ simplify(\"1/5\", \"5/1\") . PHP_EOL;\necho simplify(\"1/6\", \"2/1\") . PHP_EOL;\n\
    echo simplify(\"7/10\", \"10/2\") . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2020452i.php:29\n\
    Stack trace:\n#0 /tmp/tmp2020452i.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp2020452i.php\
    \ on line 29\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 0
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return $x * $n == (int)($x * $n);\n}\n\
    \nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $result =\
    \ $x[0] * $n[1] / $x[1] * $n[0];\n    if (is_int($result)) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1l8sivej.php:29\n\
    Stack trace:\n#0 /tmp/tmp1l8sivej.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp1l8sivej.php\
    \ on line 29\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $x = $x * $n;\n  return is_int($x);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprhe14zaz.php:27\n\
    Stack trace:\n#0 /tmp/tmprhe14zaz.php(42): test()\n#1 {main}\n  thrown in /tmp/tmprhe14zaz.php\
    \ on line 27\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  return is_int($result);\n}\n\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_4o0a17.php:27\n\
    Stack trace:\n#0 /tmp/tmp0_4o0a17.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0_4o0a17.php\
    \ on line 27\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $x = $x * $n;\n    return is_int($x);\n\
    }\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfjd9ufdg.php:27\n\
    Stack trace:\n#0 /tmp/tmpfjd9ufdg.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpfjd9ufdg.php\
    \ on line 27\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  return is_int($result);\n}\n\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_4o0a17.php:27\n\
    Stack trace:\n#0 /tmp/tmp0_4o0a17.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0_4o0a17.php\
    \ on line 27\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\necho simplify(\"\
    1/5\", \"5/1\") . PHP_EOL;\necho simplify(\"1/6\", \"2/1\") . PHP_EOL;\necho simplify(\"\
    7/10\", \"10/2\") . PHP_EOL;\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbapt831g.php:29\n\
    Stack trace:\n#0 /tmp/tmpbapt831g.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpbapt831g.php\
    \ on line 29\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\necho simplify(\"1/5\"\
    , \"5/1\") . PHP_EOL;\necho simplify(\"1/6\", \"2/1\") . PHP_EOL;\necho simplify(\"\
    7/10\", \"10/2\") . PHP_EOL;\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0vmygz0.php:29\n\
    Stack trace:\n#0 /tmp/tmpw0vmygz0.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpw0vmygz0.php\
    \ on line 29\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    return is_int($result);\n\
    }\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8942buko.php:26\n\
    Stack trace:\n#0 /tmp/tmp8942buko.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp8942buko.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjgyq8rm.php:25\n\
    Stack trace:\n#0 /tmp/tmphjgyq8rm.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphjgyq8rm.php\
    \ on line 25\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 0
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return $x * $n == round($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\necho simplify(\"\
    1/5\", \"5/1\") . PHP_EOL;\necho simplify(\"1/6\", \"2/1\") . PHP_EOL;\necho simplify(\"\
    7/10\", \"10/2\") . PHP_EOL;\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27kyw9rg.php:28\n\
    Stack trace:\n#0 /tmp/tmp27kyw9rg.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp27kyw9rg.php\
    \ on line 28\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  if (is_int($result)) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr2lzckdn.php:31\n\
    Stack trace:\n#0 /tmp/tmpr2lzckdn.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpr2lzckdn.php\
    \ on line 31\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\necho simplify(\"1/5\"\
    , \"5/1\") . PHP_EOL;\necho simplify(\"1/6\", \"2/1\") . PHP_EOL;\necho simplify(\"\
    7/10\", \"10/2\") . PHP_EOL;\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0vmygz0.php:29\n\
    Stack trace:\n#0 /tmp/tmpw0vmygz0.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpw0vmygz0.php\
    \ on line 29\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  return ($x[0] *\
    \ $n[1]) % ($x[1] * $n[0]) == 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"1/5\"\
    , \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvctfh753.php:24\n\
    Stack trace:\n#0 /tmp/tmpvctfh753.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpvctfh753.php\
    \ on line 24\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    return is_int($result);\n\
    }\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpanjvoy1w.php:27\n\
    Stack trace:\n#0 /tmp/tmpanjvoy1w.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpanjvoy1w.php\
    \ on line 27\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    if(is_int($result)){\n\
    \        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzkxvyd5q.php:30\n\
    Stack trace:\n#0 /tmp/tmpzkxvyd5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpzkxvyd5q.php\
    \ on line 30\n"
  timestamp: 1659730072
- exit_code: 0
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return $x * $n == (int)($x * $n);\n}\n\
    \nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\necho simplify(\"1/5\"\
    , \"5/1\") . PHP_EOL;\necho simplify(\"1/6\", \"2/1\") . PHP_EOL;\necho simplify(\"\
    7/10\", \"10/2\") . PHP_EOL;\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0vmygz0.php:29\n\
    Stack trace:\n#0 /tmp/tmpw0vmygz0.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpw0vmygz0.php\
    \ on line 29\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  if ($x[0] * $n[1]\
    \ % $x[1] == 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\
    echo simplify(\"1/5\", \"5/1\") . PHP_EOL;\necho simplify(\"1/6\", \"2/1\") .\
    \ PHP_EOL;\necho simplify(\"7/10\", \"10/2\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkmyqvvba.php:31\n\
    Stack trace:\n#0 /tmp/tmpkmyqvvba.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpkmyqvvba.php\
    \ on line 31\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  if (is_int($result)) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\necho simplify(\"1/5\", \"5/1\"\
    );\necho simplify(\"1/6\", \"2/1\");\necho simplify(\"7/10\", \"10/2\");\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqx221trs.php:33\n\
    Stack trace:\n#0 /tmp/tmpqx221trs.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqx221trs.php\
    \ on line 33\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\necho simplify(\"1/5\", \"\
    5/1\") . PHP_EOL;\necho simplify(\"1/6\", \"2/1\") . PHP_EOL;\necho simplify(\"\
    7/10\", \"10/2\") . PHP_EOL;\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp82xpn4kr.php:28\n\
    Stack trace:\n#0 /tmp/tmp82xpn4kr.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp82xpn4kr.php\
    \ on line 28\n"
  timestamp: 1659730072
- exit_code: 0
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return $x * $n == (int)($x * $n);\n}\n\
    \nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  return is_int($result);\n}\n\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_4o0a17.php:27\n\
    Stack trace:\n#0 /tmp/tmp0_4o0a17.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0_4o0a17.php\
    \ on line 27\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 0
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return $x * $n == (int)($x * $n);\n}\n\
    echo simplify(\"1/5\", \"5/1\") ? 'true' : 'false';\necho PHP_EOL;\necho simplify(\"\
    1/6\", \"2/1\") ? 'true' : 'false';\necho PHP_EOL;\necho simplify(\"7/10\", \"\
    10/2\") ? 'true' : 'false';\necho PHP_EOL;\nfunction candidate(...$args) {\n \
    \   return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    false

    '
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  return is_int($result);\n}\n\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_4o0a17.php:27\n\
    Stack trace:\n#0 /tmp/tmp0_4o0a17.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0_4o0a17.php\
    \ on line 27\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  if (is_int($result)) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr2lzckdn.php:31\n\
    Stack trace:\n#0 /tmp/tmpr2lzckdn.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpr2lzckdn.php\
    \ on line 31\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  return is_int($result);\n}\n\n\
    function candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_4o0a17.php:27\n\
    Stack trace:\n#0 /tmp/tmp0_4o0a17.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0_4o0a17.php\
    \ on line 27\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  if (is_int($result)) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr2lzckdn.php:31\n\
    Stack trace:\n#0 /tmp/tmpr2lzckdn.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpr2lzckdn.php\
    \ on line 31\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  $result = $x * $n;\n  if (is_int($result)) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr2lzckdn.php:31\n\
    Stack trace:\n#0 /tmp/tmpr2lzckdn.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpr2lzckdn.php\
    \ on line 31\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    return is_int($result);\n\
    }\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8942buko.php:26\n\
    Stack trace:\n#0 /tmp/tmp8942buko.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp8942buko.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    return is_int($result);\n\
    }\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8942buko.php:26\n\
    Stack trace:\n#0 /tmp/tmp8942buko.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp8942buko.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 0
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return $x * $n == (int)($x * $n);\n}\n\
    \nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    if (is_int($result))\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1gcm9mt6.php:31\n\
    Stack trace:\n#0 /tmp/tmp1gcm9mt6.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1gcm9mt6.php\
    \ on line 31\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x[0] = $x[0]\
    \ * $n[1];\n    $x[1] = $x[1] * $n[0];\n    if ($x[0] % $x[1] == 0) {\n      \
    \  return true;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq1ni9638.php:30\n\
    Stack trace:\n#0 /tmp/tmpq1ni9638.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpq1ni9638.php\
    \ on line 30\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    return is_int($result);\n\
    }\n\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpanjvoy1w.php:27\n\
    Stack trace:\n#0 /tmp/tmpanjvoy1w.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpanjvoy1w.php\
    \ on line 27\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $x = $x * $n;\n    if (is_int($x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcqa0sbtd.php:31\n\
    Stack trace:\n#0 /tmp/tmpcqa0sbtd.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpcqa0sbtd.php\
    \ on line 31\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return (is_int($x * $n));\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp643n0qv2.php:26\n\
    Stack trace:\n#0 /tmp/tmp643n0qv2.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp643n0qv2.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x = $x[0] / $x[1];\n\
    \  $n = $n[0] / $n[1];\n  return is_int($x * $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporjgmn6y.php:26\n\
    Stack trace:\n#0 /tmp/tmporjgmn6y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmporjgmn6y.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  $x_numerator =\
    \ $x[0];\n  $x_denominator = $x[1];\n  $n_numerator = $n[0];\n  $n_denominator\
    \ = $n[1];\n  $x_numerator *= $n_denominator;\n  $x_denominator *= $n_numerator;\n\
    \  $x_numerator *= $n_numerator;\n  $x_denominator *= $n_denominator;\n  $x_numerator\
    \ = (string)$x_numerator;\n  $x_denominator = (string)$x_denominator;\n  $x_numerator_length\
    \ = strlen($x_numerator);\n  $x_denominator_length = strlen($x_denominator);\n\
    \  $x_numerator_length_diff = $x_numerator_length - $x_denominator_length;\n \
    \ $x_denominator_length_diff = $x_denominator_length - $x_numerator_length;\n\
    \  if ($x_numerator_length_diff > 0) {\n    $x_numerator = substr($x_numerator,\
    \ 0, $x_numerator_length_diff);\n  } elseif ($x_denominator_length_diff > 0) {\n\
    \    $x_denominator = substr($x_denominator, 0, $x_denominator_length_diff);\n\
    \  }\n  if ($x_numerator == $x_denominator) {\n    return true;\n  } else {\n\
    \    return false;\n  }\n}\nfunction candidate(...$args) {\n    return simplify(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    7/10\", \"10/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_hjmme01.php:46\n\
    Stack trace:\n#0 /tmp/tmp_hjmme01.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp_hjmme01.php\
    \ on line 46\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    return is_int($result);\n\
    }\nfunction candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8942buko.php:26\n\
    Stack trace:\n#0 /tmp/tmp8942buko.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp8942buko.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n  $x = explode('/', $x);\n  $n = explode('/', $n);\n  return ($x[0] *\
    \ $n[1]) % ($x[1] * $n[0]) === 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"1/5\"\
    , \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi_fb63hn.php:24\n\
    Stack trace:\n#0 /tmp/tmpi_fb63hn.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpi_fb63hn.php\
    \ on line 24\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    if (is_int($result))\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1gcm9mt6.php:31\n\
    Stack trace:\n#0 /tmp/tmp1gcm9mt6.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1gcm9mt6.php\
    \ on line 31\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    return is_int($x * $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return simplify(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/6\", \"2/1\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/1\", \"3/1\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"7/10\", \"10/2\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    2/10\", \"50/10\") !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"7/2\", \"4/2\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"11/6\", \"6/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/3\", \"5/2\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"5/2\", \"3/5\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\", \"8/4\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/4\"\
    , \"4/2\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/5\", \"1/5\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp690e42wi.php:26\n\
    Stack trace:\n#0 /tmp/tmp690e42wi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp690e42wi.php\
    \ on line 26\n"
  timestamp: 1659730072
- exit_code: 255
  program: "<?php\n// Your task is to implement a function that will simplify the\
    \ expression\n// x * n. The function returns true if x * n evaluates to a whole\
    \ number and false\n// otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n// <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\n// You can assume\
    \ that x, and n are valid fractions, and do not have zero as denominator.\n//\
    \ >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n\
    // false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x,\
    \ $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0]\
    \ / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    if (is_int($result))\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n\necho\
    \ simplify(\"1/5\", \"5/1\") . \"\\n\";\necho simplify(\"1/6\", \"2/1\") . \"\\\
    n\";\necho simplify(\"7/10\", \"10/2\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return simplify(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    1/5\", \"5/1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    1/6\", \"2/1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"5/1\", \"3/1\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"7/10\", \"10/2\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"2/10\", \"50/10\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"7/2\", \"4/2\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11/6\", \"6/1\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2/3\"\
    , \"5/2\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    5/2\", \"3/5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"2/4\", \"8/4\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"2/4\", \"4/2\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"1/5\", \"5/1\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"1/5\", \"1/5\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiw390z1v.php:34\n\
    Stack trace:\n#0 /tmp/tmpiw390z1v.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpiw390z1v.php\
    \ on line 34\n"
  timestamp: 1659730072
