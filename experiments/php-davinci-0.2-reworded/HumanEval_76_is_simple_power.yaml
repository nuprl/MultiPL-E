name: HumanEval_76_is_simple_power
language: php
prompt: "<?php\n// Your task is to write a function that returns true if a number\
  \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
  \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>>\
  \ is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>>\
  \ is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>>\
  \ is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n"
tests: "function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["  $power = log($x, $n);\n  return $power == round($power);\n}", " \
    \ return pow($n, round(log($x, $n))) == $x;\n}", "    if ($x == 1) {\n       \
    \ return true;\n    }\n    $i = 1;\n    while ($i < $x) {\n        $i *= $n;\n\
    \        if ($i == $x) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n", "  if ($x == 1) {\n    return true;\n  }\n  $i = 1;\n  while ($i\
    \ < $x) {\n    $i *= $n;\n  }\n  return $i == $x;\n}", "  return $x == pow($n,\
    \ round(log($x) / log($n)));\n}", "    if ($x == 1) {\n        return true;\n\
    \    }\n    $i = 1;\n    while ($n ** $i <= $x) {\n        if ($n ** $i == $x)\
    \ {\n            return true;\n        }\n        $i++;\n    }\n    return false;\n\
    }", "    $int = log($x, $n);\n    return $int == floor($int);\n}\n", "  $i = 1;\n\
    \  while (pow($n, $i) <= $x) {\n    if (pow($n, $i) == $x) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}", "  if ($x == 1) {\n    return true;\n\
    \  }\n  $i = 1;\n  while ($i < $x) {\n    $i *= $n;\n  }\n  return $i == $x;\n\
    }", "  $i = 1;\n  while ($i <= $x) {\n    if ($i == $x) {\n      return true;\n\
    \    }\n    $i *= $n;\n  }\n  return false;\n}", "  $result = false;\n  if ($x\
    \ == 1) {\n    $result = true;\n  } else {\n    $i = 1;\n    while ($i <= $x)\
    \ {\n      if ($i == $x) {\n        $result = true;\n      }\n      $i *= $n;\n\
    \    }\n  }\n  return $result;\n}", "  $i = 1;\n  while ($i < $x) {\n    $i =\
    \ $i * $n;\n  }\n  if ($i == $x) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}", "  $power = log($x, $n);\n  return (floor($power) == $power);\n}", " \
    \ $i = 1;\n  $result = $n;\n  while ($result < $x) {\n    $result = $result *\
    \ $n;\n    $i++;\n  }\n  if ($result == $x) {\n    return true;\n  } else {\n\
    \    return false;\n  }\n}\necho is_simple_power(1, 4);\necho is_simple_power(2,\
    \ 2);\necho is_simple_power(8, 2);\necho is_simple_power(3, 2);\necho is_simple_power(3,\
    \ 1);\necho is_simple_power(5, 3);", "  $int = 0;\n  while (pow($n, $int) <= $x)\
    \ {\n    if (pow($n, $int) == $x) {\n      return true;\n    }\n    $int++;\n\
    \  }\n  return false;\n}", "  $i = 1;\n  while (pow($n, $i) <= $x) {\n    if (pow($n,\
    \ $i) == $x) {\n      return true;\n    }\n    $i++;\n  }\n  return false;\n}",
  "  $power = pow($n, 1);\n  $i = 1;\n  while ($power <= $x) {\n    if ($power ==\
    \ $x) {\n      return true;\n    }\n    $i++;\n    $power = pow($n, $i);\n  }\n\
    \  return false;\n}", "  $i = 1;\n  while (pow($n, $i) <= $x) {\n    if (pow($n,\
    \ $i) == $x) {\n      return true;\n    }\n    $i++;\n  }\n  return false;\n}",
  "    $power = log($x, $n);\n    return $power == (int)$power;\n}", "    $result\
    \ = false;\n    if ($x == 1) {\n        $result = true;\n    } else {\n      \
    \  $i = 1;\n        while ($i <= $x) {\n            if ($n ** $i == $x) {\n  \
    \              $result = true;\n                break;\n            }\n      \
    \      $i++;\n        }\n    }\n    return $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
