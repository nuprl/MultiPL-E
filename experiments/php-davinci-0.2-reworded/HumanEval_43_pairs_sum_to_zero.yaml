name: HumanEval_43_pairs_sum_to_zero
language: php
prompt: "<?php\n// pairs_sum_to_zero takes an array of integers as an input.\n// it\
  \ returns true if there are two distinct elements in the array that\n// sum to zero,\
  \ and false otherwise.\n// >>> pairs_sum_to_zero(array(1, 3, 5, 0))\n// false\n\
  // >>> pairs_sum_to_zero(array(1, 3, -2, 1))\n// false\n// >>> pairs_sum_to_zero(array(1,\
  \ 2, 3, 7))\n// false\n// >>> pairs_sum_to_zero(array(2, 4, -5, 3, 5, 7))\n// true\n\
  // >>> pairs_sum_to_zero(array(1))\n// false\nfunction pairs_sum_to_zero($l) {\n"
tests: "function candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1))\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
  \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30))\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
  \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["    // Write your code here\n    // To print results to the standard\
    \ output you can use print\n    // Example: print \"Hello world!\";\n    $count\
    \ = count($l);\n    if($count < 2) {\n        return false;\n    }\n    $hash\
    \ = array();\n    for($i = 0; $i < $count; $i++) {\n        $hash[$l[$i]] = $i;\n\
    \    }\n    for($i = 0; $i < $count; $i++) {\n        if(isset($hash[-$l[$i]])\
    \ && $hash[-$l[$i]] != $i) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n", "    $n = count($l);\n    if ($n < 2) {\n        return\
    \ false;\n    }\n    $i = 0;\n    while ($i < $n) {\n        $j = $i + 1;\n  \
    \      while ($j < $n) {\n            if ($l[$i] + $l[$j] == 0) {\n          \
    \      return true;\n            }\n            $j = $j + 1;\n        }\n    \
    \    $i = $i + 1;\n    }\n    return false;\n}\n", "\t$n = count($l);\n\tfor ($i\
    \ = 0; $i < $n; $i++) {\n\t\tfor ($j = $i + 1; $j < $n; $j++) {\n\t\t\tif ($l[$i]\
    \ + $l[$j] == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n\
    }\n", "  $n = count($l);\n  for ($i = 0; $i < $n; $i++) {\n    for ($j = $i +\
    \ 1; $j < $n; $j++) {\n      if ($l[$i] + $l[$j] == 0) {\n        return true;\n\
    \      }\n    }\n  }\n  return false;\n}\n", "    // your code here\n}\n", " \
    \   // your code here\n    $count = 0;\n    for ($i = 0; $i < count($l); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($l); $j++) {\n            if ($l[$i]\
    \ + $l[$j] == 0) {\n                $count++;\n            }\n        }\n    }\n\
    \    if ($count > 0) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n", "  // your code here\n}\n", "\t$n = count($l);\n\tfor ($i = 0; $i\
    \ < $n; $i++) {\n\t\tfor ($j = $i + 1; $j < $n; $j++) {\n\t\t\tif ($l[$i] + $l[$j]\
    \ == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n", "\t\
    $i = 0;\n\t$j = 0;\n\t$len = count($l);\n\twhile ($i < $len) {\n\t\t$j = $i +\
    \ 1;\n\t\twhile ($j < $len) {\n\t\t\tif ($l[$i] + $l[$j] == 0) {\n\t\t\t\treturn\
    \ true;\n\t\t\t}\n\t\t\t$j++;\n\t\t}\n\t\t$i++;\n\t}\n\treturn false;\n}\n", "\t\
    $count = count($l);\n\tif ($count < 2) {\n\t\treturn false;\n\t}\n\tfor ($i =\
    \ 0; $i < $count - 1; $i++) {\n\t\tfor ($j = $i + 1; $j < $count; $j++) {\n\t\t\
    \tif ($l[$i] + $l[$j] == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ false;\n}\n", "    // your code here\n}\n", "    // your code here\n    $count\
    \ = count($l);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = $i +\
    \ 1; $j < $count; $j++) {\n            if ($l[$i] + $l[$j] == 0) {\n         \
    \       return true;\n            }\n        }\n    }\n    return false;\n}\n",
  "  // your code here\n}\n", "    // your code here\n    $sum = 0;\n    $count =\
    \ count($l);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = $i + 1;\
    \ $j < $count; $j++) {\n            $sum = $l[$i] + $l[$j];\n            if ($sum\
    \ == 0) {\n                return true;\n            }\n        }\n    }\n   \
    \ return false;\n}\n", "    $n = count($l);\n    if ($n < 2) {\n        return\
    \ false;\n    }\n    $i = 0;\n    $j = $n - 1;\n    while ($i < $j) {\n      \
    \  $sum = $l[$i] + $l[$j];\n        if ($sum == 0) {\n            return true;\n\
    \        } else if ($sum < 0) {\n            $i++;\n        } else {\n       \
    \     $j--;\n        }\n    }\n    return false;\n}\n", "    // your code here\n\
    \    $count = count($l);\n    if ($count < 2) {\n        return false;\n    }\n\
    \    $i = 0;\n    while ($i < $count) {\n        $j = $i + 1;\n        while ($j\
    \ < $count) {\n            if ($l[$i] + $l[$j] == 0) {\n                return\
    \ true;\n            }\n            $j++;\n        }\n        $i++;\n    }\n \
    \   return false;\n}\n", "\t$result = false;\n\tforeach ($l as $i => $v) {\n\t\
    \tforeach ($l as $j => $w) {\n\t\t\tif ($i != $j && $v + $w == 0) {\n\t\t\t\t\
    $result = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\n", "    $l = array_unique($l);\n\
    \    $n = count($l);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i\
    \ + 1; $j < $n; $j++) {\n            if ($l[$i] + $l[$j] == 0) {\n           \
    \     return true;\n            }\n        }\n    }\n    return false;\n}\n",
  "\t$result = false;\n\tfor ($i = 0; $i < count($l); $i++) {\n\t\tfor ($j = $i +\
    \ 1; $j < count($l); $j++) {\n\t\t\tif ($l[$i] + $l[$j] == 0) {\n\t\t\t\t$result\
    \ = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\n", "  $n = count($l);\n\
    \  for ($i = 0; $i < $n; $i++) {\n    for ($j = $i + 1; $j < $n; $j++) {\n   \
    \   if ($l[$i] + $l[$j] == 0) {\n        return true;\n      }\n    }\n  }\n \
    \ return false;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
