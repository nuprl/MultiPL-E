name: HumanEval_117_select_words
language: php
prompt: "<?php\n// Given a string s and a natural number n, you have been tasked to\
  \ implement \n// a function that returns an array of all words from string s that\
  \ contain exactly \n// n consonants, in order these words appear in the string s.\n\
  // If the string s is empty then the function should return an empty array.\n//\
  \ Note: you may assume the input string contains only letters and spaces.\n// Examples:\n\
  // >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>>\
  \ select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n//\
  \ >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"\
  Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n\
  // array(\"Uncle\")\nfunction select_words($s, $n) {\n"
tests: "function candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
  little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
  \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4)\
  \ !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"\
  )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n", "    $words = explode('\
    \ ', $s);\n    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n", "  $words = explode(' ', $s);\n \
    \ $result = [];\n  foreach ($words as $word) {\n    if (count_consonants($word)\
    \ === $n) {\n      $result[] = $word;\n    }\n  }\n  return $result;\n}\n", " \
    \   $words = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word)\
    \ {\n        if (count_consonants($word) == $n) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\n", "    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n", "    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ == $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n", "    $s = explode(' ', $s);\n    $result = [];\n    foreach ($s as $word)\
    \ {\n        $consonants = 0;\n        for ($i = 0; $i < strlen($word); $i++)\
    \ {\n            if (!in_array($word[$i], ['a', 'e', 'i', 'o', 'u'])) {\n    \
    \            $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));", "  $words = explode(' ', $s);\n  $result = [];\n  foreach ($words as\
    \ $word) {\n    if (consonants_count($word) === $n) {\n      $result[] = $word;\n\
    \    }\n  }\n  return $result;\n}\n", "    $words = explode(' ', $s);\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ == $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n", "    $s = str_replace(' ', '', $s);\n    $words = [];\n    $consonants =\
    \ ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'];\n    for ($i = 0; $i < strlen($s); $i++) {\n\
    \        $word = '';\n        $consonantCount = 0;\n        while (in_array($s[$i],\
    \ $consonants)) {\n            $word .= $s[$i];\n            $consonantCount++;\n\
    \            $i++;\n        }\n        if ($consonantCount === $n) {\n       \
    \     $words[] = $word;\n        }\n    }\n    return $words;\n}\n", "    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      if (countConsonants($word) == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n", "    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ == $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n", "    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n", "  $words = explode('\
    \ ', $s);\n  $result = [];\n  foreach ($words as $word) {\n    if (count_consonants($word)\
    \ === $n) {\n      $result[] = $word;\n    }\n  }\n  return $result;\n}\n", " \
    \   $words = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word)\
    \ {\n        if (count_consonants($word) == $n) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\n", "    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ == $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n", "    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n", "    $words = explode('\
    \ ', $s);\n    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ == $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n", "  $words = explode(' ', $s);\n  $result = [];\n  foreach ($words as $word)\
    \ {\n    if (count_consonants($word) === $n) {\n      $result[] = $word;\n   \
    \ }\n  }\n  return $result;\n}\n", "    $s = str_replace(' ', '', $s);\n    $vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    $result = [];\n    $word = '';\n    for ($i\
    \ = 0; $i < strlen($s); $i++) {\n        if (!in_array($s[$i], $vowels)) {\n \
    \           $word .= $s[$i];\n        } else {\n            if (strlen($word)\
    \ == $n) {\n                $result[] = $word;\n            }\n            $word\
    \ = '';\n        }\n    }\n    if (strlen($word) == $n) {\n        $result[] =\
    \ $word;\n    }\n    return $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
