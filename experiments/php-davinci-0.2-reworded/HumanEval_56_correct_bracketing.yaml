name: HumanEval_56_correct_bracketing
language: php
prompt: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if every\
  \ opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
  <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
  <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
  \ {\n"
tests: "function candidate(...$args) {\n    return correct_bracketing(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
  \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<<\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\">\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n", "    $count\
    \ = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"<\") {\n            $count++;\n        } else {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return false;\n        }\n\
    \    }\n    return $count == 0;\n}\n", "    $open = 0;\n    $close = 0;\n    for\
    \ ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"<\"\
    ) {\n            $open++;\n        } else {\n            $close++;\n        }\n\
    \        if ($close > $open) {\n            return false;\n        }\n    }\n\
    \    if ($open == $close) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n", "    $stack = [];\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        $char = $brackets[$i];\n        if ($char == '<') {\n     \
    \       array_push($stack, $char);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return count($stack) == 0;\n}\n", "    $stack = new SplStack();\n\
    \    for ($i = 0; $i < strlen($brackets); $i++) {\n        $char = $brackets[$i];\n\
    \        if ($char == '<') {\n            $stack->push($char);\n        } else\
    \ {\n            if ($stack->isEmpty()) {\n                return false;\n   \
    \         }\n            $stack->pop();\n        }\n    }\n    return $stack->isEmpty();\n\
    }\n", "    $stack = new SplStack();\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        $char = $brackets[$i];\n        if ($char == '<') {\n     \
    \       $stack->push($char);\n        } else {\n            if ($stack->isEmpty())\
    \ {\n                return false;\n            }\n            $stack->pop();\n\
    \        }\n    }\n    return $stack->isEmpty();\n}\n", "  $count = 0;\n  for\
    \ ($i = 0; $i < strlen($brackets); $i++) {\n    if ($brackets[$i] == \"<\") {\n\
    \      $count++;\n    } else {\n      $count--;\n    }\n    if ($count < 0) {\n\
    \      return false;\n    }\n  }\n  return $count == 0;\n}\n", "    $count = 0;\n\
    \    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] ==\
    \ \"<\") {\n            $count++;\n        } else {\n            $count--;\n \
    \       }\n        if ($count < 0) {\n            return false;\n        }\n \
    \   }\n    return $count == 0;\n}\n", "    $stack = new SplStack();\n    for ($i\
    \ = 0; $i < strlen($brackets); $i++) {\n        $char = $brackets[$i];\n     \
    \   if ($char == '<') {\n            $stack->push($char);\n        } else {\n\
    \            if ($stack->isEmpty()) {\n                return false;\n       \
    \     }\n            $stack->pop();\n        }\n    }\n    return $stack->isEmpty();\n\
    }\n", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n", "    $stack\
    \ = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == '<') {\n            array_push($stack, '<');\n        } else {\n        \
    \    if (count($stack) == 0) {\n                return false;\n            }\n\
    \            array_pop($stack);\n        }\n    }\n    return count($stack) ==\
    \ 0;\n}\n", "    $stack = new SplStack();\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        $bracket = $brackets[$i];\n        if ($bracket == '<') {\n\
    \            $stack->push($bracket);\n        } else {\n            if ($stack->isEmpty())\
    \ {\n                return false;\n            }\n            $stack->pop();\n\
    \        }\n    }\n    return $stack->isEmpty();\n}\n", "  $open = 0;\n  $close\
    \ = 0;\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    if ($brackets[$i]\
    \ == \"<\") {\n      $open++;\n    } else {\n      $close++;\n    }\n    if ($close\
    \ > $open) {\n      return false;\n    }\n  }\n  if ($open == $close) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n", "    $open = 0;\n    $close\
    \ = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"<\") {\n            $open++;\n        } else {\n            $close++;\n\
    \        }\n        if ($close > $open) {\n            return false;\n       \
    \ }\n    }\n    if ($open == $close) {\n        return true;\n    } else {\n \
    \       return false;\n    }\n}\n", "    $open = 0;\n    $close = 0;\n    for\
    \ ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"<\"\
    ) {\n            $open++;\n        } else {\n            $close++;\n        }\n\
    \        if ($close > $open) {\n            return false;\n        }\n    }\n\
    \    if ($open == $close) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n", "    $bracket_stack = array();\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == '<') {\n            array_push($bracket_stack,\
    \ $brackets[$i]);\n        } else {\n            if (count($bracket_stack) ==\
    \ 0) {\n                return false;\n            }\n            array_pop($bracket_stack);\n\
    \        }\n    }\n    return count($bracket_stack) == 0;\n}\n", "    $open_count\
    \ = 0;\n    $close_count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        if ($brackets[$i] == \"<\") {\n            $open_count++;\n     \
    \   } else {\n            $close_count++;\n        }\n        if ($close_count\
    \ > $open_count) {\n            return false;\n        }\n    }\n    return $open_count\
    \ == $close_count;\n}\n", "    $brackets = str_split($brackets);\n    $open =\
    \ 0;\n    foreach ($brackets as $bracket) {\n        if ($bracket == '<') {\n\
    \            $open++;\n        } else {\n            $open--;\n        }\n   \
    \     if ($open < 0) {\n            return false;\n        }\n    }\n    return\
    \ $open == 0;\n}\n", "    $brackets = str_split($brackets);\n    $stack = [];\n\
    \    foreach ($brackets as $bracket) {\n        if ($bracket == '<') {\n     \
    \       array_push($stack, $bracket);\n        } else {\n            if (empty($stack))\
    \ {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return empty($stack);\n}\n", "    $open = 0;\n    for ($i\
    \ = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"<\") {\n\
    \            $open++;\n        } else {\n            $open--;\n        }\n   \
    \     if ($open < 0) {\n            return false;\n        }\n    }\n    return\
    \ $open == 0;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
