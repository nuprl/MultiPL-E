name: HumanEval_70_strange_sort_list
language: php
prompt: "<?php\n// Given array of integers, return array in strange order.\n// Strange\
  \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
  \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list(array(1,\
  \ 2, 3, 4))\n// array(1, 4, 2, 3)\n// >>> strange_sort_list(array(5, 5, 5, 5))\n\
  // array(5, 5, 5, 5)\n// >>> strange_sort_list(array())\n// array()\nfunction strange_sort_list($lst)\
  \ {\n"
tests: "function candidate(...$args) {\n    return strange_sort_list(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
  \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
  \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
  \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
  \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
  \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
  \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n \
    \   $i = 0;\n    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n     \
    \       $result[] = min($lst);\n            $lst = array_diff($lst, [min($lst)]);\n\
    \        } else {\n            $result[] = max($lst);\n            $lst = array_diff($lst,\
    \ [max($lst)]);\n        }\n        $i++;\n    }\n    return $result;\n}\n", " \
    \   $min = min($lst);\n    $max = max($lst);\n    $result = [];\n    $i = 0;\n\
    \    $j = 0;\n    $k = 0;\n    while ($i < count($lst)) {\n        if ($k % 2\
    \ == 0) {\n            $result[$i] = $min;\n            $i++;\n            $k++;\n\
    \        } else {\n            $result[$i] = $max;\n            $i++;\n      \
    \      $k++;\n        }\n    }\n    return $result;\n}\n", "    if (empty($lst))\
    \ {\n        return $lst;\n    }\n    sort($lst);\n    $result = array();\n  \
    \  $i = 0;\n    $j = count($lst) - 1;\n    while ($i <= $j) {\n        $result[]\
    \ = $lst[$i];\n        $i++;\n        if ($i <= $j) {\n            $result[] =\
    \ $lst[$j];\n            $j--;\n        }\n    }\n    return $result;\n}\n", " \
    \   $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $lst = array_diff($lst,\
    \ [$min, $max]);\n    $result[] = $min;\n    $result[] = $max;\n    while (count($lst)\
    \ > 0) {\n        $min = min($lst);\n        $max = max($lst);\n        $lst =\
    \ array_diff($lst, [$min, $max]);\n        $result[] = $min;\n        $result[]\
    \ = $max;\n    }\n    return $result;\n}\n", "    if (count($lst) == 0) {\n  \
    \      return $lst;\n    }\n    $sorted = array();\n    $sorted[] = min($lst);\n\
    \    $lst = array_diff($lst, $sorted);\n    while (count($lst) > 0) {\n      \
    \  $sorted[] = max($lst);\n        $lst = array_diff($lst, $sorted);\n       \
    \ if (count($lst) > 0) {\n            $sorted[] = min($lst);\n            $lst\
    \ = array_diff($lst, $sorted);\n        }\n    }\n    return $sorted;\n}\n", " \
    \   $min = min($lst);\n    $max = max($lst);\n    $result = array();\n    $i =\
    \ 0;\n    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $min;\n            $key = array_search($min, $lst);\n            unset($lst[$key]);\n\
    \            $min = min($lst);\n        } else {\n            $result[] = $max;\n\
    \            $key = array_search($max, $lst);\n            unset($lst[$key]);\n\
    \            $max = max($lst);\n        }\n        $i++;\n    }\n    return $result;\n\
    }\n", "    if (empty($lst)) {\n        return $lst;\n    }\n    $result = array();\n\
    \    $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, array($min, $max));\n    if (empty($lst))\
    \ {\n        return $result;\n    }\n    $min = min($lst);\n    $max = max($lst);\n\
    \    $result[] = $min;\n    $result[] = $max;\n    $lst = array_diff($lst, array($min,\
    \ $max));\n    if (empty($lst)) {\n        return $result;\n    }\n    $min =\
    \ min($lst);\n    $max = max($lst);\n    $result[] = $min;\n    $result[] = $max;\n\
    \    $lst = array_diff($lst, array($min, $max));\n    if (empty($lst)) {\n   \
    \     return $result;\n    }\n    $min = min($lst);\n    $max = max($lst);\n \
    \   $result[] = $min;\n    $result[] = $max;\n    $lst = array_diff($lst, array($min,\
    \ $max));\n    if (empty($lst)) {\n        return $result;\n    }\n    $min =\
    \ min($lst);\n    $max = max($lst);\n    $result[] = $min;\n    $result[] = $max;\n\
    \    $lst = array_diff($lst, array($min, $max));\n    if (empty($lst)) {\n   \
    \     return $result;\n    }\n    $min = min($lst);\n    $max = max($lst);\n \
    \   $result[] = $min;\n    $result[] = $max;\n    $lst = array_diff($lst, array($min,\
    \ $max));\n    if (empty($lst)) {\n        return $result;\n    }\n    $min =\
    \ min($lst);\n    $max = max($lst);\n    $", "    if (count($lst) == 0) {\n  \
    \      return $lst;\n    }\n    $min = min($lst);\n    $max = max($lst);\n   \
    \ $res = array();\n    $res[] = $min;\n    $res[] = $max;\n    $lst = array_diff($lst,\
    \ array($min, $max));\n    while (count($lst) > 0) {\n        $min = min($lst);\n\
    \        $max = max($lst);\n        $res[] = $min;\n        $res[] = $max;\n \
    \       $lst = array_diff($lst, array($min, $max));\n    }\n    return $res;\n\
    }\n", "    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $i\
    \ = 0;\n    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n          \
    \  $result[] = $min;\n            $lst = array_diff($lst, [$min]);\n         \
    \   $min = min($lst);\n        } else {\n            $result[] = $max;\n     \
    \       $lst = array_diff($lst, [$max]);\n            $max = max($lst);\n    \
    \    }\n        $i++;\n    }\n    return $result;\n}\n", "    if (empty($lst))\
    \ {\n        return array();\n    }\n    $lst = array_unique($lst);\n    $min\
    \ = min($lst);\n    $max = max($lst);\n    $result = array();\n    $result[] =\
    \ $min;\n    $result[] = $max;\n    $lst = array_diff($lst, array($min, $max));\n\
    \    while (!empty($lst)) {\n        $min = min($lst);\n        $max = max($lst);\n\
    \        $result[] = $min;\n        $result[] = $max;\n        $lst = array_diff($lst,\
    \ array($min, $max));\n    }\n    return $result;\n}\n", "    $result = [];\n\
    \    $length = count($lst);\n    $min = min($lst);\n    $max = max($lst);\n  \
    \  $min_index = array_search($min, $lst);\n    $max_index = array_search($max,\
    \ $lst);\n    $result[] = $min;\n    $result[] = $max;\n    $lst[$min_index] =\
    \ null;\n    $lst[$max_index] = null;\n    $lst = array_filter($lst);\n    $length\
    \ -= 2;\n    while ($length > 0) {\n        $min = min($lst);\n        $max =\
    \ max($lst);\n        $min_index = array_search($min, $lst);\n        $max_index\
    \ = array_search($max, $lst);\n        $result[] = $min;\n        $result[] =\
    \ $max;\n        $lst[$min_index] = null;\n        $lst[$max_index] = null;\n\
    \        $lst = array_filter($lst);\n        $length -= 2;\n    }\n    return\
    \ $result;\n}\n", "    if (empty($lst)) {\n        return $lst;\n    }\n    sort($lst);\n\
    \    $result = array();\n    $i = 0;\n    $j = count($lst) - 1;\n    while ($i\
    \ <= $j) {\n        $result[] = $lst[$i];\n        $i++;\n        if ($i <= $j)\
    \ {\n            $result[] = $lst[$j];\n            $j--;\n        }\n    }\n\
    \    return $result;\n}\n", "    $result = [];\n    $min = min($lst);\n    $max\
    \ = max($lst);\n    $i = 0;\n    while (count($lst) > 0) {\n        if ($i % 2\
    \ == 0) {\n            $result[] = $min;\n            $min_key = array_search($min,\
    \ $lst);\n            unset($lst[$min_key]);\n            $min = min($lst);\n\
    \        } else {\n            $result[] = $max;\n            $max_key = array_search($max,\
    \ $lst);\n            unset($lst[$max_key]);\n            $max = max($lst);\n\
    \        }\n        $i++;\n    }\n    return $result;\n}\n\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));",
  "    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $i = 0;\n\
    \    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $min;\n            $lst = array_diff($lst, [$min]);\n            $min = min($lst);\n\
    \        } else {\n            $result[] = $max;\n            $lst = array_diff($lst,\
    \ [$max]);\n            $max = max($lst);\n        }\n        $i++;\n    }\n \
    \   return $result;\n}\n", "    $result = [];\n    $lst_len = count($lst);\n \
    \   if ($lst_len == 0) {\n        return $result;\n    }\n    sort($lst);\n  \
    \  $i = 0;\n    $j = $lst_len - 1;\n    while ($i < $j) {\n        $result[] =\
    \ $lst[$i];\n        $result[] = $lst[$j];\n        $i++;\n        $j--;\n   \
    \ }\n    if ($i == $j) {\n        $result[] = $lst[$i];\n    }\n    return $result;\n\
    }\n", "    if (empty($lst)) {\n        return $lst;\n    }\n    sort($lst);\n\
    \    $min = array_shift($lst);\n    $max = array_pop($lst);\n    $res = array($min,\
    \ $max);\n    while (!empty($lst)) {\n        $min = array_shift($lst);\n    \
    \    $max = array_pop($lst);\n        $res[] = $min;\n        $res[] = $max;\n\
    \    }\n    return $res;\n}\n", "    $result = [];\n    $min = min($lst);\n  \
    \  $max = max($lst);\n    $i = 0;\n    while (count($lst) > 0) {\n        if ($i\
    \ % 2 == 0) {\n            $result[] = $min;\n            $lst = array_diff($lst,\
    \ [$min]);\n            $min = min($lst);\n        } else {\n            $result[]\
    \ = $max;\n            $lst = array_diff($lst, [$max]);\n            $max = max($lst);\n\
    \        }\n        $i++;\n    }\n    return $result;\n}\n", "    if (empty($lst))\
    \ {\n        return $lst;\n    }\n    sort($lst);\n    $result = [];\n    $i =\
    \ 0;\n    $j = count($lst) - 1;\n    while ($i <= $j) {\n        $result[] = $lst[$i];\n\
    \        $i++;\n        if ($i <= $j) {\n            $result[] = $lst[$j];\n \
    \           $j--;\n        }\n    }\n    return $result;\n}\n", "    $result =\
    \ [];\n    $min = min($lst);\n    $max = max($lst);\n    $min_index = array_search($min,\
    \ $lst);\n    $max_index = array_search($max, $lst);\n    $result[] = $min;\n\
    \    $result[] = $max;\n    unset($lst[$min_index]);\n    unset($lst[$max_index]);\n\
    \    $lst = array_values($lst);\n    if (count($lst) > 0) {\n        $result =\
    \ array_merge($result, strange_sort_list($lst));\n    }\n    return $result;\n\
    }\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));", "  $result = [];\n  $min = min($lst);\n\
    \  $max = max($lst);\n  $min_index = array_search($min, $lst);\n  $max_index =\
    \ array_search($max, $lst);\n  $result[] = $min;\n  $result[] = $max;\n  unset($lst[$min_index]);\n\
    \  unset($lst[$max_index]);\n  $lst = array_values($lst);\n  if (count($lst) >\
    \ 0) {\n    $result = array_merge($result, strange_sort_list($lst));\n  }\n  return\
    \ $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
