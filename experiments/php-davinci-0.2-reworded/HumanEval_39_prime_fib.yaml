name: HumanEval_39_prime_fib
language: php
prompt: "<?php\n// prime_fib returns n-th number that is a Fibonacci number and it's\
  \ also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n\
  // 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib($n)\
  \ {\n"
tests: "function candidate(...$args) {\n    return prime_fib(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(1) !== 2) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(2) !== 3) { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(3) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
  \ !== 13) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 89)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 233) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 1597) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28657) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(9) !== 514229) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(10) !== 433494437) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    $fib = [1, 1];\n    $i = 2;\n    while (true) {\n        $fib[$i]\
    \ = $fib[$i - 1] + $fib[$i - 2];\n        if (is_prime($fib[$i])) {\n        \
    \    $n--;\n            if ($n == 0) {\n                return $fib[$i];\n   \
    \         }\n        }\n        $i++;\n    }\n}\n", "    $fib = [1, 2];\n    $i\
    \ = 2;\n    while (count($fib) < $n) {\n        $fib[$i] = $fib[$i - 1] + $fib[$i\
    \ - 2];\n        $i++;\n    }\n    return $fib[$n - 1];\n}\n", "    $fib = [1,\
    \ 1];\n    $i = 2;\n    while (count($fib) < $n) {\n        $fib[] = $fib[$i -\
    \ 1] + $fib[$i - 2];\n        $i++;\n    }\n    $fib = array_filter($fib, function($num)\
    \ {\n        if ($num == 1) {\n            return false;\n        }\n        for\
    \ ($i = 2; $i <= sqrt($num); $i++) {\n            if ($num % $i == 0) {\n    \
    \            return false;\n            }\n        }\n        return true;\n \
    \   });\n    return $fib[$n - 1];\n}\n", "    $fib = [1, 1];\n    $i = 2;\n  \
    \  while ($i < $n) {\n        $fib[] = $fib[$i - 1] + $fib[$i - 2];\n        $i++;\n\
    \    }\n    return $fib[$n - 1];\n}\n", "    $fib = fib($n);\n    if (is_prime($fib))\
    \ {\n        return $fib;\n    } else {\n        return prime_fib($n + 1);\n \
    \   }\n}\n", "    $fib = [1, 1];\n    $i = 2;\n    while (count($fib) < $n) {\n\
    \        $fib[] = $fib[$i - 1] + $fib[$i - 2];\n        $i++;\n    }\n    $fib\
    \ = array_filter($fib, function($num) {\n        if ($num == 1) return false;\n\
    \        for ($i = 2; $i < $num; $i++) {\n            if ($num % $i == 0) return\
    \ false;\n        }\n        return true;\n    });\n    return $fib[$n - 1];\n\
    }\n", "    $fib_numbers = [1, 2];\n    $i = 2;\n    while (true) {\n        $fib_numbers[$i]\
    \ = $fib_numbers[$i - 1] + $fib_numbers[$i - 2];\n        if (is_prime($fib_numbers[$i]))\
    \ {\n            $n--;\n            if ($n == 0) {\n                return $fib_numbers[$i];\n\
    \            }\n        }\n        $i++;\n    }\n}\n", "    $fib = [2, 3];\n \
    \   $i = 2;\n    while (count($fib) < $n) {\n        $fib[] = $fib[$i - 1] + $fib[$i\
    \ - 2];\n        $i++;\n    }\n    return $fib[$n - 1];\n}\n", "    $fib = [1,\
    \ 1];\n    $i = 2;\n    while (count($fib) < $n) {\n        $fib[] = $fib[$i -\
    \ 1] + $fib[$i - 2];\n        $i++;\n    }\n    $fib = array_filter($fib, function($num)\
    \ {\n        return is_prime($num);\n    });\n    return $fib[$n - 1];\n}\n",
  "    $fib = [2, 3];\n    $i = 2;\n    while (count($fib) < $n) {\n        $fib[]\
    \ = $fib[$i - 1] + $fib[$i - 2];\n        $i++;\n    }\n    $fib = array_filter($fib,\
    \ function($x) {\n        for ($i = 2; $i <= sqrt($x); $i++) {\n            if\
    \ ($x % $i == 0) {\n                return false;\n            }\n        }\n\
    \        return true;\n    });\n    return $fib[$n - 1];\n}\n", "    $fib = [2,\
    \ 3];\n    $i = 2;\n    while ($i < $n) {\n        $fib[] = $fib[$i - 1] + $fib[$i\
    \ - 2];\n        $i++;\n    }\n    return $fib[$n - 1];\n}\n", "    $fib = [1,\
    \ 1];\n    $i = 2;\n    while (count($fib) < $n) {\n        $fib[] = $fib[$i -\
    \ 1] + $fib[$i - 2];\n        $i++;\n    }\n    return $fib[$n - 1];\n}\n", " \
    \   $fib = [1, 2];\n    $i = 2;\n    while (true) {\n        $fib[$i] = $fib[$i\
    \ - 1] + $fib[$i - 2];\n        if (is_prime($fib[$i])) {\n            $n--;\n\
    \            if ($n == 0) {\n                return $fib[$i];\n            }\n\
    \        }\n        $i++;\n    }\n}\n", "    $fib = [2, 3];\n    $i = 2;\n   \
    \ while (count($fib) < $n) {\n        $fib[] = $fib[$i - 1] + $fib[$i - 2];\n\
    \        $i++;\n    }\n    return $fib[$n - 1];\n}\n", "    $fib = [1, 2];\n \
    \   $i = 2;\n    while ($i < $n) {\n        $fib[$i] = $fib[$i - 1] + $fib[$i\
    \ - 2];\n        $i++;\n    }\n    return $fib[$n - 1];\n}\n", "    $fib = [1,\
    \ 2];\n    $i = 2;\n    while (true) {\n        $fib[$i] = $fib[$i - 1] + $fib[$i\
    \ - 2];\n        if (is_prime($fib[$i])) {\n            $n--;\n            if\
    \ ($n == 0) {\n                return $fib[$i];\n            }\n        }\n  \
    \      $i++;\n    }\n}\n", "    $fib = [2, 3];\n    $i = 2;\n    while (count($fib)\
    \ < $n) {\n        $fib[$i] = $fib[$i - 1] + $fib[$i - 2];\n        $i++;\n  \
    \  }\n    return $fib[$n - 1];\n}\n", "    $fib = [1, 2];\n    $i = 2;\n    while\
    \ ($i < $n) {\n        $fib[] = $fib[$i - 1] + $fib[$i - 2];\n        $i++;\n\
    \    }\n    return $fib[$n - 1];\n}\n", "    $fib = [2, 3];\n    $i = 2;\n   \
    \ while (count($fib) < $n) {\n        $fib[] = $fib[$i - 1] + $fib[$i - 2];\n\
    \        $i++;\n    }\n    return $fib[$n - 1];\n}\n", "    $fib = [2, 3];\n \
    \   $i = 2;\n    while (count($fib) < $n) {\n        $fib[] = $fib[$i - 1] + $fib[$i\
    \ - 2];\n        $i++;\n    }\n    $fib = array_filter($fib, function($x) {\n\
    \        return is_prime($x);\n    });\n    return $fib[$n - 1];\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
