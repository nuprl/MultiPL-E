language: php
name: HumanEval_100_make_a_pile
results:
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   $n = $n % 2 == 0 ? $n - 1 : $n + 1;\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp_8252d17.php on line 17

    '
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $pile = array($n);\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n\
    \            $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n\
    \        }\n        $pile[] = $n;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7shtr4y7.php:30\n\
    Stack trace:\n#0 /tmp/tmp7shtr4y7.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7shtr4y7.php\
    \ on line 30\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $pile = array($n);\n    $next = $n;\n    while ($next > 1) {\n      \
    \  if ($next % 2 == 0) {\n            $next = $next / 2;\n        } else {\n \
    \           $next = ($next + 1) / 2;\n        }\n        $pile[] = $next;\n  \
    \  }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwkpe5i1z.php:31\n\
    Stack trace:\n#0 /tmp/tmpwkpe5i1z.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwkpe5i1z.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n - 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsvai63io.php:31\n\
    Stack trace:\n#0 /tmp/tmpsvai63io.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpsvai63io.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = array($n);\n  while ($n > 1) {\n    $n = $n % 2 == 0 ? $n / 2 :\
    \ ($n + 1) / 2;\n    $pile[] = $n;\n  }\n  return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_hrhyc7f.php:26\n\
    Stack trace:\n#0 /tmp/tmp_hrhyc7f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp_hrhyc7f.php\
    \ on line 26\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(4));\nprint_r(make_a_pile(5));\n\
    print_r(make_a_pile(6));\nprint_r(make_a_pile(7));\nprint_r(make_a_pile(8));\n\
    print_r(make_a_pile(9));\nprint_r(make_a_pile(10));\nprint_r(make_a_pile(11));\n\
    print_r(make_a_pile(12));\nprint_r(make_a_pile(13));\nprint_r(make_a_pile(14));\n\
    print_r(make_a_pile(15));\nprint_r(make_a_pile(16));\nprint_r(make_a_pile(17));\n\
    print_r(make_a_pile(18));\nprint_r(make_a_pile(19));\nprint_r(make_a_pile(20));\n\
    print_r(make_a_pile(21));\nprint_r(make_a_pile(22));\nprint_r(make_a_pile(23));\n\
    print_r(make_a_pile(24));\nprint_r(make_a_pile(25));\nprint_r(make_a_pile(26));\n\
    print_r(make_a_pile(27));\nprint_r(make_a_pile(28));\nprint_r(make_a_pile(29));\n\
    print_r(make_a_pile(30));\nprint_r(make_a_pile(31));\nprint_r(make_a_pile(32));\n\
    print_r(\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp69861vv8.php on line 56

    '
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    while ($n > 0) {\n        $result[] = $n;\n \
    \       $n = $n % 2 ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp0k95wg2h.php on line 15

    '
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  while ($n > 0) {\n    $result[] = $n;\n    $n = ($n\
    \ % 2 == 0) ? $n + 1 : $n + 2;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpf5om0p82.php on line 15

    '
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = array($n);\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n\
    \ = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $pile[] = $n;\n\
    \  }\n  return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe3smrrch.php:30\n\
    Stack trace:\n#0 /tmp/tmpe3smrrch.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpe3smrrch.php\
    \ on line 30\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n - 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaozp00tr.php:31\n\
    Stack trace:\n#0 /tmp/tmpaozp00tr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpaozp00tr.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    $n = ($n\
    \ % 2 == 0) ? $n - 1 : $n - 2;\n    $result[] = $n;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgrei3gtn.php:27\n\
    Stack trace:\n#0 /tmp/tmpgrei3gtn.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpgrei3gtn.php\
    \ on line 27\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n;\n        if ($n % 2 == 0) {\n            $n += 2;\n        } else {\n\
    \            $n += 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmprm5y7d4i.php on line 15

    '
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   $n = $n % 2 == 0 ? $n / 2 : ($n + 1) / 2;\n        $result[] = $n;\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptmdpe_0q.php:27\n\
    Stack trace:\n#0 /tmp/tmptmdpe_0q.php(34): test()\n#1 {main}\n  thrown in /tmp/tmptmdpe_0q.php\
    \ on line 27\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n\
    \ + 2 * $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 ==\
    \ 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n  \
    \  $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpizro4gqw.php:31\n\
    Stack trace:\n#0 /tmp/tmpizro4gqw.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpizro4gqw.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n - 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaozp00tr.php:31\n\
    Stack trace:\n#0 /tmp/tmpaozp00tr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpaozp00tr.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n;\n\
    \    if ($n % 2 == 0) {\n      $n++;\n    } else {\n      $n += 2;\n    }\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp822ziu7v.php on line 15

    '
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n\
    \ + 2 * $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n\
    \ + $i * 2;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n\
    \ + 2 * $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 ==\
    \ 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n  \
    \  $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpizro4gqw.php:31\n\
    Stack trace:\n#0 /tmp/tmpizro4gqw.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpizro4gqw.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n\
    \ + 2 * $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = array($n);\n  while ($n > 1) {\n    $n = ($n % 2 == 0) ? $n - 1\
    \ : $n - 2;\n    $pile[] = $n;\n  }\n  return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo23cfsvg.php:26\n\
    Stack trace:\n#0 /tmp/tmpo23cfsvg.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpo23cfsvg.php\
    \ on line 26\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n;\n        if ($n % 2 == 0) {\n            $n += 2;\n        } else {\n\
    \            $n += 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmprm5y7d4i.php on line 15

    '
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n - 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaozp00tr.php:31\n\
    Stack trace:\n#0 /tmp/tmpaozp00tr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpaozp00tr.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        if ($i\
    \ == 0) {\n            $result[] = $n;\n        } else {\n            $result[]\
    \ = $result[$i - 1] + 2;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n\
    \ + 2 * $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $pile = array();\n    $pile[] = $n;\n    while ($n > 1) {\n        if\
    \ ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n\
    \ = ($n + 1) / 2;\n        }\n        $pile[] = $n;\n    }\n    return $pile;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2fruk8x8.php:31\n\
    Stack trace:\n#0 /tmp/tmp2fruk8x8.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2fruk8x8.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n\
    \ + 2 * $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n - 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaozp00tr.php:31\n\
    Stack trace:\n#0 /tmp/tmpaozp00tr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpaozp00tr.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    $n = $n\
    \ % 2 == 0 ? $n - 1 : $n + 1;\n    $result[] = $n;\n  }\n  return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp1494v_sw.php on line 17

    '
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = array($n);\n  while ($n > 1) {\n    $n = ($n % 2) ? $n + 2 : $n\
    \ + 1;\n    $pile[] = $n;\n  }\n  return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpjz0dgqzv.php on line 16

    '
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $pile = array($n);\n    while ($n > 1) {\n        $n = ($n % 2 == 0)\
    \ ? $n - 1 : $n - 2;\n        $pile[] = $n;\n    }\n    return $pile;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdzhxiktl.php:26\n\
    Stack trace:\n#0 /tmp/tmpdzhxiktl.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpdzhxiktl.php\
    \ on line 26\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   $n = $n % 2 == 0 ? $n - 1 : $n + 1;\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp_8252d17.php on line 17

    '
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 ==\
    \ 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n  \
    \  $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpizro4gqw.php:31\n\
    Stack trace:\n#0 /tmp/tmpizro4gqw.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpizro4gqw.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n;\n\
    \    if ($n % 2 == 0) {\n      $n += 2;\n    } else {\n      $n += 1;\n    }\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpjccv5w89.php on line 15

    '
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    while ($n > 0) {\n        $result[] = $n;\n \
    \       $n = ($n % 2 == 0) ? $n + 1 : $n + 2;\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpcuut8o4i.php on line 15

    '
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n\
    \ + 2 * $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = [];\n    while ($n > 0) {\n        $result[] = $n;\n      \
    \  $n = $n % 2 == 0 ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmphsyr8wli.php on line 15

    '
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    $n = ($n\
    \ % 2 == 0) ? $n / 2 : ($n + 1) / 2;\n    $result[] = $n;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptbe36l1g.php:27\n\
    Stack trace:\n#0 /tmp/tmptbe36l1g.php(34): test()\n#1 {main}\n  thrown in /tmp/tmptbe36l1g.php\
    \ on line 27\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n\
    \ + 2 * $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n - 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaozp00tr.php:31\n\
    Stack trace:\n#0 /tmp/tmpaozp00tr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpaozp00tr.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = [$n];\n  while ($n > 1) {\n    $n = $n % 2 ? $n + 2 : $n + 1;\n\
    \    $pile[] = $n;\n  }\n  return $pile;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpup1c86om.php on line 16

    '
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n - 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaozp00tr.php:31\n\
    Stack trace:\n#0 /tmp/tmpaozp00tr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpaozp00tr.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n - 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaozp00tr.php:31\n\
    Stack trace:\n#0 /tmp/tmpaozp00tr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpaozp00tr.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n;\n        if ($n % 2 == 0) {\n            $n++;\n        } else {\n   \
    \         $n += 2;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpyqxsw21e.php on line 15

    '
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   $n = ($n % 2 == 0) ? $n - 1 : $n - 2;\n        $result[] = $n;\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbuy3yau2.php:27\n\
    Stack trace:\n#0 /tmp/tmpbuy3yau2.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbuy3yau2.php\
    \ on line 27\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        if ($i\
    \ == 0) {\n            $result[] = $n;\n        } else {\n            $result[]\
    \ = $result[$i - 1] + ($i % 2 == 0 ? 2 : 1);\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3eb8dhhd.php:29\n\
    Stack trace:\n#0 /tmp/tmp3eb8dhhd.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3eb8dhhd.php\
    \ on line 29\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n\
    \ + 2 * $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = array($n);\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n\
    \ = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $pile[] = $n;\n\
    \  }\n  return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe3smrrch.php:30\n\
    Stack trace:\n#0 /tmp/tmpe3smrrch.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpe3smrrch.php\
    \ on line 30\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 0) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n - 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9xpxa141.php:31\n\
    Stack trace:\n#0 /tmp/tmp9xpxa141.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp9xpxa141.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    $n = $n\
    \ % 2 == 0 ? $n - 1 : $n + 1;\n    $result[] = $n;\n  }\n  return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp1494v_sw.php on line 17

    '
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n - 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaozp00tr.php:31\n\
    Stack trace:\n#0 /tmp/tmpaozp00tr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpaozp00tr.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    $n = $n\
    \ % 2 == 0 ? $n / 2 : ($n + 1) / 2;\n    $result[] = $n;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo509zq58.php:27\n\
    Stack trace:\n#0 /tmp/tmpo509zq58.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpo509zq58.php\
    \ on line 27\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $pile = array($n);\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n\
    \            $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n\
    \        }\n        $pile[] = $n;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7shtr4y7.php:30\n\
    Stack trace:\n#0 /tmp/tmp7shtr4y7.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7shtr4y7.php\
    \ on line 30\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n\
    \ + 2 * $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $pile = array();\n    $pile[] = $n;\n    while ($n > 1) {\n        $n\
    \ = $n % 2 ? $n + 2 : $n + 1;\n        $pile[] = $n;\n    }\n    return $pile;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpyyfht0rx.php on line 17

    '
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    while ($n > 0) {\n        $result[] = $n;\n \
    \       $n = $n % 2 ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp0k95wg2h.php on line 15

    '
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n\
    \ + 2 * $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = array($n);\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n\
    \ = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $pile[] = $n;\n\
    \  }\n  return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe3smrrch.php:30\n\
    Stack trace:\n#0 /tmp/tmpe3smrrch.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpe3smrrch.php\
    \ on line 30\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n - 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaozp00tr.php:31\n\
    Stack trace:\n#0 /tmp/tmpaozp00tr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpaozp00tr.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n - 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsvai63io.php:31\n\
    Stack trace:\n#0 /tmp/tmpsvai63io.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpsvai63io.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n - 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaozp00tr.php:31\n\
    Stack trace:\n#0 /tmp/tmpaozp00tr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpaozp00tr.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if\
    \ ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n\
    \ = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_39utxom.php:31\n\
    Stack trace:\n#0 /tmp/tmp_39utxom.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_39utxom.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = array($n);\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n\
    \ = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $pile[] = $n;\n\
    \  }\n  return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe3smrrch.php:30\n\
    Stack trace:\n#0 /tmp/tmpe3smrrch.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpe3smrrch.php\
    \ on line 30\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   $n = $n % 2 == 0 ? $n - 1 : $n + 1;\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp_8252d17.php on line 17

    '
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    $n = $n\
    \ % 2 == 0 ? $n - 1 : $n + 1;\n    $result[] = $n;\n  }\n  return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp1494v_sw.php on line 17

    '
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 0) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpsmd8g6wd.php on line 21

    '
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n\
    \ + 2 * $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   $n = $n % 2 == 0 ? $n - 1 : $n + 1;\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp_8252d17.php on line 17

    '
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = array($n);\n  while ($n > 1) {\n    $n = $n % 2 ? $n + 2 : $n +\
    \ 1;\n    $pile[] = $n;\n  }\n  return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpo3oioh0l.php on line 16

    '
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = array($n);\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n\
    \ = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $pile[] = $n;\n\
    \  }\n  return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe3smrrch.php:30\n\
    Stack trace:\n#0 /tmp/tmpe3smrrch.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpe3smrrch.php\
    \ on line 30\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n - 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaozp00tr.php:31\n\
    Stack trace:\n#0 /tmp/tmpaozp00tr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpaozp00tr.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $pile = array($n);\n    $i = 0;\n    while ($pile[$i] > 1) {\n      \
    \  $pile[] = $pile[$i] % 2 ? $pile[$i] - 1 : $pile[$i] - 2;\n        $i++;\n \
    \   }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd5jrz_i4.php:27\n\
    Stack trace:\n#0 /tmp/tmpd5jrz_i4.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpd5jrz_i4.php\
    \ on line 27\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n - 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaozp00tr.php:31\n\
    Stack trace:\n#0 /tmp/tmpaozp00tr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpaozp00tr.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n - 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaozp00tr.php:31\n\
    Stack trace:\n#0 /tmp/tmpaozp00tr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpaozp00tr.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  $i = 1;\n  while ($n > 1) {\n\
    \    if ($n % 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1)\
    \ / 2;\n    }\n    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0v863eob.php:32\n\
    Stack trace:\n#0 /tmp/tmp0v863eob.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0v863eob.php\
    \ on line 32\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    $n = $n\
    \ % 2 == 0 ? $n - 1 : $n + 1;\n    $result[] = $n;\n  }\n  return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp1494v_sw.php on line 17

    '
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 ==\
    \ 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n  \
    \  $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpizro4gqw.php:31\n\
    Stack trace:\n#0 /tmp/tmpizro4gqw.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpizro4gqw.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n - 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsvai63io.php:31\n\
    Stack trace:\n#0 /tmp/tmpsvai63io.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpsvai63io.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n\
    \ + 2 * $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   $n = ($n % 2) ? $n + 2 : $n + 1;\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpgttkwkf7.php on line 17

    '
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n - 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaozp00tr.php:31\n\
    Stack trace:\n#0 /tmp/tmpaozp00tr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpaozp00tr.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n - 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsvai63io.php:31\n\
    Stack trace:\n#0 /tmp/tmpsvai63io.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpsvai63io.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n\
    \ + 2 * $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  $i = 0;\n  while ($n > 1) {\n\
    \    if ($n % 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n - 1)\
    \ / 2;\n    }\n    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfx88x810.php:32\n\
    Stack trace:\n#0 /tmp/tmpfx88x810.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpfx88x810.php\
    \ on line 32\n"
  timestamp: 1659730132
- exit_code: 0
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n\
    \ + 2 * $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = array($n);\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n\
    \ = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $pile[] = $n;\n\
    \  }\n  return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe3smrrch.php:30\n\
    Stack trace:\n#0 /tmp/tmpe3smrrch.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpe3smrrch.php\
    \ on line 30\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n     \
    \   if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n         \
    \   $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmul0exl3.php:31\n\
    Stack trace:\n#0 /tmp/tmpmul0exl3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmul0exl3.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n %\
    \ 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo60j3qq.php:31\n\
    Stack trace:\n#0 /tmp/tmpqo60j3qq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqo60j3qq.php\
    \ on line 31\n"
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    $n = $n\
    \ % 2 ? $n + 2 : $n + 1;\n    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpyzw2_cvo.php on line 17

    '
  timestamp: 1659730132
- exit_code: 255
  program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in an array, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n)\
    \ {\n  $pile = array($n);\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n\
    \ = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $pile[] = $n;\n\
    \  }\n  return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe3smrrch.php:30\n\
    Stack trace:\n#0 /tmp/tmpe3smrrch.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpe3smrrch.php\
    \ on line 30\n"
  timestamp: 1659730132
