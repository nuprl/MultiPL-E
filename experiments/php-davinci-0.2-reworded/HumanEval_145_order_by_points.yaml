name: HumanEval_145_order_by_points
language: php
prompt: "<?php\n// Write a function which sorts the given array of integers\n// in\
  \ ascending order according to the sum of their digits.\n// Note: if there are several\
  \ items with similar sum of their digits,\n// order them based on their index in\
  \ original array.\n// For example:\n// >>> order_by_points(array(1, 11, -1, -11,\
  \ -12))\n// array(-1, -11, 1, -12, 11)\n// >>> order_by_points(array())\n// array()\n\
  function order_by_points($nums) {\n"
tests: "function candidate(...$args) {\n    return order_by_points(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(array(1, 11, -1, -11, -12)) !== array(-1,\
  \ -11, 1, -12, 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46)) !== array(0, 2, 3,\
  \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, -11, -32, 43, 54, -98, 2, -3)) !==\
  \ array(-3, -32, -98, -11, 1, 2, 43, 54)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) !== array(1, 10,\
  \ 2, 11, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(0, 6, 6, -76, -21, 23, 4)) !== array(-76, -21, 0, 4, 23, 6, 6))\
  \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $sums = array();\n  foreach ($nums as $key => $num) {\n    $sum =\
    \ 0;\n    $num = abs($num);\n    while ($num > 0) {\n      $sum += $num % 10;\n\
    \      $num = (int)($num / 10);\n    }\n    $sums[$key] = $sum;\n  }\n  asort($sums);\n\
    \  $result = array();\n  foreach ($sums as $key => $sum) {\n    $result[] = $nums[$key];\n\
    \  }\n  return $result;\n}\n\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));\n\
    print_r(order_by_points(array()));", "    $result = [];\n    foreach ($nums as\
    \ $key => $num) {\n        $result[$key] = array_sum(str_split($num));\n    }\n\
    \    asort($result);\n    $result = array_keys($result);\n    $result = array_map(function($value)\
    \ use ($nums) {\n        return $nums[$value];\n    }, $result);\n    return $result;\n\
    }\n", "  $sums = array();\n  foreach ($nums as $key => $num) {\n    $sum = 0;\n\
    \    $num = abs($num);\n    while ($num > 0) {\n      $sum += $num % 10;\n   \
    \   $num = floor($num / 10);\n    }\n    $sums[$key] = $sum;\n  }\n  asort($sums);\n\
    \  $result = array();\n  foreach ($sums as $key => $sum) {\n    $result[] = $nums[$key];\n\
    \  }\n  return $result;\n}\n", "    $sum = array();\n    foreach ($nums as $key\
    \ => $value) {\n        $sum[$key] = array_sum(str_split($value));\n    }\n  \
    \  array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n", "    $sums\
    \ = array();\n    foreach ($nums as $key => $num) {\n        $sum = 0;\n     \
    \   $num = abs($num);\n        while ($num > 0) {\n            $sum += $num %\
    \ 10;\n            $num = floor($num / 10);\n        }\n        $sums[$key] =\
    \ $sum;\n    }\n    asort($sums);\n    $result = array();\n    foreach ($sums\
    \ as $key => $sum) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n\
    }\n", "    $sums = array();\n    foreach ($nums as $key => $num) {\n        $sum\
    \ = 0;\n        $num = abs($num);\n        while ($num > 0) {\n            $sum\
    \ += $num % 10;\n            $num = floor($num / 10);\n        }\n        $sums[$key]\
    \ = $sum;\n    }\n    asort($sums);\n    $result = array();\n    foreach ($sums\
    \ as $key => $sum) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n\
    }\n\n$nums = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));\n",
  "    $result = array();\n    foreach ($nums as $key => $value) {\n        $sum =\
    \ 0;\n        $value = abs($value);\n        while ($value > 0) {\n          \
    \  $sum += $value % 10;\n            $value = floor($value / 10);\n        }\n\
    \        $result[$key] = $sum;\n    }\n    asort($result);\n    $result = array_keys($result);\n\
    \    $result = array_map(function($x) use ($nums) {\n        return $nums[$x];\n\
    \    }, $result);\n    return $result;\n}\n", "  $sums = array();\n  foreach ($nums\
    \ as $key => $num) {\n    $sum = 0;\n    $num = abs($num);\n    while ($num >\
    \ 0) {\n      $sum += $num % 10;\n      $num = floor($num / 10);\n    }\n    $sums[$key]\
    \ = $sum;\n  }\n  asort($sums);\n  $result = array();\n  foreach ($sums as $key\
    \ => $sum) {\n    $result[] = $nums[$key];\n  }\n  return $result;\n}\n", "  $sum_nums\
    \ = array();\n  foreach ($nums as $key => $value) {\n    $sum_nums[$key] = array_sum(str_split($value));\n\
    \  }\n  array_multisort($sum_nums, SORT_ASC, $nums);\n  return $nums;\n}\n", " \
    \ $sums = array();\n  foreach ($nums as $key => $num) {\n    $sums[$key] = array_sum(str_split($num));\n\
    \  }\n  asort($sums);\n  $result = array();\n  foreach ($sums as $key => $sum)\
    \ {\n    $result[] = $nums[$key];\n  }\n  return $result;\n}\n", "    $sums =\
    \ array();\n    foreach ($nums as $key => $num) {\n        $sum = 0;\n       \
    \ $num = abs($num);\n        while ($num > 0) {\n            $sum += $num % 10;\n\
    \            $num = floor($num / 10);\n        }\n        $sums[$key] = $sum;\n\
    \    }\n    asort($sums);\n    $result = array();\n    foreach ($sums as $key\
    \ => $sum) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n",
  "    $sum_digits = function($num) {\n        $sum = 0;\n        while ($num > 0)\
    \ {\n            $sum += $num % 10;\n            $num = intval($num / 10);\n \
    \       }\n        return $sum;\n    };\n    $sums = array_map($sum_digits, $nums);\n\
    \    $sorted = array_combine($nums, $sums);\n    asort($sorted);\n    return array_keys($sorted);\n\
    }\n", "    $sums = array();\n    foreach ($nums as $key => $num) {\n        $sum\
    \ = 0;\n        $num = abs($num);\n        while ($num > 0) {\n            $sum\
    \ += $num % 10;\n            $num = floor($num / 10);\n        }\n        $sums[$key]\
    \ = $sum;\n    }\n    asort($sums);\n    $result = array();\n    foreach ($sums\
    \ as $key => $sum) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n\
    }\n", "    $sums = array();\n    foreach ($nums as $key => $num) {\n        $sum\
    \ = 0;\n        $num = abs($num);\n        while ($num > 0) {\n            $sum\
    \ += $num % 10;\n            $num = floor($num / 10);\n        }\n        $sums[$key]\
    \ = $sum;\n    }\n    asort($sums);\n    $result = array();\n    foreach ($sums\
    \ as $key => $sum) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n\
    }\n", "  $sums = array();\n  foreach ($nums as $i => $num) {\n    $sums[$i] =\
    \ array_sum(str_split($num));\n  }\n  asort($sums);\n  $result = array();\n  foreach\
    \ ($sums as $i => $sum) {\n    $result[] = $nums[$i];\n  }\n  return $result;\n\
    }\n", "    $sums = array();\n    foreach ($nums as $index => $num) {\n       \
    \ $sum = 0;\n        $num = abs($num);\n        while ($num > 0) {\n         \
    \   $sum += $num % 10;\n            $num = floor($num / 10);\n        }\n    \
    \    $sums[$index] = $sum;\n    }\n    asort($sums);\n    $result = array();\n\
    \    foreach ($sums as $index => $sum) {\n        $result[] = $nums[$index];\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    foreach ($nums as $key\
    \ => $num) {\n        $sum = 0;\n        $num = abs($num);\n        while ($num\
    \ > 0) {\n            $sum += $num % 10;\n            $num = floor($num / 10);\n\
    \        }\n        $result[$key] = $sum;\n    }\n    asort($result);\n    $result\
    \ = array_keys($result);\n    $result = array_map(function($num) use ($nums) {\n\
    \        return $nums[$num];\n    }, $result);\n    return $result;\n}\n", " \
    \   $nums = array_map(function($num) {\n        return [$num, array_sum(str_split($num))];\n\
    \    }, $nums);\n    usort($nums, function($a, $b) {\n        if ($a[1] == $b[1])\
    \ {\n            return $a[0] - $b[0];\n        }\n        return $a[1] - $b[1];\n\
    \    });\n    return array_map(function($num) {\n        return $num[0];\n   \
    \ }, $nums);\n}\n", "    $sums = array();\n    foreach ($nums as $key => $num)\
    \ {\n        $sums[$key] = array_sum(str_split($num));\n    }\n    array_multisort($sums,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n", "    $sums = array();\n    foreach\
    \ ($nums as $key => $num) {\n        $sums[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($sums);\n    $result = array();\n    foreach ($sums as $key\
    \ => $sum) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
