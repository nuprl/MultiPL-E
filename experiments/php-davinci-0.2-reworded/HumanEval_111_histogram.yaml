name: HumanEval_111_histogram
language: php
prompt: "<?php\n// Given a string representing a space separated lowercase letters,\
  \ return an array\n// of the letter with the most repetition and containing the\
  \ corresponding count.\n// If several letters have the same occurrence, return all\
  \ of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1, \"b\"\
  \ => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2, \"b\" =>\
  \ 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" => 2)\n// >>>\
  \ histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\")\n// array()\n\
  function histogram($test) {\n"
tests: "function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
  \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\"\
  ) !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
  \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"b\" => 4)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"\
  r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["    $test = explode(\" \", $test);\n    $result = array();\n    foreach\
    \ ($test as $value) {\n        if (array_key_exists($value, $result)) {\n    \
    \        $result[$value]++;\n        } else {\n            $result[$value] = 1;\n\
    \        }\n    }\n    $max = max($result);\n    foreach ($result as $key => $value)\
    \ {\n        if ($value != $max) {\n            unset($result[$key]);\n      \
    \  }\n    }\n    return $result;\n}\n", "\t$test = explode(\" \", $test);\n\t\
    $test = array_count_values($test);\n\tarsort($test);\n\t$max = max($test);\n\t\
    $result = array();\n\tforeach ($test as $key => $value) {\n\t\tif ($value == $max)\
    \ {\n\t\t\t$result[$key] = $value;\n\t\t}\n\t}\n\treturn $result;\n}\n", "   \
    \ $test = explode(\" \", $test);\n    $result = array();\n    $max = 0;\n    foreach\
    \ ($test as $value) {\n        if (array_key_exists($value, $result)) {\n    \
    \        $result[$value]++;\n        } else {\n            $result[$value] = 1;\n\
    \        }\n        if ($result[$value] > $max) {\n            $max = $result[$value];\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ < $max) {\n            unset($result[$key]);\n        }\n    }\n    return $result;\n\
    }\n", "\t$test = explode(\" \", $test);\n\t$test = array_count_values($test);\n\
    \t$max = max($test);\n\t$result = array();\n\tforeach ($test as $key => $value)\
    \ {\n\t\tif ($value == $max) {\n\t\t\t$result[$key] = $value;\n\t\t}\n\t}\n\t\
    return $result;\n}\n", "    $test = explode(\" \", $test);\n    $histogram = array();\n\
    \    foreach ($test as $letter) {\n        if (array_key_exists($letter, $histogram))\
    \ {\n            $histogram[$letter]++;\n        } else {\n            $histogram[$letter]\
    \ = 1;\n        }\n    }\n    $max = max($histogram);\n    $max_letters = array();\n\
    \    foreach ($histogram as $letter => $count) {\n        if ($count == $max)\
    \ {\n            $max_letters[$letter] = $count;\n        }\n    }\n    return\
    \ $max_letters;\n}", "    $array = explode(\" \", $test);\n    $count = array_count_values($array);\n\
    \    $max = max($count);\n    $result = array();\n    foreach ($count as $key\
    \ => $value) {\n        if ($value == $max) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    return $result;\n}\n", "    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $key => $value) {\n        if (array_key_exists($value,\
    \ $result)) {\n            $result[$value]++;\n        } else {\n            $result[$value]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n", "  $letters = explode(\"\
    \ \", $test);\n  $counts = array();\n  foreach ($letters as $letter) {\n    if\
    \ (array_key_exists($letter, $counts)) {\n      $counts[$letter]++;\n    } else\
    \ {\n      $counts[$letter] = 1;\n    }\n  }\n  $max = max($counts);\n  $results\
    \ = array();\n  foreach ($counts as $key => $value) {\n    if ($value == $max)\
    \ {\n      $results[$key] = $value;\n    }\n  }\n  return $results;\n}\n", " \
    \   $letters = explode(\" \", $test);\n    $counts = array();\n    foreach ($letters\
    \ as $letter) {\n        if (array_key_exists($letter, $counts)) {\n         \
    \   $counts[$letter]++;\n        } else {\n            $counts[$letter] = 1;\n\
    \        }\n    }\n    return $counts;\n}\n", "    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $key => $value) {\n        if (array_key_exists($value,\
    \ $result)) {\n            $result[$value] += 1;\n        } else {\n         \
    \   $result[$value] = 1;\n        }\n    }\n    return $result;\n}\n", "    $test\
    \ = explode(\" \", $test);\n    $result = array();\n    foreach ($test as $value)\
    \ {\n        if (array_key_exists($value, $result)) {\n            $result[$value]\
    \ += 1;\n        } else {\n            $result[$value] = 1;\n        }\n    }\n\
    \    $max = max($result);\n    $result = array_filter($result, function($value)\
    \ use ($max) {\n        return $value == $max;\n    });\n    return $result;\n\
    }\n", "    $test = str_replace(\" \", \"\", $test);\n    $test = str_split($test);\n\
    \    $test = array_count_values($test);\n    $max = max($test);\n    $result =\
    \ array();\n    foreach ($test as $key => $value) {\n        if ($value == $max)\
    \ {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }", "    $test = explode(\" \", $test);\n    $histogram = array();\n    foreach\
    \ ($test as $letter) {\n        if (isset($histogram[$letter])) {\n          \
    \  $histogram[$letter] += 1;\n        } else {\n            $histogram[$letter]\
    \ = 1;\n        }\n    }\n    $max = max($histogram);\n    $max_letters = array();\n\
    \    foreach ($histogram as $letter => $count) {\n        if ($count == $max)\
    \ {\n            $max_letters[$letter] = $count;\n        }\n    }\n    return\
    \ $max_letters;\n}", "    $test = explode(\" \", $test);\n    $result = array();\n\
    \    foreach ($test as $value) {\n        if (array_key_exists($value, $result))\
    \ {\n            $result[$value] += 1;\n        } else {\n            $result[$value]\
    \ = 1;\n        }\n    }\n    $max = max($result);\n    foreach ($result as $key\
    \ => $value) {\n        if ($value != $max) {\n            unset($result[$key]);\n\
    \        }\n    }\n    return $result;\n}\n", "\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\n", "  $test = str_replace(\" \"\
    , \"\", $test);\n  $test = str_split($test);\n  $test = array_count_values($test);\n\
    \  $max = max($test);\n  $result = array();\n  foreach ($test as $key => $value)\
    \ {\n    if ($value == $max) {\n      $result[$key] = $value;\n    }\n  }\n  return\
    \ $result;\n}\n", "    $array = explode(\" \", $test);\n    $count = array_count_values($array);\n\
    \    $max = max($count);\n    $result = array();\n    foreach ($count as $key\
    \ => $value) {\n        if ($value == $max) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    return $result;\n}\n", "  $test = explode(\" \", $test);\n\
    \  $count = array_count_values($test);\n  $max = max($count);\n  $result = array();\n\
    \  foreach ($count as $key => $value) {\n    if ($value == $max) {\n      $result[$key]\
    \ = $value;\n    }\n  }\n  return $result;\n}\n", "    $arr = explode(\" \", $test);\n\
    \    $count = array_count_values($arr);\n    $max = max($count);\n    $newArr\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $newArr[$key] = $value;\n        }\n    }\n    return $newArr;\n\
    }\necho \"<pre>\";\nprint_r(histogram(\"a b c\"));\necho \"</pre>\";\necho \"\
    <pre>\";\nprint_r(histogram(\"a b b a\"));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(histogram(\"a b c a b\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\
    b b b b a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\"));\n\
    echo \"</pre>\";", "    $test = explode(\" \", $test);\n    $count = array_count_values($test);\n\
    \    $max = max($count);\n    $result = array();\n    foreach ($count as $key\
    \ => $value) {\n        if ($value == $max) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    return $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
