language: php
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $word) {\n        if (strlen($word) % 2 == 0) {\n            $result[]\
    \ = $word;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv07pf0a6.php:39\n\
    Stack trace:\n#0 /tmp/tmpv07pf0a6.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpv07pf0a6.php\
    \ on line 39\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $lst_len = count($lst);\n    $lst_len_odd\
    \ = 0;\n    $lst_len_even = 0;\n    $lst_len_odd_arr = array();\n    $lst_len_even_arr\
    \ = array();\n    for ($i = 0; $i < $lst_len; $i++) {\n        if (strlen($lst[$i])\
    \ % 2 == 0) {\n            $lst_len_even_arr[$lst_len_even] = $lst[$i];\n    \
    \        $lst_len_even++;\n        } else {\n            $lst_len_odd_arr[$lst_len_odd]\
    \ = $lst[$i];\n            $lst_len_odd++;\n        }\n    }\n    sort($lst_len_even_arr);\n\
    \    sort($lst_len_odd_arr);\n    $lst_len_even_arr = array_merge($lst_len_even_arr,\
    \ $lst_len_odd_arr);\n    return $lst_len_even_arr;\n}\n$lst = array(\"aa\", \"\
    a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"\
    cd\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n    [1] => a\n    [2] => aaa\n)\n<br>Array\n(\n\
    \    [0] => ab\n    [1] => cd\n    [2] => a\n    [3] => aaa\n)\n<br>Array\n(\n\
    \    [0] => ab\n    [1] => cd\n    [2] => a\n    [3] => aaa\n)\n<br>Array\n(\n\
    \    [0] => ab\n    [1] => cd\n    [2] => a\n    [3] => aaa\n)\n<br>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp2q45ofik.php:56\nStack trace:\n\
    #0 /tmp/tmp2q45ofik.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp2q45ofik.php\
    \ on line 56\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($x)\
    \ {\n        return strlen($x) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"bb\", \"b\");\n\
    print_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\", \"bb\", \"b\", \"a\");\nprint_r(sorted_list_sum($lst));\necho \"\
    \\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"bb\", \"b\", \"a\", \"\
    a\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst = array(\"ab\", \"\
    a\", \"aaa\", \"cd\", \"bb\", \"b\", \"a\", \"a\", \"a\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"bb\", \"b\", \"\
    a\", \"a\", \"a\", \"a\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst\
    \ = array(\"ab\", \"a\", \"aaa\", \"cd\", \"bb\", \"b\", \"a\", \"a\", \"a\",\
    \ \"a\", \"a\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"bb\", \"b\nfunction candidate(...$args) {\n  \
    \  return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmppgfwd91p.php on line 60

    '
  timestamp: 1659730505
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($item)\
    \ {\n        return strlen($item) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_length_words = [];\n   \
    \ $even_length_words = [];\n    foreach ($lst as $word) {\n        if (strlen($word)\
    \ % 2 == 0) {\n            $even_length_words[] = $word;\n        } else {\n \
    \           $odd_length_words[] = $word;\n        }\n    }\n    sort($even_length_words);\n\
    \    sort($odd_length_words);\n    return array_merge($even_length_words, $odd_length_words);\n\
    }\n\n$lst = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\necho \"\
    \\n\";\n$lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n    [1] => a\n    [2] => aaa\n)\n\nArray\n(\n\
    \    [0] => ab\n    [1] => cd\n    [2] => a\n    [3] => aaa\n)\n\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp4gbxspfc.php:43\nStack trace:\n\
    #0 /tmp/tmp4gbxspfc.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp4gbxspfc.php\
    \ on line 43\n"
  timestamp: 1659730505
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $lst = array_filter($lst, function($x)\
    \ {\n    return strlen($x) % 2 == 0;\n  });\n  usort($lst, function($a, $b) {\n\
    \    if (strlen($a) == strlen($b)) {\n      return strcmp($a, $b);\n    }\n  \
    \  return strlen($a) - strlen($b);\n  });\n  return $lst;\n}\n\n$lst = array(\"\
    aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst =\
    \ array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"\\n\";\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_filter($lst, function($x) {\n        return strlen($x) % 2 ==\
    \ 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\n$lst = array(\"aa\", \"\
    a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw8owiq9n.php:43\n\
    Stack trace:\n#0 /tmp/tmpw8owiq9n.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpw8owiq9n.php\
    \ on line 43\n"
  timestamp: 1659730505
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($item)\
    \ {\n        return strlen($item) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = [];\n    foreach ($lst\
    \ as $item) {\n        if (strlen($item) % 2 == 0) {\n            $new_lst[] =\
    \ $item;\n        }\n    }\n    sort($new_lst);\n    return $new_lst;\n}\n\n$lst\
    \ = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n\
    $lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\necho\
    \ \"\\n\";\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv6_bjvja.php:46\n\
    Stack trace:\n#0 /tmp/tmpv6_bjvja.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpv6_bjvja.php\
    \ on line 46\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            array_push($new_lst,\
    \ $item);\n        }\n    }\n    sort($new_lst);\n    return $new_lst;\n}\n\n\
    $lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\
    \\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn0lymqmz.php:45\n\
    Stack trace:\n#0 /tmp/tmpn0lymqmz.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpn0lymqmz.php\
    \ on line 45\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\\
    n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqe6jvrc4.php:45\n\
    Stack trace:\n#0 /tmp/tmpqe6jvrc4.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqe6jvrc4.php\
    \ on line 45\n"
  timestamp: 1659730505
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($item)\
    \ {\n        return strlen($item) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($x)\
    \ { return strlen($x) % 2 == 0; });\n    sort($lst);\n    return $lst;\n}\n\n\
    $lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\
    \\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwffvnqyr.php:41\n\
    Stack trace:\n#0 /tmp/tmpwffvnqyr.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpwffvnqyr.php\
    \ on line 41\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_filter($lst, function($str) {\n        return strlen($str) %\
    \ 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpro71rudk.php:37\n\
    Stack trace:\n#0 /tmp/tmpro71rudk.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpro71rudk.php\
    \ on line 37\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            array_push($new_lst,\
    \ $item);\n        }\n    }\n    sort($new_lst);\n    return $new_lst;\n}\n\n\
    $lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\
    <br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveo17p2i.php:44\n\
    Stack trace:\n#0 /tmp/tmpveo17p2i.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpveo17p2i.php\
    \ on line 44\n"
  timestamp: 1659730505
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($str)\
    \ {\n        return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($item)\
    \ {\n        return strlen($item) % 2 == 0;\n    });\n    sort($lst);\n    return\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu8pr7eje.php:36\n\
    Stack trace:\n#0 /tmp/tmpu8pr7eje.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpu8pr7eje.php\
    \ on line 36\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_length_lst = array();\n\
    \    $even_length_lst = array();\n    foreach ($lst as $item) {\n        if (strlen($item)\
    \ % 2 == 0) {\n            array_push($even_length_lst, $item);\n        } else\
    \ {\n            array_push($odd_length_lst, $item);\n        }\n    }\n    sort($even_length_lst);\n\
    \    sort($odd_length_lst);\n    return array_merge($even_length_lst, $odd_length_lst);\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n    [1] => a\n    [2] => aaa\n)\n<br>Array\n(\n\
    \    [0] => ab\n    [1] => cd\n    [2] => a\n    [3] => aaa\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpjwv8cujb.php:42\nStack trace:\n\
    #0 /tmp/tmpjwv8cujb.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpjwv8cujb.php\
    \ on line 42\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_lst = array();\n    foreach\
    \ ($lst as $str) {\n        if (strlen($str) % 2 == 1) {\n            array_push($odd_lst,\
    \ $str);\n        }\n    }\n    sort($odd_lst);\n    return $odd_lst;\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"bb\", \"\
    bbb\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"b\", \"bb\", \"bbb\", \"c\", \"cc\", \"ccc\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => a\n    [1] => aaa\n)\n<br>Array\n(\n    [0] => a\n\
    \    [1] => aaa\n)\n<br>Array\n(\n    [0] => a\n    [1] => aaa\n    [2] => b\n\
    \    [3] => bbb\n)\n<br>Array\n(\n    [0] => a\n    [1] => aaa\n    [2] => b\n\
    \    [3] => bbb\n    [4] => c\n    [5] => ccc\n)\n<br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp2oboyahs.php:45\nStack trace:\n#0 /tmp/tmp2oboyahs.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp2oboyahs.php on line 45\n"
  timestamp: 1659730505
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $lst = array_filter($lst, function($x)\
    \ {\n    return strlen($x) % 2 == 0;\n  });\n  usort($lst, function($a, $b) {\n\
    \    if (strlen($a) == strlen($b)) {\n      return strcmp($a, $b);\n    }\n  \
    \  return strlen($a) - strlen($b);\n  });\n  return $lst;\n}\n\n$lst = array(\"\
    aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst =\
    \ array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = [];\n    foreach ($lst\
    \ as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[] =\
    \ $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = [\"aa\", \"a\", \"aaa\"];\n$result = sorted_list_sum($lst);\nprint_r($result);\n\
    \n$lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\n$result = sorted_list_sum($lst);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj8oxkuqr.php:46\nStack\
    \ trace:\n#0 /tmp/tmpj8oxkuqr.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpj8oxkuqr.php\
    \ on line 46\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            array_push($new_lst,\
    \ $item);\n        }\n    }\n    sort($new_lst);\n    return $new_lst;\n}\n\n\
    $lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\
    \\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplpvd3_ph.php:46\n\
    Stack trace:\n#0 /tmp/tmplpvd3_ph.php(49): test()\n#1 {main}\n  thrown in /tmp/tmplpvd3_ph.php\
    \ on line 46\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n$lst =\
    \ array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmphcu9uf7d.php:45\nStack\
    \ trace:\n#0 /tmp/tmphcu9uf7d.php(48): test()\n#1 {main}\n  thrown in /tmp/tmphcu9uf7d.php\
    \ on line 45\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = [];\n    foreach ($lst\
    \ as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[] =\
    \ $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = [\"aa\", \"a\", \"aaa\"];\n$result = sorted_list_sum($lst);\nprint_r($result);\n\
    \n$lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\n$result = sorted_list_sum($lst);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj8oxkuqr.php:46\nStack\
    \ trace:\n#0 /tmp/tmpj8oxkuqr.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpj8oxkuqr.php\
    \ on line 46\n"
  timestamp: 1659730505
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($x)\
    \ { return strlen($x) % 2 == 0; });\n    usort($lst, function($a, $b) {\n    \
    \    if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n   \
    \     }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    $lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n"
  timestamp: 1659730505
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($str)\
    \ {\n        return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $new_list = array();\n  foreach\
    \ ($lst as $item) {\n    if (strlen($item) % 2 == 0) {\n      array_push($new_list,\
    \ $item);\n    }\n  }\n  sort($new_list);\n  return $new_list;\n}\n\n$lst = array(\"\
    aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n\n$lst\
    \ = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp59_6n7ok.php:46\n\
    Stack trace:\n#0 /tmp/tmp59_6n7ok.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp59_6n7ok.php\
    \ on line 46\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_lst = [];\n    foreach ($lst\
    \ as $item) {\n        if (strlen($item) % 2 == 1) {\n            $odd_lst[] =\
    \ $item;\n        }\n    }\n    sort($odd_lst);\n    return $odd_lst;\n}\n\n$lst\
    \ = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n\
    $lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\necho\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => a\n    [1] => aaa\n)\n\nArray\n(\n    [0] => a\n \
    \   [1] => aaa\n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxgz6bj0i.php:39\n\
    Stack trace:\n#0 /tmp/tmpxgz6bj0i.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpxgz6bj0i.php\
    \ on line 39\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = [];\n    foreach ($lst\
    \ as $item) {\n        if (strlen($item) % 2 == 0) {\n            $new_lst[] =\
    \ $item;\n        }\n    }\n    sort($new_lst);\n    return $new_lst;\n}\n\n$lst\
    \ = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\n$lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"bb\"];\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"bb\", \"c\",\
    \ \"cc\", \"d\", \"dd\"];\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n<br>Array\n(\n    [0] => ab\n    [1] => bb\n    [2] => cd\n)\n<br>Array\n(\n\
    \    [0] => ab\n    [1] => bb\n    [2] => cc\n    [3] => cd\n    [4] => dd\n)\n\
    <br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp04kb9ev1.php:51\n\
    Stack trace:\n#0 /tmp/tmp04kb9ev1.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp04kb9ev1.php\
    \ on line 51\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($x)\
    \ { return strlen($x) % 2 == 0; });\n    sort($lst);\n    return $lst;\n}\n\n\
    $lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\
    \\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8v_a5yfu.php:40\n\
    Stack trace:\n#0 /tmp/tmp8v_a5yfu.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp8v_a5yfu.php\
    \ on line 40\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\\
    n\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\nfunction candidate(...$args) {\n \
    \   return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpeabflo94.php on line 42

    '
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[]\
    \ = $item;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvovd4v3t.php:33\n\
    Stack trace:\n#0 /tmp/tmpvovd4v3t.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpvovd4v3t.php\
    \ on line 33\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            array_push($new_lst,\
    \ $item);\n        }\n    }\n    sort($new_lst);\n    return $new_lst;\n}\n\n\
    $lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\
    <br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"c\");\n\
    print_r(sorted_list_sum($lst));\necho \"<br>\";\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n)\n<br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpshb8xs_l.php:49\nStack trace:\n#0 /tmp/tmpshb8xs_l.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpshb8xs_l.php on line 49\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_lst = array();\n    foreach\
    \ ($lst as $word) {\n        if (strlen($word) % 2 == 0) {\n            array_push($odd_lst,\
    \ $word);\n        }\n    }\n    sort($odd_lst);\n    return $odd_lst;\n}\n\n\
    $lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\
    \\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz4fnl5za.php:45\n\
    Stack trace:\n#0 /tmp/tmpz4fnl5za.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpz4fnl5za.php\
    \ on line 45\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($x)\
    \ {\n        return strlen($x) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_length_words = [];\n   \
    \ foreach ($lst as $word) {\n        if (strlen($word) % 2 == 1) {\n         \
    \   $odd_length_words[] = $word;\n        }\n    }\n    sort($odd_length_words);\n\
    \    return $odd_length_words;\n}\n\n$lst = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => a\n    [1] => aaa\n)\n\nArray\n(\n    [0] => a\n \
    \   [1] => aaa\n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw3z4epka.php:40\n\
    Stack trace:\n#0 /tmp/tmpw3z4epka.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpw3z4epka.php\
    \ on line 40\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($str)\
    \ {\n        return strlen($str) % 2 == 0;\n    });\n    sort($lst);\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"\\\
    n\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\",\
    \ \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\n$lst = array(\"ab\", \"a\nfunction candidate(...$args) {\n  \
    \  return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7j6kscdr.php on line 59

    '
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_filter($lst, function($x) {\n        return strlen($x) % 2 ==\
    \ 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\n$lst = array(\"aa\", \"\
    a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw8owiq9n.php:43\n\
    Stack trace:\n#0 /tmp/tmpw8owiq9n.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpw8owiq9n.php\
    \ on line 43\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($item)\
    \ {\n        return strlen($item) % 2 == 0;\n    });\n    sort($lst);\n    return\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu8pr7eje.php:36\n\
    Stack trace:\n#0 /tmp/tmpu8pr7eje.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpu8pr7eje.php\
    \ on line 36\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($item)\
    \ {\n        return strlen($item) % 2 == 0;\n    });\n    sort($lst);\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb_rkp523.php:42\n\
    Stack trace:\n#0 /tmp/tmpb_rkp523.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb_rkp523.php\
    \ on line 42\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"abcd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"abcd\", \"abc\"\
    );\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n<br>Array\n(\n    [0] => ab\n    [1] => abcd\n    [2] => cd\n)\n<br>Array\n\
    (\n    [0] => ab\n    [1] => abcd\n    [2] => cd\n)\n<br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpgtjpp6pj.php:51\nStack trace:\n#0 /tmp/tmpgtjpp6pj.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgtjpp6pj.php on line 51\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\\
    n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqe6jvrc4.php:45\n\
    Stack trace:\n#0 /tmp/tmpqe6jvrc4.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqe6jvrc4.php\
    \ on line 45\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($str)\
    \ {\n        return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    );\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\"\
    , \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"ab\", \"\
    a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\",\
    \ \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\");\nprint_r(s\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpk9oa83u3.php on line 50

    '
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_lst = array();\n    foreach\
    \ ($lst as $word) {\n        if (strlen($word) % 2 == 0) {\n            array_push($odd_lst,\
    \ $word);\n        }\n    }\n    sort($odd_lst);\n    return $odd_lst;\n}\n\n\
    $lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\
    \\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz4fnl5za.php:45\n\
    Stack trace:\n#0 /tmp/tmpz4fnl5za.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpz4fnl5za.php\
    \ on line 45\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\\
    n\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgg9hnwru.php:47\n\
    Stack trace:\n#0 /tmp/tmpgg9hnwru.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpgg9hnwru.php\
    \ on line 47\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_lst = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            array_push($odd_lst,\
    \ $item);\n        }\n    }\n    sort($odd_lst);\n    return $odd_lst;\n}\n\n\
    $lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\
    \\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1qs725x2.php:45\n\
    Stack trace:\n#0 /tmp/tmp1qs725x2.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp1qs725x2.php\
    \ on line 45\n"
  timestamp: 1659730505
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $lst = array_filter($lst, function($str)\
    \ {\n    return strlen($str) % 2 == 0;\n  });\n  usort($lst, function($a, $b)\
    \ {\n    if (strlen($a) == strlen($b)) {\n      return strcmp($a, $b);\n    }\n\
    \    return strlen($a) - strlen($b);\n  });\n  return $lst;\n}\n\n$lst = array(\"\
    aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n$lst = array(\"ab\",\
    \ \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"abc\", \"abcd\"\
    );\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\"\
    , \"aaa\", \"cd\", \"abc\", \"abcd\", \"abcde\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst\
    \ = array(\"ab\", \"a\", \"aaa\", \"cd\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"abc\", \"abcd\", \"abcde\",\
    \ \"\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpup15stpo.php on line 58

    '
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n$lst =\
    \ array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmphcu9uf7d.php:45\nStack\
    \ trace:\n#0 /tmp/tmphcu9uf7d.php(48): test()\n#1 {main}\n  thrown in /tmp/tmphcu9uf7d.php\
    \ on line 45\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($x)\
    \ {\n        return strlen($x) % 2 == 0;\n    });\n    sort($lst);\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    \nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4w6s4opc.php:42\nStack\
    \ trace:\n#0 /tmp/tmp4w6s4opc.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp4w6s4opc.php\
    \ on line 42\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst_len = count($lst);\n   \
    \ $lst_sum = 0;\n    for ($i = 0; $i < $lst_len; $i++) {\n        $lst_sum +=\
    \ $lst[$i];\n    }\n    return $lst_sum;\n}\n\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpieqnrkyb.php on line\
    \ 21\n\nWarning: A non-numeric value encountered in /tmp/tmpieqnrkyb.php on line\
    \ 21\n\nWarning: A non-numeric value encountered in /tmp/tmpieqnrkyb.php on line\
    \ 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpieqnrkyb.php:31\n\
    Stack trace:\n#0 /tmp/tmpieqnrkyb.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpieqnrkyb.php\
    \ on line 31\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $sum = 0;\n    foreach ($lst\
    \ as $num) {\n        $sum += $num;\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpoada_fq1.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmpoada_fq1.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmpoada_fq1.php on line\
    \ 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoada_fq1.php:30\n\
    Stack trace:\n#0 /tmp/tmpoada_fq1.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpoada_fq1.php\
    \ on line 30\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[]\
    \ = $item;\n        }\n    }\n    return $result;\n}\n\n$lst = array(\"aa\", \"\
    a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptgzgqxcw.php:39\n\
    Stack trace:\n#0 /tmp/tmptgzgqxcw.php(47): test()\n#1 {main}\n  thrown in /tmp/tmptgzgqxcw.php\
    \ on line 39\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $sum = 0;\n    foreach ($lst\
    \ as $item) {\n        $sum += $item;\n    }\n    return $sum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpegiri8no.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmpegiri8no.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmpegiri8no.php on line\
    \ 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpegiri8no.php:30\n\
    Stack trace:\n#0 /tmp/tmpegiri8no.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpegiri8no.php\
    \ on line 30\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($str)\
    \ {\n        return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"a\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"a\", \"ab\"\
    );\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst = array(\"ab\", \"a\"\
    , \"aaa\", \"cd\", \"b\", \"a\", \"ab\", \"a\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"a\", \"ab\"\
    , \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"b\", \"a\", \"ab\", \"a\", \"aaa\", \"cd\");\n\
    print_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\", \"b\", \"a\", \"ab\", \"a\", \"aaa\", \"cd\", \"b\");\nprint\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpktzkxq7_.php on line 56

    '
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n$lst =\
    \ array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n\
    $lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"abcd\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"abcd\", \"abcde\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"abcd\", \"abcde\", \"abcdef\"\
    );\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"\
    cd\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\", \"abcdefgh\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\
    abcdefgh\", \"abcdefghi\", \"abcdefghij\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvrb1bry0.php on line 61

    '
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $lst = array_map('strlen', $lst);\n    sort($lst);\n\
    \    return $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqrxexbx4.php:30\n\
    Stack trace:\n#0 /tmp/tmpqrxexbx4.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpqrxexbx4.php\
    \ on line 30\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n$lst =\
    \ array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n\
    $lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"a\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"a\", \"a\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"a\", \"a\", \"a\");\n\
    print_r(sorted_list_sum($lst));\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\"\
    , \"b\", \"a\", \"a\", \"a\", \"a\");\nprint_r(sorted_list_sum($lst));\n\n$lst\
    \ = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"a\", \"a\", \"a\", \"a\", \"\
    a\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\");\nprint_r(sorted_list_sum($lst));\n\n$l\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpkd56nqi7.php on line 59

    '
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = array();\n    foreach\
    \ ($lst as $key => $value) {\n        if (strlen($value) % 2 == 0) {\n       \
    \     array_push($new_lst, $value);\n        }\n    }\n    sort($new_lst);\n \
    \   return $new_lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplsd_a7cv.php:45\n\
    Stack trace:\n#0 /tmp/tmplsd_a7cv.php(48): test()\n#1 {main}\n  thrown in /tmp/tmplsd_a7cv.php\
    \ on line 45\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($str)\
    \ {\n        return strlen($str) % 2 == 0;\n    });\n    sort($lst);\n    return\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ynpad8j.php:36\n\
    Stack trace:\n#0 /tmp/tmp5ynpad8j.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp5ynpad8j.php\
    \ on line 36\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_list = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            array_push($new_list,\
    \ $item);\n        }\n    }\n    sort($new_list);\n    return $new_list;\n}\n\n\
    $lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n$lst\
    \ = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuv2p42uj.php:45\nStack\
    \ trace:\n#0 /tmp/tmpuv2p42uj.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpuv2p42uj.php\
    \ on line 45\n"
  timestamp: 1659730505
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($item)\
    \ {\n        return strlen($item) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($item)\
    \ {\n        return strlen($item) % 2 == 0;\n    });\n    sort($lst);\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\n$lst = array(\"ab\", \"a\"\
    , \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => ab\n    [1] => cd\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpkefi1nqu.php:39\nStack trace:\n#0 /tmp/tmpkefi1nqu.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpkefi1nqu.php on line 39\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst_len = count($lst);\n   \
    \ $sum = 0;\n    for ($i = 0; $i < $lst_len; $i++) {\n        $sum += $lst[$i];\n\
    \    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmppe3f6xp3.php on line\
    \ 21\n\nWarning: A non-numeric value encountered in /tmp/tmppe3f6xp3.php on line\
    \ 21\n\nWarning: A non-numeric value encountered in /tmp/tmppe3f6xp3.php on line\
    \ 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppe3f6xp3.php:31\n\
    Stack trace:\n#0 /tmp/tmppe3f6xp3.php(40): test()\n#1 {main}\n  thrown in /tmp/tmppe3f6xp3.php\
    \ on line 31\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($x)\
    \ {\n        return strlen($x) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($str)\
    \ {\n        return strlen($str) % 2 == 0;\n    });\n    sort($lst);\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\necho \"list_sort(array(\\\
    \"aa\\\", \\\"a\\\", \\\"aaa\\\"))\\n\";\nprint_r(sorted_list_sum($lst));\necho\
    \ \"\\n\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\necho \"list_sort(array(\\\
    \"ab\\\", \\\"a\\\", \\\"aaa\\\", \\\"cd\\\"))\\n\";\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "list_sort(array(\"aa\", \"a\", \"aaa\"))\nArray\n(\n    [0] => aa\n)\n\n\
    list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\nArray\n(\n    [0] => ab\n  \
    \  [1] => cd\n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpol9ier3d.php:45\n\
    Stack trace:\n#0 /tmp/tmpol9ier3d.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpol9ier3d.php\
    \ on line 45\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $lst = array_map('strlen', $lst);\n    sort($lst);\n\
    \    return $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqrxexbx4.php:30\n\
    Stack trace:\n#0 /tmp/tmpqrxexbx4.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpqrxexbx4.php\
    \ on line 30\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($x)\
    \ {\n        return strlen($x) % 2 == 0;\n    });\n    sort($lst);\n    return\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpshhof7b1.php:36\n\
    Stack trace:\n#0 /tmp/tmpshhof7b1.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpshhof7b1.php\
    \ on line 36\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($x)\
    \ {\n        return strlen($x) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($x)\
    \ { return strlen($x) % 2 == 0; });\n    sort($lst);\n    return $lst;\n}\n\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpezd4qoxc.php:34\n\
    Stack trace:\n#0 /tmp/tmpezd4qoxc.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpezd4qoxc.php\
    \ on line 34\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($x)\
    \ { return strlen($x) % 2 == 0; });\n    $lst = array_unique($lst);\n    $lst\
    \ = array_values($lst);\n    usort($lst, function($a, $b) {\n        if (strlen($a)\
    \ == strlen($b)) {\n            return strcmp($a, $b);\n        }\n        return\
    \ strlen($a) - strlen($b);\n    });\n    return $lst;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($str)\
    \ {\n        return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_list = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            array_push($new_list,\
    \ $item);\n        }\n    }\n    sort($new_list);\n    return $new_list;\n}\n\n\
    $lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpm_pbfk0i.php:41\nStack trace:\n#0 /tmp/tmpm_pbfk0i.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmpm_pbfk0i.php on line 41\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($str)\
    \ {\n        return strlen($str) % 2 === 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) === strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $sorted_list = array();\n   \
    \ foreach ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n         \
    \   array_push($sorted_list, $item);\n        }\n    }\n    sort($sorted_list);\n\
    \    return $sorted_list;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    \nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp2jriz_da.php:42\nStack trace:\n#0 /tmp/tmp2jriz_da.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmp2jriz_da.php on line 42\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_filter($lst, function($x) {\n        return strlen($x) % 2 ==\
    \ 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp69mzkrw9.php:37\n\
    Stack trace:\n#0 /tmp/tmp69mzkrw9.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp69mzkrw9.php\
    \ on line 37\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\\
    n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqe6jvrc4.php:45\n\
    Stack trace:\n#0 /tmp/tmpqe6jvrc4.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqe6jvrc4.php\
    \ on line 45\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_length_words = [];\n   \
    \ foreach ($lst as $word) {\n        if (strlen($word) % 2 == 1) {\n         \
    \   $odd_length_words[] = $word;\n        }\n    }\n    sort($odd_length_words);\n\
    \    return $odd_length_words;\n}\n\n$lst = [\"aa\", \"a\", \"aaa\"];\n$lst2 =\
    \ [\"ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\nprint_r(sorted_list_sum($lst2));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => a\n    [1] => aaa\n)\nArray\n(\n    [0] => a\n   \
    \ [1] => aaa\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppv7ct14w.php:37\n\
    Stack trace:\n#0 /tmp/tmppv7ct14w.php(46): test()\n#1 {main}\n  thrown in /tmp/tmppv7ct14w.php\
    \ on line 37\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($item)\
    \ {\n        return strlen($item) % 2 == 0;\n    });\n    sort($lst);\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb_rkp523.php:42\n\
    Stack trace:\n#0 /tmp/tmpb_rkp523.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb_rkp523.php\
    \ on line 42\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_filter($lst, function($x) {\n        return strlen($x) % 2 ==\
    \ 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\n$lst = array(\"aa\", \"\
    a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw8owiq9n.php:43\n\
    Stack trace:\n#0 /tmp/tmpw8owiq9n.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpw8owiq9n.php\
    \ on line 43\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $lst = array_map('strlen', $lst);\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    sort($lst);\n   \
    \ return $lst;\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4lc_v_b7.php:31\n\
    Stack trace:\n#0 /tmp/tmp4lc_v_b7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp4lc_v_b7.php\
    \ on line 31\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = [];\n    foreach ($lst\
    \ as $item) {\n        if (strlen($item) % 2 == 0) {\n            $new_lst[] =\
    \ $item;\n        }\n    }\n    sort($new_lst);\n    return $new_lst;\n}\n\n$lst\
    \ = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\n$lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\",\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmppwurzkal.php on line 35

    '
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = [];\n    foreach ($lst\
    \ as $item) {\n        if (strlen($item) % 2 == 0) {\n            $new_lst[] =\
    \ $item;\n        }\n    }\n    sort($new_lst);\n    return $new_lst;\n}\n\n$lst\
    \ = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n\
    $lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\necho\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2y0lemf.php:45\n\
    Stack trace:\n#0 /tmp/tmpb2y0lemf.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpb2y0lemf.php\
    \ on line 45\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\\
    n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqe6jvrc4.php:45\n\
    Stack trace:\n#0 /tmp/tmpqe6jvrc4.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqe6jvrc4.php\
    \ on line 45\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $arr = array();\n    foreach\
    \ ($lst as $item) {\n        $arr[] = strlen($item);\n    }\n    sort($arr);\n\
    \    return $arr;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"aab\", \"aac\"\
    );\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n\n$lst = array(\"ab\", \"\
    a\", \"aaa\", \"cd\", \"aab\", \"aac\", \"a\", \"aaa\", \"cd\", \"aab\", \"aac\"\
    );\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n\n$lst = array(\"ab\", \"\
    a\", \"aaa\", \"cd\", \"aab\", \"aac\", \"a\", \"aaa\", \"cd\", \"aab\", \"aac\"\
    , \"a\", \"aaa\", \"cd\", \"aab\", \"aac\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"aab\", \"aac\"\
    , \"a\", \"aaa\", \"cd\", \"aab\", \"aac\", \"a\", \"aaa\", \"cd\", \"aab\", \"\
    aac\", \"a\", \"aaa\", \"cd\", \"aab\", \"aac\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"aab\", \"aac\"\
    , \"a\", \"aaa\", \"cd\", \"aab\", \"aac\", \"a\", \"aaa\", \"cd\", \"aab\", \"\
    aac\", \"a\", \"aaa\", \"cd\", \"aab\", \"aac\", \"a\", \"aaa\", \"cd\", \"aab\"\
    , \"aac\");\nprint_r(\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpuvqsvuos.php on line 52

    '
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst_len = count($lst);\n   \
    \ $sum = 0;\n    for ($i = 0; $i < $lst_len; $i++) {\n        $sum += $lst[$i];\n\
    \    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmppe3f6xp3.php on line\
    \ 21\n\nWarning: A non-numeric value encountered in /tmp/tmppe3f6xp3.php on line\
    \ 21\n\nWarning: A non-numeric value encountered in /tmp/tmppe3f6xp3.php on line\
    \ 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppe3f6xp3.php:31\n\
    Stack trace:\n#0 /tmp/tmppe3f6xp3.php(40): test()\n#1 {main}\n  thrown in /tmp/tmppe3f6xp3.php\
    \ on line 31\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($x)\
    \ {\n        return strlen($x) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        $len_a = strlen($a);\n        $len_b = strlen($b);\n        if\
    \ ($len_a == $len_b) {\n            return strcmp($a, $b);\n        }\n      \
    \  return $len_a - $len_b;\n    });\n    return $lst;\n}\n\n$lst = array(\"aa\"\
    , \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst_len = count($lst);\n   \
    \ $odd_lst = array();\n    $even_lst = array();\n    for ($i = 0; $i < $lst_len;\
    \ $i++) {\n        if (strlen($lst[$i]) % 2 == 0) {\n            array_push($even_lst,\
    \ $lst[$i]);\n        } else {\n            array_push($odd_lst, $lst[$i]);\n\
    \        }\n    }\n    sort($even_lst);\n    return $even_lst;\n}\n\n$lst = array(\"\
    aa\", \"a\", \"aaa\");\n$lst2 = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    print_r(sorted_list_sum($lst2));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp242ywxz0.php:47\nStack\
    \ trace:\n#0 /tmp/tmp242ywxz0.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp242ywxz0.php\
    \ on line 47\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($e)\
    \ { return strlen($e) % 2 == 0; });\n    usort($lst, function($a, $b) {\n    \
    \    $len_cmp = strlen($a) - strlen($b);\n        if ($len_cmp != 0) {\n     \
    \       return $len_cmp;\n        } else {\n            return strcmp($a, $b);\n\
    \        }\n    });\n    return $lst;\n}\n\nfunction candidate(...$args) {\n \
    \   return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($item)\
    \ {\n        return strlen($item) % 2 == 0;\n    });\n    sort($lst);\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    \nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqn85dces.php:42\nStack\
    \ trace:\n#0 /tmp/tmpqn85dces.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpqn85dces.php\
    \ on line 42\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_lst = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            array_push($odd_lst,\
    \ $item);\n        }\n    }\n    sort($odd_lst);\n    return $odd_lst;\n}\n\n\
    $lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\
    \\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1qs725x2.php:45\n\
    Stack trace:\n#0 /tmp/tmp1qs725x2.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp1qs725x2.php\
    \ on line 45\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($x)\
    \ { return strlen($x) % 2 == 0; });\n    sort($lst);\n    return $lst;\n}\n\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpezd4qoxc.php:34\n\
    Stack trace:\n#0 /tmp/tmpezd4qoxc.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpezd4qoxc.php\
    \ on line 34\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\\
    n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqe6jvrc4.php:45\n\
    Stack trace:\n#0 /tmp/tmpqe6jvrc4.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqe6jvrc4.php\
    \ on line 45\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($item)\
    \ {\n        return strlen($item) % 2 == 0;\n    });\n    sort($lst);\n    return\
    \ $lst;\n}\n\n$lst = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppjxbzs16.php:42\n\
    Stack trace:\n#0 /tmp/tmppjxbzs16.php(45): test()\n#1 {main}\n  thrown in /tmp/tmppjxbzs16.php\
    \ on line 42\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\\
    n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqsomwypz.php:46\n\
    Stack trace:\n#0 /tmp/tmpqsomwypz.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpqsomwypz.php\
    \ on line 46\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = [];\n    foreach ($lst\
    \ as $item) {\n        if (strlen($item) % 2 == 0) {\n            $new_lst[] =\
    \ $item;\n        }\n    }\n    sort($new_lst);\n    return $new_lst;\n}\n\n$lst\
    \ = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n\
    $lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\necho\
    \ \"\\n\";\n$lst = [\"aa\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = [\"aa\", \"a\", \"aaa\", \"cd\", \"c\"];\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = [\"aa\", \"a\", \"aaa\", \"cd\", \"c\", \"a\"];\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = [\"aa\", \"a\", \"aaa\", \"cd\", \"c\", \"a\", \"b\"];\n\
    print_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst = [\"aa\", \"a\", \"aaa\"\
    , \"cd\", \"c\", \"a\", \"b\", \"b\"];\nprint_r(sorted_list_sum($lst));\necho\
    \ \"\\n\";\n$lst = [\"aa\", \"a\", \"aaa\", \"cd\", \"c\", \"a\", \"b\", \"b\"\
    , \"b\"];\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst = [\"aa\", \"\
    a\", \"aaa\", \"cd\", \"c\", \"a\", \"b\", \"b\", \"b\", \"b\"];\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = [\"aa\", \"a\", \"aaa\", \"cd\", \"c\", \"a\", \"b\", \"\
    b\", \"b\", \"b\",\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5yk_drcl.php on line 56

    '
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            array_push($new_lst,\
    \ $item);\n        }\n    }\n    sort($new_lst);\n    return $new_lst;\n}\n\n\
    $lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\
    <br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5xofbs9o.php:45\n\
    Stack trace:\n#0 /tmp/tmp5xofbs9o.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp5xofbs9o.php\
    \ on line 45\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($item)\
    \ {\n        return strlen($item) % 2 == 0;\n    });\n    sort($lst);\n    return\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu8pr7eje.php:36\n\
    Stack trace:\n#0 /tmp/tmpu8pr7eje.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpu8pr7eje.php\
    \ on line 36\n"
  timestamp: 1659730505
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($item)\
    \ {\n        return strlen($item) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    $lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\\
    n\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"\\\
    n\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\",\
    \ \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7iuhz05c.php on line 60

    '
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $new_lst = [];\n  foreach ($lst\
    \ as $item) {\n    if (strlen($item) % 2 == 0) {\n      $new_lst[] = $item;\n\
    \    }\n  }\n  sort($new_lst);\n  return $new_lst;\n}\n\n$lst = [\"aa\", \"a\"\
    , \"aaa\"];\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst = [\"ab\", \"\
    a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpup8v4ppb.php:46\n\
    Stack trace:\n#0 /tmp/tmpup8v4ppb.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpup8v4ppb.php\
    \ on line 46\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $sum = 0;\n    foreach ($lst\
    \ as $item) {\n        $sum += $item;\n    }\n    return $sum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpegiri8no.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmpegiri8no.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmpegiri8no.php on line\
    \ 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpegiri8no.php:30\n\
    Stack trace:\n#0 /tmp/tmpegiri8no.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpegiri8no.php\
    \ on line 30\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_lst = array();\n    foreach\
    \ ($lst as $word) {\n        if (strlen($word) % 2 == 0) {\n            array_push($odd_lst,\
    \ $word);\n        }\n    }\n    sort($odd_lst);\n    return $odd_lst;\n}\n\n\
    $lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n$lst\
    \ = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkpjiw3ri.php:45\nStack\
    \ trace:\n#0 /tmp/tmpkpjiw3ri.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpkpjiw3ri.php\
    \ on line 45\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $lst = array_filter($lst, function($x)\
    \ {\n    return strlen($x) % 2 == 0;\n  });\n  usort($lst, function($a, $b) {\n\
    \    if (strlen($a) == strlen($b)) {\n      return strcmp($a, $b);\n    }\n  \
    \  return strlen($a) - strlen($b);\n  });\n  return $lst;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($item)\
    \ {\n        return strlen($item) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($item)\
    \ {\n        return strlen($item) % 2 == 0;\n    });\n    sort($lst);\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb_rkp523.php:42\n\
    Stack trace:\n#0 /tmp/tmpb_rkp523.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb_rkp523.php\
    \ on line 42\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\\
    n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqe6jvrc4.php:45\n\
    Stack trace:\n#0 /tmp/tmpqe6jvrc4.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqe6jvrc4.php\
    \ on line 45\n"
  timestamp: 1659730505
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($str)\
    \ {\n        return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        $len_a = strlen($a);\n        $len_b = strlen($b);\n        if\
    \ ($len_a == $len_b) {\n            return strcmp($a, $b);\n        }\n      \
    \  return $len_a - $len_b;\n    });\n    return $lst;\n}\n\n$lst = array(\"aa\"\
    , \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\"\
    ;\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"bbb\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"bbb\", \"ccc\");\n\
    print_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\", \"bbb\", \"ccc\", \"ddd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"bbb\", \"ccc\",\
    \ \"ddd\", \"eee\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"bbb\", \"ccc\", \"ddd\", \"eee\", \"fff\");\n\
    print_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\", \"bbb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\nArray\n(\n    [0] => ab\n  \
    \  [1] => cd\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\nArray\n(\n   \
    \ [0] => ab\n    [1] => cd\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\n\
    Array\n(\n    [0] => ab\n    [1] => cd\n)\n\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($item)\
    \ {\n        return strlen($item) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1659730505
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($str)\
    \ {\n        return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst_len = count($lst);\n   \
    \ $sum = 0;\n    for ($i = 0; $i < $lst_len; $i++) {\n        $sum += $lst[$i];\n\
    \    }\n    return $sum;\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpq6x18h3q.php on line\
    \ 21\n\nWarning: A non-numeric value encountered in /tmp/tmpq6x18h3q.php on line\
    \ 21\n\nWarning: A non-numeric value encountered in /tmp/tmpq6x18h3q.php on line\
    \ 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq6x18h3q.php:30\n\
    Stack trace:\n#0 /tmp/tmpq6x18h3q.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpq6x18h3q.php\
    \ on line 30\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $lst = array_filter($lst, function($x)\
    \ {\n    return strlen($x) % 2 == 0;\n  });\n  usort($lst, function($a, $b) {\n\
    \    if (strlen($a) == strlen($b)) {\n      return strcmp($a, $b);\n    }\n  \
    \  return strlen($a) - strlen($b);\n  });\n  return $lst;\n}\n\n$lst = array(\"\
    aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"ab\"\
    , \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = [];\n    foreach ($lst\
    \ as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[] =\
    \ $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n$lst =\
    \ [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp_c5o08_z.php:40\nStack trace:\n#0 /tmp/tmp_c5o08_z.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmp_c5o08_z.php on line 40\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = [];\n    foreach ($lst\
    \ as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[] =\
    \ $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\n\n$lst = [\"ab\"\
    , \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp_j057g0.php:44\nStack\
    \ trace:\n#0 /tmp/tmpp_j057g0.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpp_j057g0.php\
    \ on line 44\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($x)\
    \ {\n        return strlen($x) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $sorted_lst = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            array_push($sorted_lst,\
    \ $item);\n        }\n    }\n    sort($sorted_lst);\n    return $sorted_lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeuj04j7a.php:45\n\
    Stack trace:\n#0 /tmp/tmpeuj04j7a.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpeuj04j7a.php\
    \ on line 45\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($str)\
    \ {\n        return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    $lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    \nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = [];\n    foreach ($lst\
    \ as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[] =\
    \ $item;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ea6vs8p.php:33\n\
    Stack trace:\n#0 /tmp/tmp4ea6vs8p.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp4ea6vs8p.php\
    \ on line 33\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($x)\
    \ { return strlen($x) % 2 == 0; });\n    usort($lst, function($a, $b) {\n    \
    \    if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n   \
    \     }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n\
    $lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"c\", \"d\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"c\", \"d\", \"aa\");\n\
    print_r(sorted_list_sum($lst));\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\"\
    , \"b\", \"c\", \"d\", \"aa\", \"a\");\nprint_r(sorted_list_sum($lst));\n\n$lst\
    \ = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"c\", \"d\", \"aa\", \"a\",\
    \ \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\", \"b\", \"c\", \"d\", \"aa\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"c\", \"d\", \"aa\", \"\
    a\", \"aaa\", \"cd\", \"b\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"b\", \"c\", \"d\", \"aa\", \"a\", \"aaa\", \"\
    cd\", \"b\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_e4xjwbg.php on line 58

    '
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_lst = array();\n    $even_lst\
    \ = array();\n    foreach ($lst as $word) {\n        if (strlen($word) % 2 ==\
    \ 0) {\n            array_push($even_lst, $word);\n        } else {\n        \
    \    array_push($odd_lst, $word);\n        }\n    }\n    sort($even_lst);\n  \
    \  return $even_lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    \nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmplz7wqt48.php:45\nStack trace:\n#0 /tmp/tmplz7wqt48.php(48): test()\n\
    #1 {main}\n  thrown in /tmp/tmplz7wqt48.php on line 45\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($str)\
    \ {\n        return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_lst = array();\n    foreach\
    \ ($lst as $word) {\n        if (strlen($word) % 2 == 0) {\n            array_push($odd_lst,\
    \ $word);\n        }\n    }\n    sort($odd_lst);\n    return $odd_lst;\n}\n\n\
    $lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\
    <br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp502tt35.php:44\n\
    Stack trace:\n#0 /tmp/tmpp502tt35.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpp502tt35.php\
    \ on line 44\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_lst = [];\n    foreach ($lst\
    \ as $item) {\n        if (strlen($item) % 2 == 1) {\n            $odd_lst[] =\
    \ $item;\n        }\n    }\n    sort($odd_lst);\n    return $odd_lst;\n}\n\n$lst\
    \ = [\"aa\", \"a\", \"aaa\"];\n$lst2 = [\"ab\", \"a\", \"aaa\", \"cd\"];\necho\
    \ \"<pre>\";\nprint_r(sorted_list_sum($lst));\necho \"</pre>\";\necho \"<pre>\"\
    ;\nprint_r(sorted_list_sum($lst2));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => a\n    [1] => aaa\n)\n</pre><pre>Array\n(\n \
    \   [0] => a\n    [1] => aaa\n)\n</pre>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmptyx6k6g4.php:41\nStack trace:\n#0 /tmp/tmptyx6k6g4.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptyx6k6g4.php on line 41\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($item)\
    \ {\n        return strlen($item) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1659730505
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($str)\
    \ {\n        return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($x)\
    \ {\n        return strlen($x) % 2 == 0;\n    });\n    sort($lst);\n    return\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpshhof7b1.php:36\n\
    Stack trace:\n#0 /tmp/tmpshhof7b1.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpshhof7b1.php\
    \ on line 36\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n$lst =\
    \ array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmphcu9uf7d.php:45\nStack\
    \ trace:\n#0 /tmp/tmphcu9uf7d.php(48): test()\n#1 {main}\n  thrown in /tmp/tmphcu9uf7d.php\
    \ on line 45\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_list = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            array_push($new_list,\
    \ $item);\n        }\n    }\n    sort($new_list);\n    return $new_list;\n}\n\
    $lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\
    <br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_2kz82jh.php:43\n\
    Stack trace:\n#0 /tmp/tmp_2kz82jh.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp_2kz82jh.php\
    \ on line 43\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($word)\
    \ {\n        return strlen($word) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"c\", \"d\"\
    );\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            array_push($new_lst,\
    \ $item);\n        }\n    }\n    sort($new_lst);\n    return $new_lst;\n}\n\n\
    $lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n$lst\
    \ = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpknjlcihl.php:44\nStack\
    \ trace:\n#0 /tmp/tmpknjlcihl.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpknjlcihl.php\
    \ on line 44\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = [];\n    foreach ($lst\
    \ as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[] =\
    \ $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\n\n$lst = [\"ab\"\
    , \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp_j057g0.php:44\nStack\
    \ trace:\n#0 /tmp/tmpp_j057g0.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpp_j057g0.php\
    \ on line 44\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $sorted_list = [];\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $sorted_list[]\
    \ = $item;\n        }\n    }\n    sort($sorted_list);\n    return $sorted_list;\n\
    }\n\n$lst = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\necho \"\
    \\n\";\n\n$lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\n$lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"bbb\", \"c\"\
    , \"ccc\"];\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n\n$lst = [\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"b\", \"bbb\", \"c\", \"ccc\", \"ddd\", \"d\", \"eee\"\
    , \"e\", \"ffff\", \"f\"];\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n\n\
    $lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"bbb\", \"c\", \"ccc\", \"ddd\"\
    , \"d\", \"eee\", \"e\", \"ffff\", \"f\", \"gggg\", \"g\", \"hhhh\", \"h\", \"\
    iiii\", \"i\", \"jjjj\", \"j\", \"kkkk\", \"k\", \"llll\", \"l\", \"mmmm\", \"\
    m\", \"nnnn\", \"n\", \"oooo\", \"o\", \"pppp\", \"p\", \"qqqq\", \"q\", \"rrrr\"\
    , \"r\", \"ssss\", \"s\", \"tttt\", \"t\", \"uuuu\", \"u\", \"vvvv\", \"v\", \"\
    wwww\", \"w\", \"xxxx\", \"x\", \"yyyy\", \"y\", \"zzzz\", \"z\"];\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\nArray\n(\n    [0] => ab\n  \
    \  [1] => cd\n    [2] => ffff\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n \
    \   [2] => ffff\n    [3] => gggg\n    [4] => hhhh\n    [5] => iiii\n    [6] =>\
    \ jjjj\n    [7] => kkkk\n    [8] => llll\n    [9] => mmmm\n    [10] => nnnn\n\
    \    [11] => oooo\n    [12] => pppp\n    [13] => qqqq\n    [14] => rrrr\n    [15]\
    \ => ssss\n    [16] => tttt\n    [17] => uuuu\n    [18] => vvvv\n    [19] => wwww\n\
    \    [20] => xxxx\n    [21] => yyyy\n    [22] => zzzz\n)\n\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpaoua45bw.php:58\nStack trace:\n#0 /tmp/tmpaoua45bw.php(61):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpaoua45bw.php on line 58\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($item)\
    \ {\n        return strlen($item) % 2 == 0;\n    });\n    sort($lst);\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\n$lst = array(\"ab\", \"a\"\
    , \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => ab\n    [1] => cd\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpkefi1nqu.php:39\nStack trace:\n#0 /tmp/tmpkefi1nqu.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpkefi1nqu.php on line 39\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($item)\
    \ {\n        return strlen($item) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odds = array();\n    foreach\
    \ ($lst as $word) {\n        if (strlen($word) % 2 == 1) {\n            $odds[]\
    \ = $word;\n        }\n    }\n    sort($odds);\n    return $odds;\n}\n\n$lst =\
    \ array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\"\
    ;\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => a\n    [1] => aaa\n)\n\nArray\n(\n    [0] => a\n \
    \   [1] => aaa\n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppo505eyi.php:39\n\
    Stack trace:\n#0 /tmp/tmppo505eyi.php(48): test()\n#1 {main}\n  thrown in /tmp/tmppo505eyi.php\
    \ on line 39\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            array_push($new_lst,\
    \ $item);\n        }\n    }\n    sort($new_lst);\n    return $new_lst;\n}\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpemnqig8o.php:40\nStack trace:\n#0 /tmp/tmpemnqig8o.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmpemnqig8o.php on line 40\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($str)\
    \ {\n        return strlen($str) % 2 == 0;\n    });\n    sort($lst);\n    return\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ynpad8j.php:36\n\
    Stack trace:\n#0 /tmp/tmp5ynpad8j.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp5ynpad8j.php\
    \ on line 36\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($item)\
    \ {\n        return strlen($item) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $lst = array_map('strlen', $lst);\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    sort($lst);\n   \
    \ return $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiv3aa7_k.php:32\n\
    Stack trace:\n#0 /tmp/tmpiv3aa7_k.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpiv3aa7_k.php\
    \ on line 32\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($str)\
    \ {\n        return strlen($str) % 2 == 0;\n    });\n    sort($lst);\n    return\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ynpad8j.php:36\n\
    Stack trace:\n#0 /tmp/tmp5ynpad8j.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp5ynpad8j.php\
    \ on line 36\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($item)\
    \ {\n        return strlen($item) % 2 == 0;\n    });\n    sort($lst);\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb_rkp523.php:42\n\
    Stack trace:\n#0 /tmp/tmpb_rkp523.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb_rkp523.php\
    \ on line 42\n"
  timestamp: 1659730505
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $lst = array_filter($lst, function($x)\
    \ {\n    return strlen($x) % 2 == 0;\n  });\n  usort($lst, function($a, $b) {\n\
    \    if (strlen($a) == strlen($b)) {\n      return strcmp($a, $b);\n    }\n  \
    \  return strlen($a) - strlen($b);\n  });\n  return $lst;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = [];\n    foreach ($lst\
    \ as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[] =\
    \ $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = [\"aa\", \"a\", \"aaa\"];\n$result = sorted_list_sum($lst);\nprint_r($result);\n\
    echo \"\\n\";\n\n$lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\n$result = sorted_list_sum($lst);\n\
    print_r($result);\necho \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7d3hsw_1.php:48\n\
    Stack trace:\n#0 /tmp/tmp7d3hsw_1.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp7d3hsw_1.php\
    \ on line 48\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"\
    cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\",\
    \ \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"\
    cd\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"\
    cd\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"cd\");\n\
    print_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\"\
    , \"cd\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"\
    cd\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpj5z7t416.php on line 55

    '
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = array();\n    foreach\
    \ ($lst as $val) {\n        if (strlen($val) % 2 == 0) {\n            array_push($new_lst,\
    \ $val);\n        }\n    }\n    sort($new_lst);\n    return $new_lst;\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\n$lst2 = array(\"ab\", \"a\", \"aaa\", \"cd\"\
    );\n\necho \"<pre>\";\nprint_r(sorted_list_sum($lst));\necho \"</pre>\";\n\necho\
    \ \"<pre>\";\nprint_r(sorted_list_sum($lst2));\necho \"</pre>\";\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => aa\n)\n</pre><pre>Array\n(\n    [0] => ab\n \
    \   [1] => cd\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptnvwjvik.php:50\n\
    Stack trace:\n#0 /tmp/tmptnvwjvik.php(53): test()\n#1 {main}\n  thrown in /tmp/tmptnvwjvik.php\
    \ on line 50\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_filter($lst, function($item) {\n        return strlen($item)\
    \ % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprwgn8da0.php:37\n\
    Stack trace:\n#0 /tmp/tmprwgn8da0.php(40): test()\n#1 {main}\n  thrown in /tmp/tmprwgn8da0.php\
    \ on line 37\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $lst_len = count($lst);\n  $lst_sum\
    \ = 0;\n  for ($i = 0; $i < $lst_len; $i++) {\n    $lst_sum += $lst[$i];\n  }\n\
    \  return $lst_sum;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpnsxge6ah.php on line\
    \ 21\n\nWarning: A non-numeric value encountered in /tmp/tmpnsxge6ah.php on line\
    \ 21\n\nWarning: A non-numeric value encountered in /tmp/tmpnsxge6ah.php on line\
    \ 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnsxge6ah.php:31\n\
    Stack trace:\n#0 /tmp/tmpnsxge6ah.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpnsxge6ah.php\
    \ on line 31\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $lst = array_map('strlen', $lst);\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    sort($lst);\n   \
    \ return $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiv3aa7_k.php:32\n\
    Stack trace:\n#0 /tmp/tmpiv3aa7_k.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpiv3aa7_k.php\
    \ on line 32\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($x)\
    \ {\n        return strlen($x) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            array_push($new_lst,\
    \ $item);\n        }\n    }\n    sort($new_lst);\n    return $new_lst;\n}\n\n\
    $lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n$lst\
    \ = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpawrx3jnk.php:45\nStack\
    \ trace:\n#0 /tmp/tmpawrx3jnk.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpawrx3jnk.php\
    \ on line 45\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($str)\
    \ {\n        return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730505
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($str)\
    \ {\n        return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\n$lst = array(\"ab\", \"a\"\
    , \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => ab\n    [1] => cd\n)\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($str)\
    \ {\n        return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            array_push($new_lst,\
    \ $item);\n        }\n    }\n    sort($new_lst);\n    return $new_lst;\n}\n\n\
    $lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\
    \\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn0lymqmz.php:45\n\
    Stack trace:\n#0 /tmp/tmpn0lymqmz.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpn0lymqmz.php\
    \ on line 45\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = array();\n    foreach\
    \ ($lst as $key => $value) {\n        if (strlen($value) % 2 == 0) {\n       \
    \     array_push($new_lst, $value);\n        }\n    }\n    sort($new_lst);\n \
    \   return $new_lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc3wwn3k7.php:44\n\
    Stack trace:\n#0 /tmp/tmpc3wwn3k7.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpc3wwn3k7.php\
    \ on line 44\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($str)\
    \ {\n        return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_filter($lst, function($v) {\n        return strlen($v) % 2 ==\
    \ 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\n$lst = array(\"aa\", \"\
    a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\"\
    ;\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5iczp36a.php:44\n\
    Stack trace:\n#0 /tmp/tmp5iczp36a.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp5iczp36a.php\
    \ on line 44\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $odd_lst = [];\n  foreach ($lst\
    \ as $item) {\n    if (strlen($item) % 2 == 1) {\n      array_push($odd_lst, $item);\n\
    \    }\n  }\n  sort($odd_lst);\n  return $odd_lst;\n}\n\n$lst = [\"aa\", \"a\"\
    , \"aaa\"];\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst = [\"ab\", \"\
    a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => a\n    [1] => aaa\n)\n\nArray\n(\n    [0] => a\n \
    \   [1] => aaa\n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8_z4rwg9.php:39\n\
    Stack trace:\n#0 /tmp/tmp8_z4rwg9.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp8_z4rwg9.php\
    \ on line 39\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = [];\n    foreach ($lst\
    \ as $item) {\n        if (strlen($item) % 2 == 0) {\n            $new_lst[] =\
    \ $item;\n        }\n    }\n    sort($new_lst);\n    return $new_lst;\n}\n\n$lst\
    \ = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n\
    $lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\necho\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2y0lemf.php:45\n\
    Stack trace:\n#0 /tmp/tmpb2y0lemf.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpb2y0lemf.php\
    \ on line 45\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($x)\
    \ {\n        return strlen($x) % 2 == 0;\n    });\n    sort($lst);\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\n$lst = array(\"ab\", \"a\"\
    , \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => ab\n    [1] => cd\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp0pm91zcq.php:39\nStack trace:\n#0 /tmp/tmp0pm91zcq.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0pm91zcq.php on line 39\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = [];\n    foreach ($lst\
    \ as $item) {\n        if (strlen($item) % 2 == 0) {\n            $new_lst[] =\
    \ $item;\n        }\n    }\n    sort($new_lst);\n    return $new_lst;\n}\n\n$lst\
    \ = [\"aa\", \"a\", \"aaa\"];\necho \">>> list_sort(array(\\\"aa\\\", \\\"a\\\"\
    , \\\"aaa\\\"))\\n\";\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n\n$lst\
    \ = [\"ab\", \"a\", \"aaa\", \"cd\"];\necho \">>> list_sort(array(\\\"ab\\\",\
    \ \\\"a\\\", \\\"aaa\\\", \\\"cd\\\"))\\n\";\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ">>> list_sort(array(\"aa\", \"a\", \"aaa\"))\nArray\n(\n    [0] => aa\n\
    )\n\n>>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\nArray\n(\n    [0] =>\
    \ ab\n    [1] => cd\n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw107_4xo.php:48\n\
    Stack trace:\n#0 /tmp/tmpw107_4xo.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpw107_4xo.php\
    \ on line 48\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_lst = [];\n    $even_lst\
    \ = [];\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n\
    \            $even_lst[] = $item;\n        } else {\n            $odd_lst[] =\
    \ $item;\n        }\n    }\n    sort($even_lst);\n    sort($odd_lst);\n    return\
    \ array_merge($even_lst, $odd_lst);\n}\n\n$lst = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n    [1] => a\n    [2] => aaa\n)\n\nArray\n(\n\
    \    [0] => ab\n    [1] => cd\n    [2] => a\n    [3] => aaa\n)\n\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpsna221oh.php:44\nStack trace:\n\
    #0 /tmp/tmpsna221oh.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpsna221oh.php\
    \ on line 44\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_length_words = array();\n\
    \    foreach ($lst as $word) {\n        if (strlen($word) % 2 == 1) {\n      \
    \      array_push($odd_length_words, $word);\n        }\n    }\n    sort($odd_length_words);\n\
    \    return $odd_length_words;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjjncyvyr.php:33\n\
    Stack trace:\n#0 /tmp/tmpjjncyvyr.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpjjncyvyr.php\
    \ on line 33\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($x)\
    \ {\n        return strlen($x) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $sum = 0;\n    foreach ($lst\
    \ as $num) {\n        $sum += $num;\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpoada_fq1.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmpoada_fq1.php on line\
    \ 20\n\nWarning: A non-numeric value encountered in /tmp/tmpoada_fq1.php on line\
    \ 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoada_fq1.php:30\n\
    Stack trace:\n#0 /tmp/tmpoada_fq1.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpoada_fq1.php\
    \ on line 30\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_list = [];\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $new_list[]\
    \ = $item;\n        }\n    }\n    sort($new_list);\n    return $new_list;\n}\n\
    \n$lst = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\n\n$lst =\
    \ [\"ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdr6srjvg.php:44\nStack\
    \ trace:\n#0 /tmp/tmpdr6srjvg.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpdr6srjvg.php\
    \ on line 44\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($item)\
    \ {\n        return strlen($item) % 2 == 0;\n    });\n    sort($lst);\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"\\\
    n\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\",\
    \ \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\n$lst = array(\"ab\", \"a\nfunction candidate(...$args) {\n  \
    \  return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpp2jviedm.php on line 59

    '
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst_len = count($lst);\n   \
    \ $lst_sum = 0;\n    for ($i = 0; $i < $lst_len; $i++) {\n        $lst_sum +=\
    \ $lst[$i];\n    }\n    return $lst_sum;\n}\n\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpieqnrkyb.php on line\
    \ 21\n\nWarning: A non-numeric value encountered in /tmp/tmpieqnrkyb.php on line\
    \ 21\n\nWarning: A non-numeric value encountered in /tmp/tmpieqnrkyb.php on line\
    \ 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpieqnrkyb.php:31\n\
    Stack trace:\n#0 /tmp/tmpieqnrkyb.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpieqnrkyb.php\
    \ on line 31\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $sorted_list = array();\n   \
    \ foreach ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n         \
    \   array_push($sorted_list, $item);\n        }\n    }\n    sort($sorted_list);\n\
    \    return $sorted_list;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj87t3j4k.php:45\n\
    Stack trace:\n#0 /tmp/tmpj87t3j4k.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpj87t3j4k.php\
    \ on line 45\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_lst = array();\n    $even_lst\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            array_push($even_lst, $item);\n        } else {\n        \
    \    array_push($odd_lst, $item);\n        }\n    }\n    sort($even_lst);\n  \
    \  return $even_lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmprobu3c75.php:44\nStack trace:\n#0 /tmp/tmprobu3c75.php(47): test()\n\
    #1 {main}\n  thrown in /tmp/tmprobu3c75.php on line 44\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\\
    n\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"\\\
    n\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\",\
    \ \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7iuhz05c.php on line 60

    '
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_lst = [];\n    $even_lst\
    \ = [];\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n\
    \            $even_lst[] = $item;\n        } else {\n            $odd_lst[] =\
    \ $item;\n        }\n    }\n    sort($even_lst);\n    return $even_lst;\n}\n\n\
    $lst = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\n\n$lst = [\"\
    ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg_2_iw2y.php:47\nStack\
    \ trace:\n#0 /tmp/tmpg_2_iw2y.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpg_2_iw2y.php\
    \ on line 47\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $lst = array_map('strlen', $lst);\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    sort($lst);\n   \
    \ return $lst;\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4lc_v_b7.php:31\n\
    Stack trace:\n#0 /tmp/tmp4lc_v_b7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp4lc_v_b7.php\
    \ on line 31\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = [];\n    foreach ($lst\
    \ as $item) {\n        if (strlen($item) % 2 == 0) {\n            $new_lst[] =\
    \ $item;\n        }\n    }\n    sort($new_lst);\n    return $new_lst;\n}\n\n$lst\
    \ = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n\
    $lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\necho\
    \ \"\\n\";\n$lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"c\"];\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpjusplj3m.php:48\nStack trace:\n#0 /tmp/tmpjusplj3m.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjusplj3m.php on line 48\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst_len = count($lst);\n   \
    \ $lst_sum = 0;\n    for ($i = 0; $i < $lst_len; $i++) {\n        $lst_sum +=\
    \ $lst[$i];\n    }\n    return $lst_sum;\n}\n\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpieqnrkyb.php on line\
    \ 21\n\nWarning: A non-numeric value encountered in /tmp/tmpieqnrkyb.php on line\
    \ 21\n\nWarning: A non-numeric value encountered in /tmp/tmpieqnrkyb.php on line\
    \ 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpieqnrkyb.php:31\n\
    Stack trace:\n#0 /tmp/tmpieqnrkyb.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpieqnrkyb.php\
    \ on line 31\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($str)\
    \ {\n        return strlen($str) % 2 == 0;\n    });\n    sort($lst);\n    return\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ynpad8j.php:36\n\
    Stack trace:\n#0 /tmp/tmp5ynpad8j.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp5ynpad8j.php\
    \ on line 36\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n$lst =\
    \ array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmphcu9uf7d.php:45\nStack\
    \ trace:\n#0 /tmp/tmphcu9uf7d.php(48): test()\n#1 {main}\n  thrown in /tmp/tmphcu9uf7d.php\
    \ on line 45\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\\
    n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqe6jvrc4.php:45\n\
    Stack trace:\n#0 /tmp/tmpqe6jvrc4.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqe6jvrc4.php\
    \ on line 45\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_lst = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 != 0) {\n            array_push($odd_lst,\
    \ $item);\n        }\n    }\n    sort($odd_lst);\n    return $odd_lst;\n}\n\n\
    $lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\
    \\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => a\n    [1] => aaa\n)\n\nArray\n(\n    [0] => a\n \
    \   [1] => aaa\n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_t3v1hhp.php:39\n\
    Stack trace:\n#0 /tmp/tmp_t3v1hhp.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp_t3v1hhp.php\
    \ on line 39\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($item)\
    \ {\n        return strlen($item) % 2 == 0;\n    });\n    sort($lst);\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0gtc4fk.php:41\nStack\
    \ trace:\n#0 /tmp/tmpz0gtc4fk.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpz0gtc4fk.php\
    \ on line 41\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($x)\
    \ {\n        return strlen($x) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $lst = array_filter($lst, function($x)\
    \ {\n    return strlen($x) % 2 == 0;\n  });\n  usort($lst, function($a, $b) {\n\
    \    if (strlen($a) == strlen($b)) {\n      return strcmp($a, $b);\n    }\n  \
    \  return strlen($a) - strlen($b);\n  });\n  return $lst;\n}\n\n$lst = array(\"\
    aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"ab\"\
    , \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n$lst =\
    \ array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\"\
    , \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"ab\", \"\
    a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\",\
    \ \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\");\nprint_r(s\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpnjq92x0g.php on line 50

    '
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($str)\
    \ {\n        return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1659730505
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($str)\
    \ {\n        return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1659730505
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($str)\
    \ {\n        return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1659730505
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($item)\
    \ {\n        return strlen($item) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = [];\n    foreach ($lst\
    \ as $value) {\n        if (strlen($value) % 2 == 0) {\n            array_push($new_lst,\
    \ $value);\n        }\n    }\n    sort($new_lst);\n    return $new_lst;\n}\n\n\
    $lst = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\necho \"\\n\"\
    ;\n$lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjysd86p9.php:45\n\
    Stack trace:\n#0 /tmp/tmpjysd86p9.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpjysd86p9.php\
    \ on line 45\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst_len = count($lst);\n   \
    \ $sum = 0;\n    for ($i = 0; $i < $lst_len; $i++) {\n        $sum += $lst[$i];\n\
    \    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmppe3f6xp3.php on line\
    \ 21\n\nWarning: A non-numeric value encountered in /tmp/tmppe3f6xp3.php on line\
    \ 21\n\nWarning: A non-numeric value encountered in /tmp/tmppe3f6xp3.php on line\
    \ 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppe3f6xp3.php:31\n\
    Stack trace:\n#0 /tmp/tmppe3f6xp3.php(40): test()\n#1 {main}\n  thrown in /tmp/tmppe3f6xp3.php\
    \ on line 31\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($item)\
    \ {\n        return strlen($item) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"ab\", \"a\", \"aaa\",\
    \ \"cd\", \"a\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"ab\", \"\
    a\", \"aaa\", \"cd\", \"a\", \"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"ab\", \"\
    a\", \"aaa\", \"cd\", \"a\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"a\", \"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"\
    ab\", \"a\", \"aaa\", \"cd\", \"a\", \"ab\", \"a\", \"aaa\", \"cd\", \"a\");\n\
    print_r(sorted_list_sum($lst));\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\"\
    , \"a\", \"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"a\", \"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"a\");\nprint_r(sorted_list_sum($lst));\n\n$lst =\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsrmht894.php on line 52

    '
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            array_push($new_lst,\
    \ $item);\n        }\n    }\n    sort($new_lst);\n    return $new_lst;\n}\n\n\
    $lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpzlgtmleg.php:42\nStack trace:\n#0 /tmp/tmpzlgtmleg.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmpzlgtmleg.php on line 42\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $lst = array_filter($lst, function($x)\
    \ { return strlen($x) % 2 === 0; });\n  usort($lst, function($a, $b) {\n    if\
    \ (strlen($a) === strlen($b)) {\n      return strcmp($a, $b);\n    }\n    return\
    \ strlen($a) - strlen($b);\n  });\n  return $lst;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $lst = array_map('strlen', $lst);\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    sort($lst);\n   \
    \ return $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiv3aa7_k.php:32\n\
    Stack trace:\n#0 /tmp/tmpiv3aa7_k.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpiv3aa7_k.php\
    \ on line 32\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = [];\n    foreach ($lst\
    \ as $item) {\n        if (strlen($item) % 2 == 0) {\n            $new_lst[] =\
    \ $item;\n        }\n    }\n    sort($new_lst);\n    return $new_lst;\n}\n\n$lst\
    \ = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n\
    $lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\necho\
    \ \"\\n\";\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv6_bjvja.php:46\n\
    Stack trace:\n#0 /tmp/tmpv6_bjvja.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpv6_bjvja.php\
    \ on line 46\n"
  timestamp: 1659730505
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_lst = [];\n    $even_lst\
    \ = [];\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n\
    \            $even_lst[] = $item;\n        } else {\n            $odd_lst[] =\
    \ $item;\n        }\n    }\n    sort($even_lst);\n    sort($odd_lst);\n    return\
    \ array_merge($even_lst, $odd_lst);\n}\n\n$lst = [\"aa\", \"a\", \"aaa\"];\n$lst2\
    \ = [\"ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\nprint_r(sorted_list_sum($lst2));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n    [1] => a\n    [2] => aaa\n)\nArray\n(\n  \
    \  [0] => ab\n    [1] => cd\n    [2] => a\n    [3] => aaa\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpxynps10u.php:41\nStack trace:\n#0 /tmp/tmpxynps10u.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxynps10u.php on line 41\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $lst = array_filter($lst, function($str)\
    \ {\n    return strlen($str) % 2 == 0;\n  });\n  usort($lst, function($a, $b)\
    \ {\n    if (strlen($a) == strlen($b)) {\n      return strcmp($a, $b);\n    }\n\
    \    return strlen($a) - strlen($b);\n  });\n  return $lst;\n}\n\n$lst = array(\"\
    aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst =\
    \ array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($i)\
    \ {\n        return strlen($i) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_lst = array();\n    $even_lst\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            array_push($even_lst, $item);\n        } else {\n        \
    \    array_push($odd_lst, $item);\n        }\n    }\n    sort($even_lst);\n  \
    \  return $even_lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplum0wrwk.php:48\n\
    Stack trace:\n#0 /tmp/tmplum0wrwk.php(51): test()\n#1 {main}\n  thrown in /tmp/tmplum0wrwk.php\
    \ on line 48\n"
  timestamp: 1659730506
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $lst = array_filter($lst, function($str)\
    \ {\n    return strlen($str) % 2 == 0;\n  });\n  usort($lst, function($a, $b)\
    \ {\n    if (strlen($a) == strlen($b)) {\n      return strcmp($a, $b);\n    }\n\
    \    return strlen($a) - strlen($b);\n  });\n  return $lst;\n}\n\n$lst = array(\"\
    aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst =\
    \ array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"bb\", \"b\", \"bbb\"\
    );\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nArray\n(\n    [0] => ab\n    [1] => bb\n    [2] => cd\n)\n\n"
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\"\
    , \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5t8palem.php on line 54

    '
  timestamp: 1659730506
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $value) {\n        if (strlen($value) % 2 == 0) {\n            array_push($result,\
    \ $value);\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpsr4uuh85.php:42\nStack trace:\n#0 /tmp/tmpsr4uuh85.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmpsr4uuh85.php on line 42\n"
  timestamp: 1659730506
