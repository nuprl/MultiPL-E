name: HumanEval_30_get_positive
language: php
prompt: "<?php\n// Return only positive numbers in the array.\n// >>> get_positive(array(-1,\
  \ 2, -4, 5, 6))\n// array(2, 5, 6)\n// >>> get_positive(array(5, 3, -5, 2, -3, 3,\
  \ 9, 0, 123, 1, -10))\n// array(5, 3, 2, 3, 9, 123, 1)\nfunction get_positive($l)\
  \ {\n"
tests: "function candidate(...$args) {\n    return get_positive(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
  \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
  \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $result = array();\n    foreach ($l as $item) {\n        if ($item\
    \ > 0) {\n            $result[] = $item;\n        }\n    }\n    return $result;\n\
    }\n", "\t$r = array();\n\tforeach ($l as $v) {\n\t\tif ($v > 0) {\n\t\t\t$r[]\
    \ = $v;\n\t\t}\n\t}\n\treturn $r;\n}\n", "    $result = array();\n    foreach\
    \ ($l as $item) {\n        if ($item > 0) {\n            $result[] = $item;\n\
    \        }\n    }\n    return $result;\n}\n", "\t$result = array();\n\tforeach\
    \ ($l as $v) {\n\t\tif ($v > 0) {\n\t\t\t$result[] = $v;\n\t\t}\n\t}\n\treturn\
    \ $result;\n}\n", "\t$result = array();\n\tforeach ($l as $item) {\n\t\tif ($item\
    \ > 0) {\n\t\t\t$result[] = $item;\n\t\t}\n\t}\n\treturn $result;\n}\n", "   \
    \ $result = array();\n    foreach ($l as $item) {\n        if ($item > 0) {\n\
    \            $result[] = $item;\n        }\n    }\n    return $result;\n}\n",
  "  $result = array();\n  foreach ($l as $value) {\n    if ($value > 0) {\n     \
    \ $result[] = $value;\n    }\n  }\n  return $result;\n}\n", "  $result = array();\n\
    \  foreach ($l as $item) {\n    if ($item > 0) {\n      $result[] = $item;\n \
    \   }\n  }\n  return $result;\n}\n", "\t$result = array();\n\tforeach ($l as $item)\
    \ {\n\t\tif ($item > 0) {\n\t\t\t$result[] = $item;\n\t\t}\n\t}\n\treturn $result;\n\
    }\n", "\t$l_new = array();\n\tforeach ($l as $i) {\n\t\tif ($i > 0) {\n\t\t\t\
    array_push($l_new, $i);\n\t\t}\n\t}\n\treturn $l_new;\n}\n", "\t$result = array();\n\
    \tforeach ($l as $item) {\n\t\tif ($item > 0) {\n\t\t\t$result[] = $item;\n\t\t\
    }\n\t}\n\treturn $result;\n}\n", "    $result = array();\n    foreach ($l as $value)\
    \ {\n        if ($value > 0) {\n            $result[] = $value;\n        }\n \
    \   }\n    return $result;\n}\n", "    $result = array();\n    foreach ($l as\
    \ $item) {\n        if ($item > 0) {\n            $result[] = $item;\n       \
    \ }\n    }\n    return $result;\n}\n", "    $result = array();\n    foreach ($l\
    \ as $item) {\n        if ($item > 0) {\n            $result[] = $item;\n    \
    \    }\n    }\n    return $result;\n}\n", "    $result = array();\n    foreach\
    \ ($l as $item) {\n        if ($item > 0) {\n            $result[] = $item;\n\
    \        }\n    }\n    return $result;\n}\n", "    $result = array();\n    foreach\
    \ ($l as $item) {\n        if ($item > 0) {\n            $result[] = $item;\n\
    \        }\n    }\n    return $result;\n}\n", "\t$result = array();\n\tforeach\
    \ ($l as $item) {\n\t\tif ($item > 0) {\n\t\t\t$result[] = $item;\n\t\t}\n\t}\n\
    \treturn $result;\n}\n", "    $result = array();\n    foreach ($l as $item) {\n\
    \        if ($item > 0) {\n            $result[] = $item;\n        }\n    }\n\
    \    return $result;\n}\n", "\t$result = array();\n\tforeach ($l as $value) {\n\
    \t\tif ($value > 0) {\n\t\t\tarray_push($result, $value);\n\t\t}\n\t}\n\treturn\
    \ $result;\n}\n", "    $result = array();\n    foreach ($l as $item) {\n     \
    \   if ($item > 0) {\n            $result[] = $item;\n        }\n    }\n    return\
    \ $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
