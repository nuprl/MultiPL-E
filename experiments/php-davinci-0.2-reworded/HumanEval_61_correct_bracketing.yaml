name: HumanEval_61_correct_bracketing
language: php
prompt: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if every\
  \ opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
  (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
  (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
  \ {\n"
tests: "function candidate(...$args) {\n    return correct_bracketing(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
  \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((((\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())())(()\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n", "    $open\
    \ = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"(\") {\n            $open++;\n        } else {\n            $open--;\n\
    \        }\n        if ($open < 0) {\n            return false;\n        }\n \
    \   }\n    return $open == 0;\n}\n", "    $count = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $count++;\n    \
    \    } else if ($brackets[$i] == \")\") {\n            $count--;\n        }\n\
    \        if ($count < 0) {\n            return false;\n        }\n    }\n    return\
    \ $count == 0;\n}\n", "    $brackets_array = str_split($brackets);\n    $brackets_stack\
    \ = array();\n    foreach ($brackets_array as $bracket) {\n        if ($bracket\
    \ == \"(\") {\n            array_push($brackets_stack, $bracket);\n        } elseif\
    \ ($bracket == \")\") {\n            if (empty($brackets_stack)) {\n         \
    \       return false;\n            } else {\n                array_pop($brackets_stack);\n\
    \            }\n        }\n    }\n    if (empty($brackets_stack)) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "  $brackets_array\
    \ = str_split($brackets);\n  $brackets_count = count($brackets_array);\n  $open_brackets\
    \ = 0;\n  $close_brackets = 0;\n  for ($i = 0; $i < $brackets_count; $i++) {\n\
    \    if ($brackets_array[$i] == \"(\") {\n      $open_brackets++;\n    } else\
    \ {\n      $close_brackets++;\n    }\n    if ($close_brackets > $open_brackets)\
    \ {\n      return false;\n    }\n  }\n  if ($open_brackets == $close_brackets)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "  $count = 0;\n\
    \  for ($i = 0; $i < strlen($brackets); $i++) {\n    if ($brackets[$i] == \"(\"\
    ) {\n      $count++;\n    } else {\n      $count--;\n    }\n    if ($count < 0)\
    \ {\n      return false;\n    }\n  }\n  return $count == 0;\n}\n", "\t$brackets\
    \ = str_split($brackets);\n\t$open = 0;\n\tforeach ($brackets as $bracket) {\n\
    \t\tif ($bracket == \"(\") {\n\t\t\t$open++;\n\t\t} elseif ($bracket == \")\"\
    ) {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn $open == 0;\n}\n", "    $brackets = str_split($brackets);\n    $open\
    \ = 0;\n    foreach ($brackets as $bracket) {\n        if ($bracket == \"(\")\
    \ {\n            $open++;\n        } else {\n            $open--;\n        }\n\
    \        if ($open < 0) {\n            return false;\n        }\n    }\n    return\
    \ $open == 0;\n}\n", "    $count = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $count++;\n    \
    \    } else {\n            $count--;\n        }\n        if ($count < 0) {\n \
    \           return false;\n        }\n    }\n    return $count == 0;\n}\n", " \
    \   $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"(\") {\n            $open++;\n        } else {\n            $open--;\n\
    \        }\n        if ($open < 0) {\n            return false;\n        }\n \
    \   }\n    return $open == 0;\n}\n", "\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\t\t} else if ($brackets[$i]\
    \ == \")\") {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $open == 0;\n}\n", "    $stack = [];\n    $brackets = str_split($brackets);\n\
    \    foreach ($brackets as $bracket) {\n        if ($bracket == '(') {\n     \
    \       array_push($stack, $bracket);\n        } else {\n            if (empty($stack))\
    \ {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return empty($stack);\n}\n", "    $brackets_array = str_split($brackets);\n\
    \    $brackets_count = count($brackets_array);\n    $open_brackets = 0;\n    for\
    \ ($i = 0; $i < $brackets_count; $i++) {\n        if ($brackets_array[$i] == '(')\
    \ {\n            $open_brackets++;\n        } else {\n            $open_brackets--;\n\
    \        }\n        if ($open_brackets < 0) {\n            return false;\n   \
    \     }\n    }\n    if ($open_brackets == 0) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n", "    $brackets_array = str_split($brackets);\n\
    \    $open_brackets = 0;\n    foreach ($brackets_array as $bracket) {\n      \
    \  if ($bracket == \"(\") {\n            $open_brackets++;\n        } else {\n\
    \            $open_brackets--;\n        }\n        if ($open_brackets < 0) {\n\
    \            return false;\n        }\n    }\n    return $open_brackets == 0;\n\
    }\n", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n \
    \           $open--;\n        }\n        if ($open < 0) {\n            return\
    \ false;\n        }\n    }\n    return $open == 0;\n}\n", "    $open_count = 0;\n\
    \    $close_count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n   \
    \     if ($brackets[$i] == \"(\") {\n            $open_count++;\n        } else\
    \ {\n            $close_count++;\n        }\n        if ($close_count > $open_count)\
    \ {\n            return false;\n        }\n    }\n    return $open_count == $close_count;\n\
    }\n", "\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\t\t} elseif ($brackets[$i]\
    \ == \")\") {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n", "    $open = 0;\n    $close\
    \ = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"(\") {\n            $open++;\n        } else {\n            $close++;\n\
    \        }\n        if ($close > $open) {\n            return false;\n       \
    \ }\n    }\n    if ($open == $close) {\n        return true;\n    } else {\n \
    \       return false;\n    }\n}\n", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else if ($brackets[$i] == \")\") {\n            $open--;\n        }\n  \
    \      if ($open < 0) {\n            return false;\n        }\n    }\n    return\
    \ $open == 0;\n}\n", "    $stack = new SplStack();\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == '(') {\n            $stack->push($brackets[$i]);\n\
    \        } else {\n            if ($stack->isEmpty()) {\n                return\
    \ false;\n            }\n            $stack->pop();\n        }\n    }\n    return\
    \ $stack->isEmpty();\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
