name: HumanEval_116_sort_array
language: php
prompt: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
  \ according to\n// number of ones in their binary representation in ascending order.\n\
  // For similar number of ones, sort based on decimal value.\n// It must be implemented\
  \ like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1, 2, 3, 4, 5)\n\
  // >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5, -4, -3, -2)\n// >>>\
  \ sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\nfunction sort_array($arr)\
  \ {\n"
tests: "function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
  \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3,\
  \ -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77, 4,\
  \ 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32, 5))\
  \ !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32)) !==\
  \ array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $arr = array_map(function($v) {\n    return [$v, decbin($v)];\n \
    \ }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n \
    \   $b = array_sum($b);\n    if ($a === $b) {\n      return $a[0] <=> $b[0];\n\
    \    }\n    return $a <=> $b;\n  });\n  return array_map(function($v) {\n    return\
    \ $v[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($a) {\n    return $a[0];\n  }, $arr);\n}\n", "  $ones\
    \ = [];\n  $zeros = [];\n  foreach ($arr as $key => $value) {\n    if ($value\
    \ < 0) {\n      $zeros[] = $value;\n    } else {\n      $ones[] = $value;\n  \
    \  }\n  }\n  $ones = array_map(function($value) {\n    return [\n      'value'\
    \ => $value,\n      'ones' => substr_count(decbin($value), '1')\n    ];\n  },\
    \ $ones);\n  $zeros = array_map(function($value) {\n    return [\n      'value'\
    \ => $value,\n      'ones' => substr_count(decbin($value), '1')\n    ];\n  },\
    \ $zeros);\n  usort($ones, function($a, $b) {\n    if ($a['ones'] == $b['ones'])\
    \ {\n      return $a['value'] - $b['value'];\n    }\n    return $a['ones'] - $b['ones'];\n\
    \  });\n  usort($zeros, function($a, $b) {\n    if ($a['ones'] == $b['ones'])\
    \ {\n      return $a['value'] - $b['value'];\n    }\n    return $a['ones'] - $b['ones'];\n\
    \  });\n  $ones = array_map(function($value) {\n    return $value['value'];\n\
    \  }, $ones);\n  $zeros = array_map(function($value) {\n    return $value['value'];\n\
    \  }, $zeros);\n  return array_merge($zeros, $ones);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n\
    \    $b = str_split($b);\n    $a = array_sum($a);\n    $b = array_sum($b);\n \
    \   if ($a === $b) {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n\
    \  });\n  $arr = array_map(function($n) {\n    return $n[0];\n  }, $arr);\n  return\
    \ $arr;\n}\n", "  $new_arr = [];\n  foreach ($arr as $key => $value) {\n    $new_arr[$key]\
    \ = decbin($value);\n  }\n  asort($new_arr);\n  foreach ($new_arr as $key => $value)\
    \ {\n    $new_arr[$key] = bindec($value);\n  }\n  return $new_arr;\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $ones = [];\n  $zeros = [];\n  foreach ($arr as\
    \ $key => $value) {\n    $binary = decbin($value);\n    $count = substr_count($binary,\
    \ '1');\n    if ($count > 0) {\n      $ones[$key] = $count;\n    } else {\n  \
    \    $zeros[$key] = $value;\n    }\n  }\n  asort($ones);\n  sort($zeros);\n  $result\
    \ = [];\n  foreach ($ones as $key => $value) {\n    $result[] = $arr[$key];\n\
    \  }\n  foreach ($zeros as $key => $value) {\n    $result[] = $value;\n  }\n \
    \ return $result;\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $ones\
    \ = [];\n  $zeros = [];\n  foreach ($arr as $num) {\n    $binary = decbin($num);\n\
    \    $count = substr_count($binary, '1');\n    if ($count > 0) {\n      $ones[$count][]\
    \ = $num;\n    } else {\n      $zeros[] = $num;\n    }\n  }\n  ksort($ones);\n\
    \  $result = [];\n  foreach ($ones as $key => $value) {\n    sort($value);\n \
    \   $result = array_merge($result, $value);\n  }\n  sort($zeros);\n  $result =\
    \ array_merge($result, $zeros);\n  return $result;\n}\n", "  $arr = array_map(function($x)\
    \ {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n    return\
    \ $x[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n    return [$x,\
    \ decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($num) {\n    return [$num, decbin($num)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($num) {\n   \
    \ return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($num) {\n    return $num[0];\n\
    \  }, $arr);\n}\n", "  $ones = [];\n  $zeros = [];\n  foreach ($arr as $key =>\
    \ $value) {\n    if ($value < 0) {\n      $zeros[] = $value;\n    } else {\n \
    \     $ones[] = $value;\n    }\n  }\n  $ones = array_map(function($value) {\n\
    \    return [\n      'ones' => substr_count(decbin($value), '1'),\n      'value'\
    \ => $value\n    ];\n  }, $ones);\n  usort($ones, function($a, $b) {\n    if ($a['ones']\
    \ == $b['ones']) {\n      return $a['value'] - $b['value'];\n    }\n    return\
    \ $a['ones'] - $b['ones'];\n  });\n  $ones = array_map(function($value) {\n  \
    \  return $value['value'];\n  }, $ones);\n  return array_merge($ones, $zeros);\n\
    }\n", "  $arr = array_map(function($num) {\n    $ones = substr_count(decbin($num),\
    \ '1');\n    return [$num, $ones];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    if ($a[1] === $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a[1] - $b[1];\n  });\n  return array_map(function($num) {\n    return $num[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($num) {\n    return [$num, decbin($num)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
