name: HumanEval_116_sort_array
language: php
prompt: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
  \ according to\n// number of ones in their binary representation in ascending order.\n\
  // For similar number of ones, sort based on decimal value.\n// It must be implemented\
  \ like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1, 2, 3, 4, 5)\n\
  // >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5, -4, -3, -2)\n// >>>\
  \ sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\nfunction sort_array($arr)\
  \ {\n"
tests: "function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
  \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3,\
  \ -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77, 4,\
  \ 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32, 5))\
  \ !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32)) !==\
  \ array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $arr = array_map(function($v) {\n    return [$v, decbin($v)];\n \
    \ }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n \
    \   $b = array_sum($b);\n    if ($a === $b) {\n      return $a[0] <=> $b[0];\n\
    \    }\n    return $a <=> $b;\n  });\n  return array_map(function($v) {\n    return\
    \ $v[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($a) {\n    return $a[0];\n  }, $arr);\n}\n", "  $ones\
    \ = [];\n  $zeros = [];\n  foreach ($arr as $key => $value) {\n    if ($value\
    \ < 0) {\n      $zeros[] = $value;\n    } else {\n      $ones[] = $value;\n  \
    \  }\n  }\n  $ones = array_map(function($value) {\n    return [\n      'value'\
    \ => $value,\n      'ones' => substr_count(decbin($value), '1')\n    ];\n  },\
    \ $ones);\n  $zeros = array_map(function($value) {\n    return [\n      'value'\
    \ => $value,\n      'ones' => substr_count(decbin($value), '1')\n    ];\n  },\
    \ $zeros);\n  usort($ones, function($a, $b) {\n    if ($a['ones'] == $b['ones'])\
    \ {\n      return $a['value'] - $b['value'];\n    }\n    return $a['ones'] - $b['ones'];\n\
    \  });\n  usort($zeros, function($a, $b) {\n    if ($a['ones'] == $b['ones'])\
    \ {\n      return $a['value'] - $b['value'];\n    }\n    return $a['ones'] - $b['ones'];\n\
    \  });\n  $ones = array_map(function($value) {\n    return $value['value'];\n\
    \  }, $ones);\n  $zeros = array_map(function($value) {\n    return $value['value'];\n\
    \  }, $zeros);\n  return array_merge($zeros, $ones);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n\
    \    $b = str_split($b);\n    $a = array_sum($a);\n    $b = array_sum($b);\n \
    \   if ($a === $b) {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n\
    \  });\n  $arr = array_map(function($n) {\n    return $n[0];\n  }, $arr);\n  return\
    \ $arr;\n}\n", "  $new_arr = [];\n  foreach ($arr as $key => $value) {\n    $new_arr[$key]\
    \ = decbin($value);\n  }\n  asort($new_arr);\n  foreach ($new_arr as $key => $value)\
    \ {\n    $new_arr[$key] = bindec($value);\n  }\n  return $new_arr;\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $ones = [];\n  $zeros = [];\n  foreach ($arr as\
    \ $key => $value) {\n    $binary = decbin($value);\n    $count = substr_count($binary,\
    \ '1');\n    if ($count > 0) {\n      $ones[$key] = $count;\n    } else {\n  \
    \    $zeros[$key] = $value;\n    }\n  }\n  asort($ones);\n  sort($zeros);\n  $result\
    \ = [];\n  foreach ($ones as $key => $value) {\n    $result[] = $arr[$key];\n\
    \  }\n  foreach ($zeros as $key => $value) {\n    $result[] = $value;\n  }\n \
    \ return $result;\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $ones\
    \ = [];\n  $zeros = [];\n  foreach ($arr as $num) {\n    $binary = decbin($num);\n\
    \    $count = substr_count($binary, '1');\n    if ($count > 0) {\n      $ones[$count][]\
    \ = $num;\n    } else {\n      $zeros[] = $num;\n    }\n  }\n  ksort($ones);\n\
    \  $result = [];\n  foreach ($ones as $key => $value) {\n    sort($value);\n \
    \   $result = array_merge($result, $value);\n  }\n  sort($zeros);\n  $result =\
    \ array_merge($result, $zeros);\n  return $result;\n}\n", "  $arr = array_map(function($x)\
    \ {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n    return\
    \ $x[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n    return [$x,\
    \ decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($num) {\n    return [$num, decbin($num)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($num) {\n   \
    \ return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($num) {\n    return $num[0];\n\
    \  }, $arr);\n}\n", "  $ones = [];\n  $zeros = [];\n  foreach ($arr as $key =>\
    \ $value) {\n    if ($value < 0) {\n      $zeros[] = $value;\n    } else {\n \
    \     $ones[] = $value;\n    }\n  }\n  $ones = array_map(function($value) {\n\
    \    return [\n      'ones' => substr_count(decbin($value), '1'),\n      'value'\
    \ => $value\n    ];\n  }, $ones);\n  usort($ones, function($a, $b) {\n    if ($a['ones']\
    \ == $b['ones']) {\n      return $a['value'] - $b['value'];\n    }\n    return\
    \ $a['ones'] - $b['ones'];\n  });\n  $ones = array_map(function($value) {\n  \
    \  return $value['value'];\n  }, $ones);\n  return array_merge($ones, $zeros);\n\
    }\n", "  $arr = array_map(function($num) {\n    $ones = substr_count(decbin($num),\
    \ '1');\n    return [$num, $ones];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    if ($a[1] === $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a[1] - $b[1];\n  });\n  return array_map(function($num) {\n    return $num[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($num) {\n    return [$num, decbin($num)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}", "  $ones = [];\n  $zeros = [];\n  foreach ($arr as\
    \ $num) {\n    $binary = decbin($num);\n    $count = substr_count($binary, '1');\n\
    \    if ($count > 0) {\n      $ones[$count][] = $num;\n    } else {\n      $zeros[]\
    \ = $num;\n    }\n  }\n  ksort($ones);\n  $result = [];\n  foreach ($ones as $key\
    \ => $value) {\n    sort($value);\n    $result = array_merge($result, $value);\n\
    \  }\n  sort($zeros);\n  $result = array_merge($result, $zeros);\n  return $result;\n\
    }\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a =\
    \ str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n    $b = array_sum($b);\n\
    \    if ($a === $b) {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n\
    \  });\n  $arr = array_map(function($n) {\n    return $n[0];\n  }, $arr);\n  return\
    \ $arr;\n}\n", "  $arr = array_map(function($num) {\n    return [$num, decbin($num)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($num)\
    \ {\n    return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a,\
    \ $b) {\n    $aOnes = substr_count($a[1], '1');\n    $bOnes = substr_count($b[1],\
    \ '1');\n    if ($aOnes === $bOnes) {\n      return $a[0] - $b[0];\n    }\n  \
    \  return $aOnes - $bOnes;\n  });\n  return array_map(function($num) {\n    return\
    \ $num[0];\n  }, $arr);\n}\n", "    $arr = array_map(function($num) {\n      \
    \  return [$num, decbin($num)];\n    }, $arr);\n    usort($arr, function($a, $b)\
    \ {\n        $a_ones = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1],\
    \ '1');\n        if ($a_ones == $b_ones) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($num)\
    \ {\n        return $num[0];\n    }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($num) {\n    return\
    \ [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a\
    \ = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_count_values($a);\n    $b = array_count_values($b);\n    if ($a[1]\
    \ == $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return $a[1] - $b[1];\n\
    \  });\n  $arr = array_map(function($num) {\n    return $num[0];\n  }, $arr);\n\
    \  return $arr;\n}\n", "  $ones = [];\n  $zeros = [];\n  foreach ($arr as $key\
    \ => $value) {\n    $binary = decbin($value);\n    $ones[$key] = substr_count($binary,\
    \ '1');\n    $zeros[$key] = substr_count($binary, '0');\n  }\n  array_multisort($ones,\
    \ SORT_ASC, $zeros, SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_sum($a);\n    $b = array_sum($b);\n    if ($a == $b) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n  $arr = array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n  return $arr;\n}\n", "  $ones = [];\n  $zeros\
    \ = [];\n  $result = [];\n  foreach ($arr as $key => $value) {\n    if ($value\
    \ < 0) {\n      $result[] = $value;\n    } else {\n      $binary = decbin($value);\n\
    \      $count = substr_count($binary, '1');\n      if ($count == 0) {\n      \
    \  $zeros[] = $value;\n      } else {\n        $ones[$count][] = $value;\n   \
    \   }\n    }\n  }\n  ksort($ones);\n  foreach ($ones as $key => $value) {\n  \
    \  sort($value);\n    foreach ($value as $k => $v) {\n      $result[] = $v;\n\
    \    }\n  }\n  sort($zeros);\n  foreach ($zeros as $key => $value) {\n    $result[]\
    \ = $value;\n  }\n  return $result;\n}\n", "  $result = [];\n  $ones = [];\n \
    \ foreach ($arr as $key => $value) {\n    $ones[$key] = substr_count(decbin($value),\
    \ '1');\n  }\n  asort($ones);\n  foreach ($ones as $key => $value) {\n    $result[]\
    \ = $arr[$key];\n  }\n  return $result;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  },\
    \ $arr);\n}\n", "  $arr = array_map(function($n) {\n    $ones = substr_count(decbin($n),\
    \ '1');\n    return [$n, $ones];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    if ($a[1] == $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a[1] - $b[1];\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "  $ones = [];\n  foreach ($arr as $num) {\n    $ones[] =\
    \ substr_count(decbin($num), '1');\n  }\n  array_multisort($ones, $arr);\n  return\
    \ $arr;\n}\n", "    $arr = array_map(function($x) {\n        return [$x, decbin($x)];\n\
    \    }, $arr);\n    usort($arr, function($a, $b) {\n        $a = $a[1];\n    \
    \    $b = $b[1];\n        $a = str_split($a);\n        $b = str_split($b);\n \
    \       $a = array_sum($a);\n        $b = array_sum($b);\n        if ($a == $b)\
    \ {\n            return $a[0] - $b[0];\n        }\n        return $a - $b;\n \
    \   });\n    $arr = array_map(function($x) {\n        return $x[0];\n    }, $arr);\n\
    \    return $arr;\n}\n", "  $ones = [];\n  foreach ($arr as $key => $value) {\n\
    \    $ones[$key] = substr_count(decbin($value), '1');\n  }\n  array_multisort($ones,\
    \ SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n) {\n\
    \    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_sum($a);\n    $b = array_sum($b);\n    if ($a == $b) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n  $arr = array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "    $arr = array_map(function($n) {\n   \
    \     return [$n, decbin($n)];\n    }, $arr);\n    usort($arr, function($a, $b)\
    \ {\n        $a_ones = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1],\
    \ '1');\n        if ($a_ones == $b_ones) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($n)\
    \ {\n        return $n[0];\n    }, $arr);\n}\n", "  $arr = array_map(function($num)\
    \ {\n    return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a,\
    \ $b) {\n    $a1 = strlen(str_replace('0', '', $a[1]));\n    $b1 = strlen(str_replace('0',\
    \ '', $b[1]));\n    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n    }\n  \
    \  return $a1 - $b1;\n  });\n  return array_map(function($num) {\n    return $num[0];\n\
    \  }, $arr);\n}\n", "    $arr = array_map(function($n) {\n        $n = decbin($n);\n\
    \        $n = str_split($n);\n        $n = array_count_values($n);\n        return\
    \ [$n[1], $n[0]];\n    }, $arr);\n    usort($arr, function($a, $b) {\n       \
    \ if ($a[0] == $b[0]) {\n            return $a[1] - $b[1];\n        }\n      \
    \  return $a[0] - $b[0];\n    });\n    $arr = array_map(function($n) {\n     \
    \   return bindec($n[1]);\n    }, $arr);\n    return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $aOnes = substr_count($a[1], '1');\n    $bOnes = substr_count($b[1],\
    \ '1');\n    if ($aOnes === $bOnes) {\n      return $a[0] - $b[0];\n    }\n  \
    \  return $aOnes - $bOnes;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $ones = [];\n  foreach ($arr as $num) {\n    $ones[]\
    \ = substr_count(decbin($num), '1');\n  }\n  array_multisort($ones, $arr);\n \
    \ return $arr;\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($num) {\n    $bin = decbin($num);\n    return [$num, substr_count($bin,\
    \ '1')];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    if ($a[1] == $b[1])\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a[1] - $b[1];\n  });\n  return\
    \ array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a1 = substr_count($a[1], '1');\n    $b1 = substr_count($b[1],\
    \ '1');\n    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a1 - $b1;\n  });\n  return array_map(function($x) {\n    return $x[0];\n  },\
    \ $arr);\n}\n", "  $arr = array_map(function($n) {\n    $ones = substr_count(decbin($n),\
    \ '1');\n    return [$n, $ones];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    if ($a[1] == $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a[1] - $b[1];\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n    return\
    \ $x[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a1 = substr_count($a[1], '1');\n    $b1 = substr_count($b[1],\
    \ '1');\n    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a1 - $b1;\n  });\n  return array_map(function($x) {\n    return $x[0];\n  },\
    \ $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a1 = substr_count($a[1], '1');\n    $b1 = substr_count($b[1],\
    \ '1');\n    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a1 - $b1;\n  });\n  return array_map(function($x) {\n    return $x[0];\n  },\
    \ $arr);\n}\n", "  $arr = array_map(function($num) {\n    return [$num, decbin($num)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $aOnes = substr_count($a[1],\
    \ '1');\n    $bOnes = substr_count($b[1], '1');\n    if ($aOnes === $bOnes) {\n\
    \      return $a[0] - $b[0];\n    }\n    return $aOnes - $bOnes;\n  });\n  return\
    \ array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "    $arr = array_map(function($n) {\n        return\
    \ [\n            'n' => $n,\n            'ones' => substr_count(decbin($n), '1'),\n\
    \        ];\n    }, $arr);\n    usort($arr, function($a, $b) {\n        if ($a['ones']\
    \ === $b['ones']) {\n            return $a['n'] - $b['n'];\n        }\n      \
    \  return $a['ones'] - $b['ones'];\n    });\n    return array_map(function($n)\
    \ {\n        return $n['n'];\n    }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $ones = [];\n  foreach ($arr as $key => $value)\
    \ {\n    $ones[$key] = substr_count(decbin($value), '1');\n  }\n  array_multisort($ones,\
    \ SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($x) {\n\
    \    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n    return $x[0];\n\
    \  }, $arr);\n}\n", "    $arr = array_map(function($v) {\n        return [$v,\
    \ decbin($v)];\n    }, $arr);\n    usort($arr, function($a, $b) {\n        $a_ones\
    \ = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1], '1');\n \
    \       if ($a_ones === $b_ones) {\n            return $a[0] - $b[0];\n      \
    \  }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($v)\
    \ {\n        return $v[0];\n    }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($num) {\n    return\
    \ [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($num) {\n    return $num[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    $ones\
    \ = substr_count(decbin($n), '1');\n    return [$n, $ones];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    if ($a[1] == $b[1]) {\n      return $a[0] - $b[0];\n\
    \    }\n    return $a[1] - $b[1];\n  });\n  return array_map(function($n) {\n\
    \    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n  \
    \  return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n \
    \   $a1 = substr_count($a[1], '1');\n    $b1 = substr_count($b[1], '1');\n   \
    \ if ($a1 == $b1) {\n      return $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n",
  "  $ones = [];\n  $zeros = [];\n  foreach ($arr as $key => $value) {\n    if ($value\
    \ < 0) {\n      $zeros[] = $value;\n      unset($arr[$key]);\n    }\n  }\n  foreach\
    \ ($arr as $key => $value) {\n    $ones[$key] = substr_count(decbin($value), '1');\n\
    \  }\n  array_multisort($ones, SORT_ASC, $arr);\n  return array_merge($zeros,\
    \ $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_count_values($a);\n\
    \    $b = array_count_values($b);\n    if ($a[1] == $b[1]) return $a[0] - $b[0];\n\
    \    return $a[1] - $b[1];\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n\
    \    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n\
    \    $b = array_sum($b);\n    if ($a == $b) {\n      return $a[0] - $b[0];\n \
    \   }\n    return $a - $b;\n  });\n  $arr = array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    $ones = substr_count(decbin($n), '1');\n    return [$n, $ones];\n  },\
    \ $arr);\n  usort($arr, function($a, $b) {\n    if ($a[1] == $b[1]) {\n      return\
    \ $a[0] - $b[0];\n    }\n    return $a[1] - $b[1];\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map('decbin', $arr);\n\
    \  $arr = array_map('strlen', $arr);\n  $arr = array_flip($arr);\n  ksort($arr);\n\
    \  $arr = array_flip($arr);\n  $arr = array_map('bindec', $arr);\n  return $arr;\n\
    }\n", "  $arr = array_map(function($v) {\n    return [$v, decbin($v)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a =\
    \ substr_count($a, '1');\n    $b = substr_count($b, '1');\n    if ($a === $b)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n  return\
    \ array_map(function($v) {\n    return $v[0];\n  }, $arr);\n}\n", "  $arr_ones\
    \ = [];\n  foreach ($arr as $key => $value) {\n    $arr_ones[$key] = substr_count(decbin($value),\
    \ '1');\n  }\n  array_multisort($arr_ones, SORT_ASC, $arr);\n  return $arr;\n\
    }\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($a) {\n    return $a[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($num) {\n    return\
    \ [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($item) {\n    return $item[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n   \
    \ return $x[0];\n  }, $arr);\n}\n", "  $arr_ones = [];\n  $arr_dec = [];\n  foreach\
    \ ($arr as $key => $value) {\n    $arr_ones[$key] = substr_count(decbin($value),\
    \ '1');\n    $arr_dec[$key] = $value;\n  }\n  array_multisort($arr_ones, SORT_ASC,\
    \ $arr_dec, SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [\n      'dec' => $n,\n      'bin' => decbin($n)\n    ];\n  },\
    \ $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a['bin'],\
    \ '1');\n    $b_ones = substr_count($b['bin'], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a['dec'] - $b['dec'];\n    }\n    return $a_ones - $b_ones;\n\
    \  });\n  return array_map(function($n) {\n    return $n['dec'];\n  }, $arr);\n\
    }\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n\necho implode(', ', sort_array([1, 5, 2, 3,\
    \ 4])) . PHP_EOL;\necho implode(', ', sort_array([-2, -3, -4, -5, -6])) . PHP_EOL;\n\
    echo implode(', ', sort_array([1, 0, 2, 3, 4])) . PHP_EOL;", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n\
    \    $b = $b[1];\n    if (substr_count($a, '1') == substr_count($b, '1')) {\n\
    \      return $a < $b ? -1 : 1;\n    }\n    return substr_count($a, '1') < substr_count($b,\
    \ '1') ? -1 : 1;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n\
    \    $b = str_split($b);\n    $a = array_sum($a);\n    $b = array_sum($b);\n \
    \   if ($a === $b) {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n\
    \  });\n  $arr = array_map(function($x) {\n    return $x[0];\n  }, $arr);\n  return\
    \ $arr;\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_count_values($a);\n\
    \    $b = array_count_values($b);\n    $a = $a['1'] ?? 0;\n    $b = $b['1'] ??\
    \ 0;\n    if ($a === $b) {\n      return $a[0] - $b[0];\n    }\n    return $a\
    \ - $b;\n  });\n  $arr = array_map(function($n) {\n    return $n[0];\n  }, $arr);\n\
    \  return $arr;\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  \
    \  $arr = array_map(function($n) {\n        return [$n, decbin($n)];\n    }, $arr);\n\
    \    usort($arr, function($a, $b) {\n        $a_ones = substr_count($a[1], '1');\n\
    \        $b_ones = substr_count($b[1], '1');\n        if ($a_ones == $b_ones)\
    \ {\n            return $a[0] - $b[0];\n        }\n        return $a_ones - $b_ones;\n\
    \    });\n    return array_map(function($n) {\n        return $n[0];\n    }, $arr);\n\
    }\n", "  $arr = array_map(function($num) {\n    return [$num, decbin($num)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "    $arr =\
    \ array_map(function($num) {\n        $bin = decbin($num);\n        $ones = substr_count($bin,\
    \ '1');\n        return [$num, $ones];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        if ($a[1] == $b[1]) {\n            return $a[0] - $b[0];\n  \
    \      }\n        return $a[1] - $b[1];\n    });\n    return array_map(function($num)\
    \ {\n        return $num[0];\n    }, $arr);\n}\n", "  $arr = array_map(function($num)\
    \ {\n    return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a,\
    \ $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($num) {\n \
    \   return $num[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n \
    \   return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($num) {\n    return [$num, decbin($num)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_count_values($a);\n    $b = array_count_values($b);\n    $a =\
    \ $a['1'] ?? 0;\n    $b = $b['1'] ?? 0;\n    if ($a === $b) {\n      return $a[0]\
    \ <=> $b[0];\n    }\n    return $a <=> $b;\n  });\n  $arr = array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($num)\
    \ {\n    return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a,\
    \ $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($num) {\n  \
    \  return $num[0];\n  }, $arr);\n}\n", "  $ones = [];\n  $zeros = [];\n  foreach\
    \ ($arr as $key => $value) {\n    if (decbin($value) == 1) {\n      $ones[] =\
    \ $value;\n    } else {\n      $zeros[] = $value;\n    }\n  }\n  sort($ones);\n\
    \  sort($zeros);\n  return array_merge($ones, $zeros);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($v) {\n    return [$v,\
    \ decbin($v)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($v) {\n    return $v[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  },\
    \ $arr);\n}\n", "    $arr = array_map(function($n) {\n        return [$n, decbin($n)];\n\
    \    }, $arr);\n    usort($arr, function($a, $b) {\n        $a = $a[1];\n    \
    \    $b = $b[1];\n        $a = str_split($a);\n        $b = str_split($b);\n \
    \       $a = array_sum($a);\n        $b = array_sum($b);\n        if ($a === $b)\
    \ {\n            return $a[0] - $b[0];\n        }\n        return $a - $b;\n \
    \   });\n    $arr = array_map(function($n) {\n        return $n[0];\n    }, $arr);\n\
    \    return $arr;\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $aOnes = substr_count($a[1],\
    \ '1');\n    $bOnes = substr_count($b[1], '1');\n    if ($aOnes == $bOnes) {\n\
    \      return $a[0] - $b[0];\n    }\n    return $aOnes - $bOnes;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $ones = [];\n\
    \  $zeros = [];\n  foreach ($arr as $num) {\n    $ones[] = substr_count(decbin($num),\
    \ '1');\n    $zeros[] = $num;\n  }\n  array_multisort($ones, SORT_ASC, $zeros,\
    \ SORT_ASC);\n  return $zeros;\n}\n", "  $arr = array_map(function($n) {\n   \
    \ return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n  \
    \  $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $sorted\
    \ = [];\n  foreach ($arr as $num) {\n    $sorted[decbin($num)][] = $num;\n  }\n\
    \  ksort($sorted);\n  $result = [];\n  foreach ($sorted as $key => $value) {\n\
    \    foreach ($value as $num) {\n      $result[] = $num;\n    }\n  }\n  return\
    \ $result;\n}\n", "  $arr = array_map(function($num) {\n    return [$num, decbin($num)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $ones = [];\n\
    \  $zeros = [];\n  $result = [];\n  foreach ($arr as $key => $value) {\n    $binary\
    \ = decbin($value);\n    $ones[$key] = substr_count($binary, '1');\n    $zeros[$key]\
    \ = substr_count($binary, '0');\n  }\n  asort($ones);\n  foreach ($ones as $key\
    \ => $value) {\n    $result[] = $arr[$key];\n  }\n  return $result;\n}\n", " \
    \ $arr = array_map(function($a) {\n    return [$a, decbin($a)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($a) {\n    return $a[0];\n  }, $arr);\n}\n\n$tests = [\n\
    \  [[1, 5, 2, 3, 4], [1, 2, 3, 4, 5]],\n  [[-2, -3, -4, -5, -6], [-6, -5, -4,\
    \ -3, -2]],\n  [[1, 0, 2, 3, 4], [0, 1, 2, 3, 4]],\n  [[-1, -2, -3, -4, -5, -6],\
    \ [-6, -5, -4, -3, -2, -1]],\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\n  [[0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]],\n  [[-1, -2, -3, -4, -5, -6, -7, -8, -9,\
    \ -10], [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]],\n  [[-1, -2, -3, -4, -5, -6,\
    \ -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20], [-20, -19,\
    \ -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n    return [$x,\
    \ decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n\
    \    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n\
    \    $b = array_sum($b);\n    if ($a === $b) {\n      return $a[0] - $b[0];\n\
    \    }\n    return $a - $b;\n  });\n  $arr = array_map(function($x) {\n    return\
    \ $x[0];\n  }, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a1 = substr_count($a[1], '1');\n    $b1 = substr_count($b[1], '1');\n\
    \    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a1 = substr_count($a[1], '1');\n    $b1 = substr_count($b[1], '1');\n\
    \    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($num)\
    \ {\n    return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a,\
    \ $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($num) {\n  \
    \  return $num[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n  \
    \  return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n \
    \   $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($num) {\n    return [$num, decbin($num)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($x)\
    \ {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n   \
    \ return $x[0];\n  }, $arr);\n}\n", "  $arr_ones = [];\n  $arr_dec = [];\n  foreach\
    \ ($arr as $key => $value) {\n    $arr_ones[$key] = substr_count(decbin($value),\
    \ '1');\n    $arr_dec[$key] = $value;\n  }\n  array_multisort($arr_ones, SORT_ASC,\
    \ $arr_dec, SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "    $arr = array_map(function($n) {\n        $ones\
    \ = substr_count(decbin($n), '1');\n        return [$n, $ones];\n    }, $arr);\n\
    \    usort($arr, function($a, $b) {\n        if ($a[1] == $b[1]) {\n         \
    \   return $a[0] - $b[0];\n        }\n        return $a[1] - $b[1];\n    });\n\
    \    return array_map(function($n) {\n        return $n[0];\n    }, $arr);\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $sorted =\
    \ [];\n  foreach ($arr as $value) {\n    $sorted[$value] = decbin($value);\n \
    \ }\n  asort($sorted);\n  $sorted = array_keys($sorted);\n  return $sorted;\n\
    }\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($num) {\n   \
    \ return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($num) {\n    return $num[0];\n\
    \  }, $arr);\n}\n", "  $arr_ones = [];\n  $arr_dec = [];\n  foreach ($arr as $key\
    \ => $value) {\n    $arr_ones[$key] = substr_count(decbin($value), '1');\n   \
    \ $arr_dec[$key] = $value;\n  }\n  array_multisort($arr_ones, SORT_ASC, $arr_dec,\
    \ SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($v) {\n\
    \    $ones = substr_count(decbin($v), '1');\n    return [$v, $ones];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    if ($a[1] === $b[1]) {\n      return $a[0]\
    \ - $b[0];\n    }\n    return $a[1] - $b[1];\n  });\n  return array_map(function($v)\
    \ {\n    return $v[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n\
    \    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $sorted\
    \ = [];\n  $ones = [];\n  foreach ($arr as $key => $value) {\n    $ones[$key]\
    \ = substr_count(decbin($value), \"1\");\n  }\n  asort($ones);\n  foreach ($ones\
    \ as $key => $value) {\n    $sorted[] = $arr[$key];\n  }\n  return $sorted;\n\
    }\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n\
    \    $b = str_split($b);\n    $a = array_sum($a);\n    $b = array_sum($b);\n \
    \   if ($a === $b) {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n\
    \  });\n  $arr = array_map(function($n) {\n    return $n[0];\n  }, $arr);\n  return\
    \ $arr;\n}\n", "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($num) {\n    return [$num, decbin($num)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  },\
    \ $arr);\n}\n", "  $arr_bin = [];\n  $arr_dec = [];\n  foreach ($arr as $key =>\
    \ $value) {\n    $arr_bin[$key] = decbin($value);\n    $arr_dec[$key] = $value;\n\
    \  }\n  array_multisort(array_map('strlen', $arr_bin), SORT_ASC, $arr_bin, $arr_dec);\n\
    \  return $arr_dec;\n}\n", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n   \
    \ return $x[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  },\
    \ $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n    return\
    \ $x[0];\n  }, $arr);\n}\n", "  $ones = [];\n  $zeros = [];\n  foreach ($arr as\
    \ $key => $value) {\n    if ($value < 0) {\n      $zeros[] = $value;\n    } else\
    \ {\n      $ones[] = $value;\n    }\n  }\n  usort($ones, function($a, $b) {\n\
    \    $a_ones = substr_count(decbin($a), '1');\n    $b_ones = substr_count(decbin($b),\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a - $b;\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_merge($ones, $zeros);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    $ones = substr_count(decbin($n), '1');\n   \
    \ return [$n, $ones];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    if ($a[1]\
    \ == $b[1]) {\n      return $a[0] < $b[0] ? -1 : 1;\n    }\n    return $a[1] <\
    \ $b[1] ? -1 : 1;\n  });\n  return array_map(function($a) {\n    return $a[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    $ones = substr_count(decbin($n),\
    \ '1');\n    return [$n, $ones];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    if ($a[1] == $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a[1] - $b[1];\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($num) {\n    return [$num, decbin($num)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($num) {\n    return [$num, decbin($num)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $aOnes = substr_count($a[1], '1');\n  \
    \  $bOnes = substr_count($b[1], '1');\n    if ($aOnes === $bOnes) {\n      return\
    \ $a[0] - $b[0];\n    }\n    return $aOnes - $bOnes;\n  });\n  return array_map(function($num)\
    \ {\n    return $num[0];\n  }, $arr);\n}\n", "  $ones = [];\n  $zeros = [];\n\
    \  foreach ($arr as $num) {\n    $binary = decbin($num);\n    $count = substr_count($binary,\
    \ '1');\n    if ($count === 0) {\n      $zeros[] = $num;\n    } else {\n     \
    \ $ones[$count][] = $num;\n    }\n  }\n  ksort($ones);\n  foreach ($ones as $key\
    \ => $value) {\n    sort($ones[$key]);\n  }\n  sort($zeros);\n  $result = [];\n\
    \  foreach ($ones as $key => $value) {\n    foreach ($value as $num) {\n     \
    \ $result[] = $num;\n    }\n  }\n  foreach ($zeros as $num) {\n    $result[] =\
    \ $num;\n  }\n  return $result;\n}\n", "    $arr_ones = [];\n    $arr_dec = [];\n\
    \    foreach ($arr as $value) {\n        $arr_ones[] = substr_count(decbin($value),\
    \ '1');\n        $arr_dec[] = $value;\n    }\n    array_multisort($arr_ones, SORT_ASC,\
    \ $arr_dec, SORT_ASC, $arr);\n    return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n\
    \    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_count_values($a);\n\
    \    $b = array_count_values($b);\n    $a = $a['1'] ?? 0;\n    $b = $b['1'] ??\
    \ 0;\n    if ($a === $b) {\n      return $a[0] <=> $b[0];\n    }\n    return $a\
    \ <=> $b;\n  });\n  $arr = array_map(function($n) {\n    return $n[0];\n  }, $arr);\n\
    \  return $arr;\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $aOnes = substr_count($a[1], '1');\n    $bOnes = substr_count($b[1],\
    \ '1');\n    if ($aOnes === $bOnes) {\n      return $a[0] - $b[0];\n    }\n  \
    \  return $aOnes - $bOnes;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $ones = [];\n  foreach ($arr as $key => $value)\
    \ {\n    $ones[$key] = substr_count(decbin($value), '1');\n  }\n  array_multisort($ones,\
    \ SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n) {\n\
    \    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n\
    \    $a = str_replace('0', '', $a);\n    $b = str_replace('0', '', $b);\n    if\
    \ (strlen($a) == strlen($b)) {\n      return $a < $b ? -1 : 1;\n    }\n    return\
    \ strlen($a) < strlen($b) ? -1 : 1;\n  });\n  return array_map(function($x) {\n\
    \    return $x[0];\n  }, $arr);\n}\n", "  $result = [];\n  foreach ($arr as $key\
    \ => $value) {\n    $result[$key] = decbin($value);\n  }\n  asort($result);\n\
    \  foreach ($result as $key => $value) {\n    $result[$key] = bindec($value);\n\
    \  }\n  return $result;\n}\n", "  $arr = array_map(function($num) {\n    return\
    \ [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($num) {\n    return $num[0];\n\
    \  }, $arr);\n}\n", "  $result = [];\n  foreach ($arr as $key => $value) {\n \
    \   $result[$key] = decbin($value);\n  }\n  asort($result);\n  foreach ($result\
    \ as $key => $value) {\n    $result[$key] = bindec($value);\n  }\n  return $result;\n\
    }\n", "  $arr_ones = [];\n  $arr_dec = [];\n  foreach ($arr as $key => $value)\
    \ {\n    $arr_ones[$key] = substr_count(decbin($value), \"1\");\n    $arr_dec[$key]\
    \ = $value;\n  }\n  array_multisort($arr_ones, SORT_ASC, $arr_dec, SORT_ASC, $arr);\n\
    \  return $arr;\n}\n", "  $ones = [];\n  foreach ($arr as $key => $value) {\n\
    \    $ones[$key] = substr_count(decbin($value), '1');\n  }\n  array_multisort($ones,\
    \ SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n) {\n\
    \    $n = decbin($n);\n    $n = str_split($n);\n    $n = array_count_values($n);\n\
    \    return [$n[1], $n[0]];\n  }, $arr);\n  usort($arr, function($a, $b) {\n \
    \   if ($a[0] == $b[0]) {\n      return $a[1] - $b[1];\n    }\n    return $a[0]\
    \ - $b[0];\n  });\n  $arr = array_map(function($n) {\n    return bindec($n[1]);\n\
    \  }, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n\
    \    $b = $b[1];\n    $a = str_replace('0', '', $a);\n    $b = str_replace('0',\
    \ '', $b);\n    if (strlen($a) === strlen($b)) {\n      return $a - $b;\n    }\n\
    \    return strlen($a) - strlen($b);\n  });\n  return array_map(function($n) {\n\
    \    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n  \
    \  return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n \
    \   $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_count_values($a);\n    $b = array_count_values($b);\n    if ($a['1']\
    \ == $b['1']) {\n      return $a[0] - $b[0];\n    }\n    return $a['1'] - $b['1'];\n\
    \  });\n  $arr = array_map(function($n) {\n    return $n[0];\n  }, $arr);\n  return\
    \ $arr;\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a1 = substr_count($a[1],\
    \ '1');\n    $b1 = substr_count($b[1], '1');\n    if ($a1 == $b1) {\n      return\
    \ $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n  });\n  return array_map(function($a)\
    \ {\n    return $a[0];\n  }, $arr);\n}\n", "    $arr_bin = [];\n    $arr_dec =\
    \ [];\n    foreach ($arr as $value) {\n        $arr_bin[] = decbin($value);\n\
    \        $arr_dec[] = $value;\n    }\n    array_multisort(array_map('strlen',\
    \ $arr_bin), SORT_ASC, $arr_bin, $arr_dec);\n    return $arr_dec;\n}\n", "  $arr\
    \ = array_map(function($val) {\n    return [$val, decbin($val)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($val) {\n    return $val[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($a) {\n    return [$a, decbin($a)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a1 = substr_count($a[1], '1');\n    $b1 = substr_count($b[1],\
    \ '1');\n    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a1 - $b1;\n  });\n  return array_map(function($a) {\n    return $a[0];\n  },\
    \ $arr);\n}\n", "  $arr = array_map(function($a) {\n    $ones = substr_count(decbin($a),\
    \ '1');\n    return [$a, $ones];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    if ($a[1] == $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a[1] - $b[1];\n  });\n  return array_map(function($a) {\n    return $a[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_count_values($a);\n\
    \    $b = array_count_values($b);\n    if ($a[1] == $b[1]) {\n      return $a[0]\
    \ - $b[0];\n    }\n    return $a[1] - $b[1];\n  });\n  $arr = array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($a) {\n   \
    \ return $a[0];\n  }, $arr);\n}\n", "  $arr_ones = [];\n  foreach ($arr as $key\
    \ => $value) {\n    $arr_ones[$key] = substr_count(decbin($value), '1');\n  }\n\
    \  array_multisort($arr_ones, SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr\
    \ = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n    return\
    \ $x[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n\necho\
    \ implode(', ', sort_array([1, 5, 2, 3, 4])) . PHP_EOL;\necho implode(', ', sort_array([-2,\
    \ -3, -4, -5, -6])) . PHP_EOL;\necho implode(', ', sort_array([1, 0, 2, 3, 4]))\
    \ . PHP_EOL;", "  $ones = [];\n  $zeros = [];\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value < 0) {\n      $zeros[] = $value;\n    } else {\n      $ones[]\
    \ = $value;\n    }\n  }\n  $ones = array_map(function($value) {\n    return [\n\
    \      'value' => $value,\n      'ones' => substr_count(decbin($value), '1')\n\
    \    ];\n  }, $ones);\n  usort($ones, function($a, $b) {\n    if ($a['ones'] ==\
    \ $b['ones']) {\n      return $a['value'] - $b['value'];\n    }\n    return $a['ones']\
    \ - $b['ones'];\n  });\n  $ones = array_map(function($value) {\n    return $value['value'];\n\
    \  }, $ones);\n  return array_merge($ones, $zeros);\n}\n", "    $arr = array_map(function($n)\
    \ {\n        return [$n, decbin($n)];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        $a = $a[1];\n        $b = $b[1];\n        $a = substr_count($a,\
    \ '1');\n        $b = substr_count($b, '1');\n        if ($a === $b) {\n     \
    \       return $a[0] - $b[0];\n        }\n        return $a - $b;\n    });\n \
    \   return array_map(function($n) {\n        return $n[0];\n    }, $arr);\n}\n",
  "  $arr = array_map(function($v) {\n    return [$v, decbin($v)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($v) {\n    return $v[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n    return\
    \ [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($x) {\n    return $x[0];\n  },\
    \ $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $aOnes = substr_count($a[1],\
    \ '1');\n    $bOnes = substr_count($b[1], '1');\n    if ($aOnes === $bOnes) {\n\
    \      return $a[0] - $b[0];\n    }\n    return $aOnes - $bOnes;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    $ones = substr_count(decbin($n),\
    \ '1');\n    return [$n, $ones];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    if ($a[1] == $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a[1] - $b[1];\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "    $arr = array_map(function($n) {\n        return [$n,\
    \ decbin($n)];\n    }, $arr);\n    usort($arr, function($a, $b) {\n        $a1\
    \ = substr_count($a[1], '1');\n        $b1 = substr_count($b[1], '1');\n     \
    \   if ($a1 == $b1) {\n            return $a[0] - $b[0];\n        }\n        return\
    \ $a1 - $b1;\n    });\n    return array_map(function($n) {\n        return $n[0];\n\
    \    }, $arr);\n}\n\necho implode(', ', sort_array([1, 5, 2, 3, 4])), \"\\n\"\
    ;\necho implode(', ', sort_array([-2, -3, -4, -5, -6])), \"\\n\";\necho implode(',\
    \ ', sort_array([1, 0, 2, 3, 4])), \"\\n\";", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
