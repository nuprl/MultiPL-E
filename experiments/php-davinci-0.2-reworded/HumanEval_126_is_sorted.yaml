name: HumanEval_126_is_sorted
language: php
prompt: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
  // in ascending order. If array has more than 1 duplicate of the same\n// number,\
  \ return false. Assume no negative numbers and only integers.\n// Examples\n// >>>\
  \ is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n// true\n\
  // >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1, 2, 3,\
  \ 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n//\
  \ >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
  \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
  function is_sorted($lst) {\n"
tests: "function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4,\
  \ 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $prev = null;\n    foreach ($lst as $item) {\n        if ($prev\
    \ !== null && $prev >= $item) {\n            return false;\n        }\n      \
    \  $prev = $item;\n    }\n    return true;\n}\n", "    $sorted = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $sorted;\n}\n", "    $lst = array_unique($lst);\n\
    \    $count = count($lst);\n    $sorted = true;\n    for ($i = 0; $i < $count\
    \ - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            $sorted =\
    \ false;\n            break;\n        }\n    }\n    return $sorted;\n}\n", " \
    \   $sorted = true;\n    $prev = $lst[0];\n    for ($i = 1; $i < count($lst);\
    \ $i++) {\n        if ($lst[$i] < $prev) {\n            $sorted = false;\n   \
    \         break;\n        }\n        $prev = $lst[$i];\n    }\n    return $sorted;\n\
    }\n", "    $i = 0;\n    $len = count($lst);\n    while ($i < $len - 1) {\n   \
    \     if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n        }\n\
    \        $i++;\n    }\n    return true;\n}\n", "    $sorted = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $sorted;\n}\n", "    $lst_length =\
    \ count($lst);\n    $i = 0;\n    $j = 1;\n    while ($j < $lst_length) {\n   \
    \     if ($lst[$i] > $lst[$j]) {\n            return false;\n        }\n     \
    \   $i++;\n        $j++;\n    }\n    return true;\n}", "    $sorted = true;\n\
    \    $prev = null;\n    foreach ($lst as $num) {\n        if ($prev !== null &&\
    \ $num <= $prev) {\n            $sorted = false;\n            break;\n       \
    \ }\n        $prev = $num;\n    }\n    return $sorted;\n}\n", "    $len = count($lst);\n\
    \    if ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len\
    \ - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    $sorted = true;\n    $prev = $lst[0];\n\
    \    foreach ($lst as $num) {\n        if ($num < $prev) {\n            $sorted\
    \ = false;\n            break;\n        }\n        $prev = $num;\n    }\n    return\
    \ $sorted;\n}\n", "    $sorted = true;\n    $prev = null;\n    foreach ($lst as\
    \ $num) {\n        if ($prev !== null && $num <= $prev) {\n            $sorted\
    \ = false;\n            break;\n        }\n        $prev = $num;\n    }\n    return\
    \ $sorted;\n}\n", "    $count = count($lst);\n    if ($count == 1) {\n       \
    \ return true;\n    }\n    for ($i = 0; $i < $count - 1; $i++) {\n        if ($lst[$i]\
    \ >= $lst[$i + 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "    if (count($lst) == 1) {\n        return true;\n    }\n   \
    \ $last = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $last) {\n            return false;\n        }\n        $last = $lst[$i];\n\
    \    }\n    return true;\n}\n", "    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $item) {\n        if ($prev !== null && $item <= $prev) {\n       \
    \     $sorted = false;\n            break;\n        }\n        $prev = $item;\n\
    \    }\n    return $sorted;\n}\n", "    if (count($lst) == 1) {\n        return\
    \ true;\n    }\n    for ($i = 0; $i < count($lst) - 1; $i++) {\n        if ($lst[$i]\
    \ >= $lst[$i + 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "    $lst_len = count($lst);\n    if ($lst_len == 1) {\n      \
    \  return true;\n    }\n    $prev = $lst[0];\n    for ($i = 1; $i < $lst_len;\
    \ $i++) {\n        if ($lst[$i] < $prev) {\n            return false;\n      \
    \  }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n", "    $prev = null;\n\
    \    foreach ($lst as $item) {\n        if ($prev !== null && $prev >= $item)\
    \ {\n            return false;\n        }\n        $prev = $item;\n    }\n   \
    \ return true;\n}\n", "    $lst_length = count($lst);\n    if ($lst_length ==\
    \ 1) {\n        return true;\n    }\n    $prev = $lst[0];\n    for ($i = 1; $i\
    \ < $lst_length; $i++) {\n        if ($lst[$i] < $prev) {\n            return\
    \ false;\n        }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n",
  "    $prev = null;\n    foreach ($lst as $i) {\n        if ($prev !== null && $i\
    \ <= $prev) {\n            return false;\n        }\n        $prev = $i;\n   \
    \ }\n    return true;\n}\n", "    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev === null) {\n            $prev = $num;\n\
    \        } else if ($num < $prev) {\n            $sorted = false;\n          \
    \  break;\n        } else {\n            $prev = $num;\n        }\n    }\n   \
    \ return $sorted;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
