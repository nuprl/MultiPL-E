language: php
name: HumanEval_119_match_parens
results:
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_balance = $str1_open - $str1_close;\n    $str2_balance = $str2_open\
    \ - $str2_close;\n    if ($str1_balance == 0 && $str2_balance == 0) {\n      \
    \  return \"Yes\";\n    } elseif ($str1_balance == 0 && $str2_balance != 0) {\n\
    \        return \"No\";\n    } elseif ($str1_balance != 0 && $str2_balance ==\
    \ 0) {\n        return \"No\";\n    } elseif ($str1_balance != 0 && $str2_balance\
    \ != 0) {\n        if ($str1_balance == $str2_balance) {\n            return \"\
    Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}\n\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpykowfd46.php:46\n\
    Stack trace:\n#0 /tmp/tmpykowfd46.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpykowfd46.php\
    \ on line 46\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ != $str2_close) {\n        return \"No\";\n    } elseif ($str1_open != $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"No\";\n    } elseif ($str1_open\
    \ != $str1_close && $str2_open != $str2_close) {\n        if ($str1_open > $str1_close)\
    \ {\n            $str1_open = $str1_open - $str1_close;\n            $str2_close\
    \ = $str2_close - $str2_open;\n            if ($str1_open == $str2_close) {\n\
    \                return \"Yes\";\n            } else {\n                return\
    \ \"No\";\n            }\n        } elseif ($str1_open < $str1_close) {\n    \
    \        $str1_close = $str1_close - $str1_open;\n            $str2_open = $str2_open\
    \ - $str2_close;\n            if ($str1_close == $str2_open) {\n             \
    \   return \"Yes\";\n            } else {\n                return \"No\";\n  \
    \          }\n        }\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi2qqxbp0.php:65\n\
    Stack trace:\n#0 /tmp/tmpi2qqxbp0.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpi2qqxbp0.php\
    \ on line 65\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_open\
    \ = substr_count($s1, '(');\n    $s1_close = substr_count($s1, ')');\n    $s2_open\
    \ = substr_count($s2, '(');\n    $s2_close = substr_count($s2, ')');\n    if ($s1_open\
    \ == $s1_close && $s2_open == $s2_close) {\n        return 'Yes';\n    } elseif\
    \ ($s1_open == $s1_close) {\n        return 'Yes';\n    } elseif ($s2_open ==\
    \ $s2_close) {\n        return 'Yes';\n    } else {\n        return 'No';\n  \
    \  }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplx7nrzsx.php:38\n\
    Stack trace:\n#0 /tmp/tmplx7nrzsx.php(52): test()\n#1 {main}\n  thrown in /tmp/tmplx7nrzsx.php\
    \ on line 38\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $s1 = $lst[0];\n  $s2 = $lst[1];\n  $s3 = $s1\
    \ . $s2;\n  $s4 = $s2 . $s1;\n  if (is_good($s3) || is_good($s4)) {\n    return\
    \ \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_good() in\
    \ /tmp/tmp65e79zxg.php:20\nStack trace:\n#0 /tmp/tmp65e79zxg.php(28): match_parens(Array)\n\
    #1 /tmp/tmp65e79zxg.php(32): candidate(Array)\n#2 /tmp/tmp65e79zxg.php(46): test()\n\
    #3 {main}\n  thrown in /tmp/tmp65e79zxg.php on line 20\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str = $str1 . $str2;\n    $count = 0;\n    for ($i = 0; $i < strlen($str);\
    \ $i++) {\n        if ($str[$i] == '(') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return \"No\";\n        }\n    }\n    if ($count == 0) {\n        return \"\
    Yes\";\n    } else {\n        return \"No\";\n    }\n}\necho match_parens(array(\"\
    ()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx71wfpej.php:46\n\
    Stack trace:\n#0 /tmp/tmpx71wfpej.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpx71wfpej.php\
    \ on line 46\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr6fgexnz.php:53\n\
    Stack trace:\n#0 /tmp/tmpr6fgexnz.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpr6fgexnz.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = 0;\n    $right = 0;\n    for ($i\
    \ = 0; $i < strlen($lst[0]); $i++) {\n        if ($lst[0][$i] == '(') {\n    \
    \        $left++;\n        } else {\n            $right++;\n        }\n    }\n\
    \    for ($i = 0; $i < strlen($lst[1]); $i++) {\n        if ($lst[1][$i] == '(')\
    \ {\n            $left++;\n        } else {\n            $right++;\n        }\n\
    \    }\n    if ($left == $right) {\n        return \"Yes\";\n    } else {\n  \
    \      return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph5r6nzqm.php:52\n\
    Stack trace:\n#0 /tmp/tmph5r6nzqm.php(57): test()\n#1 {main}\n  thrown in /tmp/tmph5r6nzqm.php\
    \ on line 52\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ != $str2_close) {\n        return \"No\";\n    } elseif ($str1_open != $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"No\";\n    } elseif ($str1_open\
    \ != $str1_close && $str2_open != $str2_close) {\n        if ($str1_open > $str1_close)\
    \ {\n            $str1_open = $str1_open - $str1_close;\n            $str1_close\
    \ = 0;\n        } elseif ($str1_open < $str1_close) {\n            $str1_close\
    \ = $str1_close - $str1_open;\n            $str1_open = 0;\n        }\n      \
    \  if ($str2_open > $str2_close) {\n            $str2_open = $str2_open - $str2_close;\n\
    \            $str2_close = 0;\n        } elseif ($str2_open < $str2_close) {\n\
    \            $str2_close = $str2_close - $str2_open;\n            $str2_open =\
    \ 0;\n        }\n        if ($str1_open == $str2_close && $str2_open == $str1_close)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg7s1jsj6.php:66\n\
    Stack trace:\n#0 /tmp/tmpg7s1jsj6.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpg7s1jsj6.php\
    \ on line 66\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open == -$str2_open) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else if ($str1_open\
    \ < 0 && $str2_open > 0) {\n        if ($str2_open == -$str1_open) {\n       \
    \     return \"Yes\";\n        } else {\n            return \"No\";\n        }\n\
    \    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjfoaieqv.php:68\n\
    Stack trace:\n#0 /tmp/tmpjfoaieqv.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpjfoaieqv.php\
    \ on line 68\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open == abs($str2_open)) {\n            return \"\
    Yes\";\n        }\n    } else if ($str1_open < 0 && $str2_open > 0) {\n      \
    \  if (abs($str1_open) == $str2_open) {\n            return \"Yes\";\n       \
    \ }\n    }\n    return \"No\";\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd_5weboy.php:64\n\
    Stack trace:\n#0 /tmp/tmpd_5weboy.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpd_5weboy.php\
    \ on line 64\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\necho match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoyfrfsy0.php:55\n\
    Stack trace:\n#0 /tmp/tmpoyfrfsy0.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpoyfrfsy0.php\
    \ on line 55\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ > 0) {\n        return \"No\";\n    } else if ($str1_open > 0 && $str2_open\
    \ == 0) {\n        return \"No\";\n    } else if ($str1_open > 0 && $str2_open\
    \ > 0) {\n        return \"No\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"No\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"No\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"No\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpudmdlrnw.php:64\n\
    Stack trace:\n#0 /tmp/tmpudmdlrnw.php(76): test()\n#1 {main}\n  thrown in /tmp/tmpudmdlrnw.php\
    \ on line 64\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48h7isyg.php:53\n\
    Stack trace:\n#0 /tmp/tmp48h7isyg.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp48h7isyg.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = 0;\n    $right = 0;\n    foreach\
    \ ($lst as $str) {\n        for ($i = 0; $i < strlen($str); $i++) {\n        \
    \    if ($str[$i] == '(') {\n                $left++;\n            } else {\n\
    \                $right++;\n            }\n        }\n    }\n    if ($left ==\
    \ $right) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n \
    \   }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn4h6dhyt.php:47\n\
    Stack trace:\n#0 /tmp/tmpn4h6dhyt.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpn4h6dhyt.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_count = 0;\n    $str2_count = 0;\n    for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n     \
    \   } else {\n            $str1_count--;\n        }\n    }\n    for ($i = 0; $i\
    \ < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ == -1 && $str2_count == 1) {\n        return \"Yes\";\n    } else {\n      \
    \  return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpub11v5nv.php:47\n\
    Stack trace:\n#0 /tmp/tmpub11v5nv.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpub11v5nv.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else {\n   \
    \     return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxdm_q25z.php:57\n\
    Stack trace:\n#0 /tmp/tmpxdm_q25z.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpxdm_q25z.php\
    \ on line 57\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48h7isyg.php:53\n\
    Stack trace:\n#0 /tmp/tmp48h7isyg.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp48h7isyg.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ > 0) {\n        return \"No\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"No\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else if ($str1_open\
    \ > 0 && $str2_open == 0) {\n        return \"No\";\n    } else if ($str1_open\
    \ > 0 && $str2_open < 0) {\n        if ($str1_open + $str2_open == 0) {\n    \
    \        return \"Yes\";\n        } else {\n            return \"No\";\n     \
    \   }\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfn1xhrtu.php:64\n\
    Stack trace:\n#0 /tmp/tmpfn1xhrtu.php(77): test()\n#1 {main}\n  thrown in /tmp/tmpfn1xhrtu.php\
    \ on line 64\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open + $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuuqh_npb.php:56\n\
    Stack trace:\n#0 /tmp/tmpuuqh_npb.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpuuqh_npb.php\
    \ on line 56\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else if ($str1_open == $str1_close && $str2_open\
    \ != $str2_close) {\n        return \"No\";\n    } else if ($str1_open != $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"No\";\n    } else if ($str1_open\
    \ != $str1_close && $str2_open != $str2_close) {\n        if ($str1_open > $str1_close)\
    \ {\n            if ($str2_open > $str2_close) {\n                return \"No\"\
    ;\n            } else {\n                return \"Yes\";\n            }\n    \
    \    } else {\n            if ($str2_open > $str2_close) {\n                return\
    \ \"Yes\";\n            } else {\n                return \"No\";\n           \
    \ }\n        }\n    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg4t6z9pl.php:68\n\
    Stack trace:\n#0 /tmp/tmpg4t6z9pl.php(80): test()\n#1 {main}\n  thrown in /tmp/tmpg4t6z9pl.php\
    \ on line 68\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_len\
    \ = strlen($str1);\n  $str2_len = strlen($str2);\n  $str1_open = 0;\n  $str2_open\
    \ = 0;\n  $str1_close = 0;\n  $str2_close = 0;\n  for ($i = 0; $i < $str1_len;\
    \ $i++) {\n    if ($str1[$i] == '(') {\n      $str1_open++;\n    } else {\n  \
    \    $str1_close++;\n    }\n  }\n  for ($i = 0; $i < $str2_len; $i++) {\n    if\
    \ ($str2[$i] == '(') {\n      $str2_open++;\n    } else {\n      $str2_close++;\n\
    \    }\n  }\n  if ($str1_open == $str1_close && $str2_open == $str2_close) {\n\
    \    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i7d3moc.php:50\n\
    Stack trace:\n#0 /tmp/tmp2i7d3moc.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp2i7d3moc.php\
    \ on line 50\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_len\
    \ = strlen($str1);\n  $str2_len = strlen($str2);\n  $str1_open = 0;\n  $str2_open\
    \ = 0;\n  for ($i = 0; $i < $str1_len; $i++) {\n    if ($str1[$i] == '(') {\n\
    \      $str1_open++;\n    } else {\n      $str1_open--;\n    }\n  }\n  for ($i\
    \ = 0; $i < $str2_len; $i++) {\n    if ($str2[$i] == '(') {\n      $str2_open++;\n\
    \    } else {\n      $str2_open--;\n    }\n  }\n  if ($str1_open == 0 && $str2_open\
    \ == 0) {\n    return \"Yes\";\n  } else if ($str1_open == 0 && $str2_open < 0)\
    \ {\n    return \"Yes\";\n  } else if ($str1_open < 0 && $str2_open == 0) {\n\
    \    return \"Yes\";\n  } else if ($str1_open < 0 && $str2_open < 0) {\n    return\
    \ \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq7jc144u.php:54\n\
    Stack trace:\n#0 /tmp/tmpq7jc144u.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpq7jc144u.php\
    \ on line 54\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $lst = array_map(function($x) { return str_split($x);\
    \ }, $lst);\n    $lst = array_reduce($lst, function($acc, $x) { return array_merge($acc,\
    \ $x); }, []);\n    $lst = array_reduce($lst, function($acc, $x) {\n        if\
    \ ($x == '(') {\n            $acc[] = '(';\n        } else if ($x == ')') {\n\
    \            if (count($acc) == 0) {\n                return false;\n        \
    \    } else {\n                array_pop($acc);\n            }\n        }\n  \
    \      return $acc;\n    }, []);\n    return count($lst) == 0 ? 'Yes' : 'No';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpv_z8cl86.php on line 22\n\nWarning: array_pop() expects\
    \ parameter 1 to be array, bool given in /tmp/tmpv_z8cl86.php on line 25\n\nWarning:\
    \ count(): Parameter must be an array or an object that implements Countable in\
    \ /tmp/tmpv_z8cl86.php on line 30\n\nWarning: count(): Parameter must be an array\
    \ or an object that implements Countable in /tmp/tmpv_z8cl86.php on line 30\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpv_z8cl86.php:41\nStack\
    \ trace:\n#0 /tmp/tmpv_z8cl86.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpv_z8cl86.php\
    \ on line 41\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_count = 0;\n    $str2_count = 0;\n    for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n     \
    \   } else {\n            $str1_count--;\n        }\n    }\n    for ($i = 0; $i\
    \ < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else {\n       \
    \ return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7r_bbzg6.php:45\n\
    Stack trace:\n#0 /tmp/tmp7r_bbzg6.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp7r_bbzg6.php\
    \ on line 45\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ != $str2_close) {\n        return \"No\";\n    } elseif ($str1_open != $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"No\";\n    } elseif ($str1_open\
    \ != $str1_close && $str2_open != $str2_close) {\n        if ($str1_open > $str1_close)\
    \ {\n            $str1_open = $str1_open - $str1_close;\n            $str1_close\
    \ = 0;\n        } elseif ($str1_open < $str1_close) {\n            $str1_close\
    \ = $str1_close - $str1_open;\n            $str1_open = 0;\n        }\n      \
    \  if ($str2_open > $str2_close) {\n            $str2_open = $str2_open - $str2_close;\n\
    \            $str2_close = 0;\n        } elseif ($str2_open < $str2_close) {\n\
    \            $str2_close = $str2_close - $str2_open;\n            $str2_open =\
    \ 0;\n        }\n        if ($str1_open == $str2_close && $str2_open == $str1_close)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcqnq_qgx.php:67\n\
    Stack trace:\n#0 /tmp/tmpcqnq_qgx.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpcqnq_qgx.php\
    \ on line 67\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_open = substr_count($str1, '(');\n    $str1_close = substr_count($str1,\
    \ ')');\n    $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ != $str2_close) {\n        return \"No\";\n    } elseif ($str1_open != $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"No\";\n    } elseif ($str1_open\
    \ != $str1_close && $str2_open != $str2_close) {\n        if ($str1_open > $str1_close)\
    \ {\n            $str1_open = $str1_open - $str1_close;\n            $str2_close\
    \ = $str2_close - $str2_open;\n            if ($str1_open == $str2_close) {\n\
    \                return \"Yes\";\n            } else {\n                return\
    \ \"No\";\n            }\n        } elseif ($str1_open < $str1_close) {\n    \
    \        $str1_close = $str1_close - $str1_open;\n            $str2_open = $str2_open\
    \ - $str2_close;\n            if ($str1_close == $str2_open) {\n             \
    \   return \"Yes\";\n            } else {\n                return \"No\";\n  \
    \          }\n        }\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpce1qs1_p.php:63\n\
    Stack trace:\n#0 /tmp/tmpce1qs1_p.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpce1qs1_p.php\
    \ on line 63\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str = $str1 . $str2;\n    $len = strlen($str);\n    $count = 0;\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        if ($str[$i] == '(') {\n            $count++;\n\
    \        } else {\n            $count--;\n        }\n        if ($count < 0) {\n\
    \            return \"No\";\n        }\n    }\n    if ($count == 0) {\n      \
    \  return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj4doyboh.php:45\n\
    Stack trace:\n#0 /tmp/tmpj4doyboh.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpj4doyboh.php\
    \ on line 45\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_open_close = $str1_open - $str1_close;\n    $str2_open_close\
    \ = $str2_open - $str2_close;\n    $str1_open_close_abs = abs($str1_open_close);\n\
    \    $str2_open_close_abs = abs($str2_open_close);\n    if ($str1_open_close_abs\
    \ == $str2_open_close_abs) {\n        return \"Yes\";\n    } else {\n        return\
    \ \"No\";\n    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr1g0zb64.php:41\n\
    Stack trace:\n#0 /tmp/tmpr1g0zb64.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpr1g0zb64.php\
    \ on line 41\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52f9157j.php:49\n\
    Stack trace:\n#0 /tmp/tmp52f9157j.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp52f9157j.php\
    \ on line 49\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open + $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuuqh_npb.php:56\n\
    Stack trace:\n#0 /tmp/tmpuuqh_npb.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpuuqh_npb.php\
    \ on line 56\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_count = 0;\n    $str2_count = 0;\n    for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n     \
    \   } else {\n            $str1_count--;\n        }\n    }\n    for ($i = 0; $i\
    \ < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ == 0 && $str2_count < 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ > 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ > 0 && $str2_count < 0) {\n        if ($str1_count == -$str2_count) {\n    \
    \        return \"Yes\";\n        } else {\n            return \"No\";\n     \
    \   }\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplix978_r.php:58\n\
    Stack trace:\n#0 /tmp/tmplix978_r.php(69): test()\n#1 {main}\n  thrown in /tmp/tmplix978_r.php\
    \ on line 58\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ != $str2_close) {\n        return \"No\";\n    } elseif ($str1_open != $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"No\";\n    } elseif ($str1_open\
    \ != $str1_close && $str2_open != $str2_close) {\n        $str1_diff = $str1_open\
    \ - $str1_close;\n        $str2_diff = $str2_open - $str2_close;\n        if ($str1_diff\
    \ == $str2_diff) {\n            return \"Yes\";\n        } else {\n          \
    \  return \"No\";\n        }\n    }\n}\n\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfvwbuj8l.php:46\n\
    Stack trace:\n#0 /tmp/tmpfvwbuj8l.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpfvwbuj8l.php\
    \ on line 46\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_count = 0;\n    $str2_count = 0;\n    for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n     \
    \   } else {\n            $str1_count--;\n        }\n    }\n    for ($i = 0; $i\
    \ < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ == 0 && $str2_count < 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ > 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ > 0 && $str2_count < 0) {\n        if ($str1_count == abs($str2_count)) {\n\
    \            return \"Yes\";\n        } else {\n            return \"No\";\n \
    \       }\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpicg954s_.php:58\n\
    Stack trace:\n#0 /tmp/tmpicg954s_.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpicg954s_.php\
    \ on line 58\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_len\
    \ = strlen($str1);\n  $str2_len = strlen($str2);\n  $str1_open = 0;\n  $str2_open\
    \ = 0;\n  for ($i = 0; $i < $str1_len; $i++) {\n    if ($str1[$i] == '(') {\n\
    \      $str1_open++;\n    } else {\n      $str1_open--;\n    }\n  }\n  for ($i\
    \ = 0; $i < $str2_len; $i++) {\n    if ($str2[$i] == '(') {\n      $str2_open++;\n\
    \    } else {\n      $str2_open--;\n    }\n  }\n  if ($str1_open == 0 && $str2_open\
    \ == 0) {\n    return \"Yes\";\n  } else if ($str1_open == $str2_open) {\n   \
    \ return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n\necho match_parens(array(\"\
    ()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nYes\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5qsip00v.php:52\n\
    Stack trace:\n#0 /tmp/tmp5qsip00v.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp5qsip00v.php\
    \ on line 52\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = 0;\n    $right = 0;\n    $left_parens\
    \ = 0;\n    $right_parens = 0;\n    $left_str = $lst[0];\n    $right_str = $lst[1];\n\
    \    while ($left < strlen($left_str)) {\n        if ($left_str[$left] == '(')\
    \ {\n            $left_parens++;\n        } else {\n            $right_parens++;\n\
    \        }\n        $left++;\n    }\n    while ($right < strlen($right_str)) {\n\
    \        if ($right_str[$right] == '(') {\n            $left_parens++;\n     \
    \   } else {\n            $right_parens++;\n        }\n        $right++;\n   \
    \ }\n    if ($left_parens == $right_parens) {\n        return \"Yes\";\n    }\
    \ else {\n        return \"No\";\n    }\n}\necho match_parens(array(\"()(\", \"\
    )\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_qn85vy5.php:60\n\
    Stack trace:\n#0 /tmp/tmp_qn85vy5.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp_qn85vy5.php\
    \ on line 60\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_count = 0;\n    $str2_count = 0;\n    for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n     \
    \   } else {\n            $str1_count--;\n        }\n    }\n    for ($i = 0; $i\
    \ < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else {\n       \
    \ return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7r_bbzg6.php:45\n\
    Stack trace:\n#0 /tmp/tmp7r_bbzg6.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp7r_bbzg6.php\
    \ on line 45\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open == -$str2_open) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else if ($str1_open\
    \ < 0 && $str2_open > 0) {\n        if ($str2_open == -$str1_open) {\n       \
    \     return \"Yes\";\n        } else {\n            return \"No\";\n        }\n\
    \    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjfoaieqv.php:68\n\
    Stack trace:\n#0 /tmp/tmpjfoaieqv.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpjfoaieqv.php\
    \ on line 68\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48h7isyg.php:53\n\
    Stack trace:\n#0 /tmp/tmp48h7isyg.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp48h7isyg.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $len1 = strlen($str1);\n    $len2 = strlen($str2);\n    $i = 0;\n    $j =\
    \ 0;\n    $k = 0;\n    $open = 0;\n    $close = 0;\n    while ($i < $len1) {\n\
    \        if ($str1[$i] == '(') {\n            $open++;\n        } else {\n   \
    \         $close++;\n        }\n        $i++;\n    }\n    while ($j < $len2) {\n\
    \        if ($str2[$j] == '(') {\n            $open++;\n        } else {\n   \
    \         $close++;\n        }\n        $j++;\n    }\n    if ($open == $close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    echo match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxfw4trz5.php:63\n\
    Stack trace:\n#0 /tmp/tmpxfw4trz5.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpxfw4trz5.php\
    \ on line 63\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52f9157j.php:49\n\
    Stack trace:\n#0 /tmp/tmp52f9157j.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp52f9157j.php\
    \ on line 49\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48h7isyg.php:53\n\
    Stack trace:\n#0 /tmp/tmp48h7isyg.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp48h7isyg.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48h7isyg.php:53\n\
    Stack trace:\n#0 /tmp/tmp48h7isyg.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp48h7isyg.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_balance = $str1_open - $str1_close;\n    $str2_balance = $str2_open\
    \ - $str2_close;\n    $str1_balance_open = $str1_balance > 0 ? $str1_balance :\
    \ 0;\n    $str1_balance_close = $str1_balance < 0 ? abs($str1_balance) : 0;\n\
    \    $str2_balance_open = $str2_balance > 0 ? $str2_balance : 0;\n    $str2_balance_close\
    \ = $str2_balance < 0 ? abs($str2_balance) : 0;\n    $str1_balance_open_count\
    \ = substr_count($str1, '(');\n    $str1_balance_close_count = substr_count($str1,\
    \ ')');\n    $str2_balance_open_count = substr_count($str2, '(');\n    $str2_balance_close_count\
    \ = substr_count($str2, ')');\n    $str1_balance_open_count_needed = $str1_balance_open_count\
    \ - $str1_balance_open;\n    $str1_balance_close_count_needed = $str1_balance_close_count\
    \ - $str1_balance_close;\n    $str2_balance_open_count_needed = $str2_balance_open_count\
    \ - $str2_balance_open;\n    $str2_balance_close_count_needed = $str2_balance_close_count\
    \ - $str2_balance_close;\n    $str1_balance_open_count_needed_str2 = $str1_balance_open\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpem08pml8.php on line 39

    '
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn_3cg15p.php:50\n\
    Stack trace:\n#0 /tmp/tmpn_3cg15p.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpn_3cg15p.php\
    \ on line 50\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_count = 0;\n    $str2_count = 0;\n    for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n     \
    \   } else {\n            $str1_count--;\n        }\n    }\n    for ($i = 0; $i\
    \ < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else {\n       \
    \ return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7r_bbzg6.php:45\n\
    Stack trace:\n#0 /tmp/tmp7r_bbzg6.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp7r_bbzg6.php\
    \ on line 45\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplcc_wgz8.php:48\n\
    Stack trace:\n#0 /tmp/tmplcc_wgz8.php(62): test()\n#1 {main}\n  thrown in /tmp/tmplcc_wgz8.php\
    \ on line 48\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48h7isyg.php:53\n\
    Stack trace:\n#0 /tmp/tmp48h7isyg.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp48h7isyg.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    echo match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqmgbg69z.php:51\n\
    Stack trace:\n#0 /tmp/tmpqmgbg69z.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpqmgbg69z.php\
    \ on line 51\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_len\
    \ = strlen($s1);\n    $s2_len = strlen($s2);\n    $s1_open = 0;\n    $s2_open\
    \ = 0;\n    for ($i = 0; $i < $s1_len; $i++) {\n        if ($s1[$i] == '(') {\n\
    \            $s1_open++;\n        } else {\n            $s1_open--;\n        }\n\
    \    }\n    for ($i = 0; $i < $s2_len; $i++) {\n        if ($s2[$i] == '(') {\n\
    \            $s2_open++;\n        } else {\n            $s2_open--;\n        }\n\
    \    }\n    if ($s1_open > 0 && $s2_open < 0) {\n        return \"Yes\";\n   \
    \ } else if ($s1_open < 0 && $s2_open > 0) {\n        return \"Yes\";\n    } else\
    \ {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpejhb06an.php:51\n\
    Stack trace:\n#0 /tmp/tmpejhb06an.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpejhb06an.php\
    \ on line 51\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ != $str2_close) {\n        return \"No\";\n    } elseif ($str1_open != $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"No\";\n    } elseif ($str1_open\
    \ != $str1_close && $str2_open != $str2_close) {\n        return \"Yes\";\n  \
    \  }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4cq43_5z.php:41\n\
    Stack trace:\n#0 /tmp/tmp4cq43_5z.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp4cq43_5z.php\
    \ on line 41\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpldt_xr_e.php:54\n\
    Stack trace:\n#0 /tmp/tmpldt_xr_e.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpldt_xr_e.php\
    \ on line 54\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    $str1_open_close\
    \ = 0;\n    $str2_open_close = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n\
    \        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n\
    \            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close) {\n        $str1_open_close = 1;\n    }\n    if ($str2_open\
    \ == $str2_close) {\n        $str2_open_close = 1;\n    }\n    if ($str1_open_close\
    \ == 1 && $str2_open_close == 1) {\n        return \"Yes\";\n    } else {\n  \
    \      return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6oed3zaw.php:57\n\
    Stack trace:\n#0 /tmp/tmp6oed3zaw.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp6oed3zaw.php\
    \ on line 57\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52f9157j.php:49\n\
    Stack trace:\n#0 /tmp/tmp52f9157j.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp52f9157j.php\
    \ on line 49\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr6fgexnz.php:53\n\
    Stack trace:\n#0 /tmp/tmpr6fgexnz.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpr6fgexnz.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ > 0) {\n        return \"No\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"No\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"No\";\n    } else if ($str1_open > 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf1t7ba5g.php:59\n\
    Stack trace:\n#0 /tmp/tmpf1t7ba5g.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpf1t7ba5g.php\
    \ on line 59\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str = $str1 . $str2;\n    $len = strlen($str);\n    $count = 0;\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        if ($str[$i] == '(') {\n            $count++;\n\
    \        } else {\n            $count--;\n        }\n        if ($count < 0) {\n\
    \            return \"No\";\n        }\n    }\n    if ($count == 0) {\n      \
    \  return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk96gbmhd.php:46\n\
    Stack trace:\n#0 /tmp/tmpk96gbmhd.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpk96gbmhd.php\
    \ on line 46\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else {\n   \
    \     return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxdm_q25z.php:57\n\
    Stack trace:\n#0 /tmp/tmpxdm_q25z.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpxdm_q25z.php\
    \ on line 57\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_balance = $str1_open - $str1_close;\n    $str2_balance = $str2_open\
    \ - $str2_close;\n    $str1_open_pos = strpos($str1, '(');\n    $str1_close_pos\
    \ = strpos($str1, ')');\n    $str2_open_pos = strpos($str2, '(');\n    $str2_close_pos\
    \ = strpos($str2, ')');\n    if ($str1_balance == 0 && $str2_balance == 0) {\n\
    \        return \"Yes\";\n    } elseif ($str1_balance == 0 && $str2_balance !=\
    \ 0) {\n        if ($str2_balance > 0) {\n            if ($str2_open_pos < $str2_close_pos)\
    \ {\n                return \"No\";\n            } else {\n                return\
    \ \"Yes\";\n            }\n        } else {\n            if ($str2_open_pos >\
    \ $str2_close_pos) {\n                return \"No\";\n            } else {\n \
    \               return \"Yes\";\n            }\n        }\n    } elseif ($str1_balance\
    \ != 0 && $str2_balance == 0) {\n        if ($str1_balance > 0) {\n          \
    \  if ($str1_open_pos < $str1_close_pos) {\n                return \"No\";\n \
    \           } else {\n                return \"Yes\";\n            }\n       \
    \ } else {\n            if ($str1_open_pos > $str1_close_pos) {\n            \
    \    return \"No\";\n            } else {\n                return \"Yes\";\n \
    \           }\n        }\n   \nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpyfz0dtp4.php on line 80

    '
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48h7isyg.php:53\n\
    Stack trace:\n#0 /tmp/tmp48h7isyg.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp48h7isyg.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_count = 0;\n    $str2_count = 0;\n    for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n     \
    \   } else {\n            $str1_count--;\n        }\n    }\n    for ($i = 0; $i\
    \ < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ > 0 && $str2_count < 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ < 0 && $str2_count > 0) {\n        return \"Yes\";\n    } else {\n        return\
    \ \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7bqsgkvd.php:51\n\
    Stack trace:\n#0 /tmp/tmp7bqsgkvd.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp7bqsgkvd.php\
    \ on line 51\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if (($str1_open + $str2_open)\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvqya9lcd.php:56\n\
    Stack trace:\n#0 /tmp/tmpvqya9lcd.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpvqya9lcd.php\
    \ on line 56\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str = $str1 . $str2;\n    $stack = array();\n    for ($i = 0; $i < strlen($str);\
    \ $i++) {\n        $char = $str[$i];\n        if ($char == '(') {\n          \
    \  array_push($stack, $char);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return \"No\";\n            } else {\n            \
    \    array_pop($stack);\n            }\n        }\n    }\n    if (count($stack)\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvb_tkkki.php:47\n\
    Stack trace:\n#0 /tmp/tmpvb_tkkki.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpvb_tkkki.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_len == $str1_open && $str2_len == $str2_close) {\n    \
    \    return \"Yes\";\n    } elseif ($str1_len == $str1_close && $str2_len == $str2_open)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3msafaf1.php:37\n\
    Stack trace:\n#0 /tmp/tmp3msafaf1.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp3msafaf1.php\
    \ on line 37\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_balance = $str1_open - $str1_close;\n    $str2_balance = $str2_open\
    \ - $str2_close;\n    if ($str1_balance == 0 && $str2_balance == 0) {\n      \
    \  return \"Yes\";\n    } elseif ($str1_balance == 0 && $str2_balance != 0) {\n\
    \        if ($str2_balance > 0) {\n            $str2_open = $str2_open - $str2_balance;\n\
    \            $str2_close = $str2_close + $str2_balance;\n        } else {\n  \
    \          $str2_open = $str2_open + $str2_balance;\n            $str2_close =\
    \ $str2_close - $str2_balance;\n        }\n        if ($str2_open == $str2_close)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n    } elseif ($str1_balance != 0 && $str2_balance == 0) {\n    \
    \    if ($str1_balance > 0) {\n            $str1_open = $str1_open - $str1_balance;\n\
    \            $str1_close = $str1_close + $str1_balance;\n        } else {\n  \
    \          $str1_open = $str1_open + $str1_balance;\n            $str1_close =\
    \ $str1_close - $str1_balance;\n        }\n        if ($str1_open == $str1_close)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n    } else {\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpv_amfsko.php on line 75

    '
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open == -$str2_open) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else if ($str1_open\
    \ < 0 && $str2_open > 0) {\n        if ($str2_open == -$str1_open) {\n       \
    \     return \"Yes\";\n        } else {\n            return \"No\";\n        }\n\
    \    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjfoaieqv.php:68\n\
    Stack trace:\n#0 /tmp/tmpjfoaieqv.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpjfoaieqv.php\
    \ on line 68\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $lst[0] = str_split($lst[0]);\n  $lst[1] =\
    \ str_split($lst[1]);\n  $lst = array_merge($lst[0], $lst[1]);\n  $count = 0;\n\
    \  foreach ($lst as $char) {\n    if ($char == \"(\") {\n      $count++;\n   \
    \ } else {\n      $count--;\n    }\n    if ($count < 0) {\n      return \"No\"\
    ;\n    }\n  }\n  if ($count == 0) {\n    return \"Yes\";\n  } else {\n    return\
    \ \"No\";\n  }\n}\necho match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo0viol50.php:46\n\
    Stack trace:\n#0 /tmp/tmpo0viol50.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpo0viol50.php\
    \ on line 46\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_count\
    \ = 0;\n    $str2_count = 0;\n    $str1_index = 0;\n    $str2_index = 0;\n   \
    \ $str1_char = $str1[$str1_index];\n    $str2_char = $str2[$str2_index];\n   \
    \ while ($str1_index < $str1_len || $str2_index < $str2_len) {\n        if ($str1_index\
    \ < $str1_len) {\n            $str1_char = $str1[$str1_index];\n            if\
    \ ($str1_char == '(') {\n                $str1_count++;\n            } else {\n\
    \                $str1_count--;\n            }\n            $str1_index++;\n \
    \       }\n        if ($str2_index < $str2_len) {\n            $str2_char = $str2[$str2_index];\n\
    \            if ($str2_char == '(') {\n                $str2_count++;\n      \
    \      } else {\n                $str2_count--;\n            }\n            $str2_index++;\n\
    \        }\n        if ($str1_count < 0 || $str2_count < 0) {\n            return\
    \ \"No\";\n        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n\
    \        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj4wlevgi.php:60\n\
    Stack trace:\n#0 /tmp/tmpj4wlevgi.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpj4wlevgi.php\
    \ on line 60\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = 0;\n    $right = 0;\n    for ($i\
    \ = 0; $i < strlen($lst[0]); $i++) {\n        if ($lst[0][$i] == '(') {\n    \
    \        $left++;\n        } else {\n            $right++;\n        }\n    }\n\
    \    for ($i = 0; $i < strlen($lst[1]); $i++) {\n        if ($lst[1][$i] == '(')\
    \ {\n            $left++;\n        } else {\n            $right++;\n        }\n\
    \    }\n    if ($left == $right) {\n        return \"Yes\";\n    } else {\n  \
    \      return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph5r6nzqm.php:52\n\
    Stack trace:\n#0 /tmp/tmph5r6nzqm.php(57): test()\n#1 {main}\n  thrown in /tmp/tmph5r6nzqm.php\
    \ on line 52\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open == -$str2_open) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else if ($str1_open\
    \ < 0 && $str2_open > 0) {\n        if ($str2_open == -$str1_open) {\n       \
    \     return \"Yes\";\n        } else {\n            return \"No\";\n        }\n\
    \    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjfoaieqv.php:68\n\
    Stack trace:\n#0 /tmp/tmpjfoaieqv.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpjfoaieqv.php\
    \ on line 68\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48h7isyg.php:53\n\
    Stack trace:\n#0 /tmp/tmp48h7isyg.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp48h7isyg.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_balance = $str1_open - $str1_close;\n    $str2_balance = $str2_open\
    \ - $str2_close;\n    $str1_balance_abs = abs($str1_balance);\n    $str2_balance_abs\
    \ = abs($str2_balance);\n    if ($str1_balance_abs == $str2_balance_abs) {\n \
    \       return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbe6hmfgy.php:40\n\
    Stack trace:\n#0 /tmp/tmpbe6hmfgy.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpbe6hmfgy.php\
    \ on line 40\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open == -$str2_open) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else if ($str1_open\
    \ < 0 && $str2_open > 0) {\n        if ($str2_open == -$str1_open) {\n       \
    \     return \"Yes\";\n        } else {\n            return \"No\";\n        }\n\
    \    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjfoaieqv.php:68\n\
    Stack trace:\n#0 /tmp/tmpjfoaieqv.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpjfoaieqv.php\
    \ on line 68\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr6fgexnz.php:53\n\
    Stack trace:\n#0 /tmp/tmpr6fgexnz.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpr6fgexnz.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else {\n   \
    \     return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxdm_q25z.php:57\n\
    Stack trace:\n#0 /tmp/tmpxdm_q25z.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpxdm_q25z.php\
    \ on line 57\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_balance = $str1_open - $str1_close;\n    $str2_balance = $str2_open\
    \ - $str2_close;\n    if ($str1_balance > 0 && $str2_balance < 0) {\n        if\
    \ ($str1_balance == abs($str2_balance)) {\n            return \"Yes\";\n     \
    \   }\n    } elseif ($str1_balance < 0 && $str2_balance > 0) {\n        if (abs($str1_balance)\
    \ == $str2_balance) {\n            return \"Yes\";\n        }\n    } elseif ($str1_balance\
    \ == 0 && $str2_balance == 0) {\n        return \"Yes\";\n    }\n    return \"\
    No\";\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp91pgbcus.php:54\n\
    Stack trace:\n#0 /tmp/tmp91pgbcus.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp91pgbcus.php\
    \ on line 54\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52f9157j.php:49\n\
    Stack trace:\n#0 /tmp/tmp52f9157j.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp52f9157j.php\
    \ on line 49\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg1l3w3ap.php:53\n\
    Stack trace:\n#0 /tmp/tmpg1l3w3ap.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpg1l3w3ap.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\n\n$lst = array(\"()(\", \")\");\necho match_parens($lst) . \"\\n\";\n\
    $lst = array(\")\", \")\");\necho match_parens($lst) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwehe60mh.php:52\n\
    Stack trace:\n#0 /tmp/tmpwehe60mh.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpwehe60mh.php\
    \ on line 52\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_balance = $str1_open - $str1_close;\n    $str2_balance = $str2_open\
    \ - $str2_close;\n    $str1_balance_abs = abs($str1_balance);\n    $str2_balance_abs\
    \ = abs($str2_balance);\n    if ($str1_balance_abs == $str2_balance_abs) {\n \
    \       if ($str1_balance == $str2_balance) {\n            return \"Yes\";\n \
    \       } else {\n            return \"No\";\n        }\n    } else {\n      \
    \  return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz1v7f7ls.php:43\n\
    Stack trace:\n#0 /tmp/tmpz1v7f7ls.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpz1v7f7ls.php\
    \ on line 43\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48h7isyg.php:53\n\
    Stack trace:\n#0 /tmp/tmp48h7isyg.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp48h7isyg.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open == abs($str2_open)) {\n            return \"\
    Yes\";\n        }\n    } else if ($str1_open < 0 && $str2_open > 0) {\n      \
    \  if (abs($str1_open) == $str2_open) {\n            return \"Yes\";\n       \
    \ }\n    }\n    return \"No\";\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd_5weboy.php:64\n\
    Stack trace:\n#0 /tmp/tmpd_5weboy.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpd_5weboy.php\
    \ on line 64\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str = $str1 . $str2;\n    $len = strlen($str);\n    $count = 0;\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        if ($str[$i] == '(') {\n            $count++;\n\
    \        } else {\n            $count--;\n        }\n        if ($count < 0) {\n\
    \            return \"No\";\n        }\n    }\n    if ($count == 0) {\n      \
    \  return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk96gbmhd.php:46\n\
    Stack trace:\n#0 /tmp/tmpk96gbmhd.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpk96gbmhd.php\
    \ on line 46\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_open = substr_count($str1, '(');\n    $str1_close = substr_count($str1,\
    \ ')');\n    $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ != $str2_close) {\n        return \"No\";\n    } elseif ($str1_open != $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"No\";\n    } elseif ($str1_open\
    \ != $str1_close && $str2_open != $str2_close) {\n        if ($str1_open > $str1_close)\
    \ {\n            $str1_open -= $str1_close;\n            $str1_close = 0;\n  \
    \      } elseif ($str1_open < $str1_close) {\n            $str1_close -= $str1_open;\n\
    \            $str1_open = 0;\n        }\n        if ($str2_open > $str2_close)\
    \ {\n            $str2_open -= $str2_close;\n            $str2_close = 0;\n  \
    \      } elseif ($str2_open < $str2_close) {\n            $str2_close -= $str2_open;\n\
    \            $str2_open = 0;\n        }\n        if ($str1_open == $str2_close\
    \ && $str2_open == $str1_close) {\n            return \"Yes\";\n        } else\
    \ {\n            return \"No\";\n        }\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp90jvcd86.php:64\n\
    Stack trace:\n#0 /tmp/tmp90jvcd86.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp90jvcd86.php\
    \ on line 64\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52f9157j.php:49\n\
    Stack trace:\n#0 /tmp/tmp52f9157j.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp52f9157j.php\
    \ on line 49\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52f9157j.php:49\n\
    Stack trace:\n#0 /tmp/tmp52f9157j.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp52f9157j.php\
    \ on line 49\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_paren_count\
    \ = 0;\n    $str2_paren_count = 0;\n    $str1_paren_index = 0;\n    $str2_paren_index\
    \ = 0;\n    $str1_paren_index_lst = array();\n    $str2_paren_index_lst = array();\n\
    \    $str1_paren_index_lst_len = 0;\n    $str2_paren_index_lst_len = 0;\n    $str1_paren_index_lst_max\
    \ = 0;\n    $str2_paren_index_lst_max = 0;\n    $str1_paren_index_lst_max_index\
    \ = 0;\n    $str2_paren_index_lst_max_index = 0;\n    $str1_paren_index_lst_max_index_prev\
    \ = 0;\n    $str2_paren_index_lst_max_index_prev = 0;\n    $str1_paren_index_lst_max_index_prev_prev\
    \ = 0;\n    $str2_paren_index_lst_max_index_prev_prev = 0;\n    $str1_paren_index_lst_max_index_prev_prev_prev\
    \ = 0;\n    $str2_paren_index_lst_max_index_prev_prev_prev = 0;\n    $str1_paren_index_lst_max_index_prev_prev_prev_prev\
    \ = 0;\n    $str2_paren_index_lst_max_index_prev_prev_prev_prev = 0;\n    $str1_paren_index_lst_max_index_prev_prev_prev_prev_prev\
    \ = 0;\n    $str2_paren_index_lst_max_index_prev_prev_prev_prev_prev = 0;\n  \
    \  $str1_paren_index_lst_max_index_prev_prev_prev_prev_prev\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpnflgzyso.php on line 43

    '
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48h7isyg.php:53\n\
    Stack trace:\n#0 /tmp/tmp48h7isyg.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp48h7isyg.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48h7isyg.php:53\n\
    Stack trace:\n#0 /tmp/tmp48h7isyg.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp48h7isyg.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc5hnzeum.php:51\n\
    Stack trace:\n#0 /tmp/tmpc5hnzeum.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpc5hnzeum.php\
    \ on line 51\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52f9157j.php:49\n\
    Stack trace:\n#0 /tmp/tmp52f9157j.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp52f9157j.php\
    \ on line 49\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open + $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuuqh_npb.php:56\n\
    Stack trace:\n#0 /tmp/tmpuuqh_npb.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpuuqh_npb.php\
    \ on line 56\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"No\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ > 0) {\n        return \"No\";\n    } else {\n        return \"Yes\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp91r0yx09.php:55\n\
    Stack trace:\n#0 /tmp/tmp91r0yx09.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp91r0yx09.php\
    \ on line 55\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ != $str2_close) {\n        if ($str2_open > $str2_close) {\n            $str2_open\
    \ = $str2_open - $str2_close;\n            $str2_close = 0;\n        } else {\n\
    \            $str2_close = $str2_close - $str2_open;\n            $str2_open =\
    \ 0;\n        }\n        if ($str2_open == $str2_close) {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }\n    } elseif\
    \ ($str1_open != $str1_close && $str2_open == $str2_close) {\n        if ($str1_open\
    \ > $str1_close) {\n            $str1_open = $str1_open - $str1_close;\n     \
    \       $str1_close = 0;\n        } else {\n            $str1_close = $str1_close\
    \ - $str1_open;\n            $str1_open = 0;\n        }\n        if ($str1_open\
    \ == $str1_close) {\n            return \"Yes\";\n        } else {\n         \
    \   return \"No\";\n        }\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ifa0wir.php:61\n\
    Stack trace:\n#0 /tmp/tmp9ifa0wir.php(75): test()\n#1 {main}\n  thrown in /tmp/tmp9ifa0wir.php\
    \ on line 61\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_open_close = $str1_open - $str1_close;\n    $str2_open_close\
    \ = $str2_open - $str2_close;\n    $str1_open_close_abs = abs($str1_open_close);\n\
    \    $str2_open_close_abs = abs($str2_open_close);\n    if ($str1_open_close_abs\
    \ == $str2_open_close_abs) {\n        return \"Yes\";\n    } else {\n        return\
    \ \"No\";\n    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr1g0zb64.php:41\n\
    Stack trace:\n#0 /tmp/tmpr1g0zb64.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpr1g0zb64.php\
    \ on line 41\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $lst = array_map(function($s) {\n       \
    \ return str_split($s);\n    }, $lst);\n    $lst = array_reduce($lst, function($acc,\
    \ $s) {\n        return array_merge($acc, $s);\n    }, []);\n    $lst = array_reduce($lst,\
    \ function($acc, $s) {\n        if ($s == '(') {\n            $acc['open']++;\n\
    \        } else {\n            $acc['close']++;\n        }\n        return $acc;\n\
    \    }, ['open' => 0, 'close' => 0]);\n    return ($lst['open'] == $lst['close'])\
    \ ? 'Yes' : 'No';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmoptmsdd.php:47\n\
    Stack trace:\n#0 /tmp/tmpmoptmsdd.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpmoptmsdd.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $s1 = $lst[0];\n  $s2 = $lst[1];\n  $s1_open\
    \ = substr_count($s1, '(');\n  $s1_close = substr_count($s1, ')');\n  $s2_open\
    \ = substr_count($s2, '(');\n  $s2_close = substr_count($s2, ')');\n  if ($s1_open\
    \ == $s1_close && $s2_open == $s2_close) {\n    return 'Yes';\n  } elseif ($s1_open\
    \ == $s1_close && $s2_open > $s2_close) {\n    return 'Yes';\n  } elseif ($s1_open\
    \ > $s1_close && $s2_open == $s2_close) {\n    return 'Yes';\n  } else {\n   \
    \ return 'No';\n  }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppokup66i.php:38\n\
    Stack trace:\n#0 /tmp/tmppokup66i.php(52): test()\n#1 {main}\n  thrown in /tmp/tmppokup66i.php\
    \ on line 38\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else {\n   \
    \     return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxdm_q25z.php:57\n\
    Stack trace:\n#0 /tmp/tmpxdm_q25z.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpxdm_q25z.php\
    \ on line 57\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open == abs($str2_open)) {\n            return \"\
    Yes\";\n        }\n    } else if ($str1_open < 0 && $str2_open > 0) {\n      \
    \  if (abs($str1_open) == $str2_open) {\n            return \"Yes\";\n       \
    \ }\n    }\n    return \"No\";\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd_5weboy.php:64\n\
    Stack trace:\n#0 /tmp/tmpd_5weboy.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpd_5weboy.php\
    \ on line 64\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else {\n   \
    \     return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxdm_q25z.php:57\n\
    Stack trace:\n#0 /tmp/tmpxdm_q25z.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpxdm_q25z.php\
    \ on line 57\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52f9157j.php:49\n\
    Stack trace:\n#0 /tmp/tmp52f9157j.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp52f9157j.php\
    \ on line 49\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == -1 && $str2_open\
    \ == 1) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprw2ltgvq.php:49\n\
    Stack trace:\n#0 /tmp/tmprw2ltgvq.php(63): test()\n#1 {main}\n  thrown in /tmp/tmprw2ltgvq.php\
    \ on line 49\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52f9157j.php:49\n\
    Stack trace:\n#0 /tmp/tmp52f9157j.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp52f9157j.php\
    \ on line 49\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52f9157j.php:49\n\
    Stack trace:\n#0 /tmp/tmp52f9157j.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp52f9157j.php\
    \ on line 49\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str = $str1 . $str2;\n    $len = strlen($str);\n    $open = 0;\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        if ($str[$i] == '(') {\n            $open++;\n\
    \        } else {\n            $open--;\n        }\n        if ($open < 0) {\n\
    \            return \"No\";\n        }\n    }\n    if ($open == 0) {\n       \
    \ return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbq7krr4y.php:45\n\
    Stack trace:\n#0 /tmp/tmpbq7krr4y.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpbq7krr4y.php\
    \ on line 45\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48h7isyg.php:53\n\
    Stack trace:\n#0 /tmp/tmp48h7isyg.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp48h7isyg.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    echo match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqmgbg69z.php:51\n\
    Stack trace:\n#0 /tmp/tmpqmgbg69z.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpqmgbg69z.php\
    \ on line 51\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"No\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvit90o8.php:53\n\
    Stack trace:\n#0 /tmp/tmpwvit90o8.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpwvit90o8.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $count1 = 0;\n    $count2 = 0;\n    for ($i = 0; $i < strlen($str1); $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $count1++;\n        } else {\n\
    \            $count1--;\n        }\n    }\n    for ($i = 0; $i < strlen($str2);\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $count2++;\n        }\
    \ else {\n            $count2--;\n        }\n    }\n    if ($count1 == 0 && $count2\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7ner3cs.php:45\n\
    Stack trace:\n#0 /tmp/tmpw7ner3cs.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpw7ner3cs.php\
    \ on line 45\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_open\
    \ = substr_count($s1, '(');\n    $s1_close = substr_count($s1, ')');\n    $s2_open\
    \ = substr_count($s2, '(');\n    $s2_close = substr_count($s2, ')');\n    if ($s1_open\
    \ == $s1_close && $s2_open == $s2_close) {\n        return 'Yes';\n    } elseif\
    \ ($s1_open == $s1_close && $s2_open != $s2_close) {\n        return 'No';\n \
    \   } elseif ($s1_open != $s1_close && $s2_open == $s2_close) {\n        return\
    \ 'No';\n    } elseif ($s1_open != $s1_close && $s2_open != $s2_close) {\n   \
    \     if ($s1_open > $s1_close) {\n            $s1_open = $s1_open - $s1_close;\n\
    \            $s2_close = $s2_close - $s2_open;\n            if ($s1_open == $s2_close)\
    \ {\n                return 'Yes';\n            } else {\n                return\
    \ 'No';\n            }\n        } elseif ($s1_open < $s1_close) {\n          \
    \  $s1_close = $s1_close - $s1_open;\n            $s2_open = $s2_open - $s2_close;\n\
    \            if ($s1_close == $s2_open) {\n                return 'Yes';\n   \
    \         } else {\n                return 'No';\n            }\n        }\n \
    \   }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt_b2tjx4.php:63\n\
    Stack trace:\n#0 /tmp/tmpt_b2tjx4.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpt_b2tjx4.php\
    \ on line 63\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_len == $str1_open && $str2_len == $str2_close) {\n    \
    \    return \"Yes\";\n    } elseif ($str1_len == $str1_close && $str2_len == $str2_open)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3msafaf1.php:37\n\
    Stack trace:\n#0 /tmp/tmp3msafaf1.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp3msafaf1.php\
    \ on line 37\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52f9157j.php:49\n\
    Stack trace:\n#0 /tmp/tmp52f9157j.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp52f9157j.php\
    \ on line 49\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    echo match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqmgbg69z.php:51\n\
    Stack trace:\n#0 /tmp/tmpqmgbg69z.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpqmgbg69z.php\
    \ on line 51\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_open = substr_count($str1, '(');\n    $str1_close = substr_count($str1,\
    \ ')');\n    $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqa7gwof1.php:33\n\
    Stack trace:\n#0 /tmp/tmpqa7gwof1.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpqa7gwof1.php\
    \ on line 33\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = 0;\n    $right = 0;\n    $left_paren\
    \ = \"(\";\n    $right_paren = \")\";\n    foreach ($lst as $str) {\n        for\
    \ ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] == $left_paren)\
    \ {\n                $left++;\n            } else if ($str[$i] == $right_paren)\
    \ {\n                $right++;\n            }\n        }\n    }\n    if ($left\
    \ == $right) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n\
    \    }\n}\necho match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpptqd3mua.php:51\n\
    Stack trace:\n#0 /tmp/tmpptqd3mua.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpptqd3mua.php\
    \ on line 51\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_balance = $str1_open - $str1_close;\n    $str2_balance = $str2_open\
    \ - $str2_close;\n    $balance = $str1_balance + $str2_balance;\n    if ($balance\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm241_fb8.php:47\n\
    Stack trace:\n#0 /tmp/tmpm241_fb8.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpm241_fb8.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n\
    \        if ($str1[$i] == '(') {\n            $open++;\n        } else {\n   \
    \         $close++;\n        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $open++;\n        } else {\n\
    \            $close++;\n        }\n    }\n    if ($open == $close) {\n       \
    \ return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppjqoc_cz.php:54\n\
    Stack trace:\n#0 /tmp/tmppjqoc_cz.php(59): test()\n#1 {main}\n  thrown in /tmp/tmppjqoc_cz.php\
    \ on line 54\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else {\n   \
    \     return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxdm_q25z.php:57\n\
    Stack trace:\n#0 /tmp/tmpxdm_q25z.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpxdm_q25z.php\
    \ on line 57\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str = $str1 . $str2;\n    $len = strlen($str);\n    $count = 0;\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        if ($str[$i] == '(') {\n            $count++;\n\
    \        } else {\n            $count--;\n        }\n        if ($count < 0) {\n\
    \            return \"No\";\n        }\n    }\n    if ($count == 0) {\n      \
    \  return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk96gbmhd.php:46\n\
    Stack trace:\n#0 /tmp/tmpk96gbmhd.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpk96gbmhd.php\
    \ on line 46\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_open = substr_count($str1, '(');\n    $str1_close = substr_count($str1,\
    \ ')');\n    $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ > $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_open > $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"Yes\";\n    } else {\n   \
    \     return \"No\";\n    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_7rk6lcy.php:38\n\
    Stack trace:\n#0 /tmp/tmp_7rk6lcy.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp_7rk6lcy.php\
    \ on line 38\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str = $str1 . $str2;\n    $count = 0;\n    for ($i = 0; $i < strlen($str);\
    \ $i++) {\n        if ($str[$i] == '(') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return \"No\";\n        }\n    }\n    if ($count == 0) {\n        return \"\
    Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1l22w6f.php:45\n\
    Stack trace:\n#0 /tmp/tmpd1l22w6f.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpd1l22w6f.php\
    \ on line 45\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_len\
    \ = strlen($s1);\n    $s2_len = strlen($s2);\n    $s1_open = 0;\n    $s2_open\
    \ = 0;\n    for ($i = 0; $i < $s1_len; $i++) {\n        if ($s1[$i] == '(') {\n\
    \            $s1_open++;\n        } else {\n            $s1_open--;\n        }\n\
    \    }\n    for ($i = 0; $i < $s2_len; $i++) {\n        if ($s2[$i] == '(') {\n\
    \            $s2_open++;\n        } else {\n            $s2_open--;\n        }\n\
    \    }\n    if ($s1_open == 0 && $s2_open == 0) {\n        return \"Yes\";\n \
    \   } else if ($s1_open > 0 && $s2_open < 0) {\n        if ($s1_open == -$s2_open)\
    \ {\n            return \"Yes\";\n        }\n    } else if ($s1_open < 0 && $s2_open\
    \ > 0) {\n        if ($s2_open == -$s1_open) {\n            return \"Yes\";\n\
    \        }\n    }\n    return \"No\";\n}\n\nfunction candidate(...$args) {\n \
    \   return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzr_z91t5.php:64\n\
    Stack trace:\n#0 /tmp/tmpzr_z91t5.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpzr_z91t5.php\
    \ on line 64\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_balance = $str1_open - $str1_close;\n    $str2_balance = $str2_open\
    \ - $str2_close;\n    $balance = $str1_balance + $str2_balance;\n    if ($balance\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm241_fb8.php:47\n\
    Stack trace:\n#0 /tmp/tmpm241_fb8.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpm241_fb8.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48h7isyg.php:53\n\
    Stack trace:\n#0 /tmp/tmp48h7isyg.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp48h7isyg.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str = $str1 . $str2;\n    $count = 0;\n    for ($i = 0; $i < strlen($str);\
    \ $i++) {\n        if ($str[$i] == '(') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return \"No\";\n        }\n    }\n    if ($count == 0) {\n        return \"\
    Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptw39s324.php:44\n\
    Stack trace:\n#0 /tmp/tmptw39s324.php(55): test()\n#1 {main}\n  thrown in /tmp/tmptw39s324.php\
    \ on line 44\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg1l3w3ap.php:53\n\
    Stack trace:\n#0 /tmp/tmpg1l3w3ap.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpg1l3w3ap.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr6fgexnz.php:53\n\
    Stack trace:\n#0 /tmp/tmpr6fgexnz.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpr6fgexnz.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $open = 0;\n    $close = 0;\n    foreach\
    \ ($lst as $str) {\n        for ($i = 0; $i < strlen($str); $i++) {\n        \
    \    if ($str[$i] == '(') {\n                $open++;\n            } else {\n\
    \                $close++;\n            }\n        }\n    }\n    if ($open ==\
    \ $close) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n \
    \   }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd4rjk_ws.php:48\n\
    Stack trace:\n#0 /tmp/tmpd4rjk_ws.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpd4rjk_ws.php\
    \ on line 48\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"No\";\n    } elseif ($str1_open > 0 && $str2_open >\
    \ 0) {\n        return \"No\";\n    } else {\n        return \"Yes\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprx8yqznt.php:51\n\
    Stack trace:\n#0 /tmp/tmprx8yqznt.php(63): test()\n#1 {main}\n  thrown in /tmp/tmprx8yqznt.php\
    \ on line 51\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else {\n   \
    \     return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxdm_q25z.php:57\n\
    Stack trace:\n#0 /tmp/tmpxdm_q25z.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpxdm_q25z.php\
    \ on line 57\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ != 0) {\n        $str2_open = 0;\n        for ($i = 0; $i < $str2_len; $i++)\
    \ {\n            if ($str2[$i] == '(') {\n                $str2_open++;\n    \
    \        } else {\n                $str2_open--;\n            }\n            if\
    \ ($str2_open < 0) {\n                return \"No\";\n            }\n        }\n\
    \        return \"Yes\";\n    } else if ($str1_open != 0 && $str2_open == 0) {\n\
    \        $str1_open = 0;\n        for ($i = 0; $i < $str1_len; $i++) {\n     \
    \       if ($str1[$i] == '(') {\n                $str1_open++;\n            }\
    \ else {\n                $str1_open--;\n            }\n            if ($str1_open\
    \ < 0) {\n                return \"No\";\n            }\n        }\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1z7jqhh9.php:73\n\
    Stack trace:\n#0 /tmp/tmp1z7jqhh9.php(87): test()\n#1 {main}\n  thrown in /tmp/tmp1z7jqhh9.php\
    \ on line 73\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open == -$str2_open) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else if ($str1_open\
    \ < 0 && $str2_open > 0) {\n        if ($str2_open == -$str1_open) {\n       \
    \     return \"Yes\";\n        } else {\n            return \"No\";\n        }\n\
    \    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjfoaieqv.php:68\n\
    Stack trace:\n#0 /tmp/tmpjfoaieqv.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpjfoaieqv.php\
    \ on line 68\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52f9157j.php:49\n\
    Stack trace:\n#0 /tmp/tmp52f9157j.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp52f9157j.php\
    \ on line 49\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48h7isyg.php:53\n\
    Stack trace:\n#0 /tmp/tmp48h7isyg.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp48h7isyg.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_balance = $str1_open - $str1_close;\n    $str2_balance = $str2_open\
    \ - $str2_close;\n    $str1_balance_abs = abs($str1_balance);\n    $str2_balance_abs\
    \ = abs($str2_balance);\n    $str1_balance_abs_diff = $str1_balance_abs - $str2_balance_abs;\n\
    \    $str2_balance_abs_diff = $str2_balance_abs - $str1_balance_abs;\n    if ($str1_balance_abs_diff\
    \ == 0) {\n        if ($str1_balance == 0) {\n            return \"Yes\";\n  \
    \      } else {\n            return \"No\";\n        }\n    } else if ($str1_balance_abs_diff\
    \ == 1) {\n        if ($str1_balance == 1 && $str2_balance == -1) {\n        \
    \    return \"Yes\";\n        } else {\n            return \"No\";\n        }\n\
    \    } else if ($str2_balance_abs_diff == 1) {\n        if ($str2_balance == 1\
    \ && $str1_balance == -1) {\n            return \"Yes\";\n        } else {\n \
    \           return \"No\";\n        }\n    } else {\n        return \"No\";\n\
    \    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph4m_dnmb.php:57\n\
    Stack trace:\n#0 /tmp/tmph4m_dnmb.php(71): test()\n#1 {main}\n  thrown in /tmp/tmph4m_dnmb.php\
    \ on line 57\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_open_close = $str1_open - $str1_close;\n    $str2_open_close\
    \ = $str2_open - $str2_close;\n    if ($str1_open_close == 0 && $str2_open_close\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open_close > 0 && $str2_open_close\
    \ < 0) {\n        if ($str1_open_close == abs($str2_open_close)) {\n         \
    \   return \"Yes\";\n        } else {\n            return \"No\";\n        }\n\
    \    } else if ($str1_open_close < 0 && $str2_open_close > 0) {\n        if (abs($str1_open_close)\
    \ == $str2_open_close) {\n            return \"Yes\";\n        } else {\n    \
    \        return \"No\";\n        }\n    } else {\n        return \"No\";\n   \
    \ }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ux0x3ja.php:59\n\
    Stack trace:\n#0 /tmp/tmp_ux0x3ja.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp_ux0x3ja.php\
    \ on line 59\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48h7isyg.php:53\n\
    Stack trace:\n#0 /tmp/tmp48h7isyg.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp48h7isyg.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_len\
    \ = strlen($str1);\n  $str2_len = strlen($str2);\n  $str1_open = 0;\n  $str2_open\
    \ = 0;\n  for ($i = 0; $i < $str1_len; $i++) {\n    if ($str1[$i] == '(') {\n\
    \      $str1_open++;\n    } else {\n      $str1_open--;\n    }\n  }\n  for ($i\
    \ = 0; $i < $str2_len; $i++) {\n    if ($str2[$i] == '(') {\n      $str2_open++;\n\
    \    } else {\n      $str2_open--;\n    }\n  }\n  if ($str1_open < 0 && $str2_open\
    \ < 0) {\n    return \"No\";\n  } else if ($str1_open < 0) {\n    $str2_open +=\
    \ $str1_open;\n    $str1_open = 0;\n  } else if ($str2_open < 0) {\n    $str1_open\
    \ += $str2_open;\n    $str2_open = 0;\n  }\n  if ($str1_open == 0 && $str2_open\
    \ == 0) {\n    return \"Yes\";\n  } else if ($str1_open == 0) {\n    return \"\
    No\";\n  } else if ($str2_open == 0) {\n    return \"No\";\n  } else {\n    return\
    \ \"Yes\";\n  }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8tfj52l.php:68\n\
    Stack trace:\n#0 /tmp/tmpl8tfj52l.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpl8tfj52l.php\
    \ on line 68\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52f9157j.php:49\n\
    Stack trace:\n#0 /tmp/tmp52f9157j.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp52f9157j.php\
    \ on line 49\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_count\
    \ = 0;\n    $str2_count = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n     \
    \   if ($str1[$i] == '(') {\n            $str1_count++;\n        } else {\n  \
    \          $str1_count--;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n     \
    \   } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ == 0 && $str2_count < 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ > 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ > 0 && $str2_count < 0) {\n        return \"Yes\";\n    } else {\n        return\
    \ \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2wumqau_.php:55\n\
    Stack trace:\n#0 /tmp/tmp2wumqau_.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp2wumqau_.php\
    \ on line 55\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_len\
    \ = strlen($str1);\n  $str2_len = strlen($str2);\n  $str1_open = 0;\n  $str2_open\
    \ = 0;\n  for ($i = 0; $i < $str1_len; $i++) {\n    if ($str1[$i] == '(') {\n\
    \      $str1_open++;\n    } else {\n      $str1_open--;\n    }\n  }\n  for ($i\
    \ = 0; $i < $str2_len; $i++) {\n    if ($str2[$i] == '(') {\n      $str2_open++;\n\
    \    } else {\n      $str2_open--;\n    }\n  }\n  if ($str1_open == 0 && $str2_open\
    \ == 0) {\n    return \"Yes\";\n  } else if ($str1_open > 0 && $str2_open < 0)\
    \ {\n    if ($str1_open == abs($str2_open)) {\n      return \"Yes\";\n    } else\
    \ {\n      return \"No\";\n    }\n  } else if ($str1_open < 0 && $str2_open >\
    \ 0) {\n    if (abs($str1_open) == $str2_open) {\n      return \"Yes\";\n    }\
    \ else {\n      return \"No\";\n    }\n  } else {\n    return \"No\";\n  }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplskjxguw.php:68\n\
    Stack trace:\n#0 /tmp/tmplskjxguw.php(73): test()\n#1 {main}\n  thrown in /tmp/tmplskjxguw.php\
    \ on line 68\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48h7isyg.php:53\n\
    Stack trace:\n#0 /tmp/tmp48h7isyg.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp48h7isyg.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ > 0) {\n        return \"No\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"No\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else if ($str1_open\
    \ > 0 && $str2_open == 0) {\n        return \"No\";\n    } else if ($str1_open\
    \ > 0 && $str2_open < 0) {\n        if ($str1_open + $str2_open == 0) {\n    \
    \        return \"Yes\";\n        } else {\n            return \"No\";\n     \
    \   }\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfn1xhrtu.php:64\n\
    Stack trace:\n#0 /tmp/tmpfn1xhrtu.php(77): test()\n#1 {main}\n  thrown in /tmp/tmpfn1xhrtu.php\
    \ on line 64\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_balance = $str1_open - $str1_close;\n    $str2_balance = $str2_open\
    \ - $str2_close;\n    $str1_open_index = strpos($str1, '(');\n    $str1_close_index\
    \ = strpos($str1, ')');\n    $str2_open_index = strpos($str2, '(');\n    $str2_close_index\
    \ = strpos($str2, ')');\n    if ($str1_balance == 0 && $str2_balance == 0) {\n\
    \        return \"Yes\";\n    } elseif ($str1_balance == 0 && $str2_balance !=\
    \ 0) {\n        if ($str2_balance > 0) {\n            if ($str2_open_index < $str2_close_index)\
    \ {\n                return \"No\";\n            } else {\n                return\
    \ \"Yes\";\n            }\n        } elseif ($str2_balance < 0) {\n          \
    \  if ($str2_open_index > $str2_close_index) {\n                return \"No\"\
    ;\n            } else {\n                return \"Yes\";\n            }\n    \
    \    }\n    } elseif ($str1_balance != 0 && $str2_balance == 0) {\n        if\
    \ ($str1_balance > 0) {\n            if ($str1_open_index < $str1_close_index)\
    \ {\n                return \"No\";\n            } else {\n                return\
    \ \"Yes\";\n            }\n        } elseif ($str1_balance < 0) {\n          \
    \  if ($str1_open_index > $str1_close_index) {\n                return \"No\"\
    ;\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpr8ya4swn.php on line 76

    '
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplcc_wgz8.php:48\n\
    Stack trace:\n#0 /tmp/tmplcc_wgz8.php(62): test()\n#1 {main}\n  thrown in /tmp/tmplcc_wgz8.php\
    \ on line 48\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else {\n   \
    \     return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxdm_q25z.php:57\n\
    Stack trace:\n#0 /tmp/tmpxdm_q25z.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpxdm_q25z.php\
    \ on line 57\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_count = 0;\n    $str2_count = 0;\n    for ($i = 0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n     \
    \   } else {\n            $str1_count--;\n        }\n    }\n    for ($i = 0; $i\
    \ < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else {\n       \
    \ return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7r_bbzg6.php:45\n\
    Stack trace:\n#0 /tmp/tmp7r_bbzg6.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp7r_bbzg6.php\
    \ on line 45\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_len\
    \ = strlen($str1);\n  $str2_len = strlen($str2);\n  $str1_open = 0;\n  $str2_open\
    \ = 0;\n  for ($i = 0; $i < $str1_len; $i++) {\n    if ($str1[$i] == '(') {\n\
    \      $str1_open++;\n    } else {\n      $str1_open--;\n    }\n  }\n  for ($i\
    \ = 0; $i < $str2_len; $i++) {\n    if ($str2[$i] == '(') {\n      $str2_open++;\n\
    \    } else {\n      $str2_open--;\n    }\n  }\n  if ($str1_open == 0 && $str2_open\
    \ == 0) {\n    return \"Yes\";\n  } else if ($str1_open == 0 && $str2_open < 0)\
    \ {\n    return \"Yes\";\n  } else if ($str1_open < 0 && $str2_open == 0) {\n\
    \    return \"Yes\";\n  } else if ($str1_open < 0 && $str2_open < 0) {\n    return\
    \ \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq56mehtn.php:53\n\
    Stack trace:\n#0 /tmp/tmpq56mehtn.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpq56mehtn.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52f9157j.php:49\n\
    Stack trace:\n#0 /tmp/tmp52f9157j.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp52f9157j.php\
    \ on line 49\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $l = $lst[0];\n    $r = $lst[1];\n    $l_count\
    \ = 0;\n    $r_count = 0;\n    for ($i = 0; $i < strlen($l); $i++) {\n       \
    \ if ($l[$i] == '(') {\n            $l_count++;\n        } else {\n          \
    \  $l_count--;\n        }\n    }\n    for ($i = 0; $i < strlen($r); $i++) {\n\
    \        if ($r[$i] == '(') {\n            $r_count++;\n        } else {\n   \
    \         $r_count--;\n        }\n    }\n    if ($l_count == 0 && $r_count ==\
    \ 0) {\n        return \"Yes\";\n    } else if ($l_count == 0 && $r_count != 0)\
    \ {\n        return \"No\";\n    } else if ($l_count != 0 && $r_count == 0) {\n\
    \        return \"No\";\n    } else if ($l_count > 0 && $r_count < 0) {\n    \
    \    return \"No\";\n    } else if ($l_count < 0 && $r_count > 0) {\n        return\
    \ \"No\";\n    } else if ($l_count > 0 && $r_count > 0) {\n        return \"Yes\"\
    ;\n    } else if ($l_count < 0 && $r_count < 0) {\n        return \"Yes\";\n \
    \   }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27dy_213.php:55\n\
    Stack trace:\n#0 /tmp/tmp27dy_213.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp27dy_213.php\
    \ on line 55\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"No\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvit90o8.php:53\n\
    Stack trace:\n#0 /tmp/tmpwvit90o8.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpwvit90o8.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr6fgexnz.php:53\n\
    Stack trace:\n#0 /tmp/tmpr6fgexnz.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpr6fgexnz.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open == -$str2_open) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else if ($str1_open\
    \ < 0 && $str2_open > 0) {\n        if ($str2_open == -$str1_open) {\n       \
    \     return \"Yes\";\n        } else {\n            return \"No\";\n        }\n\
    \    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjfoaieqv.php:68\n\
    Stack trace:\n#0 /tmp/tmpjfoaieqv.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpjfoaieqv.php\
    \ on line 68\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } elseif ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcslc4wsv.php:51\n\
    Stack trace:\n#0 /tmp/tmpcslc4wsv.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpcslc4wsv.php\
    \ on line 51\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52f9157j.php:49\n\
    Stack trace:\n#0 /tmp/tmp52f9157j.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp52f9157j.php\
    \ on line 49\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = 0;\n    $right = 0;\n    $left_parens\
    \ = array();\n    $right_parens = array();\n    $left_parens = str_split($lst[0]);\n\
    \    $right_parens = str_split($lst[1]);\n    foreach ($left_parens as $left_paren)\
    \ {\n        if ($left_paren == \"(\") {\n            $left++;\n        }\n  \
    \  }\n    foreach ($right_parens as $right_paren) {\n        if ($right_paren\
    \ == \")\") {\n            $right++;\n        }\n    }\n    if ($left == $right)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkoxdmz0t.php:43\n\
    Stack trace:\n#0 /tmp/tmpkoxdmz0t.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpkoxdmz0t.php\
    \ on line 43\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52f9157j.php:49\n\
    Stack trace:\n#0 /tmp/tmp52f9157j.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp52f9157j.php\
    \ on line 49\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $len1 = strlen($str1);\n    $len2 = strlen($str2);\n    $count1 = 0;\n  \
    \  $count2 = 0;\n    for ($i = 0; $i < $len1; $i++) {\n        if ($str1[$i] ==\
    \ '(') {\n            $count1++;\n        } else {\n            $count1--;\n \
    \       }\n    }\n    for ($i = 0; $i < $len2; $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $count2++;\n        } else {\n            $count2--;\n\
    \        }\n    }\n    if ($count1 == 0 && $count2 == 0) {\n        return \"\
    Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppupxy9r5.php:47\n\
    Stack trace:\n#0 /tmp/tmppupxy9r5.php(61): test()\n#1 {main}\n  thrown in /tmp/tmppupxy9r5.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52f9157j.php:49\n\
    Stack trace:\n#0 /tmp/tmp52f9157j.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp52f9157j.php\
    \ on line 49\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open == -$str2_open) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else if ($str1_open\
    \ < 0 && $str2_open > 0) {\n        if ($str2_open == -$str1_open) {\n       \
    \     return \"Yes\";\n        } else {\n            return \"No\";\n        }\n\
    \    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjfoaieqv.php:68\n\
    Stack trace:\n#0 /tmp/tmpjfoaieqv.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpjfoaieqv.php\
    \ on line 68\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $left = 0;\n    $right = 0;\n    $left_parens\
    \ = 0;\n    $right_parens = 0;\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n \
    \   for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == \"(\")\
    \ {\n            $left_parens++;\n        } else {\n            $right_parens++;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == \"(\") {\n            $left_parens++;\n        } else {\n            $right_parens++;\n\
    \        }\n    }\n    if ($left_parens != $right_parens) {\n        return \"\
    No\";\n    }\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i]\
    \ == \"(\") {\n            $left++;\n        } else {\n            $right++;\n\
    \        }\n        if ($right > $left) {\n            return \"No\";\n      \
    \  }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == \"(\") {\n            $left++;\n        } else {\n            $right++;\n\
    \        }\n        if ($right > $left) {\n            return \"No\";\n      \
    \  }\n    }\n    return \"Yes\";\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpahuddmdo.php:70\n\
    Stack trace:\n#0 /tmp/tmpahuddmdo.php(81): test()\n#1 {main}\n  thrown in /tmp/tmpahuddmdo.php\
    \ on line 70\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_len\
    \ = strlen($str1);\n  $str2_len = strlen($str2);\n  $str1_open = 0;\n  $str2_open\
    \ = 0;\n  for ($i = 0; $i < $str1_len; $i++) {\n    if ($str1[$i] == '(') {\n\
    \      $str1_open++;\n    } else {\n      $str1_open--;\n    }\n  }\n  for ($i\
    \ = 0; $i < $str2_len; $i++) {\n    if ($str2[$i] == '(') {\n      $str2_open++;\n\
    \    } else {\n      $str2_open--;\n    }\n  }\n  if ($str1_open > 0) {\n    if\
    \ ($str2_open < 0) {\n      return \"Yes\";\n    } else {\n      return \"No\"\
    ;\n    }\n  } else {\n    if ($str2_open > 0) {\n      return \"Yes\";\n    }\
    \ else {\n      return \"No\";\n    }\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ps47h85.php:58\n\
    Stack trace:\n#0 /tmp/tmp8ps47h85.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp8ps47h85.php\
    \ on line 58\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"No\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvit90o8.php:53\n\
    Stack trace:\n#0 /tmp/tmpwvit90o8.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpwvit90o8.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52f9157j.php:49\n\
    Stack trace:\n#0 /tmp/tmp52f9157j.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp52f9157j.php\
    \ on line 49\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn_3cg15p.php:50\n\
    Stack trace:\n#0 /tmp/tmpn_3cg15p.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpn_3cg15p.php\
    \ on line 50\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52f9157j.php:49\n\
    Stack trace:\n#0 /tmp/tmp52f9157j.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp52f9157j.php\
    \ on line 49\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr6fgexnz.php:53\n\
    Stack trace:\n#0 /tmp/tmpr6fgexnz.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpr6fgexnz.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else if ($str1_open == $str1_close && $str2_open\
    \ != $str2_close) {\n        return \"No\";\n    } else if ($str1_open != $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"No\";\n    } else if ($str1_open\
    \ != $str1_close && $str2_open != $str2_close) {\n        if ($str1_open > $str1_close)\
    \ {\n            $str1_open -= $str1_close;\n            $str1_close = 0;\n  \
    \      } else {\n            $str1_close -= $str1_open;\n            $str1_open\
    \ = 0;\n        }\n        if ($str2_open > $str2_close) {\n            $str2_open\
    \ -= $str2_close;\n            $str2_close = 0;\n        } else {\n          \
    \  $str2_close -= $str2_open;\n            $str2_open = 0;\n        }\n      \
    \  if ($str1_open == $str2_close\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfor8gy7k.php on line 60

    '
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr6fgexnz.php:53\n\
    Stack trace:\n#0 /tmp/tmpr6fgexnz.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpr6fgexnz.php\
    \ on line 53\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    } else {\n   \
    \     return \"No\";\n    }\n}\necho match_parens(array(\"()(\", \")\")) . \"\\\
    n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbonoaom3.php:59\n\
    Stack trace:\n#0 /tmp/tmpbonoaom3.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpbonoaom3.php\
    \ on line 59\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk164aluh.php:47\n\
    Stack trace:\n#0 /tmp/tmpk164aluh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpk164aluh.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open == abs($str2_open)) {\n            return \"\
    Yes\";\n        }\n    } else if ($str1_open < 0 && $str2_open > 0) {\n      \
    \  if (abs($str1_open) == $str2_open) {\n            return \"Yes\";\n       \
    \ }\n    }\n    return \"No\";\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd_5weboy.php:64\n\
    Stack trace:\n#0 /tmp/tmpd_5weboy.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpd_5weboy.php\
    \ on line 64\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return \"Yes\";\n    } elseif ($str1_open == $str1_close) {\n        if\
    \ ($str2_open > $str2_close) {\n            return \"Yes\";\n        } else {\n\
    \            return \"No\";\n        }\n    } elseif ($str2_open == $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            return \"Yes\";\n  \
    \      } else {\n            return \"No\";\n        }\n    } else {\n       \
    \ return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvbslu06.php:47\n\
    Stack trace:\n#0 /tmp/tmpwvbslu06.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpwvbslu06.php\
    \ on line 47\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52f9157j.php:49\n\
    Stack trace:\n#0 /tmp/tmp52f9157j.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp52f9157j.php\
    \ on line 49\n"
  timestamp: 1659730442
- exit_code: 255
  program: "<?php\n// You are given an array of two strings, both strings consist\
    \ of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to\
    \ check if it is possible to concatenate the two strings in\n// some order, that\
    \ the resulting string will be good.\n// A string S is considered to be good if\
    \ and only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"\
    ()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\
    \nfunction match_parens($lst) {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n      \
    \  if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n    \
    \        $str1_open--;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n    }\n    if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27m91gti.php:51\n\
    Stack trace:\n#0 /tmp/tmp27m91gti.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp27m91gti.php\
    \ on line 51\n"
  timestamp: 1659730442
