name: HumanEval_10_make_palindrome
language: php
prompt: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
  // Algorithm idea is simple:\n// - Find the longest postfix of supplied string that\
  \ is a palindrome.\n// - Append to the end of the string reverse of a string prefix\
  \ that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\
  \"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\"\
  )\n// \"catac\"\nfunction make_palindrome($string) {\n"
tests: "function candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
  \ Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $length = strlen($string);\n    $longest_palindrome_suffix = \"\
    \";\n    for ($i = 0; $i < $length; $i++) {\n        $suffix = substr($string,\
    \ $i);\n        $prefix = substr($string, 0, $length - $i);\n        if ($suffix\
    \ == strrev($suffix) && strlen($suffix) > strlen($longest_palindrome_suffix))\
    \ {\n            $longest_palindrome_suffix = $suffix;\n        }\n    }\n   \
    \ return $string . strrev(substr($string, 0, $length - strlen($longest_palindrome_suffix)));\n\
    }\n", "    $length = strlen($string);\n    if ($length == 0) {\n        return\
    \ \"\";\n    }\n    $palindrome_suffix = find_longest_palindrome_suffix($string);\n\
    \    $palindrome_prefix = substr($string, 0, $length - strlen($palindrome_suffix));\n\
    \    return $string . strrev($palindrome_prefix);\n}\n", "    $length = strlen($string);\n\
    \    $palindrome_suffix = find_longest_palindrome_suffix($string);\n    $palindrome_prefix\
    \ = substr($string, 0, $length - strlen($palindrome_suffix));\n    return $string\
    \ . strrev($palindrome_prefix);\n}\n", "    $length = strlen($string);\n    $prefix\
    \ = '';\n    $suffix = '';\n    for ($i = 0; $i < $length; $i++) {\n        $prefix\
    \ .= $string[$i];\n        $suffix = $string[$i] . $suffix;\n        if ($prefix\
    \ == $suffix) {\n            $palindrome = $prefix;\n        }\n    }\n    return\
    \ $string . strrev(substr($string, 0, strlen($string) - strlen($palindrome)));\n\
    }\n", "    $length = strlen($string);\n    $palindrome_length = 0;\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        if ($string[$i] == $string[$length - $i\
    \ - 1]) {\n            $palindrome_length++;\n        } else {\n            break;\n\
    \        }\n    }\n    $prefix = substr($string, 0, $length - $palindrome_length);\n\
    \    $prefix_reversed = strrev($prefix);\n    return $string . $prefix_reversed;\n\
    }\n\necho make_palindrome(\"\");\necho \"\\n\";\necho make_palindrome(\"cat\"\
    );\necho \"\\n\";\necho make_palindrome(\"cata\");\necho \"\\n\";", "    $length\
    \ = strlen($string);\n    $palindrome_length = 0;\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        if ($string[$i] == $string[$length - $i - 1]) {\n         \
    \   $palindrome_length++;\n        } else {\n            break;\n        }\n \
    \   }\n    $prefix = substr($string, 0, $length - $palindrome_length);\n    $prefix_reversed\
    \ = strrev($prefix);\n    return $string . $prefix_reversed;\n}\n", "    $string_length\
    \ = strlen($string);\n    if ($string_length == 0) {\n        return \"\";\n \
    \   }\n    $longest_palindrome_suffix = find_longest_palindrome_suffix($string);\n\
    \    $prefix_length = $string_length - strlen($longest_palindrome_suffix);\n \
    \   $prefix = substr($string, 0, $prefix_length);\n    $prefix_reversed = strrev($prefix);\n\
    \    return $string . $prefix_reversed;\n}\n", "    $string_length = strlen($string);\n\
    \    if ($string_length == 0) {\n        return \"\";\n    }\n    $longest_palindrome_length\
    \ = 0;\n    $longest_palindrome_start = 0;\n    for ($i = 0; $i < $string_length;\
    \ $i++) {\n        $palindrome_length = 0;\n        $palindrome_start = $i;\n\
    \        while ($palindrome_start >= 0 && $palindrome_start + $palindrome_length\
    \ < $string_length &&\n            $string[$palindrome_start] == $string[$palindrome_start\
    \ + $palindrome_length]) {\n            $palindrome_length++;\n            $palindrome_start--;\n\
    \        }\n        if ($palindrome_length > $longest_palindrome_length) {\n \
    \           $longest_palindrome_length = $palindrome_length;\n            $longest_palindrome_start\
    \ = $palindrome_start + 1;\n        }\n    }\n    $prefix = substr($string, 0,\
    \ $longest_palindrome_start);\n    $suffix = substr($string, $longest_palindrome_start\
    \ + $longest_palindrome_length);\n    return $string . strrev($prefix) . $suffix;\n\
    }\n", "    $length = strlen($string);\n    $reverse = strrev($string);\n    $longest_palindrome\
    \ = '';\n    for ($i = 0; $i < $length; $i++) {\n        $substring = substr($string,\
    \ $i);\n        $reverse_substring = substr($reverse, 0, $length - $i);\n    \
    \    if ($substring == $reverse_substring) {\n            $longest_palindrome\
    \ = $substring;\n        }\n    }\n    return $string . substr($reverse, $length\
    \ - strlen($longest_palindrome));\n}\n", "    $length = strlen($string);\n   \
    \ $palindrome = $string;\n    for ($i = $length - 1; $i >= 0; $i--) {\n      \
    \  if (is_palindrome(substr($string, $i))) {\n            $palindrome .= strrev(substr($string,\
    \ 0, $i));\n            break;\n        }\n    }\n    return $palindrome;\n}\n",
  "    $length = strlen($string);\n    $suffix = \"\";\n    for ($i = $length; $i\
    \ > 0; $i--) {\n        $suffix = substr($string, $i * -1);\n        if (is_palindrome($suffix))\
    \ {\n            break;\n        }\n    }\n    $prefix = substr($string, 0, $length\
    \ - strlen($suffix));\n    return $string . strrev($prefix);\n}\n", "  $length\
    \ = strlen($string);\n  $palindrome_suffix = find_palindrome_suffix($string);\n\
    \  $palindrome_prefix = substr($string, 0, $length - strlen($palindrome_suffix));\n\
    \  $palindrome_prefix = strrev($palindrome_prefix);\n  return $string . $palindrome_prefix;\n\
    }\n", "    $string_length = strlen($string);\n    $longest_palindrome_length =\
    \ 0;\n    $longest_palindrome_start = 0;\n    for ($i = 0; $i < $string_length;\
    \ $i++) {\n        $palindrome_length = 0;\n        $palindrome_start = $i;\n\
    \        while ($palindrome_start >= 0 && $palindrome_start + $palindrome_length\
    \ < $string_length && $string[$palindrome_start] == $string[$palindrome_start\
    \ + $palindrome_length]) {\n            $palindrome_length++;\n            $palindrome_start--;\n\
    \        }\n        if ($palindrome_length > $longest_palindrome_length) {\n \
    \           $longest_palindrome_length = $palindrome_length;\n            $longest_palindrome_start\
    \ = $palindrome_start + 1;\n        }\n    }\n    $prefix = substr($string, 0,\
    \ $longest_palindrome_start);\n    $prefix_reversed = strrev($prefix);\n    return\
    \ $string . $prefix_reversed;\n}\n\necho make_palindrome(\"\") . \"\\n\";\necho\
    \ make_palindrome(\"cat\") . \"\\n\";\necho make_palindrome(\"cata\") . \"\\n\"\
    ;\necho make_palindrome(\"cataa\") . \"\\n\";\necho make_palindrome(\"cataac\"\
    ) . \"\\n\";\necho make_palindrome(\"cataacat\") . \"\\n\";\necho make_palindrome(\"\
    cataacata\") . \"\\n\";\necho make_palindrome(\"cataacataa\") . \"\\n\";\necho\
    \ make_palindrome(\"cataacataac\") . \"\\n\";\necho make_palindrome(\"cataacataaca\"\
    ) . \"\\n\";\necho make_palindrome(\"cataacataacaa\") . \"\\n\";\necho make_palindrome(\"\
    cataacataacaac\") . \"\\n\";\necho make_palindrome(\"cataacataacaaca\") . \"\\\
    n\";\necho make_palindrome(\"cata", "    if ($string == \"\") {\n        return\
    \ \"\";\n    }\n    $string_length = strlen($string);\n    $longest_palindrome_length\
    \ = 0;\n    $longest_palindrome_start = 0;\n    for ($i = 0; $i < $string_length;\
    \ $i++) {\n        $palindrome_length = 0;\n        $palindrome_start = $i;\n\
    \        $palindrome_end = $i;\n        while ($palindrome_start >= 0 && $palindrome_end\
    \ < $string_length && $string[$palindrome_start] == $string[$palindrome_end])\
    \ {\n            $palindrome_length = $palindrome_end - $palindrome_start + 1;\n\
    \            $palindrome_start--;\n            $palindrome_end++;\n        }\n\
    \        if ($palindrome_length > $longest_palindrome_length) {\n            $longest_palindrome_length\
    \ = $palindrome_length;\n            $longest_palindrome_start = $palindrome_start\
    \ + 1;\n        }\n    }\n    $prefix = substr($string, 0, $longest_palindrome_start);\n\
    \    $suffix = substr($string, $longest_palindrome_start + $longest_palindrome_length);\n\
    \    return $string . strrev($prefix) . $suffix;\n}\n\necho make_palindrome(\"\
    \");\necho \"\\n\";\necho make_palindrome(\"cat\");\necho \"\\n\";\necho make_palindrome(\"\
    cata\");\necho \"\\n\";", "    $length = strlen($string);\n    $palindrome = $string;\n\
    \    for ($i = $length - 1; $i >= 0; $i--) {\n        if (is_palindrome(substr($string,\
    \ $i))) {\n            $palindrome .= strrev(substr($string, 0, $i));\n      \
    \      break;\n        }\n    }\n    return $palindrome;\n}\n", "    $length =\
    \ strlen($string);\n    $palindrome = $string;\n    for ($i = $length - 1; $i\
    \ >= 0; $i--) {\n        if (is_palindrome(substr($string, $i))) {\n         \
    \   $palindrome .= strrev(substr($string, 0, $i));\n            break;\n     \
    \   }\n    }\n    return $palindrome;\n}\n", "  $len = strlen($string);\n  for\
    \ ($i = $len; $i > 0; $i--) {\n    if (is_palindrome(substr($string, 0, $i)))\
    \ {\n      return $string . strrev(substr($string, 0, $len - $i));\n    }\n  }\n\
    \  return $string;\n}\n", "    $length = strlen($string);\n    if ($length ===\
    \ 0) {\n        return $string;\n    }\n    $longest_palindrome_suffix = find_longest_palindrome_suffix($string);\n\
    \    $prefix = substr($string, 0, $length - strlen($longest_palindrome_suffix));\n\
    \    return $string . strrev($prefix);\n}\n", "  $string_length = strlen($string);\n\
    \  $palindrome_length = 0;\n  for ($i = $string_length - 1; $i >= 0; $i--) {\n\
    \    if ($string[$i] == $string[$string_length - 1 - $palindrome_length]) {\n\
    \      $palindrome_length++;\n    }\n  }\n  if ($palindrome_length == $string_length)\
    \ {\n    return $string;\n  }\n  return $string . substr(strrev($string), 0, $string_length\
    \ - $palindrome_length);\n}\n", "    $length = strlen($string);\n    $palindrome\
    \ = $string;\n    for ($i = 0; $i < $length; $i++) {\n        if (is_palindrome(substr($string,\
    \ $i))) {\n            $palindrome .= strrev(substr($string, 0, $i));\n      \
    \      break;\n        }\n    }\n    return $palindrome;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
