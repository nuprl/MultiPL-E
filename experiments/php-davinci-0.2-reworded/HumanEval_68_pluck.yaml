name: HumanEval_68_pluck
language: php
prompt: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in an array, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation: 2 has\
  \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
  \ pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest even\
  \ value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n//\
  \ array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0, 1)\n\
  // Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will\
  \ choose the first zero, which has the smallest index.\n// Constraints:\n// * 1\
  \ <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n"
tests: "function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
  \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
  \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1)) !== array(6,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 9,\
  \ 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $evens = array_filter($arr, function($n) {\n        return $n %\
    \ 2 == 0;\n    });\n    if (empty($evens)) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $index = array_search($min, $arr);\n    return [$min, $index];\n\
    }\n\n$tests = [\n    [\n        'input' => [4, 2, 3],\n        'expected' => [2,\
    \ 1]\n    ],\n    [\n        'input' => [1, 2, 3],\n        'expected' => [2,\
    \ 1]\n    ],\n    [\n        'input' => [],\n        'expected' => []\n    ],\n\
    \    [\n        'input' => [5, 0, 3, 0, 4, 2],\n        'expected' => [0, 1]\n\
    \    ],\n];\n\nforeach ($tests as $test) {\n    $result = pluck($test['input']);\n\
    \    if ($result !== $test['expected']) {\n        echo \"FAILED: \" . json_encode($test['input'])\
    \ . \" expected \" . json_encode($test['expected']) . \" got \" . json_encode($result)\
    \ . \"\\n\";\n    }\n}", "    $evens = [];\n    $indexes = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] =\
    \ $value;\n            $indexes[] = $key;\n        }\n    }\n    if (count($evens)\
    \ == 0) {\n        return [];\n    }\n    $min = min($evens);\n    $minIndex =\
    \ array_search($min, $evens);\n    return [$min, $indexes[$minIndex]];\n}\n",
  "    $evens = [];\n    $evens_index = [];\n    $evens_index_min = [];\n    $evens_index_min_index\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $evens_index[] = $key;\n    \
    \    }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $evens_min\
    \ = min($evens);\n    foreach ($evens as $key => $value) {\n        if ($value\
    \ == $evens_min) {\n            $evens_index_min[] = $evens_index[$key];\n   \
    \     }\n    }\n    $evens_index_min_index[] = min($evens_index_min);\n    return\
    \ [$evens_min, $evens_index_min_index[0]];\n}", "    $even_arr = array_filter($arr,\
    \ function($item) {\n        return $item % 2 == 0;\n    });\n    if (empty($even_arr))\
    \ {\n        return [];\n    }\n    $min_even = min($even_arr);\n    $min_even_index\
    \ = array_search($min_even, $arr);\n    return [$min_even, $min_even_index];\n\
    }\n", "  $evens = [];\n  $evens_index = [];\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value % 2 == 0) {\n      $evens[] = $value;\n      $evens_index[]\
    \ = $key;\n    }\n  }\n  if (count($evens) == 0) {\n    return [];\n  }\n  $smallest_even\
    \ = min($evens);\n  $smallest_even_index = min($evens_index);\n  return [$smallest_even,\
    \ $smallest_even_index];\n}\n", "    $evens = [];\n    foreach ($arr as $key =>\
    \ $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \        }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n\
    \    $min = min($evens);\n    $min_key = array_search($min, $arr);\n    return\
    \ [$min, $min_key];\n}\n\n$arr = [4, 2, 3];\n$arr = [1, 2, 3];\n$arr = [];\n$arr\
    \ = [5, 0, 3, 0, 4, 2];\n$arr = [0, 0, 0, 0, 0, 0];\n$arr = [0, 1, 2, 3, 4, 5];\n\
    $arr = [1, 3, 5, 7, 9, 11];\n$arr = [2, 4, 6, 8, 10, 12];\n$arr = [1, 2, 3, 4,\
    \ 5, 6];\n$arr = [2, 4, 6, 8, 10, 12];\n$arr = [1, 2, 3, 4, 5, 6];\n$arr = [1,\
    \ 3, 5, 7, 9, 11];\n$arr = [2, 4, 6, 8, 10, 12];\n$arr = [1, 2, 3, 4, 5, 6];\n\
    $arr = [2, 4, 6, 8, 10, 12];\n$arr = [1, 2, 3, 4, 5, 6];\n$arr = [1, 3, 5, 7,\
    \ 9, 11];\n$arr = [2, 4, 6, 8, 10, 12];\n$arr = [1, 2, 3, 4, 5, 6];\n$arr = [2,\
    \ 4, 6, 8, 10, 12];\n$arr = [1, 2, 3, 4, 5, 6];\n$arr = [1, 3, 5, 7, 9, 11];\n\
    $arr = [2, 4, 6, 8, 10, 12];\n$arr = [1, 2, 3, 4, 5, 6];\n$arr = [2, 4, 6, 8,\
    \ 10, 12];\n$", "    $evens = [];\n    $evens_index = [];\n    $evens_min = null;\n\
    \    $evens_min_index = null;\n    foreach ($arr as $index => $value) {\n    \
    \    if ($value % 2 == 0) {\n            $evens[] = $value;\n            $evens_index[]\
    \ = $index;\n            if ($evens_min === null || $value < $evens_min) {\n \
    \               $evens_min = $value;\n                $evens_min_index = $index;\n\
    \            }\n        }\n    }\n    if (count($evens) == 0) {\n        return\
    \ [];\n    }\n    return [$evens_min, $evens_min_index];\n}\n", "    $evens =\
    \ [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $evens[] = $value;\n            $index[] = $key;\n\
    \        }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n\
    \    $min = min($evens);\n    $min_index = array_search($min, $evens);\n    return\
    \ [$min, $index[$min_index]];\n}\n", "    $evens = [];\n    $evens_index = [];\n\
    \    $evens_index_values = [];\n    foreach ($arr as $key => $value) {\n     \
    \   if ($value % 2 == 0) {\n            $evens[] = $value;\n            $evens_index[]\
    \ = $key;\n            $evens_index_values[$key] = $value;\n        }\n    }\n\
    \    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $min_index = array_search($min, $evens_index_values);\n    return [$min,\
    \ $min_index];\n}\n", "    $evens = [];\n    $evensIndex = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] =\
    \ $value;\n            $evensIndex[] = $key;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $minIndex = array_search($min,\
    \ $evens);\n    return [$min, $evensIndex[$minIndex]];\n}\n", "    $evens = [];\n\
    \    $evens_index = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $evens[] = $value;\n            $evens_index[] = $key;\n\
    \        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $min_index = array_search($min, $evens);\n    return [$min,\
    \ $evens_index[$min_index]];\n}\n", "    $evens = [];\n    $indexes = [];\n  \
    \  foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n      \
    \      $evens[] = $value;\n            $indexes[] = $key;\n        }\n    }\n\
    \    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $minIndex = array_search($min, $evens);\n    return [$min, $indexes[$minIndex]];\n\
    }\n\n$arr = [4, 2, 3];\nvar_dump(pluck($arr));\n\n$arr = [1, 2, 3];\nvar_dump(pluck($arr));\n\
    \n$arr = [];\nvar_dump(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nvar_dump(pluck($arr));",
  "    $evens = [];\n    $evens_index = [];\n    $evens_min = null;\n    $evens_min_index\
    \ = null;\n    foreach ($arr as $index => $value) {\n        if ($value % 2 ==\
    \ 0) {\n            $evens[] = $value;\n            $evens_index[] = $index;\n\
    \            if ($evens_min === null || $value < $evens_min) {\n             \
    \   $evens_min = $value;\n                $evens_min_index = $index;\n       \
    \     }\n        }\n    }\n    if (count($evens) == 0) {\n        return [];\n\
    \    }\n    return [$evens_min, $evens_min_index];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    \n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\
    \n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n    $indexes\
    \ = [];\n    foreach ($arr as $index => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $indexes[] = $index;\n      \
    \  }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $minIndex = array_search($min, $evens);\n    return [$min, $indexes[$minIndex]];\n\
    }\n", "    $evens = array_filter($arr, function($n) {\n        return $n % 2 ==\
    \ 0;\n    });\n    if (empty($evens)) {\n        return [];\n    }\n    $min =\
    \ min($evens);\n    $index = array_search($min, $arr);\n    return [$min, $index];\n\
    }\n", "    $even = [];\n    $even_index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n         \
    \   $even_index[] = $key;\n        }\n    }\n    if (count($even) == 0) {\n  \
    \      return [];\n    }\n    $min = min($even);\n    $min_index = array_search($min,\
    \ $even);\n    return [$min, $even_index[$min_index]];\n}\n", "    $evens = [];\n\
    \    $index = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $evens[] = $value;\n            $index[] = $key;\n\
    \        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $min_index = array_search($min, $evens);\n    return [$min,\
    \ $index[$min_index]];\n}\n", "    $evens = array_filter($arr, function($n) {\n\
    \        return $n % 2 == 0;\n    });\n    if (count($evens) == 0) {\n       \
    \ return [];\n    }\n    $min = min($evens);\n    $key = array_search($min, $arr);\n\
    \    return [$min, $key];\n}\n", "    $evens = [];\n    foreach ($arr as $i =>\
    \ $v) {\n        if ($v % 2 == 0) {\n            $evens[] = $v;\n        }\n \
    \   }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    foreach ($arr as $i => $v) {\n        if ($v == $min) {\n            return\
    \ [$v, $i];\n        }\n    }\n}\n\n$tests = [\n    [\n        'input' => [4,\
    \ 2, 3],\n        'expected' => [2, 1],\n    ],\n    [\n        'input' => [1,\
    \ 2, 3],\n        'expected' => [2, 1],\n    ],\n    [\n        'input' => [],\n\
    \        'expected' => [],\n    ],\n    [\n        'input' => [5, 0, 3, 0, 4,\
    \ 2],\n        'expected' => [0, 1],\n    ],\n];\n\nforeach ($tests as $test)\
    \ {\n    $result = pluck($test['input']);\n    if ($result !== $test['expected'])\
    \ {\n        echo \"Test failed: \" . var_export($test['input'], true) . PHP_EOL;\n\
    \        echo \"Result: \" . var_export($result, true) . PHP_EOL;\n        echo\
    \ \"Expected: \" . var_export($test['expected'], true) . PHP_EOL;\n    }\n}",
  "    $evens = [];\n    $index = 0;\n    foreach ($arr as $value) {\n        if ($value\
    \ % 2 == 0) {\n            $evens[] = $value;\n        }\n    }\n    if (count($evens)\
    \ == 0) {\n        return [];\n    }\n    $smallest = min($evens);\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value == $smallest) {\n           \
    \ $index = $key;\n            break;\n        }\n    }\n    return [$smallest,\
    \ $index];\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
