name: HumanEval_42_incr_list
language: php
prompt: "<?php\n// Return array with elements incremented by 1.\n// >>> incr_list(array(1,\
  \ 2, 3))\n// array(2, 3, 4)\n// >>> incr_list(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n\
  // array(6, 4, 6, 3, 4, 4, 10, 1, 124)\nfunction incr_list($l) {\n"
tests: "function candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
  \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $result = array();\n    foreach ($l as $element) {\n        $result[]\
    \ = $element + 1;\n    }\n    return $result;\n}\n", "    $res = array();\n  \
    \  foreach ($l as $v) {\n        $res[] = $v + 1;\n    }\n    return $res;\n}\n",
  "    $res = array();\n    for ($i = 0; $i < count($l); $i++) {\n        $res[] =\
    \ $l[$i] + 1;\n    }\n    return $res;\n}\n", "    $result = array();\n    foreach\
    \ ($l as $item) {\n        $result[] = $item + 1;\n    }\n    return $result;\n\
    }\n", "    $result = array();\n    foreach ($l as $elem) {\n        $result[]\
    \ = $elem + 1;\n    }\n    return $result;\n}\n", "    $result = array();\n  \
    \  foreach ($l as $element) {\n        $result[] = $element + 1;\n    }\n    return\
    \ $result;\n}\n", "    $result = array();\n    foreach ($l as $elem) {\n     \
    \   $result[] = $elem + 1;\n    }\n    return $result;\n}\n", "    $result = array();\n\
    \    foreach ($l as $element) {\n        $result[] = $element + 1;\n    }\n  \
    \  return $result;\n}\n", "\t$new_l = array();\n\tforeach ($l as $v) {\n\t\t$new_l[]\
    \ = $v + 1;\n\t}\n\treturn $new_l;\n}\n", "  $result = array();\n  foreach ($l\
    \ as $e) {\n    $result[] = $e + 1;\n  }\n  return $result;\n}\n", "    $result\
    \ = array();\n    foreach ($l as $value) {\n        $result[] = $value + 1;\n\
    \    }\n    return $result;\n}\n", "    $result = array();\n    foreach ($l as\
    \ $elem) {\n        $result[] = $elem + 1;\n    }\n    return $result;\n}\n",
  "    $result = array();\n    foreach ($l as $elem) {\n        $result[] = $elem\
    \ + 1;\n    }\n    return $result;\n}\n", "    $result = array();\n    foreach\
    \ ($l as $elem) {\n        $result[] = $elem + 1;\n    }\n    return $result;\n\
    }\n", "    $result = array();\n    foreach ($l as $item) {\n        $result[]\
    \ = $item + 1;\n    }\n    return $result;\n}\n", "  $r = array();\n  foreach\
    \ ($l as $v) {\n    $r[] = $v + 1;\n  }\n  return $r;\n}\n", "    $result = array();\n\
    \    foreach ($l as $element) {\n        $result[] = $element + 1;\n    }\n  \
    \  return $result;\n}\n", "  $r = array();\n  foreach ($l as $e) {\n    $r[] =\
    \ $e + 1;\n  }\n  return $r;\n}\n", "    $result = array();\n    foreach ($l as\
    \ $elem) {\n        $result[] = $elem + 1;\n    }\n    return $result;\n}\n",
  "    $result = array();\n    foreach ($l as $elem) {\n        $result[] = $elem\
    \ + 1;\n    }\n    return $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
