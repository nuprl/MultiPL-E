name: HumanEval_115_max_fill
language: php
prompt: "<?php\n// You are given a rectangular grid of wells. Each row represents\
  \ a single well,\n// and each 1 in a row represents a single unit of water.\n//\
  \ Each well has a corresponding bucket that can be used to extract water from it,\
  \ \n// and all buckets have the same capacity.\n// Your task is to use the buckets\
  \ to empty the wells.\n// Output the number of times you need to lower the buckets.\n\
  // Example 1:\n// >>> max_fill(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
  \ 1, 1, 1)), 1)\n// 6\n// Example 2:\n// >>> max_fill(array(array(0, 0, 1, 1), array(0,\
  \ 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2)\n// 5\n// Example 3:\n// >>>\
  \ max_fill(array(array(0, 0, 0), array(0, 0, 0)), 5)\n// 0\n// Constraints:\n//\
  \ * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length\
  \ <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill($grid,\
  \ $capacity) {\n"
tests: "function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
  \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0,\
  \ 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
  \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
  \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["    $rows = count($grid);\n    $cols = count($grid[0]);\n    $total\
    \ = 0;\n    $buckets = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j\
    \ = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n          \
    \      $total += $capacity;\n                $buckets++;\n            }\n    \
    \    }\n    }\n    return $total - $buckets;\n}\n", "    $max_fill = 0;\n    $grid_length\
    \ = count($grid);\n    $grid_width = count($grid[0]);\n    for ($i = 0; $i < $grid_length;\
    \ $i++) {\n        for ($j = 0; $j < $grid_width; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $max_fill += $capacity;\n                $grid[$i][$j]\
    \ = 0;\n                $grid = fill_neighbors($grid, $i, $j, $capacity);\n  \
    \          }\n        }\n    }\n    return $max_fill;\n}\n", "    $count = 0;\n\
    \    $grid = array_reverse($grid);\n    $row_count = count($grid);\n    $col_count\
    \ = count($grid[0]);\n    for ($i = 0; $i < $row_count; $i++) {\n        for ($j\
    \ = 0; $j < $col_count; $j++) {\n            if ($grid[$i][$j] == 1) {\n     \
    \           $grid[$i][$j] = 0;\n                $count++;\n                $capacity--;\n\
    \                if ($capacity == 0) {\n                    $capacity = $count;\n\
    \                    $count = 0;\n                }\n            }\n        }\n\
    \    }\n    return $capacity;\n}\n\necho max_fill(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1) . \"\\n\";\necho max_fill(array(array(0, 0,\
    \ 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) . \"\\n\"\
    ;\necho max_fill(array(array(0, 0, 0), array(0, 0, 0)), 5) . \"\\n\";", "    $count\
    \ = 0;\n    $grid = array_reverse($grid);\n    $max = 0;\n    foreach ($grid as\
    \ $row) {\n        $max = max($max, max($row));\n    }\n    while ($max > 0) {\n\
    \        foreach ($grid as $row) {\n            $row = array_reverse($row);\n\
    \            foreach ($row as $cell) {\n                if ($cell > 0) {\n   \
    \                 $cell -= $capacity;\n                    $count++;\n       \
    \         }\n            }\n        }\n        $max -= $capacity;\n    }\n   \
    \ return $count;\n}\n", "    $fill_count = 0;\n    $row_count = count($grid);\n\
    \    $column_count = count($grid[0]);\n    $row_index = 0;\n    $column_index\
    \ = 0;\n    $row_index_max = $row_count - 1;\n    $column_index_max = $column_count\
    \ - 1;\n    $row_index_min = 0;\n    $column_index_min = 0;\n    $row_index_max_reached\
    \ = false;\n    $column_index_max_reached = false;\n    $row_index_min_reached\
    \ = false;\n    $column_index_min_reached = false;\n    $direction = 'right';\n\
    \    while ($row_index_max_reached === false || $column_index_max_reached ===\
    \ false || $row_index_min_reached === false || $column_index_min_reached === false)\
    \ {\n        if ($grid[$row_index][$column_index] === 1) {\n            $grid[$row_index][$column_index]\
    \ = 0;\n            $fill_count++;\n        }\n        if ($direction === 'right')\
    \ {\n            if ($column_index === $column_index_max) {\n                $column_index_max_reached\
    \ = true;\n                $direction = 'down';\n                $row_index++;\n\
    \            } else {\n                $column_index++;\n            }\n     \
    \   } else if ($direction === 'down') {\n            if ($row_index === $row_index_max)\
    \ {\n                $row_index_max_reached = true;\n                $direction\
    \ = 'left';\n                $column_index--;\n            } else {\n        \
    \        $row_index++;\n            }\n        } else if ($direction === 'left')\
    \ {\n            if ($column_index === $column_index_min) {\n                $column_index_min_reached\
    \ = true;\n                $direction = 'up';\n                $row_index--;\n\
    \            } else {\n                $column_index--;\n            }\n     \
    \   } else if ($direction === 'up') {\n            if ($row_index === $row_index_min",
  "    $count = 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n\
    \    $row_max = array_fill(0, $row_count, 0);\n    $col_max = array_fill(0, $col_count,\
    \ 0);\n    for ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count;\
    \ $j++) {\n            $row_max[$i] = max($row_max[$i], $grid[$i][$j]);\n    \
    \        $col_max[$j] = max($col_max[$j], $grid[$i][$j]);\n        }\n    }\n\
    \    for ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count;\
    \ $j++) {\n            $count += min($row_max[$i], $col_max[$j]) - $grid[$i][$j];\n\
    \        }\n    }\n    return $count;\n}\n", "    $count = 0;\n    $row_count\
    \ = count($grid);\n    $col_count = count($grid[0]);\n    $row_max = array_fill(0,\
    \ $row_count, 0);\n    $col_max = array_fill(0, $col_count, 0);\n    for ($i =\
    \ 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count; $j++) {\n\
    \            $row_max[$i] = max($row_max[$i], $grid[$i][$j]);\n            $col_max[$j]\
    \ = max($col_max[$j], $grid[$i][$j]);\n        }\n    }\n    for ($i = 0; $i <\
    \ $row_count; $i++) {\n        for ($j = 0; $j < $col_count; $j++) {\n       \
    \     $count += min($row_max[$i], $col_max[$j]) - $grid[$i][$j];\n        }\n\
    \    }\n    return $count;\n}\n", "    $max_fill = 0;\n    $grid_size = count($grid);\n\
    \    for ($i = 0; $i < $grid_size; $i++) {\n        $row_size = count($grid[$i]);\n\
    \        for ($j = 0; $j < $row_size; $j++) {\n            if ($grid[$i][$j] ==\
    \ 1) {\n                $max_fill += $capacity;\n                $grid[$i][$j]\
    \ = 0;\n                $grid = fill_neighbors($grid, $i, $j, $capacity);\n  \
    \          }\n        }\n    }\n    return $max_fill;\n}\n", "    $num_rows =\
    \ count($grid);\n    $num_cols = count($grid[0]);\n    $num_buckets = 0;\n   \
    \ $num_filled = 0;\n    $num_emptied = 0;\n    $num_filled_last_round = 0;\n \
    \   $num_emptied_last_round = 0;\n    $num_filled_this_round = 0;\n    $num_emptied_this_round\
    \ = 0;\n    $num_filled_this_round_last_round = 0;\n    $num_emptied_this_round_last_round\
    \ = 0;\n    $num_filled_this_round_this_round = 0;\n    $num_emptied_this_round_this_round\
    \ = 0;\n    $num_filled_this_round_this_round_last_round = 0;\n    $num_emptied_this_round_this_round_last_round\
    \ = 0;\n    $num_filled_this_round_this_round_this_round = 0;\n    $num_emptied_this_round_this_round_this_round\
    \ = 0;\n    $num_filled_this_round_this_round_this_round_last_round = 0;\n   \
    \ $num_emptied_this_round_this_round_this_round_last_round = 0;\n    $num_filled_this_round_this_round_this_round_this_round\
    \ = 0;\n    $num_emptied_this_round_this_round_this_round_this_round = 0;\n  \
    \  $num_filled_this_round_this_round_this_round_this_round_last_round = 0;\n \
    \   $num_emptied_this_round_this_round_this_round_this_round_last_round = 0;\n\
    \    $num_filled_this_round_this_round_this_round_this_round_this_round = 0;\n\
    \    $num_emptied_this_round_this_round_this_round_this_round_this_round = 0;\n\
    \    $num_filled_this_round_this_round_this_round_this_round_this_round_last",
  "    $count = 0;\n    $grid_count = count($grid);\n    $row_count = count($grid[0]);\n\
    \    $max_row = $grid_count - 1;\n    $max_col = $row_count - 1;\n    $row = 0;\n\
    \    $col = 0;\n    $direction = 'right';\n    while ($row <= $max_row && $col\
    \ <= $max_col) {\n        if ($grid[$row][$col] == 1) {\n            $grid[$row][$col]\
    \ = 0;\n            $count++;\n        }\n        if ($direction == 'right') {\n\
    \            if ($col == $max_col) {\n                $direction = 'down';\n \
    \               $row++;\n            } else {\n                $col++;\n     \
    \       }\n        } elseif ($direction == 'down') {\n            if ($row ==\
    \ $max_row) {\n                $direction = 'left';\n                $col--;\n\
    \            } else {\n                $row++;\n            }\n        } elseif\
    \ ($direction == 'left') {\n            if ($col == 0) {\n                $direction\
    \ = 'up';\n                $row--;\n            } else {\n                $col--;\n\
    \            }\n        } elseif ($direction == 'up') {\n            if ($row\
    \ == 0) {\n                $direction = 'right';\n                $col++;\n  \
    \          } else {\n                $row--;\n            }\n        }\n    }\n\
    \    return $count;\n}\n", "    $count = 0;\n    $row_count = count($grid);\n\
    \    $col_count = count($grid[0]);\n    for ($i = 0; $i < $row_count; $i++) {\n\
    \        for ($j = 0; $j < $col_count; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $count++;\n                $grid[$i][$j] = 0;\n   \
    \             $grid = fill_neighbors($grid, $i, $j, $capacity);\n            }\n\
    \        }\n    }\n    return $count;\n}\n", "    $count = 0;\n    $max = 0;\n\
    \    $max_index = 0;\n    $max_index_array = array();\n    $max_index_array_index\
    \ = 0;\n    $max_index_array_index_array = array();\n    $max_index_array_index_array_index\
    \ = 0;\n    $max_index_array_index_array_index_array = array();\n    $max_index_array_index_array_index_array_index\
    \ = 0;\n    $max_index_array_index_array_index_array_index_array = array();\n\
    \    $max_index_array_index_array_index_array_index_array_index = 0;\n    $max_index_array_index_array_index_array_index_array_index_array\
    \ = array();\n    $max_index_array_index_array_index_array_index_array_index_array_index\
    \ = 0;\n    $max_index_array_index_array_index_array_index_array_index_array_index_array\
    \ = array();\n    $max_index_array_index_array_index_array_index_array_index_array_index_array_index\
    \ = 0;\n    $max_index_array_index_array_index_array_index_array_index_array_index_array_index_array\
    \ = array();\n    $max_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index\
    \ = 0;\n    $max_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array\
    \ = array();\n    $max_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index\
    \ = 0;\n    $max_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array\
    \ = array();\n    $max_index_array_index_array_index_array_index_array_index_array_index_array_index",
  "    $rows = count($grid);\n    $cols = count($grid[0]);\n    $total = 0;\n    for\
    \ ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n   \
    \         if ($grid[$i][$j] == 1) {\n                $total += $capacity;\n  \
    \          }\n        }\n    }\n    $max_fill = 0;\n    for ($i = 0; $i < $rows;\
    \ $i++) {\n        $fill = 0;\n        for ($j = 0; $j < $cols; $j++) {\n    \
    \        if ($grid[$i][$j] == 1) {\n                $fill += $capacity;\n    \
    \        }\n        }\n        if ($fill > $max_fill) {\n            $max_fill\
    \ = $fill;\n        }\n    }\n    return $total - $max_fill;\n}\n\necho max_fill(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) . \"\\n\";\necho max_fill(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) . \"\\\
    n\";\necho max_fill(array(array(0, 0, 0), array(0, 0, 0)), 5) . \"\\n\";", " \
    \   $times = 0;\n    $rowCount = count($grid);\n    $colCount = count($grid[0]);\n\
    \    $max = 0;\n    for ($i = 0; $i < $rowCount; $i++) {\n        for ($j = 0;\
    \ $j < $colCount; $j++) {\n            if ($grid[$i][$j] > $max) {\n         \
    \       $max = $grid[$i][$j];\n            }\n        }\n    }\n    for ($i =\
    \ 0; $i < $rowCount; $i++) {\n        for ($j = 0; $j < $colCount; $j++) {\n \
    \           if ($grid[$i][$j] < $max) {\n                $grid[$i][$j] = $max;\n\
    \                $times++;\n            }\n        }\n    }\n    return $times;\n\
    }\n", "    $buckets = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $row = 0;\n    $col = 0;\n    while ($row < $rows) {\n        $col = 0;\n\
    \        while ($col < $cols) {\n            if ($grid[$row][$col] == 1) {\n \
    \               $buckets++;\n                $grid[$row][$col] = 0;\n        \
    \        $col += $capacity;\n            } else {\n                $col++;\n \
    \           }\n        }\n        $row++;\n    }\n    return $buckets;\n}\n",
  "    $count = 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n\
    \    for ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count;\
    \ $j++) {\n            if ($grid[$i][$j] === 1) {\n                $count += $capacity;\n\
    \                $grid[$i][$j] = 0;\n                if ($i > 0 && $grid[$i -\
    \ 1][$j] === 1) {\n                    $grid[$i - 1][$j] = 0;\n              \
    \  }\n                if ($j > 0 && $grid[$i][$j - 1] === 1) {\n             \
    \       $grid[$i][$j - 1] = 0;\n                }\n            }\n        }\n\
    \    }\n    return $count;\n}\n", "    $wells = count($grid);\n    $units = count($grid[0]);\n\
    \    $fill = 0;\n    $buckets = array_fill(0, $wells, $capacity);\n    $empty\
    \ = array_fill(0, $wells, 0);\n    $count = 0;\n    while ($fill < $wells * $units)\
    \ {\n        $fill = 0;\n        for ($i = 0; $i < $wells; $i++) {\n         \
    \   for ($j = 0; $j < $units; $j++) {\n                if ($grid[$i][$j] == 1\
    \ && $buckets[$i] > 0) {\n                    $buckets[$i]--;\n              \
    \      $grid[$i][$j] = 0;\n                    $fill++;\n                }\n \
    \           }\n        }\n        $count++;\n        if ($buckets == $empty) {\n\
    \            return $count;\n        }\n    }\n    return $count;\n}\n", "   \
    \ $count = 0;\n    $max = 0;\n    $max_index = 0;\n    $max_index_array = [];\n\
    \    $max_index_array_index = 0;\n    $max_index_array_index_array = [];\n   \
    \ $max_index_array_index_array_index = 0;\n    $max_index_array_index_array_index_array\
    \ = [];\n    $max_index_array_index_array_index_array_index = 0;\n    $max_index_array_index_array_index_array_index_array\
    \ = [];\n    $max_index_array_index_array_index_array_index_array_index = 0;\n\
    \    $max_index_array_index_array_index_array_index_array_index_array = [];\n\
    \    $max_index_array_index_array_index_array_index_array_index_array_index =\
    \ 0;\n    $max_index_array_index_array_index_array_index_array_index_array_index_array\
    \ = [];\n    $max_index_array_index_array_index_array_index_array_index_array_index_array_index\
    \ = 0;\n    $max_index_array_index_array_index_array_index_array_index_array_index_array_index_array\
    \ = [];\n    $max_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index\
    \ = 0;\n    $max_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array\
    \ = [];\n    $max_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index\
    \ = 0;\n    $max_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array\
    \ = [];\n    $max_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index_",
  "    $wells = count($grid);\n    $width = count($grid[0]);\n    $total = 0;\n  \
    \  for ($i = 0; $i < $wells; $i++) {\n        $total += array_sum($grid[$i]);\n\
    \    }\n    $total = $total / $capacity;\n    $total = ceil($total);\n    return\
    \ $total;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1,\
    \ 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);\necho \"\\n\";\n\n\
    $grid = array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0,\
    \ 1, 1, 1));\n$capacity = 2;\necho max_fill($grid, $capacity);\necho \"\\n\";\n\
    \n$grid = array(array(0, 0, 0), array(0, 0, 0));\n$capacity = 5;\necho max_fill($grid,\
    \ $capacity);\necho \"\\n\";", "    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $count = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j\
    \ < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $count\
    \ += $capacity;\n                $grid[$i][$j] = 0;\n                $grid = fill_neighbors($grid,\
    \ $capacity, $i, $j);\n            }\n        }\n    }\n    return $count;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
