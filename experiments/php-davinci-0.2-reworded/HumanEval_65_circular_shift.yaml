name: HumanEval_65_circular_shift
language: php
prompt: "<?php\n// Circular shift the digits of the integer x, shift the digits right\
  \ by shift\n// and return the result as a string.\n// If shift > number of digits,\
  \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
  \ 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n"
tests: "function candidate(...$args) {\n    return circular_shift(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $x = (string) $x;\n    $shift = (int) $shift;\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $left = substr($x,\
    \ 0, $len - $shift);\n    $right = substr($x, $len - $shift);\n    return $right\
    \ . $left;\n}\n", "    $x_str = strval($x);\n    $x_len = strlen($x_str);\n  \
    \  if ($shift > $x_len) {\n        return strrev($x_str);\n    }\n    $first_part\
    \ = substr($x_str, $shift);\n    $second_part = substr($x_str, 0, $shift);\n \
    \   return $first_part . $second_part;\n}\n", "  $x = (string)$x;\n  $len = strlen($x);\n\
    \  if ($shift > $len) {\n    return strrev($x);\n  }\n  $a = substr($x, 0, $len\
    \ - $shift);\n  $b = substr($x, $len - $shift);\n  return $b . $a;\n}\n", "  \
    \  $x = (string) $x;\n    $len = strlen($x);\n    if ($shift > $len) {\n     \
    \   return strrev($x);\n    }\n    $y = substr($x, $len - $shift) . substr($x,\
    \ 0, $len - $shift);\n    return $y;\n}\n", "  $x = (string)$x;\n  $len = strlen($x);\n\
    \  if ($shift >= $len) {\n    return strrev($x);\n  }\n  $a = substr($x, 0, $len\
    \ - $shift);\n  $b = substr($x, $len - $shift);\n  return $b . $a;\n}\n", "  \
    \  $str = strval($x);\n    $len = strlen($str);\n    if ($shift >= $len) {\n \
    \       return strrev($str);\n    }\n    $str = substr($str, $shift) . substr($str,\
    \ 0, $shift);\n    return $str;\n}\n", "    $x_str = strval($x);\n    $x_len =\
    \ strlen($x_str);\n    if ($shift >= $x_len) {\n        return strrev($x_str);\n\
    \    }\n    $x_shift = substr($x_str, $shift, $x_len - $shift);\n    $x_shift\
    \ .= substr($x_str, 0, $shift);\n    return $x_shift;\n}\n", "    $digits = str_split($x);\n\
    \    $n = count($digits);\n    if ($shift > $n) {\n        return implode(array_reverse($digits));\n\
    \    }\n    $shifted = array_merge(array_slice($digits, $shift), array_slice($digits,\
    \ 0, $shift));\n    return implode($shifted);\n}\n", "    $x = (string) $x;\n\
    \    $len = strlen($x);\n    if ($shift >= $len) {\n        return strrev($x);\n\
    \    }\n    $a = substr($x, 0, $len - $shift);\n    $b = substr($x, $len - $shift);\n\
    \    return $b . $a;\n}\n", "    $x = (string) $x;\n    $len = strlen($x);\n \
    \   if ($shift >= $len) {\n        return strrev($x);\n    }\n    $y = substr($x,\
    \ $shift) . substr($x, 0, $shift);\n    return $y;\n}\n", "    $x = (string) $x;\n\
    \    $len = strlen($x);\n    if ($shift >= $len) {\n        return strrev($x);\n\
    \    }\n    return substr($x, $shift) . substr($x, 0, $shift);\n}\n", "    $x\
    \ = (string) $x;\n    $len = strlen($x);\n    if ($shift > $len) {\n        return\
    \ strrev($x);\n    }\n    $shift = $len - $shift;\n    return substr($x, $shift)\
    \ . substr($x, 0, $shift);\n}\n", "    $x = (string) $x;\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $left = substr($x,\
    \ 0, $len - $shift);\n    $right = substr($x, $len - $shift);\n    return $right\
    \ . $left;\n}\n", "    $digits = str_split($x);\n    $num_digits = count($digits);\n\
    \    if ($shift > $num_digits) {\n        return implode('', array_reverse($digits));\n\
    \    }\n    $left = array_slice($digits, 0, $shift);\n    $right = array_slice($digits,\
    \ $shift);\n    return implode('', array_merge($right, $left));\n}\n", "    $x\
    \ = (string) $x;\n    $len = strlen($x);\n    if ($shift >= $len) {\n        return\
    \ strrev($x);\n    }\n    $left = substr($x, 0, $len - $shift);\n    $right =\
    \ substr($x, $len - $shift);\n    return $right . $left;\n}\n", "    $x_str =\
    \ (string)$x;\n    $x_len = strlen($x_str);\n    if ($shift > $x_len) {\n    \
    \    return strrev($x_str);\n    }\n    $x_shift = substr($x_str, $shift) . substr($x_str,\
    \ 0, $shift);\n    return $x_shift;\n}\n", "    $digits = str_split($x);\n   \
    \ $n = count($digits);\n    $shift = $shift % $n;\n    if ($shift == 0) {\n  \
    \      return $x;\n    }\n    $result = array_slice($digits, $shift);\n    $result\
    \ = array_merge($result, array_slice($digits, 0, $shift));\n    return implode('',\
    \ $result);\n}\n", "    $x_str = strval($x);\n    $x_len = strlen($x_str);\n \
    \   if ($shift >= $x_len) {\n        return strrev($x_str);\n    } else {\n  \
    \      return substr($x_str, $shift) . substr($x_str, 0, $shift);\n    }\n}\n",
  "    $x = (string) $x;\n    $len = strlen($x);\n    if ($shift > $len) {\n     \
    \   return strrev($x);\n    }\n    $left = substr($x, 0, $len - $shift);\n   \
    \ $right = substr($x, $len - $shift);\n    return $right . $left;\n}\n", "   \
    \ $x = (string) $x;\n    $len = strlen($x);\n    if ($shift > $len) {\n      \
    \  return strrev($x);\n    }\n    $left = substr($x, 0, $len - $shift);\n    $right\
    \ = substr($x, $len - $shift);\n    return $right . $left;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
