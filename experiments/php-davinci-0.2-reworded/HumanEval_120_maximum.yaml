name: HumanEval_120_maximum
language: php
prompt: "<?php\n// Given an array arr of integers and a positive integer k, return\
  \ a sorted array \n// of length k with the maximum k numbers in arr.\n// Example\
  \ 1:\n// >>> maximum(array(-3, -4, 5), 3)\n// array(-4, -3, 5)\n// Example 2:\n\
  // >>> maximum(array(4, -4, 4), 2)\n// array(4, 4)\n// Example 3:\n// >>> maximum(array(-3,\
  \ 2, 1, 2, -1, -2, 1), 1)\n// array(2)\n// Note:\n// 1. The length of the array\
  \ will be in the range of [1, 1000].\n// 2. The elements in the array will be in\
  \ the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
  \ $k) {\n"
tests: "function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2)\
  \ !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
  \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20, 123))\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123, 20,\
  \ 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8, 0,\
  \ 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
  \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !== array(-10,\
  \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2,\
  \ 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["    $result = array();\n    for ($i = 0; $i < $k; $i++) {\n       \
    \ $max = $arr[0];\n        $index = 0;\n        for ($j = 0; $j < count($arr);\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $index = $j;\n            }\n        }\n        array_push($result,\
    \ $max);\n        unset($arr[$index]);\n        $arr = array_values($arr);\n \
    \   }\n    return $result;\n}\n", "    $result = array();\n    for ($i = 0; $i\
    \ < count($arr); $i++) {\n        if (count($result) < $k) {\n            $result[]\
    \ = $arr[$i];\n        } else {\n            $min = min($result);\n          \
    \  if ($arr[$i] > $min) {\n                $result[array_search($min, $result)]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n", "    $result = [];\n    $len = count($arr);\n    if ($k > $len)\
    \ {\n        return $result;\n    }\n    for ($i = 0; $i < $k; $i++) {\n     \
    \   $result[] = $arr[$i];\n    }\n    sort($result);\n    for ($i = $k; $i < $len;\
    \ $i++) {\n        if ($arr[$i] > $result[0]) {\n            $result[0] = $arr[$i];\n\
    \            sort($result);\n        }\n    }\n    return $result;\n}\n", "  \
    \  $result = [];\n    $count = count($arr);\n    if ($count == 0) {\n        return\
    \ $result;\n    }\n    if ($k == 0) {\n        return $result;\n    }\n    if\
    \ ($k >= $count) {\n        return $arr;\n    }\n    $result = array_slice($arr,\
    \ 0, $k);\n    sort($result);\n    for ($i = $k; $i < $count; $i++) {\n      \
    \  $num = $arr[$i];\n        if ($num > $result[0]) {\n            $result[0]\
    \ = $num;\n            sort($result);\n        }\n    }\n    return $result;\n\
    }\n", "    $result = array();\n    $length = count($arr);\n    if ($k > $length)\
    \ {\n        return $result;\n    }\n    for ($i = 0; $i < $k; $i++) {\n     \
    \   $max = $arr[$i];\n        $index = $i;\n        for ($j = $i + 1; $j < $length;\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        $arr[$index] = $arr[$i];\n        $arr[$i] = $max;\n    }\n    return\
    \ $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\n$result = maximum($arr, $k);\n\
    echo implode(', ', $result);\necho \"\\n\";\n\n$arr = array(4, -4, 4);\n$k = 2;\n\
    $result = maximum($arr, $k);\necho implode(', ', $result);\necho \"\\n\";\n\n\
    $arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\n$result = maximum($arr, $k);\n\
    echo implode(', ', $result);\necho \"\\n\";", "    $result = [];\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $max = -1000;\n        $maxIndex = -1;\n    \
    \    for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $maxIndex = $j;\n     \
    \       }\n        }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n\
    \    }\n    return $result;\n}\n", "    $len = count($arr);\n    if ($len == 0)\
    \ {\n        return array();\n    }\n    if ($k == 0) {\n        return array();\n\
    \    }\n    if ($k >= $len) {\n        return $arr;\n    }\n    $max = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max[] = $arr[$i];\n    }\n    for\
    \ ($i = $k; $i < $len; $i++) {\n        $min = min($max);\n        if ($arr[$i]\
    \ > $min) {\n            $max[array_search($min, $max)] = $arr[$i];\n        }\n\
    \    }\n    sort($max);\n    return $max;\n}\n\n$arr = array(-3, -4, 5);\n$k =\
    \ 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));", "    $result = array();\n    for ($i = 0; $i < count($arr); $i++) {\n\
    \        if (count($result) < $k) {\n            $result[] = $arr[$i];\n     \
    \   } else {\n            $min = min($result);\n            if ($arr[$i] > $min)\
    \ {\n                $result[array_search($min, $result)] = $arr[$i];\n      \
    \      }\n        }\n    }\n    sort($result);\n    return $result;\n}\n", " \
    \   $result = array();\n    $n = count($arr);\n    if ($k > $n) {\n        return\
    \ $arr;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n\
    \        $max_index = $i;\n        for ($j = $i + 1; $j < $n; $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $max_index = $j;\n            }\n        }\n        $result[] = $max;\n \
    \       $arr[$max_index] = $arr[$i];\n        $arr[$i] = $max;\n    }\n    return\
    \ $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    \n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = array(-3,\
    \ 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));", "    $result =\
    \ [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $maxIndex\
    \ = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        array_splice($arr,\
    \ $maxIndex, 1);\n    }\n    return $result;\n}\n", "    $result = array();\n\
    \    $size = count($arr);\n    for ($i = 0; $i < $size; $i++) {\n        $result[]\
    \ = $arr[$i];\n        if (count($result) > $k) {\n            sort($result);\n\
    \            array_shift($result);\n        }\n    }\n    sort($result);\n   \
    \ return $result;\n}\n", "    $result = array();\n    $i = 0;\n    while ($i <\
    \ $k) {\n        $max = $arr[0];\n        $max_index = 0;\n        foreach ($arr\
    \ as $index => $value) {\n            if ($value > $max) {\n                $max\
    \ = $value;\n                $max_index = $index;\n            }\n        }\n\
    \        $result[] = $max;\n        unset($arr[$max_index]);\n        $i++;\n\
    \    }\n    return $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\necho \"Given\
    \ an array arr of integers and a positive integer k, return a sorted array of\
    \ length k with the maximum k numbers in arr.\\n\";\necho \"Example 1:\\n\";\n\
    echo \">>> maximum(array(-3, -4, 5), 3)\\n\";\necho \"array(-4, -3, 5)\\n\";\n\
    echo \"Output:\\n\";\nprint_r(maximum($arr, $k));\necho \"\\n\";\n\n$arr = array(4,\
    \ -4, 4);\n$k = 2;\necho \"Example 2:\\n\";\necho \">>> maximum(array(4, -4, 4),\
    \ 2)\\n\";\necho \"array(4, 4)\\n\";\necho \"Output:\\n\";\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\necho\
    \ \"Example 3:\\n\";\necho \">>> maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)\\n\"\
    ;\necho \"array(2)\\n\";\necho \"Output:\\n\";\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n      \
    \  $max = -1000;\n        $max_index = -1;\n        for ($j = 0; $j < count($arr);\
    \ $j++) {\n            if (!in_array($j, $result)) {\n                if ($arr[$j]\
    \ > $max) {\n                    $max = $arr[$j];\n                    $max_index\
    \ = $j;\n                }\n            }\n        }\n        $result[] = $max_index;\n\
    \    }\n    $result = array_map(function($index) use ($arr) {\n        return\
    \ $arr[$index];\n    }, $result);\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));",
  "    $result = array();\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n", "    $result\
    \ = array();\n    $arr = array_unique($arr);\n    rsort($arr);\n    for ($i =\
    \ 0; $i < $k; $i++) {\n        $result[] = $arr[$i];\n    }\n    return $result;\n\
    }\n", "    $result = array();\n    $length = count($arr);\n    if ($k > $length)\
    \ {\n        return $result;\n    }\n    $max = $arr[0];\n    $min = $arr[0];\n\
    \    for ($i = 0; $i < $length; $i++) {\n        if ($arr[$i] > $max) {\n    \
    \        $max = $arr[$i];\n        }\n        if ($arr[$i] < $min) {\n       \
    \     $min = $arr[$i];\n        }\n    }\n    $bucket = array_fill($min, $max\
    \ - $min + 1, 0);\n    for ($i = 0; $i < $length; $i++) {\n        $bucket[$arr[$i]]++;\n\
    \    }\n    for ($i = $max; $i >= $min; $i--) {\n        while ($bucket[$i] >\
    \ 0) {\n            $result[] = $i;\n            $bucket[$i]--;\n            if\
    \ (count($result) == $k) {\n                return $result;\n            }\n \
    \       }\n    }\n    return $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\n\
    $result = maximum($arr, $k);\nprint_r($result);\n\n$arr = array(4, -4, 4);\n$k\
    \ = 2;\n$result = maximum($arr, $k);\nprint_r($result);\n\n$arr = array(-3, 2,\
    \ 1, 2, -1, -2, 1);\n$k = 1;\n$result = maximum($arr, $k);\nprint_r($result);",
  "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n \
    \       $max_index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $max_index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$max_index]);\n    }\n    return $result;\n}\n", "    $result\
    \ = [];\n    $length = count($arr);\n    if ($k > $length) {\n        return $result;\n\
    \    }\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n        $index\
    \ = $i;\n        for ($j = $i + 1; $j < $length; $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        $arr[$index] = $arr[$i];\n\
    \        $arr[$i] = $max;\n    }\n    return $result;\n}\n", "    $max = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max[$i] = $arr[$i];\n    }\n    for\
    \ ($i = $k; $i < count($arr); $i++) {\n        $min = $max[0];\n        $min_index\
    \ = 0;\n        for ($j = 1; $j < $k; $j++) {\n            if ($max[$j] < $min)\
    \ {\n                $min = $max[$j];\n                $min_index = $j;\n    \
    \        }\n        }\n        if ($arr[$i] > $min) {\n            $max[$min_index]\
    \ = $arr[$i];\n        }\n    }\n    return $max;\n}\necho implode(', ', maximum(array(-3,\
    \ -4, 5), 3)) . \"\\n\";\necho implode(', ', maximum(array(4, -4, 4), 2)) . \"\
    \\n\";\necho implode(', ', maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)) . \"\\n\"\
    ;", "    $result = [];\n    $count = count($arr);\n    if ($count == 0) {\n  \
    \      return $result;\n    }\n    if ($k == 0) {\n        return $result;\n \
    \   }\n    if ($k > $count) {\n        return $arr;\n    }\n    $result = array_slice($arr,\
    \ 0, $k);\n    sort($result);\n    for ($i = $k; $i < $count; $i++) {\n      \
    \  if ($arr[$i] > $result[0]) {\n            $result[0] = $arr[$i];\n        \
    \    sort($result);\n        }\n    }\n    return $result;\n}\n\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\n$result = maximum($arr, $k);\nprint_r($result);\n\n$arr = [4,\
    \ -4, 4];\n$k = 2;\n$result = maximum($arr, $k);\nprint_r($result);\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\n$result = maximum($arr, $k);\nprint_r($result);"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
