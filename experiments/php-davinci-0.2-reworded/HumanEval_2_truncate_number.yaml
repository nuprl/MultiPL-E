name: HumanEval_2_truncate_number
language: php
prompt: "<?php\n// Given a positive floating point number, it can be decomposed into\n\
  // and integer part (largest integer smaller than given number) and decimals\n//\
  \ (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
  // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n"
tests: "function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    // your code here\n}\n", "  // your code here\n}\n", "  return\
    \ $number - floor($number);\n}\n", "    // your code here\n    $number = $number\
    \ - floor($number);\n    return $number;\n}\n", "    return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "    $number = (float)$number;\n\
    \    $number_int = (int)$number;\n    return $number - $number_int;\n}\n", " \
    \ return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "  return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "  return $number - floor($number);\n}\n", "  return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
