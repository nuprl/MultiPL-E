name: HumanEval_157_right_angle_triangle
language: php
prompt: "<?php\n// Given the lengths of the three sides of a triangle. Return true\
  \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1,\
  \ 2, 3)\n// false\nfunction right_angle_triangle($a, $b, $c) {\n"
tests: "function candidate(...$args) {\n    return right_angle_triangle(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(3, 4, 5) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1, 2, 3) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(10, 6, 8) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 2, 2) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(7, 24, 25) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(10, 5, 7) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(5, 12, 13) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(15, 8, 17) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(48, 55, 73) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1, 1, 1) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 2, 10) !== false) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $hypotenuse = max($a, $b, $c);\n    $side1 = min($a, $b, $c);\n\
    \    $side2 = $a + $b + $c - $hypotenuse - $side1;\n    $hypotenuse_squared =\
    \ pow($hypotenuse, 2);\n    $side1_squared = pow($side1, 2);\n    $side2_squared\
    \ = pow($side2, 2);\n    return $hypotenuse_squared == $side1_squared + $side2_squared;\n\
    }\n", "    $hypotenuse = max($a, $b, $c);\n    $side1 = min($a, $b, $c);\n   \
    \ $side2 = $a + $b + $c - $hypotenuse - $side1;\n    return ($hypotenuse ** 2\
    \ == $side1 ** 2 + $side2 ** 2);\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n\
    \    $hypotenuse = $sides[2];\n    $leg1 = $sides[0];\n    $leg2 = $sides[1];\n\
    \    return $hypotenuse * $hypotenuse == $leg1 * $leg1 + $leg2 * $leg2;\n}\n",
  "    if ($a > $b && $a > $c) {\n        if ($a * $a == $b * $b + $c * $c) {\n  \
    \          return true;\n        }\n    } else if ($b > $a && $b > $c) {\n   \
    \     if ($b * $b == $a * $a + $c * $c) {\n            return true;\n        }\n\
    \    } else if ($c > $a && $c > $b) {\n        if ($c * $c == $a * $a + $b * $b)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n", "  //\
    \ Write your code here\n  // To print results to the standard output you can use\
    \ print\n  // Example:\n  // print \"Hello world!\";\n  $hypotenuse = max($a,\
    \ $b, $c);\n  $side1 = min($a, $b, $c);\n  $side2 = $a + $b + $c - $hypotenuse\
    \ - $side1;\n  return $hypotenuse * $hypotenuse == $side1 * $side1 + $side2 *\
    \ $side2;\n}\n", "    // Write your code here\n    // To print results to the\
    \ standard output you can use print\n    // Example:\n    // print \"Hello world!\"\
    ;\n    $result = false;\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a\
    \ * $a + $b * $b == $c * $c) {\n            $result = true;\n        }\n     \
    \   if ($a * $a + $c * $c == $b * $b) {\n            $result = true;\n       \
    \ }\n        if ($b * $b + $c * $c == $a * $a) {\n            $result = true;\n\
    \        }\n    }\n    return $result;\n}\n", "    if ($a > $b && $a > $c) {\n\
    \        return $a * $a == $b * $b + $c * $c;\n    } else if ($b > $a && $b >\
    \ $c) {\n        return $b * $b == $a * $a + $c * $c;\n    } else {\n        return\
    \ $c * $c == $a * $a + $b * $b;\n    }\n}\n", "    // Write your code here\n \
    \   // To print results to the standard output you can use print\n    // Example:\n\
    \    // print \"Hello world!\";\n}", "  $hypotenuse = max($a, $b, $c);\n  $other_sides\
    \ = array_diff([$a, $b, $c], [$hypotenuse]);\n  return pow($hypotenuse, 2) ==\
    \ pow($other_sides[0], 2) + pow($other_sides[1], 2);\n}\n", "    $sides = [$a,\
    \ $b, $c];\n    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1], 2)\
    \ == pow($sides[2], 2);\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n\
    \    $hypotenuse = $sides[2];\n    $cathetus1 = $sides[1];\n    $cathetus2 = $sides[0];\n\
    \    if ($hypotenuse * $hypotenuse == $cathetus1 * $cathetus1 + $cathetus2 * $cathetus2)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n", " \
    \   $hypotenuse = max($a, $b, $c);\n    $cathetus1 = min($a, $b, $c);\n    $cathetus2\
    \ = $a + $b + $c - $hypotenuse - $cathetus1;\n    return $hypotenuse * $hypotenuse\
    \ == $cathetus1 * $cathetus1 + $cathetus2 * $cathetus2;\n}\n", "    // TODO\n\
    }\n", "    $hypotenuse = max($a, $b, $c);\n    $other_sides = array_diff([$a,\
    \ $b, $c], [$hypotenuse]);\n    $sum_of_squares = array_sum(array_map(function($x)\
    \ { return $x * $x; }, $other_sides));\n    return $hypotenuse * $hypotenuse ==\
    \ $sum_of_squares;\n}\n", "  $sides = array($a, $b, $c);\n  sort($sides);\n  return\
    \ pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\necho right_angle_triangle(3,\
    \ 4, 5) . \"\\n\";\necho right_angle_triangle(1, 2, 3) . \"\\n\";", "    $sides\
    \ = array($a, $b, $c);\n    sort($sides);\n    $hypotenuse = $sides[2];\n    $cathetus1\
    \ = $sides[1];\n    $cathetus2 = $sides[0];\n    return $hypotenuse ** 2 == $cathetus1\
    \ ** 2 + $cathetus2 ** 2;\n}", "  $sides = array($a, $b, $c);\n  sort($sides);\n\
    \  $hypotenuse = $sides[2];\n  $cathetus1 = $sides[1];\n  $cathetus2 = $sides[0];\n\
    \  return $hypotenuse * $hypotenuse == $cathetus1 * $cathetus1 + $cathetus2 *\
    \ $cathetus2;\n}\n", "  // Write your code here\n  // To print results to the\
    \ standard output you can use print\n  // Example:\n  // print \"Hello world!\"\
    ;\n  if ($a == 0 || $b == 0 || $c == 0) {\n    return false;\n  }\n  $max = max($a,\
    \ $b, $c);\n  $min = min($a, $b, $c);\n  $mid = $a + $b + $c - $max - $min;\n\
    \  if ($max * $max == $min * $min + $mid * $mid) {\n    return true;\n  }\n  return\
    \ false;\n}\n", "    $hypotenuse = max($a, $b, $c);\n    $side1 = min($a, $b,\
    \ $c);\n    $side2 = $a + $b + $c - $hypotenuse - $side1;\n    return $hypotenuse**2\
    \ == $side1**2 + $side2**2;\n}\n", "    $triangle = array($a, $b, $c);\n    sort($triangle);\n\
    \    $hypotenuse = $triangle[2];\n    $cathetus1 = $triangle[1];\n    $cathetus2\
    \ = $triangle[0];\n    $hypotenuse_squared = pow($hypotenuse, 2);\n    $cathetus1_squared\
    \ = pow($cathetus1, 2);\n    $cathetus2_squared = pow($cathetus2, 2);\n    $sum_cathetus_squared\
    \ = $cathetus1_squared + $cathetus2_squared;\n    if ($hypotenuse_squared == $sum_cathetus_squared)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
