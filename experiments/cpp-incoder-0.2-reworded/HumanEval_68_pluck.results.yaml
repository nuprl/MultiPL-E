language: cpp
name: HumanEval_68_pluck
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    long smalest_value = 0;\n    int smalest_index = 0;\n\
    \    int size = arr.size();\n    for (int i = 0; i < size; i++) {\n        if\
    \ (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i]) {\n           \
    \     smalest_value = arr[i];\n                smalest_index = i;\n          \
    \  }\n        }\n    }\n    if (smalest_value == 0) {\n        return {};\n  \
    \  }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n  \
    \  result.push_back(smalest_index);\n    return result;\n}\nint main() {\n   \
    \ auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpqwv3v_8p: /tmp/tmpqwv3v_8p.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjhhmmv0d: /tmp/tmpjhhmmv0d.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmprec9nxv2: /tmp/tmprec9nxv2.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_index_value = 0;\n    long smalest_index_value2 = 0;\n\
    \    long smalest_index_value3 = 0;\n    long smalest_index_value4 = 0;\n    long\
    \ smalest_index_value5 = 0;\n    long smalest_index_value6 = 0;\n    long smalest_index_value7\
    \ = 0;\n    long smalest_index_value8 = 0;\n    long smalest_index_value9 = 0;\n\
    \    long smalest_index_value10 = 0;\n    long smalest_index_value11 = 0;\n  \
    \  long smalest_index_value12 = 0;\n    long smalest_index_value13 = 0;\n    long\
    \ smalest_index_value14 = 0;\n    long smalest_index_value15 = 0;\n    long smalest_index_value16\
    \ = 0;\n    long smalest_index_value17 = 0;\n    long smalest_index_value18 =\
    \ 0;\n    long smalest_index_value19 = 0;\n    long smalest_index_value20 = 0;\n\
    \    long smalest_index_value21 = 0;\n    long smalest_index_value22 = 0;\n  \
    \  long smalest_index_value23 = 0;\n    long smalest_index_value24 = 0;\n    long\
    \ smalest_index_value25 = 0;\n    long smalest_index_value26 = 0;\n    long smalest_index_value27\
    \ = 0;\n    long smalest_index_value28 = 0;\n    long smalest_index_value29 =\
    \ 0;\n    long smalest_index_value30 = 0;\n    long smalest_index_value31 = 0;\n\
    \    long smalest_index_value32 = 0;\n    long smalest_index_value33 = 0;\n  \
    \  long smalest_index_value34 = 0;\n    long smalest_index_value35 = 0;\n    long\
    \ smalest_index_value36 = 0;\n    long smalest_index_value37 = 0;\n    long smalest_index_value38\
    \ = 0;\n    long smalest_index_value39 = 0;\n    long smalest_index_value40 =\
    \ 0;\n    long smalest_index_value41 = 0;\n    long smalest_index_value42 = 0;\n\
    \    long smalest_index_value43 = 0;\n    long smalest_index_value44 = 0;\n  \
    \  long smalest_index_value45 = 0;\n    long smalest_index_value46 = 0;\n    long\
    \ smalest_index_value47 = 0;\n    long smalest_index_value48 = 0;\n    long smalest_index_value49\
    \ = 0;\n    long smalest_index_\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmuh7amk8.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmuh7amk8.cpp:82:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   82 | }\n      | ^\n/tmp/tmpmuh7amk8.cpp:82:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    if (arr.size()\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n\
    \    res.push_back(smalest_index);\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5rwdwzrf: /tmp/tmp5rwdwzrf.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvoiwatja: /tmp/tmpvoiwatja.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    if (smalest_index\
    \ == arr.size() - 1) {\n        return std::vector<long>();\n    }\n    return\
    \ std::vector<long>({smalest_value, smalest_index});\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpctd4nd1i: /tmp/tmpctd4nd1i.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    long smalest_value = 0;\n    int smalest_index = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value == 0) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            } else if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n       \
    \ return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpkuzaoqqi: /tmp/tmpkuzaoqqi.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == 0) {\n                smalest_value =\
    \ arr[i];\n                smalest_index = i;\n            } else if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n     \
    \   return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpgjsniq_i: /tmp/tmpgjsniq_i.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    int smalest_index = 0;\n    for (int\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    if (smalest_index\
    \ == arr.size() - 1) {\n        return std::vector<long>();\n    }\n    return\
    \ std::vector<long>{smalest_value, smalest_index};\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmptazw3gne: /tmp/tmptazw3gne.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpkzb_j35i: /tmp/tmpkzb_j35i.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvoiwatja: /tmp/tmpvoiwatja.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_even_value == 0) {\n                smalest_even_value = arr[i];\n\
    \                smalest_even_index = i;\n            } else if (smalest_even_value\
    \ < arr[i]) {\n                smalest_even_value = arr[i];\n                smalest_even_index\
    \ = i;\n            }\n        } else {\n            if (smalest_value == 0) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_even_value == 0) {\n        return std::vector<long>();\n\
    \    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp0fy3tq31: /tmp/tmp0fy3tq31.cpp:63: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    return std::vector<long>({smalest_value,\
    \ smalest_index});\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2m_1myty: /tmp/tmp2m_1myty.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    std::vector<long> res;\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    long index = 0;\n    for(long i = 0;\
    \ i < arr.size(); i++) {\n        if(arr[i] % 2 == 0) {\n            if(smallest_value\
    \ == 0) {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n                index = i;\n            } else {\n                if(arr[i]\
    \ < smallest_value) {\n                    smallest_value = arr[i];\n        \
    \            smallest_index = i;\n                    index = i;\n           \
    \     }\n            }\n        }\n    }\n    res.push_back(smallest_value);\n\
    \    res.push_back(smallest_index);\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpaa0zi_iw: /tmp/tmpaa0zi_iw.cpp:57: int main(): Assertion `candidate((std::vector<long>()))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value\
    \ = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] <\
    \ smalest_value) {\n            smalest_value = arr[i];\n            smalest_index\
    \ = i;\n            smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpu_rzpm89: /tmp/tmpu_rzpm89.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    std::vector<long> result;\n    long smalest_value;\n\
    \    long smalest_index;\n    long smallest_value;\n    long smallest_index;\n\
    \    long smallest_even_value;\n    long smallest_even_count;\n    long index;\n\
    \    for (auto it = arr.begin(); it != arr.end(); it++) {\n        if (*it % 2\
    \ == 0) {\n            smallest_even_value = *it;\n            smallest_even_count\
    \ = 1;\n        }\n        else {\n            if (smallest_even_count > 1) {\n\
    \                smallest_value = smallest_even_value;\n                smallest_index\
    \ = smallest_even_count;\n            }\n            else {\n                smallest_value\
    \ = *it;\n                smallest_index = *it / 2;\n            }\n         \
    \   smallest_even_count++;\n        }\n    }\n    if (smallest_even_count == 0)\
    \ {\n        return result;\n    }\n    for (auto it = arr.begin(); it != arr.end();\
    \ it++) {\n        if (*it % 2 == 0) {\n            if (smallest_even_count ==\
    \ 1) {\n                result.push_back(smallest_value);\n                result.push_back(smallest_index);\n\
    \            }\n            else {\n                if (smallest_value == smallest_even_value)\
    \ {\n                    result.push_back(smallest_value);\n                 \
    \   result.push_back(smallest_index);\n                }\n                else\
    \ {\n                    result.push_back(smallest_value);\n                 \
    \   result.push_back(smallest_index);\n                }\n            }\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvm6lwdfz: /tmp/tmpvm6lwdfz.cpp:80: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smallest_value == 0) {\n\
    \                smallest_value = arr[i];\n                smallest_index = i;\n\
    \            } else if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdcqr8b6_: /tmp/tmpdcqr8b6_.cpp:52: int main(): Assertion `candidate((std::vector<long>()))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvoiwatja: /tmp/tmpvoiwatja.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long smallest_value\
    \ = arr[0];\n    long smallest_index = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpz420ve4o: /tmp/tmpz420ve4o.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    std::vector<long> result;\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smallest_value == 0) {\n\
    \                smallest_value = arr[i];\n                smallest_index = i;\n\
    \            } else if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    if (smallest_value == 0) {\n        return result;\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpeowy14xf: /tmp/tmpeowy14xf.cpp:56: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,
    (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    long smalest_value = 0, smalest_index = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n      \
    \      if (smalest_value == 0 || arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpicuu4tou: /tmp/tmpicuu4tou.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,
    (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n \
    \   for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value == 0) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n                smalest_even_value = arr[i]\
    \ % 2;\n                smalest_even_index = i;\n            } else if (smalest_value\
    \ == arr[i] % 2) {\n                smalest_even_index = i;\n            }\n \
    \       }\n    }\n    if (smalest_value == 0) {\n        return std::vector<long>();\n\
    \    } else if (smalest_value == smalest_even_value) {\n        return std::vector<long>({smalest_value,\
    \ smalest_index});\n    } else {\n        std::vector<long> result;\n        for\
    \ (long i = 0; i < arr.size(); i++) {\n            if (arr[i] % 2 == 0) {\n  \
    \              if (smalest_value == arr[i] % 2) {\n                    result.push_back(i);\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpej4pbs0f: /tmp/tmpej4pbs0f.cpp:64: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpf33sr6ph: /tmp/tmpf33sr6ph.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ std::vector<long>();\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppxtn4qeh: /tmp/tmppxtn4qeh.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n\
    \    res.push_back(smalest_index);\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpt1rdk0pv: /tmp/tmpt1rdk0pv.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmph6785wti: /tmp/tmph6785wti.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp17jbislq: /tmp/tmp17jbislq.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    std::vector<long> result;\n    if (smallest_index != 0) {\n       \
    \ result.push_back(smallest_value);\n        result.push_back(smallest_index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp6akaqxhf: /tmp/tmp6akaqxhf.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    std::vector<long> res;\n    long smallest_value = arr[0];\n\
    \    int smallest_index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n   \
    \     if (arr[i] < smallest_value) {\n            smallest_value = arr[i];\n \
    \           smallest_index = i;\n        }\n    }\n    res.push_back(smallest_value);\n\
    \    res.push_back(smallest_index);\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpnsmxny1k: /tmp/tmpnsmxny1k.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    return std::vector<long>{smalest_value, smalest_index};\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpev9c3qy1: /tmp/tmpev9c3qy1.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    long smalest_index_value = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n \
    \               smalest_value = arr[i];\n                smalest_index = i;\n\
    \                smalest_index_value = arr[i];\n            } else if (smalest_index_value\
    \ > arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n                smalest_index_value = arr[i];\n            }\n       \
    \ }\n    }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpk397nb3v: /tmp/tmpk397nb3v.cpp:59: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,
    (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long smalest_value;\n\
    \    long smalest_index;\n    long smalest_index_value;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value\
    \ == 0) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n                smalest_index_value = arr[i];\n            } else if (smalest_value\
    \ == arr[i]) {\n                smalest_index_value = arr[i];\n              \
    \  smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n    \
    \            smalest_value = arr[i];\n                smalest_index = i;\n   \
    \             smalest_index_value = arr[i];\n            }\n        }\n    }\n\
    \    if (smalest_value == 0) {\n        return result;\n    }\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index_value);\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp42iicf5o: /tmp/tmp42iicf5o.cpp:59: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2y4jobg9: /tmp/tmp2y4jobg9.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjhhmmv0d: /tmp/tmpjhhmmv0d.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjhhmmv0d: /tmp/tmpjhhmmv0d.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_even_value == 0) {\n                smalest_even_value\
    \ = arr[i];\n                smalest_index = i;\n            } else if (smalest_even_value\
    \ < arr[i]) {\n                smalest_even_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    if (smalest_even_value == 0) {\n\
    \        return std::vector<long>();\n    }\n    std::vector<long> result;\n \
    \   result.push_back(smalest_value);\n    result.push_back(smalest_index);\n \
    \   return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmph85mcq7s: /tmp/tmph85mcq7s.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_value != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpl69dtcd9: /tmp/tmpl69dtcd9.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_value == 0) {\n        return\
    \ result;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ == smalest_value) {\n            result.push_back(arr[i]);\n        }\n    }\n\
    \    if (result.size() == 1) {\n        result.push_back(smalest_value);\n   \
    \     result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpgmsk8q5g: /tmp/tmpgmsk8q5g.cpp:57: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    std::vector<long> res;\n    long smallest_even_value\
    \ = arr[0];\n    int smallest_even_index = -1;\n    for (int i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_even_value)\
    \ {\n                smallest_even_value = arr[i];\n                smallest_even_index\
    \ = i;\n            }\n        }\n    }\n    res.push_back(smallest_even_value);\n\
    \    res.push_back(smallest_even_index);\n    return res;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpxyhwccay: /tmp/tmpxyhwccay.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    if (smalest_index\
    \ == arr.size() - 1) {\n        return std::vector<long>();\n    }\n    return\
    \ std::vector<long>({smalest_value, smalest_index});\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpctd4nd1i: /tmp/tmpctd4nd1i.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    long smalest_odd_value = 0;\n  \
    \  long smalest_odd_index = 0;\n    long smalest_even_value_of_node = 0;\n   \
    \ long smalest_even_index_of_node = 0;\n    long smalest_odd_value_of_node = 0;\n\
    \    long smalest_odd_index_of_node = 0;\n    long smalest_even_value_of_node_in_array\
    \ = 0;\n    long smalest_even_index_of_node_in_array = 0;\n    long smalest_odd_value_of_node_in_array\
    \ = 0;\n    long smalest_odd_index_of_node_in_array = 0;\n    long smalest_even_value_of_node_in_array_in_array\
    \ = 0;\n    long smalest_even_index_of_node_in_array_in_array = 0;\n    long smalest_odd_value_of_node_in_array_in_array\
    \ = 0;\n    long smalest_odd_index_of_node_in_array_in_array = 0;\n    long smalest_even_value_of_node_in_array_in_array\
    \ = 0;\n    long smalest_even_index_of_node_in_array_in_array = 0;\n    long smalest_odd_value_of_node_in_array_in_array\
    \ = 0;\n    long smalest_odd_index_of_node_in_array_in_array = 0;\n    long smalest_even_value_of_node_in_array_in_array\
    \ = 0;\n    long smalest_even_index_of_node_in_array_in_array = 0;\n    long smalest_odd_value_of_node_in_array_in_array\
    \ = 0;\n    long smalest_odd_index_of_node_in_array_in_array = 0;\n    long smalest_even_value_of_node_in_array_in_array\
    \ = 0;\n    long smalest_even_index_of_node_in_array_in_array = 0;\n    long smalest_odd_value_of_node_in_array_in_array\
    \ = 0;\n    long smalest_odd_index_of_node_in_array_in_array = 0;\n    long smalest_even_value_of_node_in_array_in_array\
    \ = 0;\n    long smalest_even_index_of_node_in_array_in_array = 0;\n    long smalest_odd_value_of_node_in_array_in_array\
    \ = 0;\n    long smalest_odd_index_of_node_in_array_in_array = 0;\n    long smalest_even_value_of_node_in_array_in_array\
    \ = 0;\n    long smalest_even_index_of_node_in_array_in_array = 0;\n    long smalest_odd_value_of_node_in_array_in_array\
    \ = 0;\n    long \n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy6whqrr5.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpy6whqrr5.cpp:47:10: error: redeclaration of \u2018long\
    \ int smalest_even_value_of_node_in_array_in_array\u2019\n   47 |     long smalest_even_value_of_node_in_array_in_array\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy6whqrr5.cpp:43:10:\
    \ note: \u2018long int smalest_even_value_of_node_in_array_in_array\u2019 previously\
    \ declared here\n   43 |     long smalest_even_value_of_node_in_array_in_array\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy6whqrr5.cpp:48:10:\
    \ error: redeclaration of \u2018long int smalest_even_index_of_node_in_array_in_array\u2019\
    \n   48 |     long smalest_even_index_of_node_in_array_in_array = 0;\n      |\
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy6whqrr5.cpp:44:10:\
    \ note: \u2018long int smalest_even_index_of_node_in_array_in_array\u2019 previously\
    \ declared here\n   44 |     long smalest_even_index_of_node_in_array_in_array\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy6whqrr5.cpp:49:10:\
    \ error: redeclaration of \u2018long int smalest_odd_value_of_node_in_array_in_array\u2019\
    \n   49 |     long smalest_odd_value_of_node_in_array_in_array = 0;\n      | \
    \         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy6whqrr5.cpp:45:10:\
    \ note: \u2018long int smalest_odd_value_of_node_in_array_in_array\u2019 previously\
    \ declared here\n   45 |     long smalest_odd_value_of_node_in_array_in_array\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy6whqrr5.cpp:50:10:\
    \ error: redeclaration of \u2018long int smalest_odd_index_of_node_in_array_in_array\u2019\
    \n   50 |     long smalest_odd_index_of_node_in_array_in_array = 0;\n      | \
    \         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy6whqrr5.cpp:46:10:\
    \ note: \u2018long int smalest_odd_index_of_node_in_array_in_array\u2019 previously\
    \ declared here\n   46 |     long smalest_odd_index_of_node_in_array_in_array\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpy6whqrr5.cpp:51:10:\
    \ error: redeclaration"
  stdout: ''
  timestamp: 1660085774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    std::vector<long> result;\n    long smallest_even_value\
    \ = arr[0];\n    long smallest_even_index = -1;\n    long smallest_even_index_value\
    \ = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] %\
    \ 2 == 0) {\n            if (arr[i] < smallest_even_value) {\n               \
    \ smallest_even_value = arr[i];\n                smallest_even_index = i;\n  \
    \              smallest_even_index_value = arr[i];\n            }\n        }\n\
    \    }\n    result.push_back(smallest_even_value);\n    result.push_back(smallest_even_index);\n\
    \    result.push_back(smallest_even_index_value);\n    return result;\n}\nint\
    \ main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpwfvqthhn: /tmp/tmpwfvqthhn.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    std::vector<long> res;\n    long smallest_value;\n\
    \    long smallest_index;\n    long smallest_even_value;\n    long smallest_even_index;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smallest_value == 0) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n                smallest_even_value = arr[i];\n\
    \                smallest_even_index = i;\n            } else if (arr[i] < smallest_even_value)\
    \ {\n                smallest_even_value = arr[i];\n                smallest_even_index\
    \ = i;\n            }\n        }\n    }\n    if (smallest_value == 0) {\n    \
    \    res.push_back(smallest_even_value);\n        res.push_back(smallest_even_index);\n\
    \    } else {\n        res.push_back(smallest_value);\n        res.push_back(smallest_index);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppsg2na3t: /tmp/tmppsg2na3t.cpp:59: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    long smallest_value = arr[0];\n    long smallest_index\
    \ = 0;\n    long smallest_even_value = 0;\n    long smallest_even_index = 0;\n\
    \    long index = 0;\n    long even_value = 0;\n    long even_index = 0;\n   \
    \ for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n  \
    \          even_value = arr[i];\n            even_index = i;\n        }\n    \
    \    if (arr[i] < smallest_value) {\n            smallest_value = arr[i];\n  \
    \          smallest_index = i;\n        }\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < smallest_even_value) {\n            smallest_even_value = arr[i];\n      \
    \      smallest_even_index = i;\n        }\n    }\n    if (smallest_value == 0)\
    \ {\n        return std::vector<long>();\n    }\n    if (smallest_even_index ==\
    \ smallest_index) {\n        return std::vector<long>({smallest_even_value});\n\
    \    }\n    if (smallest_even_index > smallest_index) {\n        return std::vector<long>({smallest_even_value});\n\
    \    }\n    return std::vector<long>({smallest_value, smallest_index});\n}\nint\
    \ main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpg_a64enj: /tmp/tmpg_a64enj.cpp:65: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_index_value = -1;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n                smalest_index_value = arr[i];\n            } else if (smalest_value\
    \ == arr[i]) {\n                smalest_index_value = arr[i];\n              \
    \  smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n    \
    \            smalest_value = arr[i];\n                smalest_index = i;\n   \
    \             smalest_index_value = arr[i];\n            }\n        }\n    }\n\
    \    if (smalest_value == 0) {\n        return std::vector<long>();\n    }\n \
    \   std::vector<long> result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index_value);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpk6qj4h4l: /tmp/tmpk6qj4h4l.cpp:59: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long smallest_even_value = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smallest_value == 0)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n                smallest_even_value = arr[i] / 2;\n            } else\
    \ if (arr[i] < smallest_even_value) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n                smallest_even_value = arr[i]\
    \ / 2;\n            }\n        }\n    }\n    std::vector<long> result;\n    if\
    \ (smallest_value == 0) {\n        return result;\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmps9b2x171: /tmp/tmps9b2x171.cpp:56: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5rvo7k65: /tmp/tmp5rvo7k65.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_even_value == 0) {\n                smalest_even_value = arr[i];\n\
    \                smalest_even_index = i;\n            } else if (smalest_even_value\
    \ < arr[i]) {\n                smalest_even_value = arr[i];\n                smalest_even_index\
    \ = i;\n            }\n        } else {\n            if (smalest_value == 0) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_even_value == 0) {\n    \
    \    result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    } else {\n        result.push_back(smalest_even_value);\n        result.push_back(smalest_even_index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3cppiamw: /tmp/tmp3cppiamw.cpp:65: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085774
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long smallest_even_value = 0;\n    long smallest_even_index = 0;\n\
    \    long index = 0;\n    long even_value = 0;\n    long even_index = 0;\n   \
    \ long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index2 = 0;\n\
    \    long even_value2 = 0;\n    long even_index2 = 0;\n    long even_value2 =\
    \ 0;\n    long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index2\
    \ = 0;\n    long even_value2 = 0;\n    long even_index2 = 0;\n    long even_value2\
    \ = 0;\n    long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index2\
    \ = 0;\n    long even_value2 = 0;\n    long even_index2 = 0;\n    long even_value2\
    \ = 0;\n    long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index2\
    \ = 0;\n    long even_value2 = 0;\n    long even_index2 = 0;\n    long even_value2\
    \ = 0;\n    long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index2\
    \ = 0;\n    long even_value2 = 0;\n    long even_index2 = 0;\n    long even_value2\
    \ = 0;\n    long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index2\
    \ = 0;\n    long even_value2 = 0;\n    long even_index2 = 0;\n    long even_value2\
    \ = 0;\n    long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index2\
    \ = 0;\n    long even_value2 = 0;\n    long even_index2 = 0;\n    long even_value2\
    \ = 0;\n    long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index2\
    \ = 0;\n    long even_value2 = 0;\n    long even_index2 = 0;\n    long even_value2\
    \ = 0;\n    long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index2\
    \ = 0;\n    long even_value2 = 0;\n    long even_index2 = 0;\n    long even_value2\
    \ = 0;\n    long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index2\
    \ = 0;\n    long even_value2 = 0;\n    long even_index2 = 0;\n    long even_value2\
    \ = 0;\n    long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index2\
    \ = 0;\n    long even_value2 = 0;\n    long even_index2 = 0;\n    long even_value2\
    \ = 0;\n    long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index2\
    \ = 0;\n    long even_value2 = 0;\n    long even_index2 = 0;\n    long even_value2\
    \ = 0;\n    long even_index2 = 0;\n    long even_value2 = 0;\n    long even_index2\
    \ = 0;\n    long even_value2 = 0;\n    long even_index\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprb781h4i.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmprb781h4i.cpp:39:10: error: redeclaration of \u2018long\
    \ int even_index2\u2019\n   39 |     long even_index2 = 0;\n      |          ^~~~~~~~~~~\n\
    /tmp/tmprb781h4i.cpp:37:10: note: \u2018long int even_index2\u2019 previously\
    \ declared here\n   37 |     long even_index2 = 0;\n      |          ^~~~~~~~~~~\n\
    /tmp/tmprb781h4i.cpp:40:10: error: redeclaration of \u2018long int even_value2\u2019\
    \n   40 |     long even_value2 = 0;\n      |          ^~~~~~~~~~~\n/tmp/tmprb781h4i.cpp:38:10:\
    \ note: \u2018long int even_value2\u2019 previously declared here\n   38 |   \
    \  long even_value2 = 0;\n      |          ^~~~~~~~~~~\n/tmp/tmprb781h4i.cpp:41:10:\
    \ error: redeclaration of \u2018long int even_index2\u2019\n   41 |     long even_index2\
    \ = 0;\n      |          ^~~~~~~~~~~\n/tmp/tmprb781h4i.cpp:37:10: note: \u2018\
    long int even_index2\u2019 previously declared here\n   37 |     long even_index2\
    \ = 0;\n      |          ^~~~~~~~~~~\n/tmp/tmprb781h4i.cpp:42:10: error: redeclaration\
    \ of \u2018long int even_value2\u2019\n   42 |     long even_value2 = 0;\n   \
    \   |          ^~~~~~~~~~~\n/tmp/tmprb781h4i.cpp:38:10: note: \u2018long int even_value2\u2019\
    \ previously declared here\n   38 |     long even_value2 = 0;\n      |       \
    \   ^~~~~~~~~~~\n/tmp/tmprb781h4i.cpp:43:10: error: redeclaration of \u2018long\
    \ int even_index2\u2019\n   43 |     long even_index2 = 0;\n      |          ^~~~~~~~~~~\n\
    /tmp/tmprb781h4i.cpp:37:10: note: \u2018long int even_index2\u2019 previously\
    \ declared here\n   37 |     long even_index2 = 0;\n      |          ^~~~~~~~~~~\n\
    /tmp/tmprb781h4i.cpp:44:10: error: redeclaration of \u2018long int even_value2\u2019\
    \n   44 |     long even_value2 = 0;\n      |          ^~~~~~~~~~~\n/tmp/tmprb781h4i.cpp:38:10:\
    \ note: \u2018long int even_value2\u2019 previously declared here\n   38 |   \
    \  long even_value2 = 0;\n      |          ^~~~~~~~~~~\n/tmp/tmprb781h4i.cpp:45:10:\
    \ error: redeclaration of \u2018long int even_index2\u2019\n   45 |     long even_index2\
    \ = 0;\n      |          ^~~~~~~~~~~\n/tmp/tmprb781h4i.cpp:37:10: note: \u2018\
    long int even_index2\u2019 previously declared here\n   37 |     long even_index2\
    \ = 0;\n      | "
  stdout: ''
  timestamp: 1660085774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    std::vector<long> res;\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    long index = 0;\n    for(auto &val:\
    \ arr){\n        if(val%2 == 0){\n            if(smallest_value == 0){\n     \
    \           smallest_value = val;\n                smallest_index = index;\n \
    \           }\n            else if(val < smallest_value){\n                smallest_value\
    \ = val;\n                smallest_index = index;\n            }\n           \
    \ else{\n                smallest_value = val;\n                smallest_index\
    \ = index;\n            }\n        }\n        index++;\n    }\n    res.push_back(smallest_value);\n\
    \    res.push_back(smallest_index);\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpmai9tgbs: /tmp/tmpmai9tgbs.cpp:59: int main(): Assertion `candidate((std::vector<long>()))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660085775
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    std::vector<long> res;\n    long smallest_value\
    \ = arr[0];\n    long smallest_index = 0;\n    long smallest_even_value = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smallest_even_value == 0) {\n                smallest_even_value\
    \ = arr[i];\n                smallest_index = i;\n            } else if (arr[i]\
    \ < smallest_even_value) {\n                smallest_even_value = arr[i];\n  \
    \              smallest_index = i;\n            }\n        }\n    }\n    res.push_back(smallest_even_value);\n\
    \    res.push_back(smallest_index);\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660085776
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_index_value = 0;\n    long smalest_index_value2 = 0;\n\
    \    long smalest_index_value3 = 0;\n    long smalest_index_value4 = 0;\n    long\
    \ smalest_index_value5 = 0;\n    long smalest_index_value6 = 0;\n    long smalest_index_value7\
    \ = 0;\n    long smalest_index_value8 = 0;\n    long smalest_index_value9 = 0;\n\
    \    long smalest_index_value10 = 0;\n    long smalest_index_value11 = 0;\n  \
    \  long smalest_index_value12 = 0;\n    long smalest_index_value13 = 0;\n    long\
    \ smalest_index_value14 = 0;\n    long smalest_index_value15 = 0;\n    long smalest_index_value16\
    \ = 0;\n    long smalest_index_value17 = 0;\n    long smalest_index_value18 =\
    \ 0;\n    long smalest_index_value19 = 0;\n    long smalest_index_value20 = 0;\n\
    \    long smalest_index_value21 = 0;\n    long smalest_index_value22 = 0;\n  \
    \  long smalest_index_value23 = 0;\n    long smalest_index_value24 = 0;\n    long\
    \ smalest_index_value25 = 0;\n    long smalest_index_value26 = 0;\n    long smalest_index_value27\
    \ = 0;\n    long smalest_index_value28 = 0;\n    long smalest_index_value29 =\
    \ 0;\n    long smalest_index_value30 = 0;\n    long smalest_index_value31 = 0;\n\
    \    long smalest_index_value32 = 0;\n    long smalest_index_value33 = 0;\n  \
    \  long smalest_index_value34 = 0;\n    long smalest_index_value35 = 0;\n    long\
    \ smalest_index_value36 = 0;\n    long smalest_index_value37 = 0;\n    long smalest_index_value38\
    \ = 0;\n    long smalest_index_value39 = 0;\n    long smalest_index_value40 =\
    \ 0;\n    long smalest_index_value41 = 0;\n    long smalest_index_value42 = 0;\n\
    \    long smalest_index_value43 = 0;\n    long smalest_index_value44 = 0;\n  \
    \  long smalest_index_value45 = 0;\n    long smalest_index_value46 = 0;\n    long\
    \ smalest_index_value47 = 0;\n    long smalest_index_value48 = 0;\n    long smalest_index_value49\
    \ = 0;\n    long smalest_index_\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmuh7amk8.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmuh7amk8.cpp:82:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   82 | }\n      | ^\n/tmp/tmpmuh7amk8.cpp:82:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    long smalest_value = 0;\n    int smalest_index = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmplwvtwu28: /tmp/tmplwvtwu28.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085776
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    std::vector<long> result;\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smallest_value == 0) {\n\
    \                smallest_value = arr[i];\n                smallest_index = i;\n\
    \            } else if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp13rp6ltd: /tmp/tmp13rp6ltd.cpp:52: int main(): Assertion `candidate((std::vector<long>()))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    return std::vector<long>{smalest_value,\
    \ smalest_index};\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmplghrszzr: /tmp/tmplghrszzr.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085776
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n \
    \   for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            smalest_even_value = arr[i];\n            smalest_even_index = i;\n\
    \        }\n        if (arr[i] < smalest_value) {\n            smalest_value =\
    \ arr[i];\n            smalest_index = i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_even_index != 0) {\n        result.push_back(smalest_even_value);\n\
    \        result.push_back(smalest_even_index);\n    } else {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpzxcejs5o: /tmp/tmpzxcejs5o.cpp:58: int main(): Assertion `candidate((std::vector<long>()))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_value == 0) {\n        return\
    \ result;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ == smalest_value) {\n            result.push_back(arr[i]);\n        }\n    }\n\
    \    if (result.size() == 0) {\n        return result;\n    }\n    if (result.size()\
    \ > 1) {\n        long smallest_index = -1;\n        for (long i = 0; i < result.size();\
    \ i++) {\n            if (result[i] < smalest_value) {\n                smallest_index\
    \ = i;\n            }\n        }\n        if (smallest_index != -1) {\n      \
    \      result.erase(result.begin() + smallest_index);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp1vcg0ns_: /tmp/tmp1vcg0ns_.cpp:67: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == 0) {\n                smalest_value =\
    \ arr[i];\n                smalest_index = i;\n            } else if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if\
    \ (smalest_value != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbetpyb40: /tmp/tmpbetpyb40.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp13wv8yel: /tmp/tmp13wv8yel.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_index_of_smalest_value = 0;\n    long smalest_index_of_smalest_value2\
    \ = 0;\n    long smalest_index_of_smalest_value3 = 0;\n    long smalest_index_of_smalest_value4\
    \ = 0;\n    long smalest_index_of_smalest_value5 = 0;\n    long smalest_index_of_smalest_value6\
    \ = 0;\n    long smalest_index_of_smalest_value7 = 0;\n    long smalest_index_of_smalest_value8\
    \ = 0;\n    long smalest_index_of_smalest_value9 = 0;\n    long smalest_index_of_smalest_value10\
    \ = 0;\n    long smalest_index_of_smalest_value11 = 0;\n    long smalest_index_of_smalest_value12\
    \ = 0;\n    long smalest_index_of_smalest_value13 = 0;\n    long smalest_index_of_smalest_value14\
    \ = 0;\n    long smalest_index_of_smalest_value15 = 0;\n    long smalest_index_of_smalest_value16\
    \ = 0;\n    long smalest_index_of_smalest_value17 = 0;\n    long smalest_index_of_smalest_value18\
    \ = 0;\n    long smalest_index_of_smalest_value19 = 0;\n    long smalest_index_of_smalest_value20\
    \ = 0;\n    long smalest_index_of_smalest_value21 = 0;\n    long smalest_index_of_smalest_value22\
    \ = 0;\n    long smalest_index_of_smalest_value23 = 0;\n    long smalest_index_of_smalest_value24\
    \ = 0;\n    long smalest_index_of_smalest_value25 = 0;\n    long smalest_index_of_smalest_value26\
    \ = 0;\n    long smalest_index_of_smalest_value27 = 0;\n    long smalest_index_of_smalest_value28\
    \ = 0;\n    long smalest_index_of_smalest_value29 = 0;\n    long smalest_index_of_smalest_value30\
    \ = 0;\n    long smalest_index_of_smalest_value31 = 0;\n    long smalest_index_of_smalest_value32\
    \ = 0;\n    long smalest_index_of_smalest_value33 = 0;\n    long smalest_index_of_smalest_value34\
    \ = 0;\n    long smalest_index_of_smalest_value35 = 0;\n    long smalest_index_\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0pnukpcb.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0pnukpcb.cpp:68:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   68 | }\n      | ^\n/tmp/tmp0pnukpcb.cpp:68:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660085777
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_index_value = 0;\n    long smalest_index_value2 = 0;\n\
    \    long smalest_index_value3 = 0;\n    long smalest_index_value4 = 0;\n    long\
    \ smalest_index_value5 = 0;\n    long smalest_index_value6 = 0;\n    long smalest_index_value7\
    \ = 0;\n    long smalest_index_value8 = 0;\n    long smalest_index_value9 = 0;\n\
    \    long smalest_index_value10 = 0;\n    long smalest_index_value11 = 0;\n  \
    \  long smalest_index_value12 = 0;\n    long smalest_index_value13 = 0;\n    long\
    \ smalest_index_value14 = 0;\n    long smalest_index_value15 = 0;\n    long smalest_index_value16\
    \ = 0;\n    long smalest_index_value17 = 0;\n    long smalest_index_value18 =\
    \ 0;\n    long smalest_index_value19 = 0;\n    long smalest_index_value20 = 0;\n\
    \    long smalest_index_value21 = 0;\n    long smalest_index_value22 = 0;\n  \
    \  long smalest_index_value23 = 0;\n    long smalest_index_value24 = 0;\n    long\
    \ smalest_index_value25 = 0;\n    long smalest_index_value26 = 0;\n    long smalest_index_value27\
    \ = 0;\n    long smalest_index_value28 = 0;\n    long smalest_index_value29 =\
    \ 0;\n    long smalest_index_value30 = 0;\n    long smalest_index_value31 = 0;\n\
    \    long smalest_index_value32 = 0;\n    long smalest_index_value33 = 0;\n  \
    \  long smalest_index_value34 = 0;\n    long smalest_index_value35 = 0;\n    long\
    \ smalest_index_value36 = 0;\n    long smalest_index_value37 = 0;\n    long smalest_index_value38\
    \ = 0;\n    long smalest_index_value39 = 0;\n    long smalest_index_value40 =\
    \ 0;\n    long smalest_index_value41 = 0;\n    long smalest_index_value42 = 0;\n\
    \    long smalest_index_value43 = 0;\n    long smalest_index_value44 = 0;\n  \
    \  long smalest_index_value45 = 0;\n    long smalest_index_value46 = 0;\n    long\
    \ smalest_index_value47 = 0;\n    long smalest_index_value48 = 0;\n    long smalest_index_value49\
    \ = 0;\n    long smalest_index_\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmuh7amk8.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmuh7amk8.cpp:82:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   82 | }\n      | ^\n/tmp/tmpmuh7amk8.cpp:82:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpnnglm44n: /tmp/tmpnnglm44n.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long smallest_value\
    \ = arr[0];\n    long smallest_index = 0;\n    long smallest_even_value = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smallest_value == arr[i]) {\n                smallest_even_value\
    \ = arr[i];\n                smallest_index = i;\n            } else if (smallest_value\
    \ == arr[i] && smallest_even_value == arr[i]) {\n                smallest_even_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    if (smallest_even_value == 0) {\n        return result;\n    }\n  \
    \  result.push_back(smallest_even_value);\n    result.push_back(smallest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmphbkte6c_: /tmp/tmphbkte6c_.cpp:54: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smallest_index = arr[0];\n   \
    \ for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smallest_index = i;\n  \
    \      }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smallest_index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2sm6luba: /tmp/tmp2sm6luba.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n \
    \   long smalest_even_index_count = 0;\n    long smalest_even_index_count_max\
    \ = 0;\n    long smalest_even_index_count_min = 0;\n    long smalest_even_index_count_min_index\
    \ = 0;\n    long smalest_even_index_count_max_index = 0;\n    long smalest_even_index_count_min_index2\
    \ = 0;\n    long smalest_even_index_count_max_index2 = 0;\n    long smalest_even_index_count_min_index3\
    \ = 0;\n    long smalest_even_index_count_max_index3 = 0;\n    long smalest_even_index_count_min_index4\
    \ = 0;\n    long smalest_even_index_count_max_index4 = 0;\n    long smalest_even_index_count_min_index5\
    \ = 0;\n    long smalest_even_index_count_max_index5 = 0;\n    long smalest_even_index_count_min_index6\
    \ = 0;\n    long smalest_even_index_count_max_index6 = 0;\n    long smalest_even_index_count_min_index7\
    \ = 0;\n    long smalest_even_index_count_max_index7 = 0;\n    long smalest_even_index_count_min_index8\
    \ = 0;\n    long smalest_even_index_count_max_index8 = 0;\n    long smalest_even_index_count_min_index9\
    \ = 0;\n    long smalest_even_index_count_max_index9 = 0;\n    long smalest_even_index_count_min_index10\
    \ = 0;\n    long smalest_even_index_count_max_index10 = 0;\n    long smalest_even_index_count_min_index11\
    \ = 0;\n    long smalest_even_index_count_max_index11 = 0;\n    long smalest_even_index_count_min_index12\
    \ = 0;\n    long smalest_even_index_count_max_index12 = 0;\n    long smalest_even_index_count_min_index13\
    \ = 0;\n    long smalest_even_index_count_max_index13 = 0;\n    long smalest_even_index_count_min_index14\
    \ = 0;\n    long smalest_even_index_count_max_index14 = 0;\n    long smalest_even_index_count_min_index15\
    \ = 0;\n    long smalest_even_index_count_max_index15 = 0;\n    long smalest_even_index_count_min_index16\
    \ = 0;\n    long smalest_even_index_count_max_index16 = 0;\n    long smalest_even_index_count_min_index17\
    \ = 0;\n    long smalest_even_index_count_max_index17 = 0;\n    long smalest_even_index_count_min_index\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy2adjtyp.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpy2adjtyp.cpp:72:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   72 | }\n      | ^\n/tmp/tmpy2adjtyp.cpp:72:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660085777
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    std::vector<long> result;\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    long current_index = 0;\n    long current_value\
    \ = 0;\n    for (auto &i : arr) {\n        current_value = i;\n        current_index\
    \ = 0;\n        while (current_value % 2 == 0) {\n            current_value /=\
    \ 2;\n            current_index++;\n        }\n        if (current_value < smallest_value)\
    \ {\n            smallest_value = current_value;\n            smallest_index =\
    \ current_index;\n        }\n    }\n    result.push_back(smallest_value);\n  \
    \  result.push_back(smallest_index);\n    return result;\n}\nint main() {\n  \
    \  auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpsjqqo_bx: /tmp/tmpsjqqo_bx.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0, smalest_index = 0;\n    for (long i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value\
    \ == 0) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_un2ngac: /tmp/tmp_un2ngac.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value\
    \ = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] <\
    \ smalest_value) {\n            smalest_value = arr[i];\n            smalest_index\
    \ = i;\n            smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpu_rzpm89: /tmp/tmpu_rzpm89.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_ka0jkzl: /tmp/tmp_ka0jkzl.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n     \
    \       smalest_value = arr[i];\n            smalest_index = i;\n        }\n \
    \   }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0) {\n    \
    \    result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpt4jd8t4m: /tmp/tmpt4jd8t4m.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smallest_value = arr[0];\n    long smallest_index\
    \ = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < smallest_value)\
    \ {\n            smallest_value = arr[i];\n            smallest_index = i;\n \
    \       }\n    }\n    std::vector<long> result;\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp8p7pltrn: /tmp/tmp8p7pltrn.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvoiwatja: /tmp/tmpvoiwatja.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == 0) {\n                smalest_value =\
    \ arr[i];\n                smalest_index = i;\n            } else if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n     \
    \   return std::vector<long>();\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4fbxfzyo: /tmp/tmp4fbxfzyo.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpat6aupvm: /tmp/tmpat6aupvm.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n \
    \   long smalest_even_index_2 = 0;\n    long smalest_even_index_3 = 0;\n    long\
    \ smalest_even_index_4 = 0;\n    long smalest_even_index_5 = 0;\n    long smalest_even_index_6\
    \ = 0;\n    long smalest_even_index_7 = 0;\n    long smalest_even_index_8 = 0;\n\
    \    long smalest_even_index_9 = 0;\n    long smalest_even_index_10 = 0;\n   \
    \ long smalest_even_index_11 = 0;\n    long smalest_even_index_12 = 0;\n    long\
    \ smalest_even_index_13 = 0;\n    long smalest_even_index_14 = 0;\n    long smalest_even_index_15\
    \ = 0;\n    long smalest_even_index_16 = 0;\n    long smalest_even_index_17 =\
    \ 0;\n    long smalest_even_index_18 = 0;\n    long smalest_even_index_19 = 0;\n\
    \    long smalest_even_index_20 = 0;\n    long smalest_even_index_21 = 0;\n  \
    \  long smalest_even_index_22 = 0;\n    long smalest_even_index_23 = 0;\n    long\
    \ smalest_even_index_24 = 0;\n    long smalest_even_index_25 = 0;\n    long smalest_even_index_26\
    \ = 0;\n    long smalest_even_index_27 = 0;\n    long smalest_even_index_28 =\
    \ 0;\n    long smalest_even_index_29 = 0;\n    long smalest_even_index_30 = 0;\n\
    \    long smalest_even_index_31 = 0;\n    long smalest_even_index_32 = 0;\n  \
    \  long smalest_even_index_33 = 0;\n    long smalest_even_index_34 = 0;\n    long\
    \ smalest_even_index_35 = 0;\n    long smalest_even_index_36 = 0;\n    long smalest_even_index_37\
    \ = 0;\n    long smalest_even_index_38 = 0;\n    long smalest_even_index_39 =\
    \ 0;\n    long smalest_even_index_40 = 0;\n    long smalest_even_index_41 = 1;\n\
    \    long smalest_even_index_42 = 1;\n    long smalest_even_index_43 = 1;\n  \
    \  long smalest_even_index_44 = 1;\n    long smalest_even_index_45 = 1;\n    long\
    \ smalest_even_index_46 = 1;\n    long smalest_even_index_47 = 1;\n    long smalest_even_index_48\
    \ = 1;\n    long smalest_\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdjjclfjg.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpdjjclfjg.cpp:82:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   82 | }\n      | ^\n/tmp/tmpdjjclfjg.cpp:82:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660085777
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value=0;\n    long smalest_index=0;\n\
    \    long smallest_value=INT_MAX;\n    long smallest_index=0;\n    for(long i=0;i<arr.size();i++){\n\
    \        if(arr[i]%2==0){\n            if(arr[i]<smallest_value){\n          \
    \      smallest_value=arr[i];\n                smallest_index=i;\n           \
    \ }\n        }\n        else{\n            if(arr[i]<smallest_value){\n      \
    \          smalest_value=arr[i];\n                smalest_index=i;\n         \
    \   }\n        }\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmporolnfpc: /tmp/tmporolnfpc.cpp:55: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long smallest_even_value\
    \ = 0;\n    long smallest_even_index = 0;\n    for (auto &val : arr) {\n     \
    \   if (val % 2 == 0) {\n            if (smallest_even_value == 0) {\n       \
    \         smallest_even_value = val;\n                smallest_even_index = arr.size()\
    \ - 1;\n            } else if (val < smallest_even_value) {\n                smallest_even_value\
    \ = val;\n                smallest_even_index = arr.size() - 1;\n            }\n\
    \        }\n    }\n    if (smallest_even_value == 0) {\n        return result;\n\
    \    }\n    result.push_back(smallest_even_value);\n    result.push_back(arr[smallest_even_index]);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpmphopdwv: /tmp/tmpmphopdwv.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_index_value = 0;\n    long smalest_index_value2 = 0;\n\
    \    long smalest_index_value3 = 0;\n    long smalest_index_value4 = 0;\n    long\
    \ smalest_index_value5 = 0;\n    long smalest_index_value6 = 0;\n    long smalest_index_value7\
    \ = 0;\n    long smalest_index_value8 = 0;\n    long smalest_index_value9 = 0;\n\
    \    long smalest_index_value10 = 0;\n    long smalest_index_value11 = 0;\n  \
    \  long smalest_index_value12 = 0;\n    long smalest_index_value13 = 0;\n    long\
    \ smalest_index_value14 = 0;\n    long smalest_index_value15 = 0;\n    long smalest_index_value16\
    \ = 0;\n    long smalest_index_value17 = 0;\n    long smalest_index_value18 =\
    \ 0;\n    long smalest_index_value19 = 0;\n    long smalest_index_value20 = 0;\n\
    \    long smalest_index_value21 = 0;\n    long smalest_index_value22 = 0;\n  \
    \  long smalest_index_value23 = 0;\n    long smalest_index_value24 = 0;\n    long\
    \ smalest_index_value25 = 0;\n    long smalest_index_value26 = 0;\n    long smalest_index_value27\
    \ = 0;\n    long smalest_index_value28 = 0;\n    long smalest_index_value29 =\
    \ 0;\n    long smalest_index_value30 = 0;\n    long smalest_index_value31 = 0;\n\
    \    long smalest_index_value32 = 0;\n    long smalest_index_value33 = 0;\n  \
    \  long smalest_index_value34 = 0;\n    long smalest_index_value35 = 0;\n    long\
    \ smalest_index_value36 = 0;\n    long smalest_index_value37 = 0;\n    long smalest_index_value38\
    \ = 0;\n    long smalest_index_value39 = 0;\n    long smalest_index_value40 =\
    \ 0;\n    long smalest_index_value41 = 0;\n    long smalest_index_value42 = 0;\n\
    \    long smalest_index_value43 = 0;\n    long smalest_index_value44 = 0;\n  \
    \  long smalest_index_value45 = 0;\n    long smalest_index_value46 = 0;\n    long\
    \ smalest_index_value47 = 0;\n    long smalest_index_value48 = 0;\n    long smalest_index_value49\
    \ = 0;\n    long smalest_index_\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmuh7amk8.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmuh7amk8.cpp:82:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   82 | }\n      | ^\n/tmp/tmpmuh7amk8.cpp:82:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660085772
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_index_value = 0;\n    long smalest_index_value2 = 0;\n\
    \    long smalest_index_value3 = 0;\n    long smalest_index_value4 = 0;\n    long\
    \ smalest_index_value5 = 0;\n    long smalest_index_value6 = 0;\n    long smalest_index_value7\
    \ = 0;\n    long smalest_index_value8 = 0;\n    long smalest_index_value9 = 0;\n\
    \    long smalest_index_value10 = 0;\n    long smalest_index_value11 = 0;\n  \
    \  long smalest_index_value12 = 0;\n    long smalest_index_value13 = 0;\n    long\
    \ smalest_index_value14 = 0;\n    long smalest_index_value15 = 0;\n    long smalest_index_value16\
    \ = 0;\n    long smalest_index_value17 = 0;\n    long smalest_index_value18 =\
    \ 0;\n    long smalest_index_value19 = 0;\n    long smalest_index_value20 = 0;\n\
    \    long smalest_index_value21 = 0;\n    long smalest_index_value22 = 0;\n  \
    \  long smalest_index_value23 = 0;\n    long smalest_index_value24 = 0;\n    long\
    \ smalest_index_value25 = 0;\n    long smalest_index_value26 = 0;\n    long smalest_index_value27\
    \ = 0;\n    long smalest_index_value28 = 0;\n    long smalest_index_value29 =\
    \ 0;\n    long smalest_index_value30 = 0;\n    long smalest_index_value31 = 0;\n\
    \    long smalest_index_value32 = 0;\n    long smalest_index_value33 = 0;\n  \
    \  long smalest_index_value34 = 0;\n    long smalest_index_value35 = 0;\n    long\
    \ smalest_index_value36 = 0;\n    long smalest_index_value37 = 0;\n    long smalest_index_value38\
    \ = 0;\n    long smalest_index_value39 = 0;\n    long smalest_index_value40 =\
    \ 0;\n    long smalest_index_value41 = 0;\n    long smalest_index_value42 = 0;\n\
    \    long smalest_index_value43 = 0;\n    long smalest_index_value44 = 0;\n  \
    \  long smalest_index_value45 = 0;\n    long smalest_index_value46 = 0;\n    long\
    \ smalest_index_value47 = 0;\n    long smalest_index_value48 = 0;\n    long smalest_index_value49\
    \ = 0;\n    long smalest_index_\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmuh7amk8.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmuh7amk8.cpp:82:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   82 | }\n      | ^\n/tmp/tmpmuh7amk8.cpp:82:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    std::vector<long> result;\n    long smallest_value;\n\
    \    long smallest_index;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] % 2 == 0) {\n            if (smallest_value == 0) {\n         \
    \       smallest_value = arr[i];\n                smallest_index = i;\n      \
    \      } else if (arr[i] < smallest_value) {\n                smallest_value =\
    \ arr[i];\n                smallest_index = i;\n            }\n        }\n   \
    \ }\n    if (smallest_value != 0) {\n        result.push_back(smallest_value);\n\
    \        result.push_back(smallest_index);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_z7m43kt: /tmp/tmp_z7m43kt.cpp:54: int main(): Assertion `candidate((std::vector<long>()))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660085778
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvoiwatja: /tmp/tmpvoiwatja.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long smallest_even_value\
    \ = 0;\n    long smallest_index = 0;\n    long smallest_value = 0;\n    long smallest_index2\
    \ = 0;\n    long smallest_value2 = 0;\n    long smallest_index3 = 0;\n    long\
    \ smallest_value3 = 0;\n    long smallest_index4 = 0;\n    long smallest_value4\
    \ = 0;\n    long smallest_index5 = 0;\n    long smallest_value5 = 0;\n    long\
    \ smallest_index6 = 0;\n    long smallest_value6 = 0;\n    long smallest_index7\
    \ = 0;\n    long smallest_value7 = 0;\n    long smallest_index8 = 0;\n    long\
    \ smallest_value8 = 0;\n    long smallest_index9 = 0;\n    long smallest_value9\
    \ = 0;\n    long smallest_index10 = 0;\n    long smallest_value10 = 0;\n    long\
    \ smallest_index11 = 0;\n    long smallest_value11 = 0;\n    long smallest_index12\
    \ = 0;\n    long smallest_value12 = 0;\n    long smallest_index13 = 0;\n    long\
    \ smallest_value13 = 0;\n    long smallest_index14 = 0;\n    long smallest_value14\
    \ = 0;\n    long smallest_index15 = 0;\n    long smallest_value15 = 0;\n    long\
    \ smallest_index16 = 0;\n    long smallest_value16 = 0;\n    long smallest_index17\
    \ = 0;\n    long smallest_value17 = 0;\n    long smallest_index18 = 0;\n    long\
    \ smallest_value18 = 0;\n    long smallest_index19 = 0;\n    long smallest_value19\
    \ = 0;\n    long smallest_index20 = 0;\n    long smallest_value20 = 0;\n    long\
    \ smallest_index21 = 0;\n    long smallest_value21 = 0;\n    long smallest_index22\
    \ = 0;\n    long smallest_value22 = 0;\n    long smallest_index23 = 0;\n    long\
    \ smallest_value23 = 0;\n    long smallest_index24 = 0;\n    long smallest_value24\
    \ = 0;\n    long smallest_index25 = 0;\n    long smallest_value25 = 0;\n    long\
    \ smallest_index26 = 0;\n    long smallest_value26 = 0;\n    long smallest_index27\
    \ = 0;\n    long smallest_value27 = 0;\n    long smallest_index28 = 0;\n    long\
    \ smallest_value28 = 0;\n    long smallest_index29 = 0;\n    long smallest_value29\
    \ = 0;\n    long smallest_index30 = 0;\n    long smallest_value30 = 0;\n    long\
    \ smallest_index31 = 0;\n    long smallest_value31 = 0;\n    long smallest_index32\
    \ = 0;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpr6iz226h: /tmp/tmpr6iz226h.cpp:98: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085778
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \         smalest_index_value = arr[i];\n        }\n    }\n    if (smalest_index_value\
    \ % 2 == 0) {\n        std::vector<long> res;\n        res.push_back(smalest_value);\n\
    \        res.push_back(smalest_index);\n        return res;\n    }\n    return\
    \ {};\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3r2tdimo: /tmp/tmp3r2tdimo.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjhhmmv0d: /tmp/tmpjhhmmv0d.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_index_value = 0;\n    long smalest_index_value2 = 0;\n\
    \    long smalest_index_value3 = 0;\n    long smalest_index_value4 = 0;\n    long\
    \ smalest_index_value5 = 0;\n    long smalest_index_value6 = 0;\n    long smalest_index_value7\
    \ = 0;\n    long smalest_index_value8 = 0;\n    long smalest_index_value9 = 0;\n\
    \    long smalest_index_value10 = 0;\n    long smalest_index_value11 = 0;\n  \
    \  long smalest_index_value12 = 0;\n    long smalest_index_value13 = 0;\n    long\
    \ smalest_index_value14 = 0;\n    long smalest_index_value15 = 0;\n    long smalest_index_value16\
    \ = 0;\n    long smalest_index_value17 = 0;\n    long smalest_index_value18 =\
    \ 0;\n    long smalest_index_value19 = 0;\n    long smalest_index_value20 = 0;\n\
    \    long smalest_index_value21 = 0;\n    long smalest_index_value22 = 0;\n  \
    \  long smalest_index_value23 = 0;\n    long smalest_index_value24 = 0;\n    long\
    \ smalest_index_value25 = 0;\n    long smalest_index_value26 = 0;\n    long smalest_index_value27\
    \ = 0;\n    long smalest_index_value28 = 0;\n    long smalest_index_value29 =\
    \ 0;\n    long smalest_index_value30 = 0;\n    long smalest_index_value31 = 0;\n\
    \    long smalest_index_value32 = 0;\n    long smalest_index_value33 = 0;\n  \
    \  long smalest_index_value34 = 0;\n    long smalest_index_value35 = 0;\n    long\
    \ smalest_index_value36 = 0;\n    long smalest_index_value37 = 0;\n    long smalest_index_value38\
    \ = 0;\n    long smalest_index_value39 = 0;\n    long smalest_index_value40 =\
    \ 0;\n    long smalest_index_value41 = 0;\n    long smalest_index_value42 = 0;\n\
    \    long smalest_index_value43 = 0;\n    long smalest_index_value44 = 0;\n  \
    \  long smalest_index_value45 = 0;\n    long smalest_index_value46 = 0;\n    long\
    \ smalest_index_value47 = 0;\n    long smalest_index_value48 = 0;\n    long smalest_index_value49\
    \ = 0;\n    long smalest_index_\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp964it5gb.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp964it5gb.cpp:82:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   82 | }\n      | ^\n/tmp/tmp964it5gb.cpp:82:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660085778
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmprbthzfau: /tmp/tmprbthzfau.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    long smalest_value = 0, smalest_index = 0;\n    long\
    \ smalest_even_value = 0;\n    long smalest_even_index = 0;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value\
    \ == 0) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n                smalest_even_value = arr[i] % 2;\n                smalest_even_index\
    \ = i;\n            } else if (smalest_value == arr[i] % 2) {\n              \
    \  smalest_even_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return std::vector<long>();\n    }\n    std::vector<long> res;\n\
    \    res.push_back(smalest_value);\n    res.push_back(smalest_index);\n    if\
    \ (smalest_even_index != 0) {\n        res.push_back(smalest_even_index);\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp6urcoxlh: /tmp/tmp6urcoxlh.cpp:58: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_even_value <\
    \ arr[i]) {\n                smalest_even_value = arr[i];\n                smalest_even_index\
    \ = i;\n            }\n        } else {\n            if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_even_value == 0) {\n  \
    \      return std::vector<long>();\n    }\n    std::vector<long> result;\n   \
    \ result.push_back(smalest_value);\n    result.push_back(smalest_index);\n   \
    \ return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpgcloq3h1: /tmp/tmpgcloq3h1.cpp:56: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjhhmmv0d: /tmp/tmpjhhmmv0d.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0, smalest_index = 0;\n \
    \   long even_value = 0;\n    long index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            even_value = arr[i];\n \
    \           index = i;\n        }\n    }\n    if (arr.size() == 0) {\n       \
    \ return {};\n    }\n    if (arr.size() == 1) {\n        if (arr[0] == even_value)\
    \ {\n            return {};\n        }\n        if (arr[0] == smalest_value) {\n\
    \            return {};\n        }\n    }\n    if (arr.size() > 1) {\n       \
    \ if (arr[0] == smalest_value) {\n            smalest_value = arr[0];\n      \
    \      smalest_index = index;\n        }\n    }\n    std::vector<long> result;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == smalest_value)\
    \ {\n            result.push_back(smalest_value);\n            result.push_back(smalest_index);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpo5j9s6y0: /tmp/tmpo5j9s6y0.cpp:67: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvoiwatja: /tmp/tmpvoiwatja.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    std::vector<long> result;\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    long smallest_even_value = 0;\n    long\
    \ smallest_even_node = 0;\n    long index = 0;\n    for (auto i : arr) {\n   \
    \     if (i % 2 == 0) {\n            if (smallest_even_value == 0) {\n       \
    \         smallest_even_value = i;\n                smallest_even_node = i;\n\
    \                smallest_value = i;\n                smallest_index = i;\n  \
    \          } else if (smallest_even_value == i) {\n                smallest_even_node\
    \ = i;\n                smallest_value = i;\n                smallest_index =\
    \ i;\n            } else if (smallest_even_value < i) {\n                smallest_even_value\
    \ = i;\n                smallest_even_node = i;\n                smallest_value\
    \ = i;\n                smallest_index = i;\n            }\n        } else {\n\
    \            if (smallest_even_value == 0) {\n                smallest_even_value\
    \ = i;\n                smallest_even_node = i;\n                smallest_value\
    \ = i;\n                smallest_index = i;\n            } else if (smallest_even_value\
    \ == i) {\n                smallest_even_node = i;\n                smallest_value\
    \ = i;\n                smallest_index = i;\n            } else if (smallest_even_value\
    \ < i) {\n                smallest_even_value = i;\n                smallest_even_node\
    \ = i;\n                smallest_value = i;\n                smallest_index =\
    \ i;\n            }\n        }\n    }\n    if (smallest_even_value == 0) {\n \
    \       return result;\n    }\n    result.push_back(smallest_even_node);\n   \
    \ result.push_back(smallest_value);\n    result.push_back(smallest_index);\n \
    \   return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdpr0r0pm: /tmp/tmpdpr0r0pm.cpp:81: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0, smalest_index = 0;\n    for (long i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n     \
    \   return {};\n    }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n\
    \    res.push_back(smalest_index);\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpxpq5qpow: /tmp/tmpxpq5qpow.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0, smalest_index = 0;\n \
    \   long smalest_even_value = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == 0) {\n            smalest_even_value = arr[i];\n  \
    \          smalest_index = i;\n        }\n    }\n    if (smalest_even_value ==\
    \ 0) {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == smalest_even_value)\
    \ {\n            result.push_back(arr[i]);\n        }\n    }\n    if (result.size()\
    \ == 0) {\n        return std::vector<long>();\n    }\n    if (result.size() ==\
    \ 1) {\n        result.push_back(smalest_even_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpq_oro6kx: /tmp/tmpq_oro6kx.cpp:58: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    std::vector<long> result;\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smallest_value == 0) {\n\
    \                smallest_value = arr[i];\n                smallest_index = i;\n\
    \            } else if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpcoabt27v: /tmp/tmpcoabt27v.cpp:52: int main(): Assertion `candidate((std::vector<long>()))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660085779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value % 2 == 0) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpx5fccx4s: /tmp/tmpx5fccx4s.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n     \
    \       smalest_value = arr[i];\n            smalest_index = i;\n        }\n \
    \   }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0) {\n    \
    \    result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpt4jd8t4m: /tmp/tmpt4jd8t4m.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjhhmmv0d: /tmp/tmpjhhmmv0d.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    std::vector<long> res;\n    long smallest_even_value\
    \ = arr[0];\n    int smallest_even_index = -1;\n    for (int i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_even_value)\
    \ {\n                smallest_even_value = arr[i];\n                smallest_even_index\
    \ = i;\n            }\n        }\n    }\n    res.push_back(smallest_even_value);\n\
    \    res.push_back(smallest_even_index);\n    return res;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpw1pphnzz: /tmp/tmpw1pphnzz.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    return std::vector<long>{smalest_value,\
    \ smalest_index};\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpyeq9o7tz: /tmp/tmpyeq9o7tz.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n \
    \   for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_even_value == 0) {\n                smalest_even_value\
    \ = arr[i];\n                smalest_even_index = i;\n            }\n        \
    \    if (smalest_even_value < arr[i]) {\n                smalest_even_value =\
    \ arr[i];\n                smalest_even_index = i;\n            }\n        }\n\
    \        else {\n            if (smalest_value == 0) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n            if\
    \ (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_even_value == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    else {\n        result.push_back(smalest_even_value);\n\
    \        result.push_back(smalest_even_index);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmprt0c_3vo: /tmp/tmprt0c_3vo.cpp:69: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    int smalest_index\
    \ = 0;\n    std::vector<long> result;\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        if(arr[i] % 2 == 0) {\n            smalest_value = arr[i];\n    \
    \        smalest_index = i;\n        }\n    }\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdrm0hzwd: /tmp/tmpdrm0hzwd.cpp:47: int main(): Assertion `candidate((std::vector<long>()))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660085779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjhhmmv0d: /tmp/tmpjhhmmv0d.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value\
    \ = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] <\
    \ smalest_value) {\n            smalest_value = arr[i];\n            smalest_index\
    \ = i;\n            smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value == 0) {\n        return result;\n    }\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp8efg7d9b: /tmp/tmp8efg7d9b.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long smallest_even_value = 0;\n    long smallest_even_count = 0;\n\
    \    long index = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ % 2 == 0) {\n            smallest_even_count++;\n            if(smallest_even_count\
    \ == 1) {\n                smallest_even_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n        else {\n            smallest_value =\
    \ arr[i];\n            smallest_index = i;\n        }\n    }\n    if(smallest_even_count\
    \ == 0) {\n        return std::vector<long>();\n    }\n    else {\n        std::vector<long>\
    \ result;\n        result.push_back(smallest_value);\n        result.push_back(smallest_index);\n\
    \        return result;\n    }\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvecguu8l: /tmp/tmpvecguu8l.cpp:60: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    std::vector<long> result;\n    long smallest_value\
    \ = INT_MAX;\n    int smallest_index = -1;\n    for (auto i : arr) {\n       \
    \ if (i % 2 == 0) {\n            if (smallest_value == INT_MAX) {\n          \
    \      smallest_value = i;\n                smallest_index = i;\n            }\
    \ else if (smallest_value < i) {\n                smallest_value = i;\n      \
    \          smallest_index = i;\n            }\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp0trwo031: /tmp/tmp0trwo031.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    return std::vector<long>({smalest_value,\
    \ smalest_index});\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2m_1myty: /tmp/tmp2m_1myty.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smallest_index = 0;\n    long\
    \ smallest_even_value = 0;\n    for (long i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_even_value) {\n\
    \                smallest_even_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if\
    \ (smallest_even_value) {\n        result.push_back(smallest_even_value);\n  \
    \      result.push_back(smallest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpubbsy5zv: /tmp/tmpubbsy5zv.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long temp = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n    long\
    \ temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n\
    \    long temp8 = 0;\n    long temp9 = 0;\n    long temp10 = 0;\n    long temp11\
    \ = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n   \
    \ long temp15 = 0;\n    long temp16 = 0;\n    long temp17 = 0;\n    long temp18\
    \ = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n   \
    \ long temp22 = 0;\n    long temp23 = 0;\n    long temp24 = 0;\n    long temp25\
    \ = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n   \
    \ long temp29 = 0;\n    long temp30 = 0;\n    long temp31 = 0;\n    long temp32\
    \ = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n   \
    \ long temp36 = 0;\n    long temp37 = 0;\n    long temp38 = 0;\n    long temp39\
    \ = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n   \
    \ long temp43 = 0;\n    long temp44 = 0;\n    long temp45 = 0;\n    long temp46\
    \ = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n   \
    \ long temp50 = 0;\n    long temp51 = 0;\n    long temp52 = 0;\n    long temp53\
    \ = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n    long temp56 = 0;\n   \
    \ long temp57 = 0;\n    long temp58 = 0;\n    long temp59 = 0;\n    long temp60\
    \ = 0;\n    long temp61 = 0;\n    long temp62 = 0;\n    long temp63 = 0;\n   \
    \ long temp64 = 0;\n    long temp65 = 0;\n    long temp66 = 0;\n    long temp67\
    \ = 0;\n    long temp68 = 0;\n    long temp69 = 0;\n    long temp70 = 0;\n   \
    \ long temp71 = 0;\n    long temp72 = 0;\n    long temp73 = 0;\n    long temp74\
    \ = 0;\n    long temp75 = 0;\n    long temp76 = 0;\n    long temp77 = 0;\n   \
    \ long temp78 = 0;\n    long temp79 = 0;\n    long temp80 = 0;\n    long temp81\
    \ = 0;\n    long temp82 = 0;\n    long temp83 = 0;\n\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3w2a5e_t: /tmp/tmp3w2a5e_t.cpp:119: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjhhmmv0d: /tmp/tmpjhhmmv0d.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpzn5qk_w6: /tmp/tmpzn5qk_w6.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    int smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_value != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp91_n0476: /tmp/tmp91_n0476.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smallest_even_value = 0;\n    long smallest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smallest_even_value < arr[i]) {\n                smallest_even_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    std::vector<long> result;\n    if (smallest_even_value == 0) {\n  \
    \      return result;\n    }\n    result.push_back(smallest_even_value);\n   \
    \ result.push_back(smallest_index);\n    return result;\n}\nint main() {\n   \
    \ auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvy86af8_: /tmp/tmpvy86af8_.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long smallest_value\
    \ = arr[0];\n    long smallest_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp7hmmnp1d: /tmp/tmp7hmmnp1d.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    std::vector<long> result;\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smallest_value == 0) {\n\
    \                smallest_value = arr[i];\n                smallest_index = i;\n\
    \            } else if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp13rp6ltd: /tmp/tmp13rp6ltd.cpp:52: int main(): Assertion `candidate((std::vector<long>()))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_index_value = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n                smalest_index_value = arr[i];\n            } else if (smalest_index_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n                smalest_index_value = arr[i];\n            }\n       \
    \ }\n    }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjyq8gvd1: /tmp/tmpjyq8gvd1.cpp:56: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(arr[smalest_index]);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmprtcz6zap: /tmp/tmprtcz6zap.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    std::vector<long> res;\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smallest_value == 0) {\n\
    \                smallest_value = arr[i];\n                smallest_index = i;\n\
    \            } else if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    res.push_back(smallest_value);\n    res.push_back(smallest_index);\n\
    \    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjqazg9v9: /tmp/tmpjqazg9v9.cpp:52: int main(): Assertion `candidate((std::vector<long>()))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660085781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp492rqf6u: /tmp/tmp492rqf6u.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    int smalest_index\
    \ = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_value != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpq_yp1t8i: /tmp/tmpq_yp1t8i.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n                smalest_even_value = arr[i] % 2;\n                smalest_even_index\
    \ = i;\n            } else if (smalest_value == arr[i] % 2) {\n              \
    \  smalest_even_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    if (smalest_even_index != smalest_index) {\n        result.push_back(smalest_even_value);\n\
    \        result.push_back(smalest_even_index);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4pqanob1: /tmp/tmp4pqanob1.cpp:59: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smallest_value == 0) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            } else if (arr[i]\
    \ < smallest_value) {\n                smallest_value = arr[i];\n            \
    \    smallest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smallest_value != 0) {\n        result.push_back(smallest_value);\n\
    \        result.push_back(smallest_index);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpg_6s36ch: /tmp/tmpg_6s36ch.cpp:55: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,
    (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvoiwatja: /tmp/tmpvoiwatja.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long smalest_value = arr[0];\n    int smalest_index\
    \ = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n  \
    \  result.push_back(smalest_index);\n    return result;\n}\nint main() {\n   \
    \ auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2mq28t71: /tmp/tmp2mq28t71.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    return std::vector<long>{smalest_value, smalest_index};\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpy6fxikdf: /tmp/tmpy6fxikdf.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvoiwatja: /tmp/tmpvoiwatja.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_value == 0) {\n        return\
    \ result;\n    }\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpb5kiej2r: /tmp/tmpb5kiej2r.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085782
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_index_of_smalest_value = 0;\n    long smalest_index_of_smalest_value2\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == 0) {\n                smalest_value =\
    \ arr[i];\n                smalest_index = i;\n                smalest_index_of_smalest_value\
    \ = i;\n                smalest_index_of_smalest_value2 = i;\n            } else\
    \ {\n                if (arr[i] < smalest_value) {\n                    smalest_value\
    \ = arr[i];\n                    smalest_index = i;\n                    smalest_index_of_smalest_value\
    \ = i;\n                    smalest_index_of_smalest_value2 = i;\n           \
    \     }\n            }\n        }\n    }\n    if (smalest_value == 0) {\n    \
    \    return std::vector<long>();\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    result.push_back(smalest_index_of_smalest_value);\n\
    \    result.push_back(smalest_index_of_smalest_value2);\n    return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpp2wysrew: /tmp/tmpp2wysrew.cpp:63: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085782
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    return {smalest_value, smalest_index};\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpb0q73nub: /tmp/tmpb0q73nub.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085782
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == 0) {\n                smalest_value =\
    \ arr[i];\n                smalest_index = i;\n            } else if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n     \
    \   return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpiavrt354: /tmp/tmpiavrt354.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085782
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjhhmmv0d: /tmp/tmpjhhmmv0d.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value\
    \ = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] <\
    \ smalest_value) {\n            smalest_value = arr[i];\n            smalest_index\
    \ = i;\n            smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value == 0) {\n        return result;\n    }\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp8efg7d9b: /tmp/tmp8efg7d9b.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085779
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ std::vector<long>();\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppxtn4qeh: /tmp/tmppxtn4qeh.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    long smalest_odd_value = 0;\n  \
    \  long smalest_odd_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n     \
    \           smalest_value = arr[i];\n                smalest_index = i;\n    \
    \            smalest_even_value = arr[i] / 2;\n                smalest_even_index\
    \ = i;\n                smalest_odd_value = arr[i] / 2;\n                smalest_odd_index\
    \ = i;\n            } else if (smalest_value == arr[i]) {\n                smalest_even_index\
    \ = i;\n            } else if (smalest_value == arr[i] / 2) {\n              \
    \  smalest_even_value = arr[i] / 2;\n                smalest_even_index = i;\n\
    \            } else {\n                smalest_odd_index = i;\n            }\n\
    \        } else {\n            if (smalest_value == 0) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n                smalest_odd_value\
    \ = arr[i] / 2;\n                smalest_odd_index = i;\n            } else if\
    \ (smalest_value == arr[i]) {\n                smalest_odd_index = i;\n      \
    \      } else if (smalest_value == arr[i] / 2) {\n                smalest_odd_value\
    \ = arr[i] / 2;\n                smalest_odd_index = i;\n            } else {\n\
    \                smalest_even_index = i;\n            }\n        }\n    }\n  \
    \  if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    if (smalest_odd_value == 0) {\n        result.push_back(smalest_odd_index);\n\
    \        result.push_back(smalest_odd_value);\n    } else {\n        result.push_back(smalest_odd_index);\n\
    \        result.push_back(smalest_odd_value);\n        result.push_back(smalest_even_index);\n\
    \        result.push_back(smalest_even_value);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpslx8bhm5: /tmp/tmpslx8bhm5.cpp:87: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085782
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    if (smalest_index\
    \ == 0) {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmprfk6yckr: /tmp/tmprfk6yckr.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085782
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    long smalest_index_of_smalest_value = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n                smalest_index_of_smalest_value = i;\n            } else\
    \ if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n   \
    \             smalest_index = i;\n                smalest_index_of_smalest_value\
    \ = i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n     \
    \   return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    result.push_back(smalest_index_of_smalest_value);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpb1kgatja: /tmp/tmpb1kgatja.cpp:57: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085782
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long smallest_even_value = 0;\n    long smallest_even_node = 0;\n\
    \    long smallest_even_node_index = 0;\n    long index = 0;\n    long even_value\
    \ = 0;\n    long even_node = 0;\n    long even_node_index = 0;\n    for (auto\
    \ &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n       \
    \     even_node_index = index;\n        }\n        index++;\n    }\n    for (auto\
    \ &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n       \
    \     even_node_index = index;\n        }\n        index++;\n    }\n    for (auto\
    \ &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n       \
    \     even_node_index = index;\n        }\n        index++;\n    }\n    for (auto\
    \ &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n       \
    \     even_node_index = index;\n        }\n        index++;\n    }\n    for (auto\
    \ &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n       \
    \     even_node_index = index;\n        }\n        index++;\n    }\n    for (auto\
    \ &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n       \
    \     even_node_index = index;\n        }\n        index++;\n    }\n    for (auto\
    \ &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n       \
    \     even_node_index = index;\n        }\n        index++;\n    }\n    for (auto\
    \ &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n       \
    \     even_node_index = index;\n        }\n        index++;\n    }\n    for (auto\
    \ &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n       \
    \     even_node_index = index;\n        }\n        index++;\n    }\n    for (auto\
    \ &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n       \
    \     even_node_index = index;\n        }\n        index++;\n    }\n    for (auto\
    \ &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n       \
    \     even_node_index = index;\n        }\n        index++;\n    }\n    for (auto\
    \ &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n       \
    \     even_node_index = index;\n        }\n        index++;\n    }\n    for (auto\
    \ &i : arr) {\n        if (i % 2 == 0) {\n            even_node = i;\n       \
    \     even_node_index = index;\n        }\n        index++;\n    }\n    for (auto\
    \ &i : arr) {\n        if (i % 2 == \n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsrlzkp4m.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpsrlzkp4m.cpp:132:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  132 | }\n      | ^\n/tmp/tmpsrlzkp4m.cpp:131:21:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  131 |         if\
    \ (i % 2 ==\n      |            ~        ^\n      |                     )\n  132\
    \ | }\n      | ~                    \n/tmp/tmpsrlzkp4m.cpp:132:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n  132 | }\n      | ^\n/tmp/tmpsrlzkp4m.cpp:133:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  133 | int main() {\n      |            ^\n/tmp/tmpsrlzkp4m.cpp:143:1: error:\
    \ expected \u2018}\u2019 at end of input\n  143 | }\n      | ^\n/tmp/tmpsrlzkp4m.cpp:28:48:\
    \ note: to match this \u2018{\u2019\n   28 | std::vector<long> pluck(std::vector<long>\
    \ arr) {\n      |                                                ^\n/tmp/tmpsrlzkp4m.cpp:143:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  143 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660085781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ std::vector<long>();\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppxtn4qeh: /tmp/tmppxtn4qeh.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    return std::vector<long>({smalest_value,\
    \ smalest_index});\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2m_1myty: /tmp/tmp2m_1myty.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    long smalest_even_index = 0;\n    long smalest_odd_index = 0;\n    long smalest_odd_value\
    \ = 0;\n    long smalest_even_value = 0;\n    long smalest_odd_even_index = 0;\n\
    \    long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n \
    \   long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index = 0;\n  \
    \  long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n   \
    \ long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index = 0;\n    long\
    \ smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n    long smalest_odd_odd_value\
    \ = 0;\n    long smalest_odd_even_index = 0;\n    long smalest_odd_odd_index =\
    \ 0;\n    long smalest_odd_even_value = 0;\n    long smalest_odd_odd_value = 0;\n\
    \    long smalest_odd_even_index = 0;\n    long smalest_odd_odd_index = 0;\n \
    \   long smalest_odd_even_value = 0;\n    long smalest_odd_odd_value = 0;\n  \
    \  long smalest_odd_even_index = 0;\n    long smalest_odd_odd_index = 0;\n   \
    \ long smalest_odd_even_value = 0;\n    long smalest_odd_odd_value = 0;\n    long\
    \ smalest_odd_even_index = 0;\n    long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value\
    \ = 0;\n    long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index =\
    \ 0;\n    long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n\
    \    long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index = 0;\n \
    \   long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n  \
    \  long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index = 0;\n   \
    \ long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n    long\
    \ smalest_od\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmh5llcc8.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmh5llcc8.cpp:40:10: error: redeclaration of \u2018long\
    \ int smalest_odd_even_index\u2019\n   40 |     long smalest_odd_even_index =\
    \ 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmh5llcc8.cpp:36:10: note:\
    \ \u2018long int smalest_odd_even_index\u2019 previously declared here\n   36\
    \ |     long smalest_odd_even_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpmh5llcc8.cpp:41:10: error: redeclaration of \u2018long int smalest_odd_odd_index\u2019\
    \n   41 |     long smalest_odd_odd_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpmh5llcc8.cpp:37:10: note: \u2018long int smalest_odd_odd_index\u2019 previously\
    \ declared here\n   37 |     long smalest_odd_odd_index = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmh5llcc8.cpp:42:10: error: redeclaration of\
    \ \u2018long int smalest_odd_even_value\u2019\n   42 |     long smalest_odd_even_value\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmh5llcc8.cpp:38:10: note:\
    \ \u2018long int smalest_odd_even_value\u2019 previously declared here\n   38\
    \ |     long smalest_odd_even_value = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpmh5llcc8.cpp:43:10: error: redeclaration of \u2018long int smalest_odd_odd_value\u2019\
    \n   43 |     long smalest_odd_odd_value = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpmh5llcc8.cpp:39:10: note: \u2018long int smalest_odd_odd_value\u2019 previously\
    \ declared here\n   39 |     long smalest_odd_odd_value = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmh5llcc8.cpp:44:10: error: redeclaration of\
    \ \u2018long int smalest_odd_even_index\u2019\n   44 |     long smalest_odd_even_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmh5llcc8.cpp:36:10: note:\
    \ \u2018long int smalest_odd_even_index\u2019 previously declared here\n   36\
    \ |     long smalest_odd_even_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpmh5llcc8.cpp:45:10: error: redeclaration of \u2018long int smalest_odd_odd_index\u2019\
    \n   45 |     long smalest_odd_odd_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpmh5llcc8.cpp:37:10: note: \u2018long int smalest_odd_odd"
  stdout: ''
  timestamp: 1660085782
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_even_index = 0;\n    long smalest_even_node = 0;\n  \
    \  long smalest_even_node_index = 0;\n    long smalest_even_node_even_value =\
    \ 0;\n    long smalest_even_node_even_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_even_node_even_value\
    \ == 0) {\n                smalest_even_node_even_value = arr[i];\n          \
    \      smalest_even_node_even_index = i;\n            }\n            if (smalest_even_node_even_value\
    \ < arr[i]) {\n                smalest_even_node_even_value = arr[i];\n      \
    \          smalest_even_node_even_index = i;\n            }\n        }\n     \
    \   if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n     \
    \       smalest_index = i;\n        }\n    }\n    if (smalest_even_node_even_value\
    \ == 0) {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_even_node_even_value);\n    result.push_back(smalest_even_node_even_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmplycy25wo: /tmp/tmplycy25wo.cpp:63: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085782
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value\
    \ = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] <\
    \ smalest_value) {\n            smalest_value = arr[i];\n            smalest_index\
    \ = i;\n            smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_value);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpk8i0hcfj: /tmp/tmpk8i0hcfj.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085782
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    std::vector<long> result;\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    long smallest_even_value = 0;\n    long\
    \ smallest_even_node = 0;\n    long index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smallest_even_value\
    \ == 0) {\n                smallest_even_value = arr[i];\n                smallest_even_node\
    \ = i;\n            } else if (arr[i] < smallest_even_value) {\n             \
    \   smallest_even_value = arr[i];\n                smallest_even_node = i;\n \
    \           }\n        }\n    }\n    if (smallest_even_value == 0) {\n       \
    \ return result;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n       \
    \ if (arr[i] == smallest_even_value) {\n            if (smallest_value == 0) {\n\
    \                smallest_value = arr[i];\n                smallest_index = i;\n\
    \            } else if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    result.push_back(smallest_value);\n    result.push_back(smallest_even_node);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_vkluy0t: /tmp/tmp_vkluy0t.cpp:70: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,
    (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == 0) {\n                smalest_value =\
    \ arr[i];\n                smalest_index = i;\n            } else if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n     \
    \   return std::vector<long>();\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4fbxfzyo: /tmp/tmp4fbxfzyo.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    std::vector<long> res;\n    long smallest_value = 0;\n\
    \    long smallest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n \
    \       if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_value) {\n \
    \               smallest_value = arr[i];\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    res.push_back(smallest_value);\n    res.push_back(smallest_index);\n\
    \    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp7ylp2tzd: /tmp/tmp7ylp2tzd.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpat6aupvm: /tmp/tmpat6aupvm.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    int smallest_index = 0;\n    for (int\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n     \
    \       smalest_value = arr[i];\n            smallest_index = i;\n        }\n\
    \    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smallest_index);\n    return result;\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvwret_ny: /tmp/tmpvwret_ny.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smallest_index = arr[0];\n   \
    \ for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smallest_index = i;\n  \
    \      }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smallest_index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2sm6luba: /tmp/tmp2sm6luba.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ std::vector<long>();\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppxtn4qeh: /tmp/tmppxtn4qeh.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_even_value == 0) {\n                smalest_even_value = arr[i];\n\
    \                smalest_even_index = i;\n            } else if (smalest_even_value\
    \ < arr[i]) {\n                smalest_even_value = arr[i];\n                smalest_even_index\
    \ = i;\n            }\n        } else {\n            if (smalest_value == 0) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_even_value == 0) {\n        return std::vector<long>();\n\
    \    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp0fy3tq31: /tmp/tmp0fy3tq31.cpp:63: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjhhmmv0d: /tmp/tmpjhhmmv0d.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    long smalest_even_index = 0;\n    long smalest_odd_index = 0;\n    long smalest_odd_value\
    \ = 0;\n    long smalest_odd_even_index = 0;\n    long smalest_odd_odd_index =\
    \ 0;\n    long smalest_odd_odd_value = 0;\n    long smalest_odd_odd_even_index\
    \ = 0;\n    long smalest_odd_odd_odd_index = 0;\n    long smalest_odd_odd_odd_value\
    \ = 0;\n    long smalest_odd_odd_odd_even_index = 0;\n    long smalest_odd_odd_odd_odd_index\
    \ = 0;\n    long smalest_odd_odd_odd_odd_value = 0;\n    long smalest_odd_odd_odd_odd_even_index\
    \ = 0;\n    long smalest_odd_odd_odd_odd_odd_index = 0;\n    long smalest_odd_odd_odd_odd_odd_value\
    \ = 0;\n    long smalest_odd_odd_odd_odd_odd_even_index = 0;\n    long smalest_odd_odd_odd_odd_odd_odd_index\
    \ = 0;\n    long smalest_odd_odd_odd_odd_odd_odd_value = 0;\n    long smalest_odd_odd_odd_odd_odd_odd_even_index\
    \ = 0;\n    long smalest_odd_odd_odd_odd_odd_odd_odd_index = 0;\n    long smalest_odd_odd_odd_odd_odd_odd_odd_value\
    \ = 0;\n    long smalest_odd_odd_odd_odd_odd_odd_odd_even_index = 0;\n    long\
    \ smalest_odd_odd_odd_odd_odd_odd_odd_odd_index = 0;\n    long smalest_odd_odd_odd_odd_odd_odd_odd_odd_even_index\
    \ = 0;\n    long smalest_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_index = 0;\n\
    \    long smalest_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_even_index = 0;\n  \
    \  long smalest_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_index = 0;\n    long\
    \ smale\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnh0rcugf.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpnh0rcugf.cpp:60:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   60 | }\n      | ^\n/tmp/tmpnh0rcugf.cpp:60:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660085783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n \
    \   long smalest_even_index_in_vector = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_even_value ==\
    \ 0) {\n                smalest_even_value = arr[i];\n                smalest_even_index\
    \ = i;\n                smalest_even_index_in_vector = i;\n            }\n   \
    \         else {\n                if (arr[i] < smalest_even_value) {\n       \
    \             smalest_even_value = arr[i];\n                    smalest_even_index\
    \ = i;\n                    smalest_even_index_in_vector = i;\n              \
    \  }\n            }\n        }\n        else {\n            if (smalest_value\
    \ == 0) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n            else {\n                if (arr[i] < smalest_value)\
    \ {\n                    smalest_value = arr[i];\n                    smalest_index\
    \ = i;\n                }\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_even_value == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    else {\n        if (smalest_even_index_in_vector\
    \ == 0) {\n            result.push_back(smalest_even_value);\n            result.push_back(smalest_even_index);\n\
    \        }\n        else {\n            if (smalest_even_index_in_vector < smalest_index)\
    \ {\n                result.push_back(smalest_even_value);\n                result.push_back(smalest_even_index);\n\
    \            }\n            else {\n                result.push_back(smalest_value);\n\
    \                result.push_back(smalest_index);\n            }\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2plmnc6s: /tmp/tmp2plmnc6s.cpp:89: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    int smalest_index = 0;\n    for (int i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value\
    \ == 0) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ ans;\n    ans.push_back(smalest_value);\n    ans.push_back(smalest_index);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpgynfpz_w: /tmp/tmpgynfpz_w.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2yg73076: /tmp/tmp2yg73076.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5rvo7k65: /tmp/tmp5rvo7k65.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0, smalest_index = 0;\n    for (long i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] <\
    \ smalest_value) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n     \
    \   return {};\n    }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n\
    \    res.push_back(smalest_index);\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppqel7hwo: /tmp/tmppqel7hwo.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085784
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_even_index = 0;\n    long smalest_odd_index = 0;\n  \
    \  long smalest_even_value = 0;\n    long smalest_odd_value = 0;\n    long smalest_even_index2\
    \ = 0;\n    long smalest_odd_index2 = 0;\n    long smalest_even_value2 = 0;\n\
    \    long smalest_odd_value2 = 0;\n    long smalest_even_index3 = 0;\n    long\
    \ smalest_odd_index3 = 0;\n    long smalest_even_value3 = 0;\n    long smalest_odd_value3\
    \ = 0;\n    long smalest_even_index4 = 0;\n    long smalest_odd_index4 = 0;\n\
    \    long smalest_even_value4 = 0;\n    long smalest_odd_value4 = 0;\n    long\
    \ smalest_even_index5 = 0;\n    long smalest_odd_index5 = 0;\n    long smalest_even_value5\
    \ = 0;\n    long smalest_odd_value5 = 0;\n    long smalest_even_index6 = 0;\n\
    \    long smalest_odd_index6 = 0;\n    long smalest_even_value6 = 0;\n    long\
    \ smalest_odd_value6 = 0;\n    long smalest_even_index7 = 0;\n    long smalest_odd_index7\
    \ = 0;\n    long smalest_even_value7 = 0;\n    long smalest_odd_value7 = 0;\n\
    \    long smalest_even_index8 = 0;\n    long smalest_odd_index8 = 0;\n    long\
    \ smalest_even_value8 = 0;\n    long smalest_odd_value8 = 0;\n    long smalest_even_index9\
    \ = 0;\n    long smalest_odd_index9 = 0;\n    long smalest_even_value9 = 0;\n\
    \    long smalest_odd_value9 = 0;\n    long smalest_even_index10 = 0;\n    long\
    \ smalest_odd_index10 = 0;\n    long smalest_even_value10 = 0;\n    long smalest_odd_value10\
    \ = 0;\n    long smalest_even_index11 = 0;\n    long smalest_odd_index11 = 0;\n\
    \    long smalest_even_value11 = 0;\n    long smalest_odd_value11 = 0;\n    long\
    \ smalest_even_index12 = 0;\n    long smalest_odd_index12 = 0;\n    long smalest_even_value12\
    \ = 0;\n    long smalest_odd_value12 = 0;\n    long smalest_even_index\n}\nint\
    \ main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprseza_48.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmprseza_48.cpp:81:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   81 | }\n      | ^\n/tmp/tmprseza_48.cpp:81:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660085784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long smalest_value=0;\n    long smalest_index=0;\n\
    \    for(long i=0;i<arr.size();i++){\n        if(arr[i]%2==0){\n            if(arr[i]<smalest_value){\n\
    \                smalest_value=arr[i];\n                smalest_index=i;\n   \
    \         }\n        }\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpylmsxxm2: /tmp/tmpylmsxxm2.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvoiwatja: /tmp/tmpvoiwatja.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long smalest_value=0;\n    long smalest_index\
    \ = 0;\n    long smallest_even_value = 0;\n    long smallest_even_index = 0;\n\
    \    long smallest_value_index = 0;\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long smallest_even_value_index = 0;\n    long smallest_even_value\
    \ = 0;\n    long smallest_even_index = 0;\n    long smallest_value_index = 0;\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    long smallest_even_value_index\
    \ = 0;\n    long smallest_even_value = 0;\n    long smallest_even_index = 0;\n\
    \    long smallest_value_index = 0;\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long smallest_even_value_index = 0;\n    long smallest_even_value\
    \ = 0;\n    long smallest_even_index = 0;\n    long smallest_value_index = 0;\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    long smallest_even_value_index\
    \ = 0;\n    long smallest_even_value = 0;\n    long smallest_even_index = 0;\n\
    \    long smallest_value_index = 0;\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long smallest_even_value_index = 0;\n    long smallest_even_value\
    \ = 0;\n    long smallest_even_index = 0;\n    long smallest_value_index = 0;\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    long smallest_even_value_index\
    \ = 0;\n    long smallest_even_value = 0;\n    long smallest_even_index = 0;\n\
    \    long smallest_value_index = 0;\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long smallest_even_value_index = 0;\n    long smallest_even_value\
    \ = 0;\n    long smallest_even_index = 0;\n    long smallest_value_index = 0;\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    long smallest_even_value_index\
    \ = 0;\n    long smallest_even_value = 0;\n    long smallest_even_index = 0;\n\
    \    long smallest_value_index = 0;\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long smallest_even_value_index = 0;\n    long smallest_even_value\
    \ = 0;\n    long smallest_even_index = 0;\n    long smallest_value_index = 0;\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    long smallest_even_value_index\
    \ = 0;\n    long smallest_even_value = 0;\n    long smallest_even_index = 0;\n\
    \    long smallest_value\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0unli9uo.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0unli9uo.cpp:38:10: error: redeclaration of \u2018long\
    \ int smallest_even_value\u2019\n   38 |     long smallest_even_value = 0;\n \
    \     |          ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0unli9uo.cpp:32:10: note: \u2018\
    long int smallest_even_value\u2019 previously declared here\n   32 |     long\
    \ smallest_even_value = 0;\n      |          ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0unli9uo.cpp:39:10:\
    \ error: redeclaration of \u2018long int smallest_even_index\u2019\n   39 |  \
    \   long smallest_even_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0unli9uo.cpp:33:10:\
    \ note: \u2018long int smallest_even_index\u2019 previously declared here\n  \
    \ 33 |     long smallest_even_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0unli9uo.cpp:40:10: error: redeclaration of \u2018long int smallest_value_index\u2019\
    \n   40 |     long smallest_value_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0unli9uo.cpp:34:10: note: \u2018long int smallest_value_index\u2019 previously\
    \ declared here\n   34 |     long smallest_value_index = 0;\n      |         \
    \ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0unli9uo.cpp:41:10: error: redeclaration of \u2018\
    long int smallest_value\u2019\n   41 |     long smallest_value = 0;\n      | \
    \         ^~~~~~~~~~~~~~\n/tmp/tmp0unli9uo.cpp:35:10: note: \u2018long int smallest_value\u2019\
    \ previously declared here\n   35 |     long smallest_value = 0;\n      |    \
    \      ^~~~~~~~~~~~~~\n/tmp/tmp0unli9uo.cpp:42:10: error: redeclaration of \u2018\
    long int smallest_index\u2019\n   42 |     long smallest_index = 0;\n      | \
    \         ^~~~~~~~~~~~~~\n/tmp/tmp0unli9uo.cpp:36:10: note: \u2018long int smallest_index\u2019\
    \ previously declared here\n   36 |     long smallest_index = 0;\n      |    \
    \      ^~~~~~~~~~~~~~\n/tmp/tmp0unli9uo.cpp:43:10: error: redeclaration of \u2018\
    long int smallest_even_value_index\u2019\n   43 |     long smallest_even_value_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0unli9uo.cpp:37:10:\
    \ note: \u2018long int smallest_even_value_index\u2019 previously declared here\n\
    \   37 |     long smallest_even_value_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660085784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    return std::vector<long>{smalest_value,\
    \ smalest_index};\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmplghrszzr: /tmp/tmplghrszzr.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085776
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjhhmmv0d: /tmp/tmpjhhmmv0d.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long smallest_even_value\
    \ = 0;\n    long smallest_even_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smallest_even_value\
    \ == 0) {\n                smallest_even_value = arr[i];\n                smallest_even_index\
    \ = i;\n            } else if (smallest_even_value < arr[i]) {\n             \
    \   smallest_even_value = arr[i];\n                smallest_even_index = i;\n\
    \            }\n        }\n    }\n    std::vector<long> result;\n    if (smallest_even_value\
    \ == 0) {\n        return result;\n    }\n    result.push_back(smallest_even_value);\n\
    \    result.push_back(smallest_even_index);\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2wtm2ppq: /tmp/tmp2wtm2ppq.cpp:54: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp13wv8yel: /tmp/tmp13wv8yel.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value\
    \ = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] <\
    \ smalest_value) {\n            smalest_value = arr[i];\n            smalest_index\
    \ = i;\n            smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    } else {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpu_rzpm89: /tmp/tmpu_rzpm89.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smallest_even = arr[0];\n    long smallest_index\
    \ = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] %\
    \ 2 == 0) {\n            if (arr[i] < smallest_even) {\n                smallest_even\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    std::vector<long> result;\n    result.push_back(smallest_even);\n \
    \   result.push_back(smallest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpxci_qm1u: /tmp/tmpxci_qm1u.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(arr[smalest_index]);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmprtcz6zap: /tmp/tmprtcz6zap.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    long smalest_value = INT_MIN;\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_value != INT_MIN) {\n   \
    \     result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5fnth_uk: /tmp/tmp5fnth_uk.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == 0) {\n                smalest_value =\
    \ arr[i];\n                smalest_index = i;\n                smalest_even_value\
    \ = arr[i] / 2;\n            } else if (smalest_value == arr[i]) {\n         \
    \       smalest_index = i;\n                smalest_even_value = arr[i] / 2;\n\
    \            } else if (smalest_value == arr[i] && smalest_even_value == arr[i]\
    \ / 2) {\n                smalest_index = i;\n                smalest_even_value\
    \ = arr[i] / 2;\n            }\n        }\n    }\n    if (smalest_value == 0)\
    \ {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpyrfxsnm6: /tmp/tmpyrfxsnm6.cpp:57: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085784
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n \
    \   long smalest_even_index_2 = 0;\n    long smalest_even_index_3 = 0;\n    long\
    \ smalest_even_index_4 = 0;\n    long smalest_even_index_5 = 0;\n    long smalest_even_index_6\
    \ = 0;\n    long smalest_even_index_7 = 0;\n    long smalest_even_index_8 = 0;\n\
    \    long smalest_even_index_9 = 0;\n    long smalest_even_index_10 = 0;\n   \
    \ long smalest_even_index_11 = 0;\n    long smalest_even_index_12 = 0;\n    long\
    \ smalest_even_index_13 = 0;\n    long smalest_even_index_14 = 0;\n    long smalest_even_index_15\
    \ = 0;\n    long smalest_even_index_16 = 0;\n    long smalest_even_index_17 =\
    \ 0;\n    long smalest_even_index_18 = 0;\n    long smalest_even_index_19 = 0;\n\
    \    long smalest_even_index_20 = 0;\n    long smalest_even_index_21 = 0;\n  \
    \  long smalest_even_index_22 = 0;\n    long smalest_even_index_23 = 0;\n    long\
    \ smalest_even_index_24 = 0;\n    long smalest_even_index_25 = 0;\n    long smalest_even_index_26\
    \ = 0;\n    long smalest_even_index_27 = 0;\n    long smalest_even_index_28 =\
    \ 0;\n    long smalest_even_index_29 = 0;\n    long smalest_even_index_30 = 0;\n\
    \    long smalest_even_index_31 = 0;\n    long smalest_even_index_32 = 0;\n  \
    \  long smalest_even_index_33 = 0;\n    long smalest_even_index_34 = 0;\n    long\
    \ smalest_even_index_35 = 0;\n    long smalest_even_index_36 = 0;\n    long smalest_even_index_37\
    \ = 0;\n    long smalest_even_index_38 = 0;\n    long smalest_even_index_39 =\
    \ 0;\n    long smalest_even_index_40 = 0;\n    long smalest_even_index_41 = 1;\n\
    \    long smalest_even_index_42 = 0;\n    long smalest_even_index_43 = 0;\n  \
    \  long smalest_even_index_44 = 0;\n    long smalest_even_index_45 = 0;\n    long\
    \ smalest_even_index_46 = 0;\n    long smalest_even_index_47 = 0;\n    long smalest_even_index_48\
    \ = 0;\n    long smalest_even_index_\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp88rv2ml7.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp88rv2ml7.cpp:82:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   82 | }\n      | ^\n/tmp/tmp88rv2ml7.cpp:82:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660085784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    return std::vector<long>({smalest_value,\
    \ smalest_index});\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2m_1myty: /tmp/tmp2m_1myty.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_even_index = 0;\n    long smalest_odd_index = 0;\n  \
    \  long smalest_odd_value = 0;\n    long smalest_even_value = 0;\n    long smalest_odd_even_index\
    \ = 0;\n    long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value =\
    \ 0;\n    long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index = 0;\n\
    \    long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n \
    \   long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index = 0;\n  \
    \  long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n   \
    \ long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index = 0;\n    long\
    \ smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n    long smalest_odd_odd_value\
    \ = 0;\n    long smalest_odd_even_index = 0;\n    long smalest_odd_odd_index =\
    \ 0;\n    long smalest_odd_even_value = 0;\n    long smalest_odd_odd_value = 0;\n\
    \    long smalest_odd_even_index = 0;\n    long smalest_odd_odd_index = 0;\n \
    \   long smalest_odd_even_value = 0;\n    long smalest_odd_odd_value = 0;\n  \
    \  long smalest_odd_even_index = 0;\n    long smalest_odd_odd_index = 0;\n   \
    \ long smalest_odd_even_value = 0;\n    long smalest_odd_odd_value = 0;\n    long\
    \ smalest_odd_even_index = 0;\n    long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value\
    \ = 0;\n    long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index =\
    \ 0;\n    long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n\
    \    long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index = 0;\n \
    \   long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n  \
    \  long smalest_\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnalz3ak7.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpnalz3ak7.cpp:40:10: error: redeclaration of \u2018long\
    \ int smalest_odd_even_index\u2019\n   40 |     long smalest_odd_even_index =\
    \ 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnalz3ak7.cpp:36:10: note:\
    \ \u2018long int smalest_odd_even_index\u2019 previously declared here\n   36\
    \ |     long smalest_odd_even_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnalz3ak7.cpp:41:10: error: redeclaration of \u2018long int smalest_odd_odd_index\u2019\
    \n   41 |     long smalest_odd_odd_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnalz3ak7.cpp:37:10: note: \u2018long int smalest_odd_odd_index\u2019 previously\
    \ declared here\n   37 |     long smalest_odd_odd_index = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnalz3ak7.cpp:42:10: error: redeclaration of\
    \ \u2018long int smalest_odd_even_value\u2019\n   42 |     long smalest_odd_even_value\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnalz3ak7.cpp:38:10: note:\
    \ \u2018long int smalest_odd_even_value\u2019 previously declared here\n   38\
    \ |     long smalest_odd_even_value = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnalz3ak7.cpp:43:10: error: redeclaration of \u2018long int smalest_odd_odd_value\u2019\
    \n   43 |     long smalest_odd_odd_value = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnalz3ak7.cpp:39:10: note: \u2018long int smalest_odd_odd_value\u2019 previously\
    \ declared here\n   39 |     long smalest_odd_odd_value = 0;\n      |        \
    \  ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnalz3ak7.cpp:44:10: error: redeclaration of\
    \ \u2018long int smalest_odd_even_index\u2019\n   44 |     long smalest_odd_even_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnalz3ak7.cpp:36:10: note:\
    \ \u2018long int smalest_odd_even_index\u2019 previously declared here\n   36\
    \ |     long smalest_odd_even_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnalz3ak7.cpp:45:10: error: redeclaration of \u2018long int smalest_odd_odd_index\u2019\
    \n   45 |     long smalest_odd_odd_index = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnalz3ak7.cpp:37:10: note: \u2018long int smalest_odd_odd"
  stdout: ''
  timestamp: 1660085784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_index2 = 0;\n    long smalest_index3 = 0;\n    long smalest_index4\
    \ = 0;\n    long smalest_index5 = 0;\n    long smalest_index6 = 0;\n    long smalest_index7\
    \ = 0;\n    long smalest_index8 = 0;\n    long smalest_index9 = 0;\n    long smalest_index10\
    \ = 0;\n    long smalest_index11 = 0;\n    long smalest_index12 = 0;\n    long\
    \ smalest_index13 = 0;\n    long smalest_index14 = 0;\n    long smalest_index15\
    \ = 0;\n    long smalest_index16 = 0;\n    long smalest_index17 = 0;\n    long\
    \ smalest_index18 = 0;\n    long smalest_index19 = 0;\n    long smalest_index20\
    \ = 0;\n    long smalest_index21 = 0;\n    long smalest_index22 = 0;\n    long\
    \ smalest_index23 = 0;\n    long smalest_index24 = 0;\n    long smalest_index25\
    \ = 0;\n    long smalest_index26 = 0;\n    long smalest_index27 = 0;\n    long\
    \ smalest_index28 = 0;\n    long smalest_index29 = 0;\n    long smalest_index30\
    \ = 0;\n    long smalest_index31 = 0;\n    long smalest_index32 = 0;\n    long\
    \ smalest_index33 = 0;\n    long smalest_index34 = 0;\n    long smalest_index35\
    \ = 0;\n    long smalest_index36 = 0;\n    long smalest_index37 = 0;\n    long\
    \ smalest_index38 = 0;\n    long smalest_index39 = 0;\n    long smalest_index40\
    \ = 0;\n    long smalest_index41 = 0;\n    long smalest_index42 = 0;\n    long\
    \ smalest_index43 = 0;\n    long smalest_index44 = 0;\n    long smalest_index45\
    \ = 0;\n    long smalest_index46 = 0;\n    long smalest_index47 = 0;\n    long\
    \ smalest_index48 = 0;\n    long smalest_index49 = 0;\n    long smalest_index50\
    \ = 0;\n    long smalest_index51 = 0;\n    long smalest_index52 = 0;\n    long\
    \ smalest_index53 = 0;\n    long smalest_index54 = 0;\n    long smalest_index55\
    \ = 0;\n    long smalest_index56 = 0;\n\n}\nint main() {\n    auto candidate =\
    \ pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp7w5t91w5: /tmp/tmp7w5t91w5.cpp:91: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0, smalest_index = 0;\n    long even_value = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            even_value = arr[i];\n            smalest_value = even_value;\n \
    \           smalest_index = i;\n        }\n    }\n    if (smalest_value == 0)\
    \ {\n        return {};\n    }\n    std::vector<long> result;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] == smalest_value) {\n      \
    \      result.push_back(arr[i]);\n        }\n    }\n    if (result.size() == 0)\
    \ {\n        return {};\n    }\n    if (result.size() == 1) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9k0m8bah: /tmp/tmp9k0m8bah.cpp:58: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else {\n                if (arr[i] <\
    \ smalest_value) {\n                    smalest_value = arr[i];\n            \
    \        smalest_index = i;\n                }\n            }\n        }\n   \
    \ }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpernkh1uc: /tmp/tmpernkh1uc.cpp:57: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,
    (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085784
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value=0;\n    long smalest_index=0;\n\
    \    long smalest_even_value=0;\n    long smalest_even_count=0;\n    long smalest_odd_count=0;\n\
    \    long smalest_odd_value=0;\n    long smalest_odd_index=0;\n    long smalest_odd_even_value=0;\n\
    \    long smalest_odd_even_count=0;\n    long smalest_odd_odd_count=0;\n    long\
    \ smalest_odd_odd_value=0;\n    long smalest_odd_odd_index=0;\n    long smalest_odd_odd_even_value=0;\n\
    \    long smalest_odd_odd_even_count=0;\n    long smalest_odd_odd_odd_count=0;\n\
    \    long smalest_odd_odd_odd_value=0;\n    long smalest_odd_odd_odd_index=0;\n\
    \    long smalest_odd_odd_odd_even_value=0;\n    long smalest_odd_odd_odd_even_count=0;\n\
    \    long smalest_odd_odd_odd_odd_count=0;\n    long smalest_odd_odd_odd_odd_value=0;\n\
    \    long smalest_odd_odd_odd_odd_index=0;\n    long smalest_odd_odd_odd_odd_even_value=0;\n\
    \    long smalest_odd_odd_odd_odd_even_count=0;\n    long smalest_odd_odd_odd_odd_odd_count=0;\n\
    \    long smalest_odd_odd_odd_odd_odd_value=0;\n    long smalest_odd_odd_odd_odd_odd_index=0;\n\
    \    long smalest_odd_odd_odd_odd_odd_even_value=0;\n    long smalest_odd_odd_odd_odd_odd_even_count=0;\n\
    \    long smalest_odd_odd_odd_odd_odd_odd_count=0;\n    long smalest_odd_odd_odd_odd_odd_odd_value=0;\n\
    \    long smalest_odd_odd_odd_odd_odd_odd_index=0;\n    long smalest_odd_odd_odd_odd_odd_odd_even_value=0;\n\
    \    long smalest_odd_odd_odd_odd_odd_odd_even_count=0;\n    long smale\n}\nint\
    \ main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqz2lvgrj.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqz2lvgrj.cpp:65:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   65 | }\n      | ^\n/tmp/tmpqz2lvgrj.cpp:65:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660085784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0, smalest_index = 0;\n    for (long i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value\
    \ == 0) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_un2ngac: /tmp/tmp_un2ngac.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp13wv8yel: /tmp/tmp13wv8yel.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    long smalest_value = 0, smalest_index = 0;\n    long\
    \ even_value = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            even_value = arr[i];\n            if (smalest_value\
    \ == 0) {\n                smalest_value = even_value;\n                smalest_index\
    \ = i;\n            } else if (smalest_value < even_value) {\n               \
    \ smalest_value = even_value;\n                smalest_index = i;\n          \
    \  }\n        }\n    }\n    if (smalest_value == 0) {\n        return {};\n  \
    \  }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n  \
    \  result.push_back(smalest_index);\n    return result;\n}\nint main() {\n   \
    \ auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_y87sbxz: /tmp/tmp_y87sbxz.cpp:54: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjhhmmv0d: /tmp/tmpjhhmmv0d.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long smallest_value = arr[0];\n    long\
    \ smallest_index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] < smallest_value) {\n            smallest_value = arr[i];\n        \
    \    smallest_index = i;\n        }\n    }\n    std::vector<long> result;\n  \
    \  result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpljh7jzct: /tmp/tmpljh7jzct.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            smalest_even_value\
    \ = arr[i];\n            smalest_even_index = i;\n        }\n        if (arr[i]\
    \ < smalest_value) {\n            smalest_value = arr[i];\n            smalest_index\
    \ = i;\n        }\n    }\n    if (smalest_even_index == arr.size()) {\n      \
    \  return std::vector<long>();\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmphl8mfjna: /tmp/tmphl8mfjna.cpp:54: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0, smalest_index = 0;\n    for (long i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n     \
    \   return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpssf_3zii: /tmp/tmpssf_3zii.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smallest_value == 0) {\n\
    \                smallest_value = arr[i];\n                smallest_index = i;\n\
    \            } else if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdcqr8b6_: /tmp/tmpdcqr8b6_.cpp:52: int main(): Assertion `candidate((std::vector<long>()))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    long smalest_value = 0;\n    int smalest_index = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp27clk03g: /tmp/tmp27clk03g.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    int smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpwejwjw9l: /tmp/tmpwejwjw9l.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjhhmmv0d: /tmp/tmpjhhmmv0d.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    int smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpachi65gi: /tmp/tmpachi65gi.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smallest_value == 0) {\n\
    \                smallest_value = arr[i];\n                smallest_index = i;\n\
    \            } else if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdcqr8b6_: /tmp/tmpdcqr8b6_.cpp:52: int main(): Assertion `candidate((std::vector<long>()))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n \
    \   long smalest_even_index_count = 0;\n    long smalest_even_index_count_max\
    \ = 0;\n    long smalest_even_index_count_min = 0;\n    long smalest_even_index_count_temp\
    \ = 0;\n    long smalest_even_index_count_temp_max = 0;\n    long smalest_even_index_count_temp_min\
    \ = 0;\n    long smalest_even_index_count_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_max\
    \ = 0;\n    long smalest_even_index_count_temp_temp_min = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx1fhkgbv.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpx1fhkgbv.cpp:44:10: error: redeclaration of \u2018long\
    \ int smalest_even_index_count_temp_temp_temp\u2019\n   44 |     long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpx1fhkgbv.cpp:43:10:\
    \ note: \u2018long int smalest_even_index_count_temp_temp_temp\u2019 previously\
    \ declared here\n   43 |     long smalest_even_index_count_temp_temp_temp = 0;\n\
    \      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpx1fhkgbv.cpp:45:10:\
    \ error: redeclaration of \u2018long int smalest_even_index_count_temp_temp_temp\u2019\
    \n   45 |     long smalest_even_index_count_temp_temp_temp = 0;\n      |     \
    \     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpx1fhkgbv.cpp:43:10: note:\
    \ \u2018long int smalest_even_index_count_temp_temp_temp\u2019 previously declared\
    \ here\n   43 |     long smalest_even_index_count_temp_temp_temp = 0;\n      |\
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpx1fhkgbv.cpp:46:10:\
    \ error: redeclaration of \u2018long int smalest_even_index_count_temp_temp_temp\u2019\
    \n   46 |     long smalest_even_index_count_temp_temp_temp = 0;\n      |     \
    \     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpx1fhkgbv.cpp:43:10: note:\
    \ \u2018long int smalest_even_index_count_temp_temp_temp\u2019 previously declared\
    \ here\n   43 |     long smalest_even_index_count_temp_temp_temp = 0;\n      |\
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpx1fhkgbv.cpp:47:10:\
    \ error: redeclaration of \u2018long int smalest_even_index_count_temp_temp_temp\u2019\
    \n   47 |     long smalest_even_index_count_temp_temp_temp = 0;\n      |     \
    \     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpx1fhkgbv.cpp:43:10: note:\
    \ \u2018long int smalest_even_index_count_temp_temp_temp\u2019 previously declared\
    \ here\n   43 |     long smalest_even_index_count_temp_temp_temp = 0;\n      |\
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpx1fhkgbv.cpp:48:10:\
    \ error: redeclaration of \u2018long int smalest_even_index_count_temp_temp_temp\u2019\
    \n   48 |     long smalest_even_index_count_temp_temp_t"
  stdout: ''
  timestamp: 1660085785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    std::vector<long> res;\n    long smallest_value = arr[0];\n\
    \    long smallest_index = 0;\n    for (int i = 0; i < arr.size(); i++) {\n  \
    \      if (arr[i] < smallest_value) {\n            smallest_value = arr[i];\n\
    \            smallest_index = i;\n        }\n    }\n    res.push_back(smallest_value);\n\
    \    res.push_back(smallest_index);\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpci_2p6fo: /tmp/tmpci_2p6fo.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long smalest_value = 0, smalest_index =\
    \ 0;\n    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n   \
    \ long smalest_odd_value = 0;\n    long smalest_odd_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n                smalest_even_value = arr[i] % 2;\n\
    \                smalest_even_index = i;\n            } else if (smalest_value\
    \ == arr[i] % 2) {\n                smalest_even_index = i;\n            } else\
    \ if (smalest_value == arr[i] % 2) {\n                smalest_odd_index = i;\n\
    \            }\n        } else {\n            if (smalest_value == 0) {\n    \
    \            smalest_value = arr[i];\n                smalest_index = i;\n   \
    \             smalest_odd_value = arr[i] % 2;\n                smalest_odd_index\
    \ = i;\n            } else if (smalest_value == arr[i] % 2) {\n              \
    \  smalest_even_index = i;\n            } else if (smalest_value == arr[i] % 2)\
    \ {\n                smalest_odd_index = i;\n            }\n        }\n    }\n\
    \    if (smalest_value == 0) {\n        return std::vector<long>();\n    }\n \
    \   if (smalest_even_index == smalest_index) {\n        return std::vector<long>({smalest_value,\
    \ smalest_even_index});\n    }\n    if (smalest_odd_index == smalest_index) {\n\
    \        return std::vector<long>({smalest_value, smalest_odd_index});\n    }\n\
    \    return std::vector<long>();\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2d7lytcj: /tmp/tmp2d7lytcj.cpp:73: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpat6aupvm: /tmp/tmpat6aupvm.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    int smalest_index = 0;\n    for (int\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpit7k7dpy: /tmp/tmpit7k7dpy.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvoiwatja: /tmp/tmpvoiwatja.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpat6aupvm: /tmp/tmpat6aupvm.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085777
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == 0) {\n                smalest_value =\
    \ arr[i];\n                smalest_index = i;\n            } else if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if\
    \ (smalest_value == 0) {\n        return result;\n    }\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpwsh2vvw9: /tmp/tmpwsh2vvw9.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    long smalest_index_of_smalest_value = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n                smalest_index_of_smalest_value = i;\n            } else\
    \ if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n   \
    \             smalest_index = i;\n                smalest_index_of_smalest_value\
    \ = i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n     \
    \   return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    result.push_back(smalest_index_of_smalest_value);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpb1kgatja: /tmp/tmpb1kgatja.cpp:57: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660085782
