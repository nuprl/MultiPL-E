name: HumanEval_61_correct_bracketing
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"\
  (\" and \")\".\n// return true if every opening bracket has a corresponding closing\
  \ bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
  ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>> correct_bracketing((\"\
  )(()\"))\n// (false)\nbool correct_bracketing(std::string brackets) {\n"
tests: "}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
  ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
  ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
  )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
  )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
  ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
  (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
  \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
completions: ["    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n   \
    \ for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] == '(')\
    \ {\n            open_brackets++;\n        } else if (brackets[i] == ')') {\n\
    \            close_brackets++;\n        }\n    }\n    return open_brackets ==\
    \ close_brackets;", "    int opening_brackets = brackets.size();\n    int closing_brackets\
    \ = 0;\n    for (int i = 0; i < opening_brackets; i++) {\n        if (brackets[i]\
    \ == '(') {\n            closing_brackets++;\n        } else {\n            closing_brackets\
    \ = 0;\n        }\n    }\n    return closing_brackets == opening_brackets;", " \
    \   size_t open_brackets = brackets.size();\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '(') {\n            ++open_brackets;\n        } else if (brackets[i] == ')')\
    \ {\n            ++close_brackets;\n        } else {\n            return false;\n\
    \        }\n    }\n    return open_brackets == close_brackets;", "    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '(') {\n          \
    \  result &= (brackets[brackets.size() - 1] == ')');\n        }\n    }\n    return\
    \ result;", "    int opening_brackets = 0;\n    int closing_brackets = 0;\n  \
    \  for (char c : brackets) {\n        if (c == '(') {\n            opening_brackets++;\n\
    \        } else if (c == ')') {\n            closing_brackets++;\n        }\n\
    \    }\n    if (opening_brackets != closing_brackets) {\n        return false;\n\
    \    }\n    return true;", "    size_t open_brackets = 0;\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '(') {\n            ++open_brackets;\n        } else if (brackets[i] == ')')\
    \ {\n            ++close_brackets;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    int open_brackets = 0;\n    int close_brackets = 0;\n\
    \    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] ==\
    \ '(') open_brackets++;\n        else if (brackets[i] == ')') close_brackets++;\n\
    \    }\n    return open_brackets == close_brackets;", "    std::string opening_brackets\
    \ = brackets;\n    std::string closing_brackets = brackets;\n    size_t opening_brackets_size\
    \ = opening_brackets.size();\n    size_t closing_brackets_size = closing_brackets.size();\n\
    \    bool result = false;\n    for (size_t i = 0; i < opening_brackets_size; i++)\
    \ {\n        if (opening_brackets[i] == '(') {\n            opening_brackets[i]\
    \ = '(';\n            closing_brackets[i] = ')';\n            opening_brackets_size--;\n\
    \            closing_brackets_size--;\n        } else if (opening_brackets[i]\
    \ == '[') {\n            opening_brackets[i] = '[';\n            closing_brackets[i]\
    \ = ']';\n            opening_brackets_size--;\n            closing_brackets_size--;\n\
    \        } else if (opening_brackets[i] == '{') {\n            opening_brackets[i]\
    \ = '{';\n            closing_brackets[i] = '}';\n            opening_brackets_size--;\n\
    \            closing_brackets_size--;\n        }\n    }\n    if (opening_brackets_size\
    \ == 0) {\n        result = true;\n    }\n    if (closing_brackets_size == 0)\
    \ {\n        result = true;\n    }\n    return result;", "    std::string opening_brackets\
    \ = brackets;\n    std::string closing_brackets = brackets;\n    opening_brackets.erase(std::remove(opening_brackets.begin(),\
    \ opening_brackets.end(), '('), opening_brackets.end());\n    closing_brackets.erase(std::remove(closing_brackets.begin(),\
    \ closing_brackets.end(), ')'), closing_brackets.end());\n    return opening_brackets\
    \ == closing_brackets;", "    bool result = true;\n    for (auto c : brackets)\
    \ {\n        if (c == '(') {\n            if (brackets.find('(') != brackets.find(')'))\
    \ {\n                result = false;\n            }\n        }\n    }\n    return\
    \ result;", "    int open_brackets = 0;\n    int close_brackets = 0;\n    for(int\
    \ i = 0; i < brackets.length(); i++) {\n        if(brackets[i] == '(') {\n   \
    \         open_brackets++;\n        } else if(brackets[i] == ')') {\n        \
    \    close_brackets++;\n        }\n    }\n    return open_brackets == close_brackets;",
  "    bool result = true;\n    for (auto c : brackets) {\n        if (c == '(') {\n\
    \            if (brackets.find('(') != brackets.find(')')) {\n               \
    \ result = false;\n            }\n        }\n    }\n    return result;", "   \
    \ size_t open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t brackets_size\
    \ = brackets.size();\n    for (size_t i = 0; i < brackets_size; ++i) {\n     \
    \   if (brackets[i] == '(') {\n            open_brackets++;\n        } else if\
    \ (brackets[i] == ')') {\n            close_brackets++;\n        }\n    }\n  \
    \  if (open_brackets != close_brackets) {\n        return false;\n    }\n    return\
    \ true;", "    size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] ==\
    \ '(') {\n            opening_brackets++;\n        } else if (brackets[i] == ')')\
    \ {\n            closing_brackets++;\n        }\n    }\n    return opening_brackets\
    \ == closing_brackets;", "    int open_brackets = 0;\n    int close_brackets =\
    \ 0;\n    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '(') {\n            open_brackets++;\n        } else if (brackets[i] == ')')\
    \ {\n            close_brackets++;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    bool result = true;\n    size_t opening_brackets_size\
    \ = brackets.size();\n    for (size_t i = 0; i < opening_brackets_size; i++) {\n\
    \        if (brackets[i] == '(') {\n            bool found = false;\n        \
    \    for (size_t j = i; j < opening_brackets_size; j++) {\n                if\
    \ (brackets[j] == ')') {\n                    found = true;\n                \
    \    break;\n                }\n            }\n            if (!found) {\n   \
    \             result = false;\n                break;\n            }\n       \
    \ }\n    }\n    return result;", "    size_t open_brackets = 0;\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '(') {\n            ++open_brackets;\n        } else if (brackets[i] == ')')\
    \ {\n            ++close_brackets;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    size_t opening_brackets = 0;\n    size_t closing_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '(') {\n            ++opening_brackets;\n        } else if (brackets[i] ==\
    \ ')') {\n            ++closing_brackets;\n        } else {\n            return\
    \ false;\n        }\n    }\n    if (opening_brackets != closing_brackets) {\n\
    \        return false;\n    }\n    return true;", "    size_t open_brackets =\
    \ 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets.size();\
    \ ++i) {\n        if (brackets[i] == '(') {\n            ++open_brackets;\n  \
    \      } else if (brackets[i] == ')') {\n            ++close_brackets;\n     \
    \   } else {\n            return false;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    size_t brackets_size = brackets.size();\n    if (brackets_size\
    \ < 2)\n        return false;\n    size_t opening_brackets_size = brackets.find_first_of(\"\
    (\") - 1;\n    size_t closing_brackets_size = brackets.find_first_of(\")\") -\
    \ 1;\n    if (opening_brackets_size < 0 || closing_brackets_size < 0)\n      \
    \  return false;\n    if (opening_brackets_size != closing_brackets_size)\n  \
    \      return false;\n    for (size_t i = 0; i < opening_brackets_size; i++) {\n\
    \        if (brackets[i] != brackets[opening_brackets_size + i])\n           \
    \ return false;\n    }\n    return true;"]
stop_tokens:
- "\n}"
