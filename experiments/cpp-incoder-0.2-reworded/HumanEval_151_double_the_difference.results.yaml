language: cpp
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return the sum of squares of the numbers\n// in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n  long sum = 0;\n  for (float i : lst) {\n    if (i >= 0) {\n      sum\
    \ += i * i;\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate =\
    \ double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n\
    \    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n\
    \    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0,\
    \ (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7d4kwi4q.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmp7d4kwi4q.cpp:16:18: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float i : lst) {\n                  ^\n/tmp/tmp7d4kwi4q.cpp:\
    \ In function 'int main()':\n/tmp/tmp7d4kwi4q.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp7d4kwi4q.cpp:2:\n/tmp/tmp7d4kwi4q.cpp:25:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmp7d4kwi4q.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmp7d4kwi4q.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmp7d4kwi4q.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp7d4kwi4q.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmp7d4kwi4q.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmp7d4kwi4q.cpp:27:78: warning:\
    \ extended init"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return the sum of squares of the numbers\n// in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n  long sum = 0;\n  for (float x : lst) {\n    if (x >= 0) {\n      sum\
    \ += x * x;\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate =\
    \ double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n\
    \    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n\
    \    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0,\
    \ (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr831bwpy.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmpr831bwpy.cpp:16:18: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float x : lst) {\n                  ^\n/tmp/tmpr831bwpy.cpp:\
    \ In function 'int main()':\n/tmp/tmpr831bwpy.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpr831bwpy.cpp:2:\n/tmp/tmpr831bwpy.cpp:25:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmpr831bwpy.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmpr831bwpy.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmpr831bwpy.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpr831bwpy.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmpr831bwpy.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmpr831bwpy.cpp:27:78: warning:\
    \ extended init"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return the sum of squares of the numbers\n// in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    long n = lst.size();\n    if (n <= 0)\n     \
    \   return 0;\n    for (long i = 0; i < n; i++) {\n        if (lst[i] > 0)\n \
    \           sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7sukfu4s.cpp: In function 'int main()':\n/tmp/tmp7sukfu4s.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7sukfu4s.cpp:2:\n/tmp/tmp7sukfu4s.cpp:27:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmp7sukfu4s.cpp:28:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmp7sukfu4s.cpp:28:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmp7sukfu4s.cpp:28:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp7sukfu4s.cpp:29:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmp7sukfu4s.cpp:29:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmp7sukfu4s.cpp:29:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp7sukfu4s.cpp:29:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return the sum of squares of the numbers\n// in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for (float x : lst) {\n        if ((x > 0) &&\
    \ (x % 2 != 0)) {\n            sum += x * x;\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxfj4e_bs.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmpxfj4e_bs.cpp:16:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float x : lst) {\n                    ^\n/tmp/tmpxfj4e_bs.cpp:17:29:\
    \ error: invalid operands of types 'float' and 'int' to binary 'operator%'\n \
    \        if ((x > 0) && (x % 2 != 0)) {\n                             ^\n/tmp/tmpxfj4e_bs.cpp:\
    \ In function 'int main()':\n/tmp/tmpxfj4e_bs.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpxfj4e_bs.cpp:2:\n/tmp/tmpxfj4e_bs.cpp:25:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmpxfj4e_bs.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmpxfj4e_bs.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmpxfj4e_bs.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpxfj4e_bs.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmpxfj4e_bs.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return the sum of squares of the numbers\n// in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for (float f : lst) {\n        if (f > 0)\n \
    \           sum += (long)f*f;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpew_dc7tx.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmpew_dc7tx.cpp:16:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float f : lst) {\n                    ^\n/tmp/tmpew_dc7tx.cpp:\
    \ In function 'int main()':\n/tmp/tmpew_dc7tx.cpp:23:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpew_dc7tx.cpp:2:\n/tmp/tmpew_dc7tx.cpp:24:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmpew_dc7tx.cpp:25:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmpew_dc7tx.cpp:25:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmpew_dc7tx.cpp:25:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpew_dc7tx.cpp:26:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmpew_dc7tx.cpp:26:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmpew_dc7tx.cpp:26:78: warning:\
    \ extended "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return the sum of squares of the numbers\n// in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for (float f : lst) {\n        if (f > 0)\n \
    \           sum += f * f;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n\
    \    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n\
    \    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0,\
    \ (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjhhey9sh.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmpjhhey9sh.cpp:16:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float f : lst) {\n                    ^\n/tmp/tmpjhhey9sh.cpp:\
    \ In function 'int main()':\n/tmp/tmpjhhey9sh.cpp:23:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpjhhey9sh.cpp:2:\n/tmp/tmpjhhey9sh.cpp:24:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmpjhhey9sh.cpp:25:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmpjhhey9sh.cpp:25:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmpjhhey9sh.cpp:25:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpjhhey9sh.cpp:26:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmpjhhey9sh.cpp:26:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmpjhhey9sh.cpp:26:78: warning:\
    \ extended "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return the sum of squares of the numbers\n// in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    long n = lst.size();\n    long sum_squares =\
    \ 0;\n    for (long i = 0; i < n; i++) {\n        if (lst[i] > 0)\n          \
    \  sum += lst[i] * lst[i];\n        else\n            sum_squares += lst[i] *\
    \ lst[i];\n    }\n    return sum_squares / n;\n}\nint main() {\n    auto candidate\
    \ = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n\
    \    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n\
    \    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0,\
    \ (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp4mczuyn.cpp: In function 'int main()':\n/tmp/tmpp4mczuyn.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpp4mczuyn.cpp:2:\n/tmp/tmpp4mczuyn.cpp:28:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmpp4mczuyn.cpp:29:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmpp4mczuyn.cpp:29:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmpp4mczuyn.cpp:29:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpp4mczuyn.cpp:30:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmpp4mczuyn.cpp:30:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmpp4mczuyn.cpp:30:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpp4mczuyn.cpp:30:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return the sum of squares of the numbers\n// in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for (float x : lst) {\n        if (x % 2 == 1)\
    \ {\n            sum += x * x;\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjvsfa0jq.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmpjvsfa0jq.cpp:16:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float x : lst) {\n                    ^\n/tmp/tmpjvsfa0jq.cpp:17:17:\
    \ error: invalid operands of types 'float' and 'int' to binary 'operator%'\n \
    \        if (x % 2 == 1) {\n                 ^\n/tmp/tmpjvsfa0jq.cpp: In function\
    \ 'int main()':\n/tmp/tmpjvsfa0jq.cpp:24:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = double_the_difference;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjvsfa0jq.cpp:2:\n/tmp/tmpjvsfa0jq.cpp:25:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmpjvsfa0jq.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmpjvsfa0jq.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmpjvsfa0jq.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpjvsfa0jq.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmpjvsfa0jq.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (fl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return the sum of squares of the numbers\n// in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for (float x : lst) {\n        if ((x > 0) &&\
    \ (x % 2 == 1)) {\n            sum += x * x;\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4aehnrk0.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmp4aehnrk0.cpp:16:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float x : lst) {\n                    ^\n/tmp/tmp4aehnrk0.cpp:17:29:\
    \ error: invalid operands of types 'float' and 'int' to binary 'operator%'\n \
    \        if ((x > 0) && (x % 2 == 1)) {\n                             ^\n/tmp/tmp4aehnrk0.cpp:\
    \ In function 'int main()':\n/tmp/tmp4aehnrk0.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp4aehnrk0.cpp:2:\n/tmp/tmp4aehnrk0.cpp:25:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmp4aehnrk0.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmp4aehnrk0.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmp4aehnrk0.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp4aehnrk0.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmp4aehnrk0.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return the sum of squares of the numbers\n// in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    if (lst.size() == 0) {\n        return 0;\n    }\n    long sum =\
    \ 0;\n    for (float x : lst) {\n        if ((x > 0) && (x % 2 == 1)) {\n    \
    \        sum += x * x;\n        }\n    }\n    return sum;\n}\nint main() {\n \
    \   auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprlipogte.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmprlipogte.cpp:19:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float x : lst) {\n                    ^\n/tmp/tmprlipogte.cpp:20:29:\
    \ error: invalid operands of types 'float' and 'int' to binary 'operator%'\n \
    \        if ((x > 0) && (x % 2 == 1)) {\n                             ^\n/tmp/tmprlipogte.cpp:\
    \ In function 'int main()':\n/tmp/tmprlipogte.cpp:27:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmprlipogte.cpp:2:\n/tmp/tmprlipogte.cpp:28:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmprlipogte.cpp:29:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmprlipogte.cpp:29:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmprlipogte.cpp:29:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmprlipogte.cpp:30:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmprlipogte.cpp:30:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return the sum of squares of the numbers\n// in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for (float i : lst) {\n        if (i >= 0) {\n\
    \            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3tuio10g.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmp3tuio10g.cpp:16:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float i : lst) {\n                    ^\n/tmp/tmp3tuio10g.cpp:\
    \ In function 'int main()':\n/tmp/tmp3tuio10g.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp3tuio10g.cpp:2:\n/tmp/tmp3tuio10g.cpp:25:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmp3tuio10g.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmp3tuio10g.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmp3tuio10g.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp3tuio10g.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmp3tuio10g.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmp3tuio10g.cpp:27:78: warning:\
    \ extended "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return the sum of squares of the numbers\n// in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for (float x : lst) {\n        if ((x > 0) &&\
    \ (x % 2 == 1)) {\n            sum += x * x;\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4aehnrk0.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmp4aehnrk0.cpp:16:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float x : lst) {\n                    ^\n/tmp/tmp4aehnrk0.cpp:17:29:\
    \ error: invalid operands of types 'float' and 'int' to binary 'operator%'\n \
    \        if ((x > 0) && (x % 2 == 1)) {\n                             ^\n/tmp/tmp4aehnrk0.cpp:\
    \ In function 'int main()':\n/tmp/tmp4aehnrk0.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp4aehnrk0.cpp:2:\n/tmp/tmp4aehnrk0.cpp:25:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmp4aehnrk0.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmp4aehnrk0.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmp4aehnrk0.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp4aehnrk0.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmp4aehnrk0.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return the sum of squares of the numbers\n// in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for (float x : lst) {\n        if (x != 0) {\n\
    \            sum += x * x;\n        }\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp717x1cga.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmp717x1cga.cpp:16:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float x : lst) {\n                    ^\n/tmp/tmp717x1cga.cpp:\
    \ In function 'int main()':\n/tmp/tmp717x1cga.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp717x1cga.cpp:2:\n/tmp/tmp717x1cga.cpp:25:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmp717x1cga.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmp717x1cga.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmp717x1cga.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp717x1cga.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmp717x1cga.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmp717x1cga.cpp:27:78: warning:\
    \ extended "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return the sum of squares of the numbers\n// in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for (float f : lst) {\n        if (f > 0 && f\
    \ % 2 != 0) {\n            sum += f * f;\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5mo1zsne.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmp5mo1zsne.cpp:16:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float f : lst) {\n                    ^\n/tmp/tmp5mo1zsne.cpp:17:26:\
    \ error: invalid operands of types 'float' and 'int' to binary 'operator%'\n \
    \        if (f > 0 && f % 2 != 0) {\n                          ^\n/tmp/tmp5mo1zsne.cpp:\
    \ In function 'int main()':\n/tmp/tmp5mo1zsne.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp5mo1zsne.cpp:2:\n/tmp/tmp5mo1zsne.cpp:25:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmp5mo1zsne.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmp5mo1zsne.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmp5mo1zsne.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp5mo1zsne.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmp5mo1zsne.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0."
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return the sum of squares of the numbers\n// in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    long count = 0;\n    for (float x : lst) {\n\
    \        if ((x > 0) && (x % 2 == 1)) {\n            sum += x;\n            count++;\n\
    \        }\n    }\n    if (count == 0)\n        return 0;\n    return sum * sum\
    \ / count;\n}\nint main() {\n    auto candidate = double_the_difference;\n   \
    \ assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxu8dqwd6.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmpxu8dqwd6.cpp:17:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float x : lst) {\n                    ^\n/tmp/tmpxu8dqwd6.cpp:18:29:\
    \ error: invalid operands of types 'float' and 'int' to binary 'operator%'\n \
    \        if ((x > 0) && (x % 2 == 1)) {\n                             ^\n/tmp/tmpxu8dqwd6.cpp:\
    \ In function 'int main()':\n/tmp/tmpxu8dqwd6.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpxu8dqwd6.cpp:2:\n/tmp/tmpxu8dqwd6.cpp:29:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmpxu8dqwd6.cpp:30:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmpxu8dqwd6.cpp:30:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmpxu8dqwd6.cpp:30:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpxu8dqwd6.cpp:31:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmpxu8dqwd6.cpp:31:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return the sum of squares of the numbers\n// in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for (float x : lst) {\n        if (x != 0) {\n\
    \            sum += x * x;\n        }\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp717x1cga.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmp717x1cga.cpp:16:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float x : lst) {\n                    ^\n/tmp/tmp717x1cga.cpp:\
    \ In function 'int main()':\n/tmp/tmp717x1cga.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp717x1cga.cpp:2:\n/tmp/tmp717x1cga.cpp:25:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmp717x1cga.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmp717x1cga.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmp717x1cga.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp717x1cga.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmp717x1cga.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmp717x1cga.cpp:27:78: warning:\
    \ extended "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return the sum of squares of the numbers\n// in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    long n = lst.size();\n    if (n == 0)\n     \
    \   return 0;\n    for (long i = 0; i < n; i++) {\n        if (lst[i] % 2 != 0)\n\
    \            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu03cte94.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmpu03cte94.cpp:20:22: error: invalid operands of types 'float' and 'int'\
    \ to binary 'operator%'\n         if (lst[i] % 2 != 0)\n                     \
    \ ^\n/tmp/tmpu03cte94.cpp: In function 'int main()':\n/tmp/tmpu03cte94.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu03cte94.cpp:2:\n/tmp/tmpu03cte94.cpp:27:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmpu03cte94.cpp:28:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmpu03cte94.cpp:28:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmpu03cte94.cpp:28:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpu03cte94.cpp:29:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmpu03cte94.cpp:29:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmpu03cte94.cpp:29:78: w"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return the sum of squares of the numbers\n// in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    if (lst.size() == 0)\n        return 0;\n    long sum = 0;\n   \
    \ for (float x : lst) {\n        if (x >= 0)\n            sum += x * x;\n    \
    \    else\n            sum += x * x;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4rs0rsjm.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmp4rs0rsjm.cpp:18:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float x : lst) {\n                    ^\n/tmp/tmp4rs0rsjm.cpp:\
    \ In function 'int main()':\n/tmp/tmp4rs0rsjm.cpp:27:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp4rs0rsjm.cpp:2:\n/tmp/tmp4rs0rsjm.cpp:28:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmp4rs0rsjm.cpp:29:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmp4rs0rsjm.cpp:29:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmp4rs0rsjm.cpp:29:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp4rs0rsjm.cpp:30:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmp4rs0rsjm.cpp:30:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmp4rs0rsjm.cpp:30:78: warning:\
    \ extended "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return the sum of squares of the numbers\n// in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    long n = lst.size();\n    if (n > 0) {\n    \
    \    long sum = 0;\n        for (long i = 0; i < n; i++) {\n            if (lst[i]\
    \ % 2 == 1) {\n                sum += lst[i];\n            }\n        }\n    \
    \    return sum;\n    }\n    return 0;\n}\nint main() {\n    auto candidate =\
    \ double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n\
    \    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n\
    \    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0,\
    \ (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxh2ljs7v.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmpxh2ljs7v.cpp:20:26: error: invalid operands of types 'float' and 'int'\
    \ to binary 'operator%'\n             if (lst[i] % 2 == 1) {\n               \
    \           ^\n/tmp/tmpxh2ljs7v.cpp: In function 'int main()':\n/tmp/tmpxh2ljs7v.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxh2ljs7v.cpp:2:\n/tmp/tmpxh2ljs7v.cpp:30:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmpxh2ljs7v.cpp:31:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmpxh2ljs7v.cpp:31:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmpxh2ljs7v.cpp:31:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpxh2ljs7v.cpp:32:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmpxh2ljs7v.cpp:32:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmpxh2ljs7v.cp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return the sum of squares of the numbers\n// in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for (auto i : lst) {\n        if (i % 2 != 0)\
    \ {\n            sum += i;\n        }\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0tdujqxz.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmp0tdujqxz.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmp0tdujqxz.cpp:21:5: error: expected ';' before\
    \ 'return'\n     return sum;\n     ^\n/tmp/tmp0tdujqxz.cpp:21:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp0tdujqxz.cpp:21:5: error: expected\
    \ ';' before 'return'\n/tmp/tmp0tdujqxz.cpp:21:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp0tdujqxz.cpp:21:5: error: expected ')' before 'return'\n\
    /tmp/tmp0tdujqxz.cpp: In function 'int main()':\n/tmp/tmp0tdujqxz.cpp:24:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0tdujqxz.cpp:2:\n/tmp/tmp0tdujqxz.cpp:25:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmp0tdujqxz.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmp0tdujqxz.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmp0tdujqxz.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp0tdujqxz.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmp0tdujqx"
  stdout: ''
