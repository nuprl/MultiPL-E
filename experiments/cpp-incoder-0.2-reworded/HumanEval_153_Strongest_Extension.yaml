name: HumanEval_153_Strongest_Extension
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the name\
  \ of a class (a string) and a vector of extensions.\n// The extensions are to be\
  \ used to load additional classes to the class. The\n// strength of the extension\
  \ is as follows: Let CAP be the number of the uppercase\n// letters in the extension's\
  \ name, and let SM be the number of lowercase letters \n// in the extension's name,\
  \ the strength is given by the fraction CAP - SM. \n// You should find the strongest\
  \ extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
  // If there are two or more extensions with the same strength, you should\n// choose\
  \ the one that comes first in the vector.\n// For example, if you are given \"Slices\"\
  \ as the class and a vector of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
  \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
  \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"\
  my_class\"), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\"\
  , (std::string)\"CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string\
  \ class_name, std::vector<std::string> extensions) {\n"
tests: "}\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
  Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
  , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
  Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\"\
  , (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
  ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
  t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\", (std::string)\"\
  NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"));\n   \
  \ assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"Ta\", (std::string)\"\
  TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"}))) == (\"K.TAR\"));\n  \
  \  assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"Tab\"\
  , (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"}))) == (\"\
  __HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
  HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
  Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
  finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
  NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"));\n\
  \    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"Bb\", (std::string)\"\
  91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"), (std::vector<std::string>({(std::string)\"\
  671235\", (std::string)\"Bb\"}))) == (\"Sp.671235\"));\n}\n"
completions: ["    // Write your code here\n    std::string strongest_extension;\n\
    \    int cap_extension = 0;\n    int sm_extension = 0;\n    for (auto &extension\
    \ : extensions) {\n        if (extension.at(0) == class_name[0]) {\n         \
    \   cap_extension++;\n        }\n        if (extension.at(1) == class_name[1])\
    \ {\n            sm_extension++;\n        }\n    }\n    if (cap_extension - sm_extension\
    \ > 0) {\n        strongest_extension = class_name + extensions[cap_extension\
    \ - sm_extension];\n    }\n    return strongest_extension;", "    // Your code\
    \ here\n    \n    std::string strongest_extension = \"\";\n    \n    int cap_extension\
    \ = 0;\n    int sm_extension = 0;\n    \n    for(auto extension : extensions)\
    \ {\n        cap_extension = std::count_if(extension.begin(), extension.end(),\
    \ [](char c){ return std::isupper(c); });\n        sm_extension = std::count_if(extension.begin(),\
    \ extension.end(), [](char c){ return std::islower(c); });\n        \n       \
    \ float strength = cap_extension - sm_extension;\n        \n        if(strength\
    \ > 0) {\n            strongest_extension = class_name + \".\" + extension;\n\
    \            break;\n        }\n    }\n    \n    return strongest_extension;",
  "    // Your code here\n    \n    std::string strongest_extension = \"\";\n    int\
    \ strongest_extension_strength = 0;\n    \n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        int extension_strength = extensions[i].length() - extensions[i].find_first_not_of(\"\
    \ \");\n        if (extension_strength > strongest_extension_strength) {\n   \
    \         strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension;",
  "    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &extension : extensions) {\n        cap += (extension.at(0) - 'A');\n\
    \        sm += (extension.at(1) - 'a');\n    }\n    float strength = cap - sm;\n\
    \    int index = 0;\n    for (auto &extension : extensions) {\n        if (extension.at(0)\
    \ == class_name.at(0)) {\n            if (strength > index) {\n              \
    \  strongest_extension = class_name + \".\" + extension;\n                break;\n\
    \            }\n            index++;\n        }\n    }\n    return strongest_extension;",
  "    // Your code here\n    \n    std::string strongest_extension = \"\";\n    int\
    \ strongest_extension_strength = 0;\n    \n    for (auto &extension : extensions)\
    \ {\n        int extension_strength = extension.size()-extension.find_first_not_of(std::string(\"\
    \"));\n        if (extension_strength > strongest_extension_strength) {\n    \
    \        strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto &extension : extensions) {\n        cap\
    \ += extension.at(0) - 'A';\n        sm += extension.at(1) - 'a';\n    }\n   \
    \ if (cap - sm == 0) {\n        strongest_extension = class_name;\n    } else\
    \ {\n        strongest_extension = class_name + extensions[extensions.size() -\
    \ 1] + std::to_string(cap - sm);\n    }\n    return strongest_extension;", " \
    \   std::string strongest_extension;\n    int cap_counter = 0;\n    int sm_counter\
    \ = 0;\n    for (auto extension : extensions) {\n        cap_counter += extension.at(0)\
    \ - 'A';\n        sm_counter += extension.at(1) - 'a';\n    }\n    if (cap_counter\
    \ > sm_counter) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    } else {\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap_counter = 0;\n    int sm_counter = 0;\n  \
    \  for(auto &extension : extensions) {\n        if(extension.at(0) == class_name[0])\
    \ {\n            cap_counter++;\n        }\n        if(extension.at(1) == class_name[1])\
    \ {\n            sm_counter++;\n        }\n    }\n    double strength = cap_counter\
    \ - sm_counter;\n    double strength_percentage = strength / cap_counter;\n  \
    \  double strength_percentage_rounded = round(strength_percentage);\n    double\
    \ strength_percentage_rounded_down = floor(strength_percentage_rounded);\n   \
    \ double strength_percentage_rounded_up = ceil(strength_percentage_rounded);\n\
    \    double strength_percentage_rounded_down = round(strength_percentage_rounded);\n\
    \    if(strength_percentage_rounded_down == strength_percentage_rounded) {\n \
    \       strongest_extension = class_name + \".\" + extensions[0];\n    }\n   \
    \ else if(strength_percentage_rounded_up == strength_percentage_rounded) {\n \
    \       strongest_extension = class_name + \".\" + extensions[2];\n    }\n   \
    \ else {\n        strongest_extension = class_name + \".\" + extensions[strength_percentage_rounded_down];\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    \n\
    \    std::string strongest_extension = \"\";\n    \n    for(int i = 0; i < extensions.size();\
    \ i++){\n        std::string extension = extensions[i];\n        \n        for(int\
    \ j = 0; j < extension.size(); j++){\n            char c = extension[j];\n   \
    \         \n            if(c == toupper(extension[j])){\n                strongest_extension\
    \ += c;\n            }\n        }\n    }\n    \n    return class_name + \".\"\
    \ + strongest_extension;", "    int cap_letters = 0, sm_letters = 0;\n    for\
    \ (auto &ext : extensions) {\n        cap_letters += ext.length();\n        sm_letters\
    \ += ext.length();\n    }\n    int strength = cap_letters - sm_letters;\n    if\
    \ (strength > 0) {\n        auto it = std::min_element(extensions.begin(), extensions.end(),\
    \ \n            [](std::string a, std::string b) { return a.length() < b.length();\
    \ });\n        std::string extension = class_name + \".\" + extensions[it - extensions.begin()];\n\
    \        return extension;\n    }\n    return class_name;", "    // Your code\
    \ here\n    \n    std::string strongest_extension = \"\";\n    int strongest_extension_strength\
    \ = 0;\n    \n    for (auto extension : extensions) {\n        auto cap = extension.find_first_of('A');\n\
    \        auto sm = extension.find_first_of('l');\n        auto strength = cap\
    \ - sm;\n        if (strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    \n    return class_name + \".\" + strongest_extension;", "    // Write your\
    \ code here\n    std::string strongest_extension = \"\";\n    int cap_num = 0,\
    \ sm_num = 0;\n    for (auto &ext : extensions) {\n        cap_num += ext.length();\n\
    \        sm_num += ext.length() - 1;\n    }\n    float strength = cap_num - sm_num;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto &ext : extensions) {\n        if (ext.length() == strongest_extension.length())\
    \ {\n            if (ext.compare(0, strongest_extension.length(), strongest_extension)\
    \ == 0) {\n                strongest_extension = class_name + \".\" + ext;\n \
    \           }\n        }\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension = \"\";\n    int cap_counter\
    \ = 0;\n    int sm_counter = 0;\n    for (auto &extension : extensions) {\n  \
    \      if (extension.at(0) == class_name[0]) {\n            cap_counter++;\n \
    \       }\n        if (extension.at(1) == class_name[1]) {\n            sm_counter++;\n\
    \        }\n    }\n    if (cap_counter > sm_counter) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    else {\n        strongest_extension\
    \ = class_name + \".\" + extensions[1];\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension;\n    int cap_counter\
    \ = 0;\n    int sm_counter = 0;\n    for (auto &extension : extensions) {\n  \
    \      if (extension.at(0) == class_name[0]) {\n            cap_counter++;\n \
    \       }\n        if (extension.at(1) == class_name[1]) {\n            sm_counter++;\n\
    \        }\n    }\n    if (cap_counter > sm_counter) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    else {\n        strongest_extension\
    \ = class_name + \".\" + extensions[1];\n    }\n    return strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    int cap_counter\
    \ = 0;\n    int sm_counter = 0;\n    for (auto e : extensions) {\n        if (e.at(0)\
    \ == class_name[0]) {\n            cap_counter++;\n        }\n        if (e.at(1)\
    \ == class_name[1]) {\n            sm_counter++;\n        }\n    }\n    if (cap_counter\
    \ > sm_counter) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else {\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    }\n    return strongest_extension;", "    // Your code here\n    \n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    \n    for\
    \ (int i = 0; i < extensions.size(); i++) {\n        cap = extensions[i].size();\n\
    \        sm = cap - 1;\n        if (cap > sm) {\n            strongest_extension\
    \ = class_name + \".\" + extensions[i];\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto i : extensions) {\n        cap += i[0]-'A';\n\
    \        sm += i[1]-'a';\n    }\n    float strength = cap - sm;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else {\n        for (auto i : extensions) {\n            if (i[0]\
    \ == extensions[0][0] && i[1] == extensions[0][1]) {\n                strongest_extension\
    \ = class_name + \".\" + i;\n                break;\n            }\n        }\n\
    \    }\n    return strongest_extension;", "    int cap_num = 0, sm_num = 0;\n\
    \    for (auto &ext : extensions) {\n        cap_num += ext.length();\n      \
    \  sm_num += ext.length() - ext.find_first_not_of(ext.begin(), ext.end());\n \
    \   }\n    int cap = cap_num / sm_num;\n    int sm = cap_num - cap * sm_num;\n\
    \    int strength = cap - sm;\n    for (auto &ext : extensions) {\n        if\
    \ (ext.length() == cap) {\n            if (strength > 0) {\n                return\
    \ class_name + \".\" + ext;\n            }\n        }\n    }\n    return class_name;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    std::string\
    \ extension_strength = \"\";\n    std::string extension_class = \"\";\n    std::string\
    \ extension_class_name = \"\";\n    std::string extension_class_name_with_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_strength = \"\"\
    ;\n    std::string extension_class_name_with_extension_class = \"\";\n    std::string\
    \ extension_class_name_with_extension_class_name = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_strength\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_strength\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_strength\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_strength\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_strength\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap +=\
    \ ext.length();\n        sm += ext.length();\n    }\n    float strength = cap\
    \ - sm;\n    int index = std::distance(extensions.begin(), std::max_element(extensions.begin(),\
    \ extensions.end(), [&](std::string a, std::string b) { return a.length() < b.length();\
    \ }));\n    if (strength == -1) {\n        strongest_extension = class_name;\n\
    \    } else {\n        strongest_extension = class_name + \".\" + extensions[index];\n\
    \    }\n    return strongest_extension;", "    std::string strongest_extension\
    \ = class_name;\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions)\
    \ {\n        cap += ext.length();\n        sm += ext.length();\n    }\n    float\
    \ strength = cap - sm;\n    for (auto &ext : extensions) {\n        if (ext.length()\
    \ > strongest_extension.length()) {\n            strongest_extension = class_name\
    \ + ext;\n        }\n    }\n    return strongest_extension;", "    std::string\
    \ strongest_extension = \"\";\n    int cap_extensions = 0;\n    int sm_extensions\
    \ = 0;\n    for (auto extension : extensions) {\n        cap_extensions += std::count(extension.begin(),\
    \ extension.end(), std::toupper(extension[0]));\n        sm_extensions += std::count(extension.begin(),\
    \ extension.end(), std::tolower(extension[0]));\n    }\n    double strength =\
    \ cap_extensions - sm_extensions;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto extension : extensions)\
    \ {\n        if (std::count(extension.begin(), extension.end(), std::toupper(extension[0]))\
    \ > 1) {\n            strongest_extension = class_name + \".\" + extension;\n\
    \            break;\n        }\n    }\n    return strongest_extension;", "   \
    \ // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap_counter = 0;\n    int sm_counter = 0;\n    for (auto &ext : extensions)\
    \ {\n        if (ext.length() > cap_counter) {\n            cap_counter = ext.length();\n\
    \        }\n        if (ext.length() < sm_counter) {\n            sm_counter =\
    \ ext.length();\n        }\n    }\n    float strength = cap_counter - sm_counter;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (int i = 1; i < extensions.size(); i++) {\n        if (extensions[i].length()\
    \ > cap_counter) {\n            cap_counter = extensions[i].length();\n      \
    \  }\n        if (extensions[i].length() < sm_counter) {\n            sm_counter\
    \ = extensions[i].length();\n        }\n    }\n    strength = cap_counter - sm_counter;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (int i = 1; i < extensions.size(); i++) {\n        if (extensions[i].length()\
    \ > cap_counter) {\n            cap_counter = extensions[i].length();\n      \
    \  }\n        if (extensions[i].length() < sm_counter) {\n            sm_counter\
    \ = extensions[i].length();\n        }\n    }\n    strength = cap_counter - sm_counter;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (int i = 1; i < extensions.size(); i++) {\n        if (extensions[i].length()\
    \ > cap_counter) {\n            cap_counter = extensions[i].length();\n      \
    \  }\n        if (extensions[i].length() < sm_counter) {\n            sm_counter\
    \ = extensions[i].length();\n        }\n    }\n    strength = cap_counter - sm_counter;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (int i = 1; i < extensions.size(); i++) {\n        if (extensions[i].length()\
    \ > cap_counter) {\n            cap_counter = extensions[i].length();\n      \
    \  }\n        if (extensions[i].length() < sm_counter) {\n            sm_counter\
    \ = extensions[i].length();\n        }\n    }\n    strength = cap_counter - sm_counter;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (int i = 1; i < extensions.size(); i++) {\n        if (extensions[i].length()\
    \ > cap_counter) {\n            cap_counter = extensions[i].length();\n      \
    \  }\n        if (extensions[i].length() < sm_counter) {\n            sm_counter\
    \ = extensions[i].length();\n        }\n    }\n    strength = cap_counter - sm_counter;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }", "    std::string strongest_extension;\n    int cap_counter = 0;\n   \
    \ int sm_counter = 0;\n    for (auto extension : extensions) {\n        if (extension.at(0)\
    \ == class_name[0]) {\n            cap_counter++;\n        }\n        if (extension.at(1)\
    \ == class_name[0]) {\n            sm_counter++;\n        }\n    }\n    if (cap_counter\
    \ > sm_counter) {\n        strongest_extension = class_name + extensions[0];\n\
    \    }\n    else {\n        strongest_extension = class_name + extensions[1];\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for(auto\
    \ e : extensions) {\n        if(e.length() > cap) {\n            cap = e.length();\n\
    \        }\n        if(e.length() < sm) {\n            sm = e.length();\n    \
    \    }\n    }\n    float strength = cap - sm;\n    for(auto e : extensions) {\n\
    \        if(e.length() == cap) {\n            if(e.compare(class_name.substr(0,\
    \ cap)) == 0) {\n                strongest_extension = class_name + e;\n     \
    \       }\n        }\n        if(e.length() == sm) {\n            if(e.compare(class_name.substr(cap,\
    \ sm)) == 0) {\n                strongest_extension = class_name + e;\n      \
    \      }\n        }\n    }\n    return strongest_extension;", "    // Your code\
    \ here\n    \n    std::string strongest_extension = class_name;\n    int strongest_extension_strength\
    \ = -1;\n    \n    for (auto extension : extensions) {\n        auto cap = extension.find_first_of('A');\n\
    \        auto sm = extension.find_first_of('l');\n        \n        if (cap !=\
    \ std::string::npos && sm != std::string::npos) {\n            int cap_strength\
    \ = cap - sm;\n            \n            if (strongest_extension_strength < cap_strength)\
    \ {\n                strongest_extension_strength = cap_strength;\n          \
    \      strongest_extension = extension;\n            }\n        }\n    }\n   \
    \ \n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    double strength = cap - sm;\n    int max_strength = -1;\n    for (auto\
    \ &ext : extensions) {\n        if (ext.length() > max_strength) {\n         \
    \   max_strength = ext.length();\n        }\n    }\n    for (auto &ext : extensions)\
    \ {\n        if (ext.length() == max_strength) {\n            if (ext.compare(0,\
    \ cap, class_name, 0, cap) == 0) {\n                strongest_extension = class_name\
    \ + ext.substr(cap);\n                break;\n            }\n        }\n    }\n\
    \    return strongest_extension;", "    int cap_num = 0, sm_num = 0;\n    for\
    \ (auto &ext : extensions) {\n        cap_num += ext.length();\n        sm_num\
    \ += ext.length() - 1;\n    }\n    float strength = cap_num - sm_num;\n    int\
    \ strongest_ext = 0;\n    for (auto &ext : extensions) {\n        if (ext.length()\
    \ > strongest_ext) {\n            strongest_ext = ext.length();\n        }\n \
    \   }\n    return class_name + \".\" + extensions[strongest_ext];", "    // Your\
    \ code here\n    std::string result;\n    std::string extension;\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n \
    \       extension = extensions[i];\n        cap = extension.find_first_of('A');\n\
    \        sm = extension.find_first_of('z');\n        if (cap != -1 && sm != -1)\
    \ {\n            int diff = cap - sm;\n            if (diff > cap - sm) {\n  \
    \              diff = cap - sm;\n            }\n            if (diff == 0) {\n\
    \                result += class_name + extension;\n            }\n        }\n\
    \    }\n    return result;", "    std::string strongest_extension = \"\";\n  \
    \  int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto &extension : extensions)\
    \ {\n        if (extension.at(0) == class_name[0]) {\n            cap_counter++;\n\
    \        }\n        if (extension.at(1) == class_name[1]) {\n            sm_counter++;\n\
    \        }\n    }\n    if (cap_counter > sm_counter) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    else {\n        strongest_extension\
    \ = class_name + \".\" + extensions[1];\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for(int i = 0; i < extensions.size(); i++) {\n\
    \        if(extensions[i].at(0) == class_name[0]) {\n            cap = cap + 1;\n\
    \        }\n        if(extensions[i].at(1) == class_name[1]) {\n            sm\
    \ = sm + 1;\n        }\n    }\n    float strength = cap - sm;\n    if(strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else if(strength < 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[extensions.size()-1];\n    }\n    return strongest_extension;",
  "    int cap_num = 0, sml_num = 0;\n    for (auto &ext : extensions) {\n       \
    \ cap_num += ext.length();\n        sml_num += ext.length() - 1;\n    }\n    double\
    \ strength = cap_num - sml_num;\n    double max_strength = std::numeric_limits<double>::max();\n\
    \    for (auto &ext : extensions) {\n        double ext_strength = ext.length();\n\
    \        if (ext_strength > max_strength) {\n            max_strength = ext_strength;\n\
    \        }\n    }\n    for (auto &ext : extensions) {\n        double ext_strength\
    \ = ext.length();\n        if (ext_strength == max_strength) {\n            return\
    \ class_name + \".\" + ext;\n        }\n    }\n    return class_name + \".\" +\
    \ extensions[0];", "    // Your code here\n    std::string strongest_extension\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto e : extensions) {\n\
    \        if (e == class_name[0]) {\n            cap = cap + 1;\n        }\n  \
    \      if (e == class_name[class_name.size() - 1]) {\n            sm = sm + 1;\n\
    \        }\n    }\n    if (cap - sm == 0) {\n        strongest_extension = class_name;\n\
    \    }\n    else {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext\
    \ : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    else {\n        std::sort(extensions.begin(),\
    \ extensions.end());\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    return strongest_extension;", "    // Your code here\n    std::string\
    \ strongest_extension;\n    int cap_counter = 0;\n    int sml_counter = 0;\n \
    \   for(auto extension : extensions) {\n        if(extension.at(0) == class_name[0])\
    \ {\n            cap_counter++;\n        }\n        if(extension.at(1) == class_name[1])\
    \ {\n            sml_counter++;\n        }\n    }\n    float strength = cap_counter\
    \ - sml_counter;\n    if(strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    else if(strength < 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[extensions.size()-1];\n    }\n    return strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto &i : extensions) {\n        cap += i[0]-'A';\n\
    \        sm += i[1]-'a';\n    }\n    float strength = cap - sm;\n    int index\
    \ = std::distance(extensions.begin(), std::max_element(extensions.begin(), extensions.end(),\
    \ [&](std::string a, std::string b) { return strength > strcmp(a.c_str(), b.c_str());\
    \ }));\n    strongest_extension = class_name + extensions[index];\n    return\
    \ strongest_extension;", "    // Write your code here\n    std::string strongest_extension\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto ext : extensions)\
    \ {\n        cap += ext.length();\n        sm += ext.length();\n    }\n    double\
    \ strength = cap - sm;\n    int index = std::distance(extensions.begin(), std::max_element(extensions.begin(),\
    \ extensions.end(), [&](std::string a, std::string b) { return a.length() < b.length();\
    \ }));\n    if (strength > 0) {\n        strongest_extension = class_name + \"\
    .\" + extensions[index];\n    }\n    return strongest_extension;", "    \n   \
    \ std::string strongest_extension = \"\";\n    \n    for(int i = 0; i < extensions.size();\
    \ i++) {\n        \n        int cap = class_name.length();\n        int sm = extensions[i].length();\n\
    \        \n        int strength = cap - sm;\n        \n        if(strength > 0)\
    \ {\n            \n            strongest_extension = class_name + \".\" + extensions[i];\n\
    \            \n            break;\n        }\n    }\n    \n    return strongest_extension;",
  "    std::string extension_strength;\n    int cap_counter = 0;\n    int sm_counter\
    \ = 0;\n    std::string extension_class;\n    for (auto &extension : extensions)\
    \ {\n        auto &extension_letter = extension[0];\n        auto &extension_letter_cap\
    \ = extension_letter[0];\n        auto &extension_letter_sm = extension_letter[1];\n\
    \        auto &extension_letter_cap_sm = extension_letter_cap[1];\n        auto\
    \ &extension_letter_counter = extension_letter[2];\n        auto &extension_letter_cap_counter\
    \ = extension_letter_cap[2];\n        auto &extension_letter_counter_sm = extension_letter[3];\n\
    \        auto &extension_letter_cap_counter_sm = extension_letter_cap[3];\n  \
    \      auto &extension_letter_counter_cap = extension_letter[4];\n        auto\
    \ &extension_letter_cap_counter_cap = extension_letter_cap[4];\n        auto &extension_letter_counter_cap_sm\
    \ = extension_letter[5];\n        auto &extension_letter_cap_counter_cap_sm =\
    \ extension_letter_cap[5];\n        auto &extension_letter_counter_cap_cap = extension_letter[6];\n\
    \        auto &extension_letter_cap_counter_cap_cap = extension_letter_cap[6];\n\
    \        auto &extension_letter_counter_cap_cap_sm = extension_letter[7];\n  \
    \      auto &extension_letter_cap_counter_cap_cap_sm = extension_letter_cap[7];\n\
    \        auto &extension_letter_counter_cap_cap_cap = extension_letter[8];\n \
    \       auto &extension_letter_cap_counter_cap_cap_cap = extension_letter_cap[8];\n\
    \        auto &extension_letter_counter_cap_cap_cap_sm = extension_letter[9];\n\
    \        auto &extension_letter_cap_counter_cap_cap_sm = extension_letter_cap[9];\n\
    \        auto &extension_letter_counter_cap_cap_cap_cap = extension_letter[10];\n\
    \        auto &extension_letter_cap_counter_cap_cap_cap = extension_letter_cap[10];\n\
    \        auto &extension_letter_counter_cap_cap_cap_sm = extension_letter[11];\n\
    \        auto &extension_letter_cap_counter_cap_cap_sm = extension_letter_cap[11];\n\
    \        auto &extension_letter_counter_cap_cap_cap_cap = extension_letter[12];\n\
    \        auto &extension_letter_cap_counter_cap_cap_cap = extension_letter_cap[12];\n\
    \        auto &extension_letter_counter_cap_cap_cap_sm = extension_letter[13];\n\
    \        auto &extension_letter_cap_counter_cap_cap_sm = extension_letter_cap[",
  "    // Write your code here\n    std::string strongest_extension;\n    int cap_counter\
    \ = 0;\n    int sm_counter = 0;\n    for (auto &extension : extensions) {\n  \
    \      cap_counter += extension.at(0) - 'A';\n        sm_counter += extension.at(1)\
    \ - 'a';\n    }\n    double strength = cap_counter - sm_counter;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else if (strength < 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[extensions.size() - 1];\n    }\n    else {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    return strongest_extension;",
  "    std::string extension_strength;\n    std::string extension_class;\n    std::string\
    \ extension_extension;\n    int extension_strength_counter = 0;\n    int extension_class_counter\
    \ = 0;\n    int extension_extension_counter = 0;\n    int extension_strength_counter2\
    \ = 0;\n    int extension_class_counter2 = 0;\n    int extension_extension_counter2\
    \ = 0;\n    int extension_strength_counter3 = 0;\n    int extension_class_counter3\
    \ = 0;\n    int extension_extension_counter3 = 0;\n    int extension_strength_counter4\
    \ = 0;\n    int extension_class_counter4 = 0;\n    int extension_extension_counter4\
    \ = 0;\n    int extension_strength_counter5 = 0;\n    int extension_class_counter5\
    \ = 0;\n    int extension_extension_counter5 = 0;\n    int extension_strength_counter6\
    \ = 0;\n    int extension_class_counter6 = 0;\n    int extension_extension_counter6\
    \ = 0;\n    int extension_strength_counter7 = 0;\n    int extension_class_counter7\
    \ = 0;\n    int extension_extension_counter7 = 0;\n    int extension_strength_counter8\
    \ = 0;\n    int extension_class_counter8 = 0;\n    int extension_extension_counter8\
    \ = 0;\n    int extension_strength_counter9 = 0;\n    int extension_class_counter9\
    \ = 0;\n    int extension_extension_counter9 = 0;\n    int extension_strength_counter10\
    \ = 0;\n    int extension_class_counter10 = 0;\n    int extension_extension_counter10\
    \ = 0;\n    int extension_strength_counter11 = 0;\n    int extension_class_counter11\
    \ = 0;\n    int extension_extension_counter11 = 0;\n    int extension_strength_counter12\
    \ = 0;\n    int extension_class_counter12 = 0;\n    int extension_extension_counter12\
    \ = 0;\n    int extension_strength_counter13 = 0;\n    int extension_class_counter13\
    \ = 0;\n    int extension_extension_counter13 = 0;\n    int extension_strength_counter14\
    \ = 0;\n    int extension_class_counter14 = 0;\n    int extension_extension_counter14\
    \ = 0;\n    int extension_strength_counter15 = 0;\n    int extension_class_counter15\
    \ = 0;\n    int extension_extension_counter15 = 0;\n    int extension_strength_counter16\
    \ = 0;\n    int extension_class_counter16 = 0;\n    int extension_extension_counter16\
    \ = 0;\n    int extension_strength_counter17 = 0;\n    int extension_class_counter17\
    \ = 0;\n    int extension_extension_counter17 = 0;\n    int extension_strength_counter18\
    \ = 0;\n    int extension_class_counter18 = 0;\n    int extension_extension_counter18\
    \ = 0;\n    int extension_strength_counter19 = 0;\n    int extension_class_counter19\
    \ = 0;\n    int extension_extension_counter19 = 0;\n    int extension_strength_counter20\
    \ = 0;\n    int extension_", "    // Write your code here\n    std::string strongest_extension\
    \ = \"\";\n    int cap_counter = 0;\n    int sm_counter = 0;\n    for(auto extension\
    \ : extensions) {\n        if(extension.at(0) == class_name[0]) {\n          \
    \  cap_counter++;\n        }\n        if(extension.at(1) == class_name[1]) {\n\
    \            sm_counter++;\n        }\n    }\n    if(cap_counter > sm_counter)\
    \ {\n        strongest_extension = class_name + \".\" + extensions[0];\n    }\n\
    \    else {\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    \n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    \n    for (auto i : extensions) {\n        cap += i[0]-'A';\n        sm +=\
    \ i[1]-'a';\n    }\n    \n    double strength = cap - sm;\n    \n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    \n    for (auto i : extensions) {\n        if (i[0] == i[1]) {\n \
    \           continue;\n        }\n        \n        double strength_i = cap -\
    \ sm;\n        \n        if (strength_i > strength) {\n            strongest_extension\
    \ = class_name + \".\" + i;\n            strength = strength_i;\n        }\n \
    \   }\n    \n    return strongest_extension;", "    int cap = class_name.size();\n\
    \    int sm = extensions.size();\n    int strength = cap - sm;\n    std::string\
    \ strongest_extension = \"\";\n    for (int i = 0; i < sm; i++) {\n        if\
    \ (strength > 0) {\n            strongest_extension += class_name + \".\" + extensions[i];\n\
    \            strength--;\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension;\n    int cap\
    \ = class_name.size();\n    int sm = extensions.size();\n    int strength = cap\
    \ - sm;\n    \n    for(int i = 0; i < extensions.size(); i++){\n        if(extensions[i].compare(class_name)\
    \ == 0){\n            strongest_extension = class_name + extensions[i];\n    \
    \        break;\n        }\n    }\n    \n    if(strongest_extension.compare(class_name)\
    \ == 0){\n        for(int i = 0; i < extensions.size(); i++){\n            if(extensions[i].compare(class_name)\
    \ == 0){\n                strongest_extension = class_name + extensions[i];\n\
    \                break;\n            }\n        }\n    }\n    \n    return strongest_extension;",
  "    std::string result;\n    int cap = class_name.size();\n    int sm = extensions.size();\n\
    \    int strength = cap - sm;\n    int i = 0;\n    while (i < extensions.size()\
    \ && extensions[i].size() == cap) {\n        if (extensions[i].compare(class_name.substr(0,\
    \ cap)) == 0) {\n            result += class_name + \".\" + extensions[i];\n \
    \           i++;\n        } else if (extensions[i].compare(class_name.substr(0,\
    \ cap)) == 0) {\n            result += class_name + \".\" + extensions[i];\n \
    \           i++;\n        } else if (extensions[i].compare(class_name.substr(0,\
    \ cap)) == 0) {\n            result += class_name + \".\" + extensions[i];\n \
    \           i++;\n        } else if (extensions[i].compare(class_name.substr(0,\
    \ cap)) == 0) {\n            result += class_name + \".\" + extensions[i];\n \
    \           i++;\n        } else if (extensions[i].compare(class_name.substr(0,\
    \ cap)) == 0) {\n            result += class_name + \".\" + extensions[i];\n \
    \           i++;\n        } else if (extensions[i].compare(class_name.substr(0,\
    \ cap)) == 0) {\n            result += class_name + \".\" + extensions[i];\n \
    \           i++;\n        } else if (extensions[i].compare(class_name.substr(0,\
    \ cap)) == 0) {\n            result += class_name + \".\" + extensions[i];\n \
    \           i++;\n        } else if (extensions[i].compare(class_name.substr(0,\
    \ cap)) == 0) {\n            result += class_name + \".\" + extensions[i];\n \
    \           i++;\n        } else if (extensions[i].compare(class_name.substr(0,\
    \ cap)) == 0) {\n            result += class_name + \".\" + extensions[i];\n \
    \           i++;\n        } else if (extensions[i].compare(class_name.substr(0,\
    \ cap)) == 0) {\n            result += class_name + \".\" + extensions[i];\n \
    \           i++;\n        } else if (extensions[i].compare(class_name.substr(0,\
    \ cap)) == 0) {\n            result += class_name + \".\" + extensions[i];\n \
    \           i++;\n        } else if (extensions[i].compare(class_name.substr(0,\
    \ cap)) == 0) {\n            result += class_name + \".\" + extensions[i];\n \
    \           i++;\n        } else if (extensions[i].compare(class_name.substr(0,\
    \ cap)) == 0) {\n            result += class_name + \".\" + extensions[i];\n \
    \           i++;\n        } else if (extensions[i].compare(class_name.substr(0,\
    \ cap)) == 0) {\n            result += class_name + \".\" + extensions[i];\n \
    \           i++;\n        } else if (extensions[i].compare(class_name.substr(0,\
    \ cap)) == 0) {\n            result += class_name + \".\" + extensions[i];\n \
    \           i++;\n        } else if (extensions[i].compare(class_name.substr(0,\
    \ cap)) == 0) {\n            result += class_name + \".\" + extensions[i];\n \
    \           i++;\n        } else if (extensions[i].compare(class_name.substr(0,\
    \ cap)) == 0) {\n            result += class_name + \".\" + extensions[i];\n \
    \           i++;\n        } else if (extensions[i].compare(class_name.substr(0,\
    \ cap)", "    std::string strongest_extension = \"\";\n    int cap_extension =\
    \ 0;\n    int sml_extension = 0;\n    for (auto extension : extensions) {\n  \
    \      cap_extension += std::toupper(extension[0]) - std::toupper(extension[1]);\n\
    \        sml_extension += std::tolower(extension[0]) - std::tolower(extension[1]);\n\
    \    }\n    float strength = cap_extension - sml_extension;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    if (extensions.size() > 1) {\n        for (auto extension : extensions)\
    \ {\n            if (strength > 0) {\n                if (strongest_extension.length()\
    \ < extension.length()) {\n                    strongest_extension = class_name\
    \ + \".\" + extension;\n                }\n            }\n        }\n    }\n \
    \   return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &extension : extensions) {\n        cap += extension.at(0);\n        sm += extension.at(1);\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto &extension : extensions)\
    \ {\n        if (strength > 0) {\n            if (extension.at(0) != extension.at(1))\n\
    \                strongest_extension = class_name + \".\" + extensions[0];\n \
    \       }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap_counter = 0;\n    int\
    \ sm_counter = 0;\n    for (auto extension : extensions) {\n        if (extension.at(0)\
    \ == class_name.at(0)) {\n            cap_counter++;\n        }\n        if (extension.at(1)\
    \ == class_name.at(1)) {\n            sm_counter++;\n        }\n    }\n    if\
    \ (cap_counter > sm_counter) {\n        strongest_extension = class_name + \"\
    .\" + extensions[0];\n    }\n    else {\n        strongest_extension = class_name\
    \ + \".\" + extensions[1];\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension = \"\";\n    int cap = 0;\n\
    \    int sm = 0;\n    for(auto i : extensions) {\n        cap += i[0]-'A';\n \
    \       sm += i[1]-'a';\n    }\n    float strength = cap - sm;\n    if(strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for(auto i : extensions) {\n        if(strength > i[0]-'A' && strength\
    \ < i[0]-'a') {\n            strongest_extension = class_name + \".\" + i;\n \
    \       }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto e : extensions) {\n        cap += e.size();\n        sm += e.size();\n\
    \    }\n    float strength = cap - sm;\n    for(auto e : extensions) {\n     \
    \   if(e.size() == strength) {\n            strongest_extension += class_name\
    \ + e;\n        }\n    }\n    return strongest_extension;", "    // Your code\
    \ here\n    std::string result;\n    std::string extension;\n    int cap = 0;\n\
    \    int sm = 0;\n    for (auto &i : extensions) {\n        cap += i[0]-'A';\n\
    \        sm += i[1]-'a';\n    }\n    float strength = cap - sm;\n    if (strength\
    \ > 0) {\n        for (auto &i : extensions) {\n            if (i[0] == class_name[0]\
    \ && i[1] == class_name[1]) {\n                result = class_name + \".\" + i;\n\
    \                break;\n            }\n        }\n    }\n    if (result.empty())\
    \ {\n        for (auto &i : extensions) {\n            if (i[0] == class_name[0]\
    \ && i[1] == class_name[1]) {\n                result = class_name + \".\" + i;\n\
    \                break;\n            }\n        }\n    }\n    return result;",
  "    // Write your code here\n    \n    std::string strongest_extension = \"\";\n\
    \    int cap = 0;\n    int sm = 0;\n    \n    for (auto extension : extensions)\
    \ {\n        cap += extension.at(0);\n        sm += extension.at(1);\n    }\n\
    \    \n    float strength = cap - sm;\n    \n    for (auto extension : extensions)\
    \ {\n        if ((extension.at(0) >= cap) && (extension.at(1) >= sm)) {\n    \
    \        strongest_extension = class_name + \".\" + extension.at(0);\n       \
    \     break;\n        }\n    }\n    \n    return strongest_extension;", "    //\
    \ Your code here\n    \n    // Write your code here\n    \n    return class_name\
    \ + \".\" + extensions[0];", "    std::string strongest_extension = \"\";\n  \
    \  int cap_letters = 0;\n    int sm_letters = 0;\n    for (auto &extension : extensions)\
    \ {\n        cap_letters += std::count(extension.begin(), extension.end(), std::toupper(extension[0]));\n\
    \        sm_letters += std::count(extension.begin(), extension.end(), std::tolower(extension[0]));\n\
    \    }\n    int strength = cap_letters - sm_letters;\n    if (strength > 0) {\n\
    \        strongest_extension = class_name + \".\" + extensions[0];\n    }\n  \
    \  for (auto &extension : extensions) {\n        if (std::count(extension.begin(),\
    \ extension.end(), std::toupper(extension[0])) > strength) {\n            strongest_extension\
    \ = class_name + \".\" + extension;\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap +=\
    \ ext.length();\n        sm += ext.length();\n    }\n    float strength = cap\
    \ - sm;\n    int index = std::distance(extensions.begin(), std::min_element(extensions.begin(),\
    \ extensions.end(), [&](std::string a, std::string b) { return a.length() < b.length();\
    \ }));\n    strongest_extension = class_name + \".\" + extensions[index];\n  \
    \  return strongest_extension;", "    // Your code here\n    std::string strongest_extension;\n\
    \    int cap_extensions = 0;\n    int sm_extensions = 0;\n    for (auto extension\
    \ : extensions) {\n        cap_extensions += std::toupper(extension[0]) - std::toupper(extension[1]);\n\
    \        sm_extensions += std::tolower(extension[0]) - std::tolower(extension[1]);\n\
    \    }\n    double strength = cap_extensions - sm_extensions;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else if (strength < 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[extensions.size() - 1];\n    }\n    return strongest_extension;",
  "    int cap_num = 0, sm_num = 0;\n    for (auto &ext : extensions) {\n        cap_num\
    \ += ext.length();\n        sm_num += ext.length();\n    }\n    double strength\
    \ = cap_num - sm_num;\n    int max_strength = 0;\n    for (auto &ext : extensions)\
    \ {\n        if (ext.length() > max_strength) {\n            max_strength = ext.length();\n\
    \        }\n    }\n    if (max_strength == 0) {\n        return class_name;\n\
    \    }\n    int max_index = -1;\n    for (auto &ext : extensions) {\n        if\
    \ (ext.length() == max_strength) {\n            max_index = extensions.find(ext);\n\
    \        }\n    }\n    if (max_index == -1) {\n        return class_name;\n  \
    \  }\n    std::string strongest_ext = \"\";\n    for (int i = 0; i < max_index;\
    \ i++) {\n        strongest_ext += extensions[i];\n    }\n    return class_name\
    \ + \".\" + strongest_ext;", "    std::string strongest_extension = \"\";\n  \
    \  int cap_counter = 0;\n    int sm_counter = 0;\n    std::string class_name_copy\
    \ = class_name;\n    for(auto extension : extensions) {\n        cap_counter +=\
    \ extension.at(0) - 'A';\n        sm_counter += extension.at(1) - 'a';\n    }\n\
    \    double strength = cap_counter - sm_counter;\n    for(auto extension : extensions)\
    \ {\n        if(extension.at(0) - 'A' == cap_counter) {\n            strongest_extension\
    \ += class_name_copy + \".\" + extension.at(1);\n        }\n    }\n    if(strongest_extension.empty())\
    \ {\n        std::cout << \"No extensions found!\" << std::endl;\n    }\n    return\
    \ strongest_extension;", "    // Your code here\n    \n    std::string strongest_extension\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    \n    for (auto &extension :\
    \ extensions) {\n        cap += (extension.size()-1);\n        sm += (extension.size()-1);\n\
    \    }\n    \n    float strength = cap - sm;\n    \n    for (auto &extension :\
    \ extensions) {\n        if ((extension.size()-1) == cap) {\n            strongest_extension\
    \ = class_name + \".\" + extension;\n        }\n    }\n    \n    return strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto e : extensions) {\n        cap += e[0]-'A';\n\
    \        sm += e[1]-'a';\n    }\n    if (cap - sm > 0)\n        strongest_extension\
    \ = class_name + extensions[0];\n    else\n        strongest_extension = class_name\
    \ + extensions[extensions.size()-1];\n    return strongest_extension;", "    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // ", "    std::string strongest_extension;\n    double\
    \ strength = -1;\n    double cap_strength = -1;\n    double sm_strength = -1;\n\
    \    double total_strength = -1;\n    for (auto &extension : extensions) {\n \
    \       cap_strength = std::count_if(extension.begin(), extension.end(), [](char\
    \ c) {\n            return std::toupper(c) == c;\n        });\n        sm_strength\
    \ = std::count_if(extension.begin(), extension.end(), [](char c) {\n         \
    \   return std::tolower(c) == c;\n        });\n        total_strength = cap_strength\
    \ - sm_strength;\n        if (total_strength > strength) {\n            strongest_extension\
    \ = class_name + \".\" + extension;\n            strength = total_strength;\n\
    \        }\n    }\n    return strongest_extension;", "    // Your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap_extension = 0;\n   \
    \ int sml_extension = 0;\n    for (auto extension : extensions) {\n        cap_extension\
    \ += (extension.at(0) - 'A');\n        sml_extension += (extension.at(1) - 'a');\n\
    \    }\n    double strength = cap_extension - sml_extension;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto extension : extensions) {\n        if (strength == (extension.at(0)\
    \ - 'A') - (extension.at(1) - 'a')) {\n            strongest_extension = class_name\
    \ + \".\" + extension;\n        }\n    }\n    return strongest_extension;", " \
    \   // Write your code here\n    std::string strongest_extension = \"\";\n   \
    \ int cap = 0;\n    int sm = 0;\n    for (auto &extension : extensions) {\n  \
    \      cap += extension.at(0) - 'A';\n        sm += extension.at(1) - 'a';\n \
    \   }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto &extension : extensions)\
    \ {\n        if (strength > 0) {\n            if (extension.at(0) - 'A' > strongest_extension.at(0)\
    \ - 'A') {\n                strongest_extension = class_name + \".\" + extension;\n\
    \            }\n        }\n    }\n    return strongest_extension;", "    int cap_num\
    \ = 0, sm_num = 0;\n    for (auto &ext : extensions) {\n        cap_num += ext.length();\n\
    \        sm_num += ext.length();\n    }\n    float strength = (float)cap_num -\
    \ sm_num;\n    int max_strength = -1;\n    for (auto &ext : extensions) {\n  \
    \      if (ext.length() > max_strength) {\n            max_strength = ext.length();\n\
    \        }\n    }\n    for (auto &ext : extensions) {\n        if (ext.length()\
    \ == max_strength) {\n            if (ext.compare(0, cap_num - sm_num, class_name.c_str())\
    \ == 0) {\n                return class_name + \".\" + ext;\n            }\n \
    \       }\n    }\n    return class_name + \".\" + extensions[0];", "    // Write\
    \ your code here\n    std::string strongest_extension;\n    int cap_extension\
    \ = class_name.size();\n    int sm_extension = class_name.size();\n    for (auto\
    \ extension : extensions) {\n        cap_extension = std::count_if(extension.begin(),\
    \ extension.end(), [](char c) {return std::toupper(c) == c; });\n        sm_extension\
    \ = std::count_if(extension.begin(), extension.end(), [](char c) {return std::tolower(c)\
    \ == c; });\n    }\n    float strength = cap_extension - sm_extension;\n    if\
    \ (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else if (strength < 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[extensions.size()-1];\n    }\n    return strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    double\
    \ strength = 0;\n    for (auto &extension : extensions) {\n        double extension_strength\
    \ = std::count_if(extension.begin(), extension.end(), [](char c) {\n         \
    \   return std::isupper(c);\n        }) / extension.size();\n        if (extension_strength\
    \ > strength) {\n            strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    std::string strongest_extension = \"\";\n    int cap_counter = 0;\n    int\
    \ sm_counter = 0;\n    for (auto extension : extensions) {\n        if (extension.at(0)\
    \ == class_name.at(0)) {\n            cap_counter++;\n        }\n        if (extension.at(1)\
    \ == class_name.at(0)) {\n            sm_counter++;\n        }\n    }\n    if\
    \ (cap_counter > sm_counter) {\n        strongest_extension = class_name + \"\
    .\" + extensions[0];\n    }\n    else {\n        strongest_extension = class_name\
    \ + \".\" + extensions[1];\n    }\n    return strongest_extension;", "    int\
    \ cap = class_name.size();\n    int sm = extensions.size();\n    int strength\
    \ = cap - sm;\n    std::string strongest_extension = \"\";\n    \n    for(int\
    \ i = 0; i < extensions.size(); i++) {\n        std::string extension = extensions[i];\n\
    \        \n        if(extension.compare(class_name, cap - sm, cap - sm) == 0)\
    \ {\n            strongest_extension = extension;\n            break;\n      \
    \  }\n    }\n    \n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto e : extensions) {\n        cap += e[0]-'A';\n        sm += e[1]-'a';\n\
    \    }\n    float strength = cap - sm;\n    for(auto e : extensions) {\n     \
    \   if(e[0]-'A' == cap && e[1]-'a' == sm) {\n            strongest_extension =\
    \ class_name + \".\" + e;\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension;\n    int cap_counter\
    \ = 0;\n    int sm_counter = 0;\n    for(auto &extension : extensions) {\n   \
    \     if(extension.at(0) == class_name[0]) {\n            cap_counter++;\n   \
    \     }\n        if(extension.at(1) == class_name[1]) {\n            sm_counter++;\n\
    \        }\n    }\n    float strength = cap_counter - sm_counter;\n    if(strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else if(strength < 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[extensions.size()-1];\n    }\n    return strongest_extension;",
  "    int cap_num = 0, sm_num = 0;\n    for (auto ext : extensions) {\n        cap_num\
    \ += ext.length();\n        sm_num += ext.length();\n    }\n    double strength\
    \ = cap_num - sm_num;\n    int strongest_ext = 0;\n    for (auto ext : extensions)\
    \ {\n        if (ext.length() > strongest_ext) {\n            strongest_ext =\
    \ ext.length();\n        }\n    }\n    return class_name + \".\" + extensions[strongest_ext];",
  "    int cap_num = 0, sm_num = 0;\n    for (auto &ext : extensions) {\n        cap_num\
    \ += ext.length();\n        sm_num += ext.length() - 1;\n    }\n    double strength\
    \ = cap_num - sm_num;\n    double max_strength = -1;\n    for (auto &ext : extensions)\
    \ {\n        double ext_strength = ext.length() - 1;\n        if (ext_strength\
    \ > max_strength) {\n            max_strength = ext_strength;\n        }\n   \
    \ }\n    if (max_strength == -1) {\n        return class_name;\n    }\n    double\
    \ max_strength_frac = max_strength / cap_num;\n    double min_strength_frac =\
    \ max_strength_frac / sm_num;\n    double max_strength_frac_rounded = round(max_strength_frac);\n\
    \    double min_strength_frac_rounded = round(min_strength_frac);\n    std::string\
    \ max_strength_frac_str = std::to_string(max_strength_frac_rounded);\n    std::string\
    \ min_strength_frac_str = std::to_string(min_strength_frac_rounded);\n    std::string\
    \ max_strength_frac_str = max_strength_frac_str.substr(0, max_strength_frac_str.length()\
    \ - 1);\n    std::string min_strength_frac_str = min_strength_frac_str.substr(0,\
    \ min_strength_frac_str.length() - 1);\n    return class_name + \".\" + max_strength_frac_str\
    \ + \".\" + min_strength_frac_str;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ e : extensions) {\n        cap += e.size();\n        sm += e.size();\n    }\n\
    \    float strength = cap - sm;\n    for (auto e : extensions) {\n        if (e.size()\
    \ == strongest_extension.size()) {\n            if (e.size() > strongest_extension.size())\
    \ {\n                strongest_extension = e;\n            }\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;", "    // Your code here\n\
    \    \n    std::string strongest_extension = \"\";\n    int cap_counter = 0;\n\
    \    int sm_counter = 0;\n    \n    for (int i = 0; i < extensions.size(); i++)\
    \ {\n        if (extensions[i].at(0) == class_name[0]) {\n            cap_counter++;\n\
    \        }\n        if (extensions[i].at(1) == class_name[1]) {\n            sm_counter++;\n\
    \        }\n    }\n    \n    if (cap_counter > sm_counter) {\n        strongest_extension\
    \ = class_name + extensions[cap_counter];\n    }\n    else {\n        strongest_extension\
    \ = class_name + extensions[sm_counter];\n    }\n    \n    return strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto e : extensions) {\n        if (e.size()\
    \ > cap) {\n            cap = e.size();\n        }\n        if (e.size() < sm)\
    \ {\n            sm = e.size();\n        }\n    }\n    float strength = cap -\
    \ sm;\n    if (strength > 0) {\n        strongest_extension = class_name + \"\
    .\" + extensions[0];\n    }\n    for (auto e : extensions) {\n        if (e.size()\
    \ > cap) {\n            cap = e.size();\n        }\n        if (e.size() < sm)\
    \ {\n            sm = e.size();\n        }\n    }\n    float strength = cap -\
    \ sm;\n    if (strength > 0) {\n        strongest_extension = class_name + \"\
    .\" + extensions[0];\n    }\n    for (auto e : extensions) {\n        if (e.size()\
    \ > cap) {\n            cap = e.size();\n        }\n        if (e.size() < sm)\
    \ {\n            sm = e.size();\n        }\n    }\n    float strength = cap -\
    \ sm;\n    if (strength > 0) {\n        strongest_extension = class_name + \"\
    .\" + extensions[0];\n    }\n    for (auto e : extensions) {\n        if (e.size()\
    \ > cap) {\n            cap = e.size();\n        }\n        if (e.size() < sm)\
    \ {\n            sm = e.size();\n        }\n    }\n    float strength = cap -\
    \ sm;\n    if (strength > 0) {\n        strongest_extension = class_name + \"\
    .\" + extensions[0];\n    }\n    for (auto e : extensions) {\n        if (e.size()\
    \ > cap) {\n            cap = e.size();\n        }\n        if (e.size() < sm)\
    \ {\n            sm = e.size();\n        }\n    }\n    float strength = cap -\
    \ sm;\n    if (strength > 0) {\n        strongest_extension = class_name + \"\
    .\" + extensions[0];\n    }\n    for (auto e : extensions) {\n        if (e.size()\
    \ > cap) {\n            cap = e.size();\n        }\n        if (e.size() < sm)\
    \ {\n            sm = e.size();\n        }\n    }\n    float strength = cap -\
    \ sm;\n    if (strength > 0) {\n        strongest_extension = class_name + \"\
    .\" + extensions[0];\n    }\n    for (auto e : extensions) {\n        if (e.size()\
    \ > cap) {\n            cap = e.size();\n        }\n        if (e.size() < sm)\
    \ {\n            sm = e.size();\n        }\n    }\n    float strength = cap -\
    \ sm;\n    if (strength > 0) {\n        strongest_extension = class_name + \"\
    .\" + extensions[0];\n    }\n    for (auto e : extensions) {\n        if (", " \
    \   // Your code here\n    std::string strongest_extension = \"\";\n    int cap_extension\
    \ = 0;\n    int sm_extension = 0;\n    for (auto &extension : extensions) {\n\
    \        cap_extension = std::count_if(extension.begin(), extension.end(), [](char\
    \ c) {\n            return std::toupper(c) == c;\n        });\n        sm_extension\
    \ = std::count_if(extension.begin(), extension.end(), [](char c) {\n         \
    \   return std::tolower(c) == c;\n        });\n        if (cap_extension - sm_extension\
    \ > 0) {\n            strongest_extension = class_name + \".\" + extension;\n\
    \        }\n    }\n    return strongest_extension;", "    // Your code here\n\
    \    \n    std::string strongest_extension;\n    \n    for(auto &extension : extensions)\
    \ {\n        \n        auto cap = extension.find_first_of('A');\n        auto\
    \ sm = extension.find_first_of('l');\n        \n        auto strength = cap -\
    \ sm;\n        \n        if(strength == 0)\n            continue;\n        \n\
    \        if(strength > strongest_extension.length()) {\n            strongest_extension\
    \ = class_name + extension;\n        }\n    }\n    \n    return strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n \
    \       if (extensions[i].at(0) == class_name[0]) {\n            cap = cap + extensions[i].at(1).size();\n\
    \            sm = sm + extensions[i].at(1).size();\n        }\n    }\n    float\
    \ strength = cap - sm;\n    for (int i = 0; i < extensions.size(); i++) {\n  \
    \      if (extensions[i].at(0) == class_name[0]) {\n            if (strength >\
    \ 0) {\n                strongest_extension = extensions[i].at(1) + \".\" + strongest_extension;\n\
    \                strength = strength - 1;\n            }\n        }\n    }\n \
    \   return strongest_extension;", "    // Your code here\n    std::string strongest_extension\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions)\
    \ {\n        cap += ext.length();\n        sm += ext.length();\n    }\n    float\
    \ strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension =\
    \ class_name + \".\" + extensions[0];\n    }\n    for (auto &ext : extensions)\
    \ {\n        if (ext.length() == strongest_extension.length()) {\n           \
    \ if (ext.compare(strongest_extension) == 0) {\n                strongest_extension\
    \ = class_name + \".\" + ext;\n            }\n        }\n    }\n    return strongest_extension;",
  "    // Your code here\n    \n    std::string strongest_extension = \"\";\n    \n\
    \    for(int i = 0; i < extensions.size(); i++){\n        std::string extension\
    \ = extensions[i];\n        \n        for(int j = 0; j < extension.size(); j++){\n\
    \            char c = extension[j];\n            \n            if((c >= 'A' &&\
    \ c <= 'Z') || (c >= 'a' && c <= 'z')){\n                strongest_extension +=\
    \ c;\n            }\n        }\n    }\n    \n    return strongest_extension;",
  "    std::string strongest_extension;\n    int cap_extension_strength = 0;\n   \
    \ int sma_extension_strength = 0;\n    for (auto extension : extensions) {\n \
    \       auto cap_extension = extension.substr(0, CAP);\n        auto sma_extension\
    \ = extension.substr(CAP, SM);\n        cap_extension_strength += std::count(cap_extension.begin(),\
    \ cap_extension.end(), cap_extension.at(0)) - 1;\n        sma_extension_strength\
    \ += std::count(sma_extension.begin(), sma_extension.end(), sma_extension.at(0))\
    \ - 1;\n    }\n    if (cap_extension_strength > sma_extension_strength) {\n  \
    \      strongest_extension = class_name + \".\" + extensions[0];\n    } else {\n\
    \        strongest_extension = class_name + \".\" + extensions[sma_extension_strength];\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    \n\
    \    std::string strongest_extension;\n    int cap_counter = 0;\n    int sm_counter\
    \ = 0;\n    \n    for(auto extension : extensions) {\n        if(extension.at(0)\
    \ == class_name[0]) {\n            cap_counter++;\n        }\n        if(extension.at(1)\
    \ == class_name[1]) {\n            sm_counter++;\n        }\n    }\n    \n   \
    \ if(cap_counter > sm_counter) {\n        strongest_extension = class_name + \"\
    .\" + extensions[0];\n    }\n    else {\n        strongest_extension = class_name\
    \ + \".\" + extensions[1];\n    }\n    \n    return strongest_extension;", " \
    \   // Write your code here\n    \n    std::string strongest_extension = \"\"\
    ;\n    int cap = 0;\n    int sm = 0;\n    for(auto &extension : extensions) {\n\
    \        cap += extension.at(0) - 'A';\n        sm += extension.at(1) - 'a';\n\
    \    }\n    \n    float strength = cap - sm;\n    \n    if(strength > 0) {\n \
    \       for(auto &extension : extensions) {\n            if((extension.at(0) -\
    \ 'A') == (extension.at(1) - 'a')) {\n                strongest_extension += class_name\
    \ + \".\" + extension.at(0);\n            }\n        }\n    }\n    \n    return\
    \ strongest_extension;", "    int cap_num = 0, sm_num = 0;\n    for (auto &ext\
    \ : extensions) {\n        cap_num += ext.length();\n        sm_num += ext.length()\
    \ - ext.find_first_of(\"abcdefghijklmnopqrstuvwxyz\");\n    }\n    double strength\
    \ = cap_num - sm_num;\n    int max_strength = 0;\n    for (auto &ext : extensions)\
    \ {\n        if (ext.length() > max_strength) {\n            max_strength = ext.length();\n\
    \        }\n    }\n    if (strength > max_strength) {\n        return class_name\
    \ + \".\" + extensions[0];\n    }\n    int max_index = -1;\n    for (auto &ext\
    \ : extensions) {\n        if (ext.length() == max_strength) {\n            max_index\
    \ = extensions.find(ext);\n        }\n    }\n    if (max_index != -1) {\n    \
    \    return class_name + \".\" + extensions[max_index];\n    }\n    return class_name\
    \ + \".\" + extensions[0];", "    // Write your code here\n    \n    std::string\
    \ strongest_extension = \"\";\n    int strongest_extension_strength = -1;\n  \
    \  \n    for (auto extension : extensions) {\n        int extension_strength =\
    \ extension.size()-extension.find_first_not_of(std::string(\"\"));\n        if\
    \ (extension_strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    \n    return class_name + \".\" + strongest_extension;", "  \
    \  // Your code here\n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.length();\n\
    \        sm += ext.length() - ext.find_first_not_of(ext.begin(), ext.end());\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (int i = 1; i < extensions.size();\
    \ i++) {\n        if (strength > 0) {\n            strongest_extension = class_name\
    \ + \".\" + extensions[i];\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    \n    std::string strongest_extension = \"\";\n\
    \    int cap_extensions = 0;\n    int sml_extensions = 0;\n    \n    for(int i\
    \ = 0; i < extensions.size(); i++) {\n        if(extensions[i].at(0) == class_name[0])\
    \ {\n            cap_extensions += 1;\n        }\n        if(extensions[i].at(1)\
    \ == class_name[0]) {\n            sml_extensions += 1;\n        }\n    }\n  \
    \  \n    if(cap_extensions > sml_extensions) {\n        strongest_extension =\
    \ class_name + \".\" + extensions[cap_extensions - 1];\n    }\n    else if(sml_extensions\
    \ > cap_extensions) {\n        strongest_extension = class_name + \".\" + extensions[sml_extensions\
    \ - 1];\n    }\n    else {\n        strongest_extension = class_name + \".\" +\
    \ extensions[0];\n    }\n    \n    return strongest_extension;", "    // Write\
    \ your code here\n    \n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    \n    for(int i = 0; i < extensions.size(); i++)\
    \ {\n        cap = extensions[i].length();\n        sm = class_name.size();\n\
    \        \n        if(cap - sm > 0)\n            strongest_extension += class_name.substr(cap\
    \ - sm);\n    }\n    \n    return strongest_extension;", "    // Your code here\n\
    \    std::string extension_strength;\n    double extension_strength_fraction =\
    \ -1;\n    double extension_strength_fraction_sm = -1;\n    double extension_strength_fraction_cap\
    \ = -1;\n    double extension_strength_fraction_smcap = -1;\n    double extension_strength_fraction_capsm\
    \ = -1;\n    double extension_strength_fraction_smcapcap = -1;\n    double extension_strength_fraction_capsmcap\
    \ = -1;\n    double extension_strength_fraction_smcapcapsm = -1;\n    double extension_strength_fraction_capsmcapcap\
    \ = -1;\n    double extension_strength_fraction_smcapcapsmcap = -1;\n    double\
    \ extension_strength_fraction_smcapcapsmcap = -1;\n    double extension_strength_fraction_smcapcapsmcap\
    \ = -1;\n    double extension_strength_fraction_smcapcapsmcap = -1;\n    double\
    \ extension_strength_fraction_smcapcapsmcap = -1;\n    double extension_strength_fraction_smcapcapsmcap\
    \ = -1;\n    double extension_strength_fraction_smcapcapsmcap = -1;\n    double\
    \ extension_strength_fraction_smcapcapsmcap = -1;\n    double extension_strength_fraction_smcapcapsmcap\
    \ = -1;\n    double extension_strength_fraction_smcapcapsmcap = -1;\n    double\
    \ extension_strength_fraction_smcapcapsmcap = -1;\n    double extension_strength_fraction_smcapcapsmcap\
    \ = -1;\n    double extension_strength_fraction_smcapcapsmcap = -1;\n    double\
    \ extension_strength_fraction_smcapcapsmcap = -1;\n    double extension_strength_fraction_smcapcapsmcap\
    \ = -1;\n    double extension_strength_fraction_smcapcapsmcap = -1;\n    double\
    \ extension_strength_fraction_smcapcapsmcap = -1;\n    double extension_strength_fraction_smcapcapsmcap\
    \ = -1;\n    double extension_strength_fraction_smcapcapsmcap = -1;\n    double\
    \ extension_strength_fraction_smcapcapsmcap = -1;\n    double extension_strength_fraction_smcapcapsmcap\
    \ = -1;\n    double extension_strength_fraction_smcapcapsmcap = -1;\n    double\
    \ extension_strength_fraction_smcapcapsmcap = -1;\n    double extension_strength_fraction_smcapcapsmcap\
    \ = -1;\n    double extension_strength_fraction_smcapcapsmcap = -1;\n    double\
    \ extension_strength_fraction_smcapcapsmcap = -1;\n", "    // Your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &extension : extensions) {\n        if (extension.at(0) == class_name[0])\
    \ {\n            cap = cap + 1;\n        }\n        if (extension.at(1) == class_name[1])\
    \ {\n            sm = sm + 1;\n        }\n    }\n    if (cap - sm == 0) {\n  \
    \      strongest_extension = class_name;\n    }\n    else {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    return strongest_extension;",
  "    // Write your code here\n    \n    std::string strongest_extension;\n    int\
    \ cap_counter = 0;\n    int sm_counter = 0;\n    \n    for (auto extension : extensions)\
    \ {\n        cap_counter += std::toupper(extension[0]) - std::toupper(extension[1]);\n\
    \        sm_counter += std::tolower(extension[0]) - std::tolower(extension[1]);\n\
    \    }\n    \n    double strength = cap_counter - sm_counter;\n    \n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    \n    for (auto extension : extensions) {\n        if (strength >\
    \ 0) {\n            strongest_extension = class_name + \".\" + extension;\n  \
    \      }\n    }\n    \n    return strongest_extension;", "    // Write your code\
    \ here\n    \n    std::string extension_strength;\n    \n    for (auto &extension\
    \ : extensions) {\n        extension_strength += extension;\n    }\n    \n   \
    \ auto extension_strength_length = extension_strength.length();\n    \n    auto\
    \ class_name_length = class_name.length();\n    \n    auto extension_strength_percentage\
    \ = extension_strength_length / class_name_length;\n    \n    auto strongest_extension\
    \ = class_name + extension_strength.substr(0, extension_strength_length - extension_strength_percentage);\n\
    \    \n    return strongest_extension;", "    std::string extension_strength =\
    \ \"\";\n    int max_strength = 0;\n    for (auto extension : extensions) {\n\
    \        int extension_strength_counter = 0;\n        for (auto letter : extension)\
    \ {\n            if (letter == letter) {\n                extension_strength_counter++;\n\
    \            }\n        }\n        if (extension_strength_counter > max_strength)\
    \ {\n            max_strength = extension_strength_counter;\n            extension_strength\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + extension_strength;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap_counter = 0;\n    int sm_counter = 0;\n    for (auto &extension : extensions)\
    \ {\n        if (extension == class_name) {\n            strongest_extension =\
    \ class_name;\n            break;\n        }\n        cap_counter += std::toupper(extension[0])\
    \ - std::toupper(extension[1]);\n        sm_counter += std::tolower(extension[0])\
    \ - std::tolower(extension[1]);\n    }\n    if (cap_counter > sm_counter) {\n\
    \        strongest_extension = class_name;\n    }\n    return strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.length();\n\
    \        sm += ext.length() - ext.length();\n    }\n    cap = cap / extensions.size();\n\
    \    sm = sm / extensions.size();\n    if (cap - sm > 0) strongest_extension =\
    \ class_name + extensions[0];\n    else if (sm - cap > 0) strongest_extension\
    \ = class_name + extensions[1];\n    else strongest_extension = class_name + extensions[2];\n\
    \    return strongest_extension;", "    // Write your code here\n    std::string\
    \ extension_strength = \"\";\n    int cap_counter = 0;\n    int sm_counter = 0;\n\
    \    for (auto extension : extensions) {\n        if (extension.at(0) == class_name.at(0))\
    \ {\n            cap_counter++;\n        }\n        if (extension.at(1) == class_name.at(1))\
    \ {\n            sm_counter++;\n        }\n    }\n    float strength = cap_counter\
    \ - sm_counter;\n    if (strength > 0) {\n        extension_strength = class_name\
    \ + \".\" + extensions[0];\n    }\n    if (strength < 0) {\n        extension_strength\
    \ = class_name + \".\" + extensions[extensions.size() - 1];\n    }\n    return\
    \ extension_strength;", "    // Write your code here\n    std::string strongest_extension\
    \ = class_name;\n    int cap = 0;\n    int sm = 0;\n    for (auto &extension :\
    \ extensions) {\n        cap += extension.at(0) - 'A';\n        sm += extension.at(1)\
    \ - 'a';\n    }\n    if (cap - sm > 0)\n        strongest_extension += \".\";\n\
    \    strongest_extension += extensions[0];\n    return strongest_extension;",
  "    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // ", "    // Your code here\n    std::string strongest_extension;\n\
    \    int cap = 0;\n    int sm = 0;\n    for (auto ext : extensions) {\n      \
    \  cap += ext.length();\n        sm += ext.length();\n    }\n    cap = cap / 2;\n\
    \    sm = sm / 2;\n    if (cap - sm > 0)\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    else\n        strongest_extension = class_name\
    \ + \".\" + extensions[extensions.size() - 1];\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension;\n    int cap_counter\
    \ = 0;\n    int sm_counter = 0;\n    for (auto e : extensions) {\n        if (e.at(0)\
    \ == class_name[0]) {\n            cap_counter++;\n        }\n        if (e.at(1)\
    \ == class_name[1]) {\n            sm_counter++;\n        }\n    }\n    float\
    \ strength = cap_counter - sm_counter;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    else {\n        strongest_extension\
    \ = class_name + \".\" + extensions[extensions.size()-1];\n    }\n    return strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto e : extensions) {\n        cap += e[0]\
    \ - e[1];\n        sm += e[1] - e[0];\n    }\n    if (cap - sm > 0)\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    else\n        strongest_extension\
    \ = class_name + \".\" + extensions[extensions.size() - 1];\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap_extensions = 0;\n    int sm_extensions = 0;\n    for(auto &extension : extensions)\
    \ {\n        if(extension.at(0) == class_name.at(0)) {\n            cap_extensions\
    \ += 1;\n        }\n        if(extension.at(1) == class_name.at(0)) {\n      \
    \      sm_extensions += 1;\n        }\n    }\n    float strength = cap_extensions\
    \ - sm_extensions;\n    if(strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    else if(strength < 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[extensions.size() - 1];\n    }\n    return\
    \ strongest_extension;", "    // Write your code here\n    std::string strongest_extension\
    \ = \"\";\n    int cap_counter = 0;\n    int sm_counter = 0;\n    for (int i =\
    \ 0; i < extensions.size(); i++) {\n        if (extensions[i].at(0) == class_name[0])\
    \ {\n            cap_counter++;\n        }\n        if (extensions[i].at(1) ==\
    \ class_name[1]) {\n            sm_counter++;\n        }\n    }\n    if (cap_counter\
    \ > sm_counter) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else {\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    }\n    return strongest_extension;", "    int cap_letters = 0, sm_letters\
    \ = 0;\n    for (auto &ext : extensions) {\n        cap_letters += ext.length();\n\
    \        sm_letters += ext.length();\n    }\n    double strength = cap_letters\
    \ - sm_letters;\n    double max_strength = std::numeric_limits<double>::max();\n\
    \    for (auto &ext : extensions) {\n        double ext_strength = ext.length();\n\
    \        if (ext_strength > max_strength) {\n            max_strength = ext_strength;\n\
    \        }\n    }\n    double max_strength_extension = max_strength;\n    for\
    \ (auto &ext : extensions) {\n        double ext_strength = ext.length();\n  \
    \      if (ext_strength == max_strength_extension) {\n            std::cout <<\
    \ \"The strongest extension is \" << ext << std::endl;\n        }\n    }\n   \
    \ return class_name + \".\" + extensions[0];", "    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for(auto it=extensions.begin(); it!=extensions.end(); ++it){\n        cap +=\
    \ std::toupper(*it).size();\n        sm += std::tolower(*it).size();\n    }\n\
    \    float strength = cap - sm;\n    for(auto it=extensions.begin(); it!=extensions.end();\
    \ ++it){\n        if(std::toupper(*it) == std::toupper(class_name) && std::tolower(*it)\
    \ == std::tolower(class_name) && strength > 0){\n            strongest_extension\
    \ = class_name + \".\" + std::toupper(*it);\n            break;\n        }\n \
    \   }\n    return strongest_extension;", "    std::string strongest_extension\
    \ = \"\";\n    int cap_num = 0, sm_num = 0;\n    for (auto &extension : extensions)\
    \ {\n        cap_num += extension.at(0);\n        sm_num += extension.at(1);\n\
    \    }\n    float strength = cap_num - sm_num;\n    if (strength > 0) {\n    \
    \    strongest_extension = class_name + \".\" + extensions[0];\n    }\n    for\
    \ (auto &extension : extensions) {\n        if (extension.at(0) != extension.at(1)\
    \ && strength > 0) {\n            strongest_extension = class_name + \".\" + extensions[0];\n\
    \            break;\n        }\n    }\n    return strongest_extension;", "   \
    \ // Your code here\n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n \
    \       cap += (extensions[i].length() - 1);\n        sm += (extensions[i].length());\n\
    \    }\n    float strength = cap - sm;\n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        if (extensions[i].length() == strongest_extension.length())\
    \ {\n            if (strength > 0) {\n                strongest_extension = class_name\
    \ + \".\" + extensions[i];\n            }\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto i : extensions) {\n        cap += i[0]-'A';\n\
    \        sm += i[0]-'a';\n    }\n    float strength = cap - sm;\n    int max_strength\
    \ = -1;\n    for (auto i : extensions) {\n        if (i[0] == class_name && i[1]\
    \ > max_strength) {\n            max_strength = i[1];\n            strongest_extension\
    \ = i[0];\n        }\n    }\n    return strongest_extension;", "    std::string\
    \ strongest_extension;\n    int cap_extension_strength = 0;\n    int sml_extension_strength\
    \ = 0;\n    for (auto extension : extensions) {\n        cap_extension_strength\
    \ += (extension.at(0) - 'A');\n        sml_extension_strength += (extension.at(1)\
    \ - 'a');\n    }\n    if (cap_extension_strength > sml_extension_strength) {\n\
    \        strongest_extension = class_name + extensions[0];\n    } else {\n   \
    \     strongest_extension = class_name + extensions[1];\n    }\n    return strongest_extension;",
  "    // Your code here\n    \n    std::string strongest_extension = \"\";\n    int\
    \ strongest_extension_strength = 0;\n    \n    for (auto extension : extensions)\
    \ {\n        int extension_strength = extension.size()-extension.find_first_of(\"\
    abcdefghijklmnopqrstuvwxyz\");\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    \n    return class_name\
    \ + \".\" + strongest_extension;", "    int cap_num = 0, sm_num = 0;\n    for\
    \ (auto &ext : extensions) {\n        cap_num += ext.length();\n        sm_num\
    \ += ext.length() - ext.find_first_not_of(std::toupper(ext[0]));\n    }\n    float\
    \ strength = cap_num - sm_num;\n    float max_strength = std::max(strength, 0);\n\
    \    float min_strength = std::min(strength, 0);\n    float min_strength_pos =\
    \ std::distance(extensions.begin(), std::min_element(extensions.begin(), extensions.end(),\
    \ [&](std::string &a, std::string &b) { return a.length() < b.length(); }));\n\
    \    std::string strongest_ext;\n    for (auto &ext : extensions) {\n        if\
    \ (ext.length() == min_strength_pos) {\n            strongest_ext = class_name\
    \ + \".\" + ext;\n            break;\n        }\n    }\n    return strongest_ext;",
  "    std::string strongest_extension = \"\";\n    std::string extension_strength\
    \ = \"\";\n    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto extension\
    \ : extensions) {\n        cap_counter = 0;\n        sm_counter = 0;\n       \
    \ for (int i = 0; i < extension.size(); i++) {\n            if (extension[i] >=\
    \ 'A' && extension[i] <= 'Z') {\n                cap_counter++;\n            }\n\
    \            if (extension[i] >= 'a' && extension[i] <= 'z') {\n             \
    \   sm_counter++;\n            }\n        }\n        extension_strength += extension.substr(0,\
    \ cap_counter - sm_counter);\n    }\n    if (extension_strength == \"\") {\n \
    \       return class_name;\n    }\n    int strength = cap_counter - sm_counter;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extension_strength;\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &extension : extensions) {\n        cap += (extension.at(0) - 'A');\n      \
    \  sm += (extension.at(1) - 'a');\n    }\n    float strength = cap - sm;\n   \
    \ if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto &extension : extensions) {\n        if (strength == (extension.at(0)\
    \ - 'A') - (extension.at(1) - 'a')) {\n            strongest_extension = class_name\
    \ + \".\" + extension;\n        }\n    }\n    return strongest_extension;", " \
    \   // Write your code here\n    std::string strongest_extension = \"\";\n   \
    \ double strongest_extension_strength = -1;\n    double strongest_extension_strength_counter\
    \ = 0;\n    for (auto extension : extensions) {\n        if (strongest_extension_strength_counter\
    \ < strongest_extension_strength) {\n            strongest_extension_strength\
    \ = strongest_extension_strength_counter;\n            strongest_extension = extension;\n\
    \        }\n        strongest_extension_strength_counter++;\n    }\n    return\
    \ class_name + \".\" + strongest_extension;", "    // Write your code here\n \
    \   std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto e : extensions){\n        if(std::toupper(e.at(0)) == class_name.at(0))\
    \ cap++;\n        if(std::tolower(e.at(0)) == class_name.at(0)) sm++;\n    }\n\
    \    float strength = cap - sm;\n    for(auto e : extensions){\n        if(std::toupper(e.at(0))\
    \ == class_name.at(0)) cap++;\n        if(std::tolower(e.at(0)) == class_name.at(0))\
    \ sm++;\n    }\n    float strength2 = cap - sm;\n    if(strength > strength2){\n\
    \        strongest_extension = class_name + \".\" + extensions[0];\n    }\n  \
    \  else if(strength == strength2){\n        strongest_extension = class_name +\
    \ \".\" + extensions[0];\n    }\n    else{\n        strongest_extension = class_name\
    \ + \".\" + extensions[1];\n    }\n    return strongest_extension;", "    std::string\
    \ extension_strength;\n    int cap_counter = 0;\n    int sm_counter = 0;\n   \
    \ for (auto &extension : extensions) {\n        if (extension.at(0) == class_name[0])\
    \ {\n            cap_counter++;\n        }\n        if (extension.at(1) == class_name[1])\
    \ {\n            sm_counter++;\n        }\n    }\n    extension_strength = class_name\
    \ + \".\" + extensions[cap_counter].substr(0, sm_counter);\n    if (cap_counter\
    \ > sm_counter) {\n        extension_strength = extensions[cap_counter].substr(0,\
    \ sm_counter);\n    }\n    return extension_strength;", "    std::string strongest_extension;\n\
    \    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto &extension :\
    \ extensions) {\n        cap_counter += extension.at(0) - 'A';\n        sm_counter\
    \ += extension.at(1) - 'a';\n    }\n    double strength = cap_counter - sm_counter;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else {\n        for (auto &extension : extensions) {\n           \
    \ if (strength > extension.at(0) - extension.at(1))\n                strongest_extension\
    \ = class_name + \".\" + extension;\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap_extensions = 0;\n    int sm_extensions = 0;\n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        if (extensions[i].at(0) == class_name[0]) {\n            cap_extensions++;\n\
    \        }\n        if (extensions[i].at(1) == class_name[1]) {\n            sm_extensions++;\n\
    \        }\n    }\n    float strength = cap_extensions - sm_extensions;\n    if\
    \ (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (int i = 1; i < extensions.size(); i++) {\n        if (strength\
    \ > 0) {\n            strongest_extension = strongest_extension + \".\" + extensions[i];\n\
    \        }\n        if (extensions[i].at(0) == class_name[0]) {\n            cap_extensions++;\n\
    \        }\n        if (extensions[i].at(1) == class_name[1]) {\n            sm_extensions++;\n\
    \        }\n    }\n    return strongest_extension;", "    std::string strongest_extension\
    \ = \"\";\n    int cap_extension = 0;\n    int sml_extension = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap_extension += ext.length();\n        sml_extension\
    \ += ext.length();\n    }\n    cap_extension = cap_extension / 2;\n    sml_extension\
    \ = sml_extension / 2;\n    if (cap_extension > sml_extension) {\n        strongest_extension\
    \ = class_name + extensions[0];\n    } else {\n        strongest_extension = class_name\
    \ + extensions[1];\n    }\n    return strongest_extension;", "    // Write your\
    \ code here\n    std::string strongest_extension = \"\";\n    int cap_counter\
    \ = 0;\n    int sm_counter = 0;\n    for (auto extension : extensions) {\n   \
    \     cap_counter += extension.at(0) - 'A';\n        sm_counter += extension.at(1)\
    \ - 'a';\n    }\n    if (cap_counter > sm_counter) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    } else {\n        strongest_extension\
    \ = class_name + \".\" + extensions[1];\n    }\n    return strongest_extension;",
  "    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  // Your code here\n    std::string strongest_extension;\n    int cap_counter\
    \ = 0;\n    int sm_counter = 0;\n    for(auto extension : extensions) {\n    \
    \    if(extension.at(0) == class_name[0]) {\n            cap_counter++;\n    \
    \    }\n        if(extension.at(1) == class_name[1]) {\n            sm_counter++;\n\
    \        }\n    }\n    float strength = cap_counter - sm_counter;\n    if(strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else if(strength < 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[extensions.size()-1];\n    }\n    else {\n        strongest_extension\
    \ = class_name;\n    }\n    return strongest_extension;", "    int cap_num = 0,\
    \ sm_num = 0;\n    std::string strongest_ext;\n    for (auto ext : extensions)\
    \ {\n        cap_num += ext.length();\n        sm_num += ext.length() - ext.find_first_not_of(std::string({'A',\
    \ 'B', 'C', 'D'}));\n    }\n    cap_num -= sm_num;\n    if (cap_num > 0) {\n \
    \       strongest_ext = class_name + \".\" + extensions[0];\n        for (int\
    \ i = 1; i < extensions.size(); i++) {\n            strongest_ext += \".\" + extensions[i];\n\
    \        }\n    } else {\n        strongest_ext = class_name;\n    }\n    return\
    \ strongest_ext;", "    int cap = class_name.size();\n    int sm = extensions.size();\n\
    \    int strength = cap - sm;\n    std::string extension;\n    for (int i = 0;\
    \ i < sm; i++) {\n        if (extensions[i].compare(class_name) == 0) {\n    \
    \        extension = extensions[i];\n            break;\n        }\n    }\n  \
    \  if (extension.compare(class_name) == 0) {\n        for (int i = 0; i < sm;\
    \ i++) {\n            if (extensions[i].compare(class_name) == 0) {\n        \
    \        extension = extensions[i];\n                break;\n            }\n \
    \       }\n    }\n    if (extension.compare(class_name) == 0) {\n        for (int\
    \ i = 0; i < sm; i++) {\n            if (extensions[i].compare(class_name) ==\
    \ 0) {\n                extension = extensions[i];\n                break;\n \
    \           }\n        }\n    }\n    if (extension.compare(class_name) == 0) {\n\
    \        for (int i = 0; i < sm; i++) {\n            if (extensions[i].compare(class_name)\
    \ == 0) {\n                extension = extensions[i];\n                break;\n\
    \            }\n        }\n    }\n    if (extension.compare(class_name) == 0)\
    \ {\n        for (int i = 0; i < sm; i++) {\n            if (extensions[i].compare(class_name)\
    \ == 0) {\n                extension = extensions[i];\n                break;\n\
    \            }\n        }\n    }\n    if (extension.compare(class_name) == 0)\
    \ {\n        for (int i = 0; i < sm; i++) {\n            if (extensions[i].compare(class_name)\
    \ == 0) {\n                extension = extensions[i];\n                break;\n\
    \            }\n        }\n    }\n    if (extension.compare(class_name) == 0)\
    \ {\n        for (int i = 0; i < sm; i++) {\n            if (extensions[i].compare(class_name)\
    \ == 0) {\n                extension = extensions[i];\n                break;\n\
    \            }\n        }\n    }\n    if (extension.compare(class_name) == 0)\
    \ {\n        for (int i = 0; i < sm; i++) {\n            if (extensions[i].compare(class_name)\
    \ == 0) {\n                extension = extensions[i];\n                break;\n\
    \            }\n        }\n    }\n    if (extension.compare(class_name) == 0)\
    \ {\n        for (int i = 0; i < sm; i++) {\n            if (extensions[i].compare(class_name)\
    \ == 0) {\n                extension = extensions[i];\n                break;\n\
    \            }\n        }\n    }\n    if (extension.compare(class_name) == 0)\
    \ {\n        for (int i = 0; i < sm; i++) {\n            if (extensions[i].compare(class_name)\
    \ == 0) {\n                extension = extensions[i];\n                break;\n\
    \            }\n        }\n    }\n    if (extension.compare(class_name) == 0)\
    \ {\n        for (int i = 0; i < sm; i++) {\n            if (extensions[i].compare(class_name)\
    \ == 0) {\n                extension = extensions[i];\n                break;\n\
    \            }\n        }\n    }\n    if (extension.compare(class_name) == 0)\
    \ {\n        for (int i = 0; i < sm; i++) {\n            if (extensions[i].compare(class_name)\
    \ == 0) {\n                extension = extensions[i];\n                break;\n\
    \            }\n        }\n    }\n    if (extension.compare(class_name) == 0)\
    \ {\n        for (int i = 0; i < sm; i++) {\n            if (extensions[i].compare(class_name)\
    \ == 0) {\n                extension = extensions[i];\n                break;\n\
    \            }\n        }\n    }\n    if (extension", "    // Write your code\
    \ here\n    std::string strongest_extension = \"\";\n    std::string extension_strength\
    \ = \"\";\n    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto extension\
    \ : extensions) {\n        if (extension.at(0) == class_name[0]) {\n         \
    \   cap_counter++;\n        }\n        if (extension.at(1) == class_name[1]) {\n\
    \            sm_counter++;\n        }\n    }\n    extension_strength = cap_counter\
    \ - sm_counter;\n    if (extension_strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    if (extension_strength ==\
    \ 1) {\n        strongest_extension = class_name + \".\" + extensions[0];\n  \
    \  }\n    if (extension_strength == 2) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    if (extension_strength == 3) {\n      \
    \  strongest_extension = class_name + \".\" + extensions[0];\n    }\n    if (extension_strength\
    \ == 4) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    if (extension_strength == 5) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    if (extension_strength == 6) {\n      \
    \  strongest_extension = class_name + \".\" + extensions[0];\n    }\n    if (extension_strength\
    \ == 7) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    if (extension_strength == 8) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    if (extension_strength == 9) {\n      \
    \  strongest_extension = class_name + \".\" + extensions[0];\n    }\n    if (extension_strength\
    \ == 10) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    if (extension_strength == 11) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    if (extension_strength == 12) {\n     \
    \   strongest_extension = class_name + \".\" + extensions[0];\n    }\n    if (extension_strength\
    \ == 13) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    if (extension_strength == 14) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    if (extension_strength == 15) {\n     \
    \   strongest_extension = class_name + \".\" + extensions[0];\n    }\n    if (extension_strength\
    \ == 16) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    if (extension_strength == 17) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    if (extension_strength == 18) {\n     \
    \   strongest_extension = class_name + \".\" + extensions[0];\n    }\n    if (extension_strength\
    \ == 19) {\n        strongest_extension = class_name + \".\" + extensions[0];",
  "    // Your code here\n    ", "    // Your code here\n    std::string strongest_extension\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions)\
    \ {\n        cap += ext.length();\n        sm += ext.length() - ext.length();\n\
    \    }\n    double strength = cap - sm;\n    int index = std::distance(extensions.begin(),\
    \ std::min_element(extensions.begin(), extensions.end(), [&](std::string &a, std::string\
    \ &b) { return a.length() < b.length(); }));\n    if (strength > 0) {\n      \
    \  strongest_extension = class_name + \".\" + extensions[index];\n    }\n    return\
    \ strongest_extension;", "    // Write your code here\n    std::string strongest_extension\
    \ = \"\";\n    int cap_counter = 0;\n    int sm_counter = 0;\n    for(auto extension\
    \ : extensions){\n        if(extension.at(0) == class_name.at(0)) {\n        \
    \    cap_counter++;\n        }\n        if(extension.at(1) == class_name.at(1)){\n\
    \            sm_counter++;\n        }\n    }\n    double strength = cap_counter\
    \ - sm_counter;\n    if(strength > 0){\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    else if(strength == 0){\n        strongest_extension\
    \ = class_name;\n    }\n    else if(strength < 0){\n        for(auto extension\
    \ : extensions){\n            if(extension.at(0) == class_name.at(0)) {\n    \
    \            cap_counter++;\n            }\n            if(extension.at(1) ==\
    \ class_name.at(1)){\n                sm_counter++;\n            }\n        }\n\
    \        double strength = cap_counter - sm_counter;\n        if(strength > 0){\n\
    \            strongest_extension = class_name + \".\" + extensions[0];\n     \
    \   }\n        else if(strength == 0){\n            strongest_extension = class_name;\n\
    \        }\n        else if(strength < 0){\n            strongest_extension =\
    \ class_name;\n        }\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension;\n    int cap_extension\
    \ = 0;\n    int sml_extension = 0;\n    for (auto &extension : extensions) {\n\
    \        if (extension == class_name) {\n            strongest_extension = class_name;\n\
    \            break;\n        }\n        if (std::toupper(extension[0]) == std::toupper(class_name[0]))\
    \ {\n            cap_extension++;\n        }\n        if (std::tolower(extension[0])\
    \ == std::tolower(class_name[0])) {\n            sml_extension++;\n        }\n\
    \    }\n    double strength = cap_extension - sml_extension;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    \n\
    \    std::string strongest_extension = \"\";\n    \n    for (auto &extension :\
    \ extensions) {\n        int cap = std::count_if(extension.begin(), extension.end(),\
    \ [](char c) {return std::toupper(c) == c;});\n        int sm = std::count_if(extension.begin(),\
    \ extension.end(), [](char c) {return std::tolower(c) == c;});\n        float\
    \ strength = cap - sm;\n        if (strength > 0) {\n            strongest_extension\
    \ = class_name + \".\" + extension;\n            break;\n        }\n    }\n  \
    \  \n    return strongest_extension;", "    std::string strongest_extension =\
    \ \"\";\n    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto &extension\
    \ : extensions) {\n        if (extension.at(0) == class_name[0]) {\n         \
    \   cap_counter++;\n        }\n        if (extension.at(1) == class_name[1]) {\n\
    \            sm_counter++;\n        }\n    }\n    if (cap_counter > sm_counter)\
    \ {\n        strongest_extension = class_name + \".\" + extensions[0];\n    }\n\
    \    else {\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ e : extensions) {\n        cap += e.length();\n        sm += e.length();\n \
    \   }\n    float strength = cap - sm;\n    for (auto e : extensions) {\n     \
    \   if (e.length() == strongest_extension.length()) {\n            if (e.length()\
    \ < strongest_extension.length()) {\n                strongest_extension = e;\n\
    \            }\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    int cap_num = 0, sm_num = 0;\n    for (auto &ext : extensions) {\n        cap_num\
    \ += ext.length();\n        sm_num += ext.length() - ext.find_first_not_of(ext.begin(),\
    \ ext.end());\n    }\n    double strength = cap_num - sm_num;\n    double max_strength\
    \ = -1;\n    for (auto &ext : extensions) {\n        double cur_strength = ext.length()\
    \ - ext.find_first_not_of(ext.begin(), ext.end());\n        if (cur_strength >\
    \ max_strength) {\n            max_strength = cur_strength;\n        }\n    }\n\
    \    if (max_strength == -1) {\n        return class_name;\n    }\n    double\
    \ max_strength_frac = max_strength / cap_num;\n    double min_strength_frac =\
    \ max_strength_frac / sm_num;\n    double max_strength_frac_2 = max_strength_frac\
    \ / 2;\n    double min_strength_frac_2 = min_strength_frac / 2;\n    double max_strength_frac_3\
    \ = max_strength_frac / 3;\n    double min_strength_frac_3 = min_strength_frac\
    \ / 3;\n    double max_strength_frac_4 = max_strength_frac / 4;\n    double min_strength_frac_4\
    \ = min_strength_frac / 4;\n    double max_strength_frac_5 = max_strength_frac\
    \ / 5;\n    double min_strength_frac_5 = min_strength_frac / 5;\n    double max_strength_frac_6\
    \ = max_strength_frac / 6;\n    double min_strength_frac_6 = min_strength_frac\
    \ / 6;\n    double max_strength_frac_7 = max_strength_frac / 7;\n    double min_strength_frac_7\
    \ = min_strength_frac / 7;\n    double max_strength_frac_8 = max_strength_frac\
    \ / 8;\n    double min_strength_frac_8 = min_strength_frac / 8;\n    double max_strength_frac_9\
    \ = max_strength_frac / 9;\n    double min_strength_frac_9 = min_strength_frac\
    \ / 9;\n    double max_strength_frac_10 = max_strength_frac / 10;\n    double\
    \ min_strength_frac_10 = min_strength_frac / 10;\n    double max_strength_frac_11\
    \ = max_strength_frac / 11;\n    double min_strength_frac_11 = min_strength_frac\
    \ / 11;\n    double max_strength_frac_12 = max_strength_frac / 12;\n    double\
    \ min_strength_frac_12 = min_strength_frac / 12;\n    double max_strength_fra",
  "    // Your code here\n    \n    std::string strongest_extension;\n    \n    for(auto\
    \ extension : extensions) {\n        \n        auto cap = extension.find_first_of('A');\n\
    \        auto sm = extension.find_first_of('l');\n        \n        auto strength\
    \ = cap - sm;\n        \n        if(strength == -1) {\n            strongest_extension\
    \ = class_name + extension;\n            break;\n        }\n        \n       \
    \ if(strength > strongest_extension.size()) strongest_extension = class_name +\
    \ extension;\n    }\n    \n    return strongest_extension;", "    int cap_num\
    \ = 0, sm_num = 0;\n    for (auto &ext : extensions) {\n        cap_num += ext.length();\n\
    \        sm_num += ext.length() - ext.find_first_not_of(ext.begin(), ext.end());\n\
    \    }\n    double strength = cap_num - sm_num;\n    int strongest_ext = 0;\n\
    \    for (auto &ext : extensions) {\n        if (ext.length() == strength) {\n\
    \            strongest_ext = ext.length();\n            break;\n        }\n  \
    \  }\n    return class_name + \".\" + extensions[strongest_ext];", "    // Your\
    \ code here\n    \n    std::string strongest_extension = \"\";\n    int cap =\
    \ 0;\n    int sm = 0;\n    \n    for (auto &ext : extensions) {\n        cap +=\
    \ ext.length();\n        sm += ext.length();\n    }\n    \n    float strength\
    \ = cap - sm;\n    \n    for (auto &ext : extensions) {\n        if (ext.length()\
    \ == strongest_extension.length()) {\n            if (ext.length() < strongest_extension.length())\
    \ {\n                strongest_extension = class_name + ext;\n            }\n\
    \        }\n    }\n    \n    return strongest_extension;", "    // Your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &ext : extensions) {\n        cap += ext.length();\n        sm +=\
    \ ext.length();\n    }\n    float strength = cap - sm;\n    for(auto &ext : extensions)\
    \ {\n        if(ext.length() == strength) {\n            strongest_extension =\
    \ class_name + ext;\n        }\n    }\n    return strongest_extension;", "   \
    \ int cap_num = 0, sm_num = 0;\n    std::string strongest_ext;\n    for (auto\
    \ &ext : extensions) {\n        cap_num += ext.length();\n        sm_num += ext.length();\n\
    \    }\n    cap_num -= sm_num;\n    if (cap_num > 0) {\n        strongest_ext\
    \ = class_name + \".\";\n        for (int i = 0; i < cap_num; i++) {\n       \
    \     strongest_ext += extensions[0];\n        }\n    }\n    return strongest_ext;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    int cap_extension\
    \ = 0;\n    int sm_extension = 0;\n    for (auto extension : extensions) {\n \
    \       cap_extension += (extension.at(0) - 'A');\n        sm_extension += (extension.at(1)\
    \ - 'a');\n    }\n    float strength = cap_extension - sm_extension;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto extension : extensions) {\n        if (strength == (extension.at(0)\
    \ - 'A') + (extension.at(1) - 'a')) {\n            strongest_extension = class_name\
    \ + \".\" + extension;\n        }\n    }\n    return strongest_extension;", " \
    \   std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.length();\n        sm\
    \ += ext.length();\n    }\n    cap = cap - sm;\n    if (cap > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto &ext : extensions)\
    \ {\n        if (ext.length() < cap) {\n            strongest_extension = class_name\
    \ + \".\" + ext;\n            break;\n        }\n    }\n    return strongest_extension;",
  "    // Your code here\n    std::string strongest_extension;\n    int cap = 0;\n\
    \    int sm = 0;\n    for (auto &extension : extensions) {\n        cap += extension.at(0)\
    \ - 'A';\n        sm += extension.at(1) - 'a';\n    }\n    float strength = cap\
    \ - sm;\n    if (strength > 0) {\n        strongest_extension = class_name + \"\
    .\" + extensions[0];\n    }\n    else {\n        std::sort(extensions.begin(),\
    \ extensions.end(), [](std::string &a, std::string &b){\n            return a.at(0)\
    \ - b.at(0) < 0;\n        });\n        strongest_extension = class_name + \".\"\
    \ + extensions[0];\n    }\n    return strongest_extension;", "    \n    // Your\
    \ code here\n    \n    return class_name + \".\" + extensions[0];", "    std::string\
    \ strongest_extension = class_name;\n    int cap_counter = 0;\n    int sml_counter\
    \ = 0;\n    for (auto extension : extensions) {\n        if (extension.at(0) ==\
    \ extension.at(1)) {\n            cap_counter++;\n        }\n        else {\n\
    \            sml_counter++;\n        }\n    }\n    if (cap_counter > sml_counter)\
    \ {\n        strongest_extension = class_name + extensions[0];\n    }\n    else\
    \ {\n        strongest_extension = class_name + extensions[1];\n    }\n    return\
    \ strongest_extension;", "    // Your code here\n    std::string strongest_extension\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto i : extensions) {\n\
    \        cap += i[0]-'A';\n        sm += i[1]-'a';\n    }\n    float strength\
    \ = cap - sm;\n    if (strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    for (auto i : extensions) {\n        if\
    \ (i[0] == i[1]) {\n            continue;\n        }\n        if (strength > 0)\
    \ {\n            if (i[0] < i[1]) {\n                strongest_extension = class_name\
    \ + \".\" + extensions[0];\n                break;\n            }\n        }\n\
    \        if (i[0] > i[1]) {\n            strongest_extension = class_name + \"\
    .\" + extensions[1];\n            break;\n        }\n    }\n    return strongest_extension;",
  "    std::string strongest_extension = \"\";\n    int cap_counter = 0;\n    int\
    \ sm_counter = 0;\n    for (auto &extension : extensions) {\n        if (extension.at(0)\
    \ == class_name[0]) {\n            cap_counter++;\n        }\n        if (extension.at(1)\
    \ == class_name[1]) {\n            sm_counter++;\n        }\n    }\n    if (cap_counter\
    \ > sm_counter) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else {\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ i : extensions) {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n    }\n\
    \    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto i : extensions)\
    \ {\n        if (i[0] == i[1]) {\n            continue;\n        }\n        if\
    \ (strength > 0) {\n            if (i[0] < i[1]) {\n                strongest_extension\
    \ = class_name + \".\" + extensions[0];\n                break;\n            }\n\
    \            if (i[0] > i[1]) {\n                strongest_extension = class_name\
    \ + \".\" + extensions[1];\n                break;\n            }\n        }\n\
    \    }\n    return strongest_extension;", "    int cap_num = 0, sm_num = 0;\n\
    \    for (auto &ext : extensions) {\n        cap_num += ext.length();\n      \
    \  sm_num += ext.length() - ext.find_first_of(\"abcdefghijklmnopqrstuvwxyz\");\n\
    \    }\n    double strength = cap_num - sm_num;\n    double max_strength = std::numeric_limits<double>::max();\n\
    \    for (auto &ext : extensions) {\n        double ext_strength = ext.length();\n\
    \        if (ext_strength > max_strength) {\n            max_strength = ext_strength;\n\
    \        }\n    }\n    double max_strength_extension = max_strength;\n    for\
    \ (auto &ext : extensions) {\n        double ext_strength = ext.length();\n  \
    \      if (ext_strength == max_strength_extension) {\n            return class_name\
    \ + \".\" + ext;\n        }\n    }\n    return class_name;", "    // Write your\
    \ code here\n    std::string strongest_extension = \"\";\n    int cap = 0;\n \
    \   int sm = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n        if\
    \ (extensions[i].at(0) == class_name[0]) {\n            cap = cap + 1;\n     \
    \   }\n        if (extensions[i].at(1) == class_name[1]) {\n            sm = sm\
    \ + 1;\n        }\n    }\n    if (cap - sm == 0) {\n        strongest_extension\
    \ = class_name;\n    }\n    else {\n        strongest_extension = class_name +\
    \ extensions[cap - sm];\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension = \"\";\n    int cap = 0;\n\
    \    int sm = 0;\n    for (auto &extension : extensions) {\n        cap += extension.at(0);\n\
    \        sm += extension.at(1);\n    }\n    float strength = cap - sm;\n    if\
    \ (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto &extension : extensions) {\n        if (strength > 0) {\n\
    \            if (extension.at(0) != extension.at(1)) {\n                strongest_extension\
    \ = class_name + \".\" + extensions[0];\n                break;\n            }\n\
    \        }\n    }\n    return strongest_extension;", "    // Your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (auto &extension : extensions) {\n        cap += extension.at(0);\n    \
    \    sm += extension.at(1);\n    }\n    float strength = cap - sm;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (int i = 1; i < extensions.size(); i++) {\n        if (strength\
    \ > 0) {\n            if (strength == extensions[i].at(0) && extensions[i].at(1)\
    \ == extensions[i - 1]) {\n                strongest_extension = class_name +\
    \ \".\" + extensions[i];\n            }\n        }\n    }\n    return strongest_extension;",
  "    std::string extension_strength;\n    int cap_counter = 0;\n    int sm_counter\
    \ = 0;\n    for (auto extension : extensions) {\n        auto cap = extension.substr(0,\
    \ CAP);\n        auto sm = extension.substr(CAP, SM);\n        if (cap == class_name)\
    \ {\n            cap_counter++;\n        }\n        if (sm == class_name) {\n\
    \            sm_counter++;\n        }\n    }\n    extension_strength = class_name\
    \ + \".\" + extensions[cap_counter].substr(CAP - sm_counter, SM);\n    if (extension_strength\
    \ == class_name) {\n        extension_strength = extensions[cap_counter].substr(CAP\
    \ - sm_counter, SM);\n    }\n    return extension_strength;", "    // Your code\
    \ here\n    std::string strongest_extension = \"\";\n    int cap = 0;\n    int\
    \ sm = 0;\n    for (auto &e : extensions) {\n        cap += e.size();\n      \
    \  sm += e.size();\n    }\n    float strength = cap - sm;\n    for (auto &e :\
    \ extensions) {\n        if (e.size() == strongest_extension.size()) {\n     \
    \       if (e.size() < strongest_extension.size()) {\n                strongest_extension\
    \ = e;\n            }\n        }\n        else if (e.size() > strongest_extension.size())\
    \ {\n            if (e.size() == strength) {\n                strongest_extension\
    \ = e;\n            }\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n \
    \       if (extensions[i].at(0) == class_name[0]) {\n            cap = cap + 1;\n\
    \        }\n        if (extensions[i].at(1) == class_name[1]) {\n            sm\
    \ = sm + 1;\n        }\n    }\n    if (cap - sm > 1) {\n        for (int i = 0;\
    \ i < extensions.size(); i++) {\n            if (extensions[i].at(0) == class_name[0])\
    \ {\n                cap = cap - 1;\n            }\n            if (extensions[i].at(1)\
    \ == class_name[1]) {\n                sm = sm - 1;\n            }\n        }\n\
    \    }\n    strongest_extension = class_name + \".\" + extensions[cap - sm];\n\
    \    return strongest_extension;", "    // Your code here\n    std::string strongest_extension;\n\
    \    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto extension :\
    \ extensions) {\n        if (extension.at(0) == class_name.at(0)) {\n        \
    \    cap_counter++;\n        }\n        if (extension.at(1) == class_name.at(1))\
    \ {\n            sm_counter++;\n        }\n    }\n    if (cap_counter > sm_counter)\
    \ {\n        strongest_extension = class_name + extensions[0];\n    }\n    else\
    \ if (cap_counter < sm_counter) {\n        strongest_extension = class_name +\
    \ extensions[1];\n    }\n    else {\n        strongest_extension = class_name\
    \ + extensions[2];\n    }\n    return strongest_extension;", "    // Your code\
    \ here\n    std::string extension_str;\n    int cap_num = 0, sm_num = 0;\n   \
    \ for (auto &ext : extensions) {\n        cap_num += ext.length();\n        sm_num\
    \ += ext.length() - ext.find_first_not_of(ext.begin(), ext.end());\n    }\n  \
    \  double strength = cap_num - sm_num;\n    double max_strength = -1;\n    for\
    \ (auto &ext : extensions) {\n        if (ext.length() > max_strength) {\n   \
    \         max_strength = ext.length();\n            extension_str = ext;\n   \
    \     }\n    }\n    return class_name + \".\" + extension_str;", "    // Your\
    \ code here\n    std::string strongest_extension = \"\";\n    int cap = 0;\n \
    \   int sm = 0;\n    for (auto &extension : extensions) {\n        cap += extension.at(0)\
    \ - 'A';\n        sm += extension.at(1) - 'a';\n    }\n    float strength = cap\
    \ - sm;\n    if (strength > 0) {\n        strongest_extension = class_name + \"\
    .\" + extensions[0];\n    }\n    for (int i = 1; i < extensions.size(); i++) {\n\
    \        if (strength > 0) {\n            if (strength > extensions[i].at(0) -\
    \ extensions[i].at(1)){\n                strongest_extension = class_name + \"\
    .\" + extensions[i];\n            }\n        }\n    }\n    return strongest_extension;",
  "    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto &ext : extensions)\
    \ {\n        if (ext.at(0) == class_name[0]) {\n            cap_counter++;\n \
    \       }\n        if (ext.at(1) == class_name[1]) {\n            sm_counter++;\n\
    \        }\n    }\n    return class_name + \".\" + extensions[(cap_counter - sm_counter)];",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto i : extensions) {\n        cap += i[0]-'A';\n\
    \        sm += i[1]-'a';\n    }\n    if (cap - sm > 0)\n        strongest_extension\
    \ = class_name + extensions[0];\n    else if (cap - sm == 0)\n        strongest_extension\
    \ = class_name + extensions[0];\n    else\n        strongest_extension = class_name\
    \ + extensions[1];\n    return strongest_extension;", "    // Your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap_num = 0, sm_num = 0;\n\
    \    for (auto &extension : extensions) {\n        cap_num += extension.at(0)\
    \ - 'A';\n        sm_num += extension.at(1) - 'a';\n    }\n    double strength\
    \ = cap_num - sm_num;\n    if (strength > 0) {\n        strongest_extension =\
    \ class_name + \".\" + extensions[0];\n    }\n    for (auto &extension : extensions)\
    \ {\n        if (strength > 0) {\n            strongest_extension = class_name\
    \ + \".\" + extension;\n        }\n    }\n    return strongest_extension;", " \
    \   std::string strongest_extension;\n    int cap_extension_strength = 0;\n  \
    \  int sm_extension_strength = 0;\n    for (auto extension : extensions) {\n \
    \       cap_extension_strength += (extension.at(0) - 'A');\n        sm_extension_strength\
    \ += (extension.at(1) - 'a');\n    }\n    if (cap_extension_strength > sm_extension_strength)\
    \ {\n        strongest_extension = class_name + extensions[0];\n    } else {\n\
    \        strongest_extension = class_name + extensions[1];\n    }\n    return\
    \ strongest_extension;", "    // Write your code here\n    std::string strongest_extension\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions)\
    \ {\n        cap += ext.length();\n        sm += ext.length() - cap;\n    }\n\
    \    cap = cap - sm;\n    std::string strongest_extension_name = \"\";\n    for\
    \ (auto &ext : extensions) {\n        if (ext.length() == cap) {\n           \
    \ strongest_extension_name = class_name + \".\" + ext;\n            break;\n \
    \       }\n    }\n    return strongest_extension_name;", "    std::string result;\n\
    \    std::string extension;\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ e : extensions) {\n        cap += e.size();\n        sm += e.find_first_not_of('a')\
    \ - e.find_first_not_of('A');\n    }\n    cap = cap - sm;\n    cap = cap / extensions.size();\n\
    \    if (cap > 0) {\n        extension = class_name + extensions[extensions.size()\
    \ - 1];\n        extension = extension.substr(0, extension.find_last_of('.'));\n\
    \        result = class_name + \".\" + extension;\n    }\n    return result;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for(auto &extension : extensions) {\n       \
    \ if(extension.at(0) == class_name[0]) {\n            cap = cap + 1;\n       \
    \ }\n        if(extension.at(1) == class_name[0]) {\n            sm = sm + 1;\n\
    \        }\n    }\n    float strength = cap - sm;\n    if(strength > 0) {\n  \
    \      strongest_extension = class_name + \".\" + extensions[0];\n    }\n    else\
    \ if(strength < 0) {\n        strongest_extension = class_name + \".\" + extensions[extensions.size()-1];\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap_counter = 0;\n    int sml_counter = 0;\n \
    \   for(auto &extension : extensions) {\n        if(extension.at(0) == class_name[0])\
    \ {\n            cap_counter++;\n        }\n        if(extension.at(1) == class_name[1])\
    \ {\n            sml_counter++;\n        }\n    }\n    double strength = cap_counter\
    \ - sml_counter;\n    if(strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    else if(strength < 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[extensions.size()-1];\n    }\n    else if(strength\
    \ == 0) {\n        strongest_extension = class_name;\n    }\n    return strongest_extension;",
  "    // Write your code here\n    \n    std::string strongest_extension = \"\";\n\
    \    int cap = 0;\n    int sm = 0;\n    for(auto ext : extensions){\n        cap\
    \ += ext.length();\n        sm += ext.length();\n    }\n    float strength = cap\
    \ - sm;\n    \n    for(auto ext : extensions){\n        if(ext.length() > strongest_extension.length()){\n\
    \            strongest_extension = ext;\n        }\n    }\n    \n    return class_name\
    \ + \".\" + strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &extension : extensions) {\n        cap += extension.at(0);\n        sm += extension.at(1);\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (size_t i = 1; i < extensions.size();\
    \ i++) {\n        if (strength > 0) {\n            strongest_extension = class_name\
    \ + \".\" + extensions[i];\n        }\n    }\n    return strongest_extension;",
  "    // Your code here\n    \n    std::string strongest_extension;\n    int cap_extensions\
    \ = 0;\n    int sm_extensions = 0;\n    \n    for (auto extension : extensions)\
    \ {\n        cap_extensions += (std::toupper(extension[0]) - std::toupper(extension[1]));\n\
    \        sm_extensions += (std::tolower(extension[0]) - std::tolower(extension[1]));\n\
    \    }\n    \n    if (cap_extensions > sm_extensions) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    } else {\n        strongest_extension\
    \ = class_name + \".\" + extensions[1];\n    }\n    \n    return strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.length();\n\
    \        sm += ext.length();\n    }\n    float strength = cap - sm;\n    int index\
    \ = -1;\n    for (auto &ext : extensions) {\n        if (ext.length() == strength)\
    \ {\n            index = extensions.find(ext);\n        }\n    }\n    if (index\
    \ != -1) {\n        strongest_extension = class_name + \".\" + extensions[index];\n\
    \    }\n    return strongest_extension;", "    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_counter = 0;\n    int sml_counter =\
    \ 0;\n    for (auto extension : extensions) {\n        cap_counter = cap_counter\
    \ + extension.at(0) - 'A';\n        sml_counter = sml_counter + extension.at(1)\
    \ - 'a';\n    }\n    double strength = cap_counter - sml_counter;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    \n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    \n    for(int i = 0; i < extensions.size(); i++){\n        if(extensions[i].at(0)\
    \ == class_name[0]){\n            cap = cap + 1;\n        }\n        if(extensions[i].at(1)\
    \ == class_name[1]){\n            sm = sm + 1;\n        }\n    }\n    \n    if(cap\
    \ - sm > 0){\n        strongest_extension = class_name + \".\" + extensions[cap\
    \ - sm];\n    }\n    \n    return strongest_extension;", "    std::string extension_strength;\n\
    \    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto extension :\
    \ extensions) {\n        if (extension.at(0) == class_name[0]) {\n           \
    \ cap_counter++;\n        }\n        if (extension.at(1) == class_name[1]) {\n\
    \            sm_counter++;\n        }\n    }\n    extension_strength = class_name\
    \ + \".\" + extensions[cap_counter - sm_counter];\n    return extension_strength;",
  "    // Your code here\n    \n    std::string strongest_extension = \"\";\n    \n\
    \    for(auto &extension : extensions) {\n        auto cap = extension.find_first_of('A');\n\
    \        auto sm = extension.find_first_of('l');\n        \n        auto strength\
    \ = cap - sm;\n        \n        if(strength > 0) {\n            strongest_extension\
    \ = class_name + \".\" + extension;\n            break;\n        }\n    }\n  \
    \  \n    return strongest_extension;", "    // Your code here\n    std::string\
    \ strongest_extension;\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext\
    \ : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto &ext : extensions)\
    \ {\n        if (ext.length() > strongest_extension.length()) {\n            strongest_extension\
    \ = class_name + \".\" + ext;\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap_counter = 0;\n    int sm_counter = 0;\n    for (auto &extension : extensions)\
    \ {\n        if (extension.at(0) == class_name[0]) {\n            cap_counter++;\n\
    \        }\n        if (extension.at(1) == class_name[1]) {\n            sm_counter++;\n\
    \        }\n    }\n    float strength = cap_counter - sm_counter;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    if (strength == 1) {\n        strongest_extension = class_name + \"\
    .\" + extensions[0];\n    }\n    return strongest_extension;", "    // Your code\
    \ here\n    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &i : extensions) {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n\
    \    }\n    double strength = cap - sm;\n    for(auto &i : extensions) {\n   \
    \     if(strength == i[0]-'A' && i[1]-'a') {\n            strongest_extension\
    \ = class_name + \".\" + i[0];\n            break;\n        }\n    }\n    return\
    \ strongest_extension;", "    // Your code here\n    std::string strongest_extension;\n\
    \    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto extension :\
    \ extensions) {\n        if (extension == class_name) {\n            strongest_extension\
    \ = class_name;\n            break;\n        }\n        if (std::toupper(extension[0])\
    \ == std::toupper(class_name[0])) {\n            cap_counter++;\n        }\n \
    \       if (std::tolower(extension[0]) == std::tolower(class_name[0])) {\n   \
    \         sm_counter++;\n        }\n    }\n    if (cap_counter > sm_counter) {\n\
    \        strongest_extension = class_name + \".\" + extensions[0];\n    }\n  \
    \  else {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    return strongest_extension;", "    std::string strongest_extension\
    \ = \"\";\n    int cap_counter = 0;\n    int sm_counter = 0;\n    for(auto extension\
    \ : extensions) {\n        auto cap = extension.substr(0, CAP);\n        auto\
    \ sm = extension.substr(CAP, SM);\n        auto cap_counter = std::count_if(cap.cbegin(),\
    \ cap.cend(), isupper);\n        auto sm_counter = std::count_if(sm.cbegin(),\
    \ sm.cend(), islower);\n        if(cap_counter > sm_counter) {\n            strongest_extension\
    \ = class_name + \".\" + extension;\n            break;\n        }\n    }\n  \
    \  return strongest_extension;", "    std::string strongest_extension;\n    int\
    \ cap_counter = 0;\n    int sm_counter = 0;\n    for(auto &extension : extensions)\
    \ {\n        cap_counter += extension.at(0) - 'A';\n        sm_counter += extension.at(1)\
    \ - 'a';\n    }\n    double strength = cap_counter - sm_counter;\n    double max_strength\
    \ = std::max(cap_counter, sm_counter);\n    for(auto &extension : extensions)\
    \ {\n        if(extension.at(0) - 'A' == cap_counter && extension.at(1) - 'a'\
    \ == sm_counter) {\n            strongest_extension = class_name + \".\" + extension;\n\
    \            break;\n        }\n    }\n    if(strongest_extension.empty()) {\n\
    \        for(auto &extension : extensions) {\n            if(extension.at(0) -\
    \ 'A' == cap_counter && extension.at(1) - 'a' == sm_counter) {\n             \
    \   strongest_extension = class_name + \".\" + extension;\n                break;\n\
    \            }\n        }\n    }\n    return strongest_extension;", "    // Your\
    \ code here\n    std::string result;\n    int cap = 0;\n    int sm = 0;\n    for\
    \ (auto ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    double strength = cap - sm;\n    double max_strength = std::max_element(extensions.begin(),\
    \ extensions.end()) - extensions.begin();\n    if (strength == max_strength) {\n\
    \        for (auto ext : extensions) {\n            if (ext.length() == cap) {\n\
    \                result = class_name + ext;\n                break;\n        \
    \    }\n        }\n    }\n    return result;", "    // Write your code here\n\
    \    \n    std::string strongest_extension = \"\";\n    int cap = 0;\n    int\
    \ sm = 0;\n    \n    for (auto e : extensions) {\n        cap += e[0]-'A';\n \
    \       sm += e[1]-'a';\n    }\n    \n    float strength = cap - sm;\n    \n \
    \   if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    \n    for (auto e : extensions) {\n        if (e[0]-'A' > strongest_extension[0]-'A')\
    \ {\n            strongest_extension = class_name + \".\" + e;\n        }\n  \
    \  }\n    \n    return strongest_extension;", "    std::string strongest_extension\
    \ = \"\";\n    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto &extension\
    \ : extensions) {\n        cap_counter += extension.at(0) - 'A';\n        sm_counter\
    \ += extension.at(1) - 'a';\n    }\n    double strength = cap_counter - sm_counter;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto &extension : extensions) {\n        if (strength == extension.at(0)\
    \ - 'A' && strength == extension.at(1) - 'a') {\n            strongest_extension\
    \ = class_name + \".\" + extension;\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension;\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto i : extensions) {\n        cap += i[0]-'A';\n\
    \        sm += i[1]-'a';\n    }\n    float strength = cap - sm;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else {\n        for (auto i : extensions) {\n            if (i[0]\
    \ == extensions[0][0] && i[1] == extensions[0][1]) {\n                strongest_extension\
    \ = class_name + \".\" + i;\n                break;\n            }\n        }\n\
    \    }\n    return strongest_extension;", "    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    float strength = cap - sm;\n    int index = std::distance(extensions.begin(),\
    \ std::max_element(extensions.begin(), extensions.end(), [&](std::string a, std::string\
    \ b) { return a.length() < b.length(); }));\n    if (strength > 0) {\n       \
    \ strongest_extension = class_name + extensions[index];\n    }\n    return strongest_extension;",
  "    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // ", "    // Write your code here\n    \n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    \n    for(int\
    \ i = 0; i < extensions.size(); i++){\n        cap += (extensions[i].size()) -\
    \ 1;\n        sm += (extensions[i].size()) - 1;\n    }\n    \n    double strength\
    \ = cap - sm;\n    \n    for(int i = 0; i < extensions.size(); i++){\n       \
    \ if(extensions[i].size() == cap){\n            strongest_extension += class_name\
    \ + \".\" + extensions[i];\n        }\n    }\n    \n    if(strongest_extension\
    \ == \"\"){\n        return strongest_extension;\n    }\n    \n    for(int i =\
    \ 0; i < extensions.size(); i++){\n        if(extensions[i].size() == sm){\n \
    \           strongest_extension += \".\" + extensions[i];\n        }\n    }\n\
    \    \n    return strongest_extension;", "    std::string strongest_extension\
    \ = \"\";\n    int cap_extension_strength = 0;\n    int sml_extension_strength\
    \ = 0;\n    for (auto extension : extensions) {\n        auto cap_extension =\
    \ extension.substr(0, CAP);\n        auto sml_extension = extension.substr(CAP,\
    \ SM);\n        cap_extension_strength = std::max(cap_extension_strength, std::stoi(cap_extension));\n\
    \        sml_extension_strength = std::max(sml_extension_strength, std::stoi(sml_extension));\n\
    \    }\n    cap_extension_strength = cap_extension_strength - sml_extension_strength;\n\
    \    if (cap_extension_strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    if (cap_extension_strength == 0 && sml_extension_strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    }\n    if (cap_extension_strength == 0 && sml_extension_strength == 0) {\n\
    \        strongest_extension = class_name + \".\" + extensions[2];\n    }\n  \
    \  return strongest_extension;", "    std::string strongest_extension = \"\";\n\
    \    int cap_counter = 0;\n    int sm_counter = 0;\n    std::string extension_strongest\
    \ = \"\";\n    for (auto extension : extensions) {\n        if (extension == class_name)\
    \ {\n            strongest_extension = class_name;\n            break;\n     \
    \   }\n        cap_counter++;\n        sm_counter++;\n    }\n    if (cap_counter\
    \ > sm_counter) {\n        for (auto extension : extensions) {\n            if\
    \ (extension == class_name) {\n                strongest_extension = class_name;\n\
    \                break;\n            }\n        }\n    }\n    for (auto extension\
    \ : extensions) {\n        if (extension == class_name) {\n            strongest_extension\
    \ = class_name;\n            break;\n        }\n        cap_counter++;\n     \
    \   sm_counter++;\n    }\n    if (cap_counter > sm_counter) {\n        for (auto\
    \ extension : extensions) {\n            if (extension == class_name) {\n    \
    \            strongest_extension = class_name;\n                break;\n     \
    \       }\n        }\n    }\n    for (auto extension : extensions) {\n       \
    \ if (extension == class_name) {\n            strongest_extension = class_name;\n\
    \            break;\n        }\n        cap_counter++;\n        sm_counter++;\n\
    \    }\n    if (cap_counter > sm_counter) {\n        for (auto extension : extensions)\
    \ {\n            if (extension == class_name) {\n                strongest_extension\
    \ = class_name;\n                break;\n            }\n        }\n    }\n   \
    \ for (auto extension : extensions) {\n        if (extension == class_name) {\n\
    \            strongest_extension = class_name;\n            break;\n        }\n\
    \        cap_counter++;\n        sm_counter++;\n    }\n    if (cap_counter > sm_counter)\
    \ {\n        for (auto extension : extensions) {\n            if (extension ==\
    \ class_name) {\n                strongest_extension = class_name;\n         \
    \       break;\n            }\n        }\n    }\n    for (auto extension : extensions)\
    \ {\n        if (extension == class_name) {\n            strongest_extension =\
    \ class_name;\n            break;\n        }\n        cap_counter++;\n       \
    \ sm_counter++;\n    }\n    if (cap_counter > sm_counter) {\n        for (auto\
    \ extension : extensions) {\n            if (extension == class_name) {\n    \
    \            strongest_extension = class_name;\n                break;\n     \
    \       }\n        }\n    }\n    for (auto extension : extensions) {\n       \
    \ if (extension == class_name) {\n            strongest_extension = class_name;\n\
    \            break;\n        }\n        cap_counter++;\n        sm_counter++;\n\
    \    }\n    if (cap_counter > sm_counter) {\n        for (auto extension : extensions)\
    \ {\n            if (extension == class_name) {\n                strongest_extension\
    \ = class_name;\n                break;\n            }\n        }\n    }\n   \
    \ for (auto extension : extensions) {\n        if (extension == class_name) {\n\
    \            stron", "    // Your code here\n    \n    std::string strongest_extension\
    \ = \"\";\n    int strongest_extension_strength = 0;\n    \n    for(int i = 0;\
    \ i < extensions.size(); i++) {\n        std::string extension = extensions[i];\n\
    \        \n        int extension_strength = extension.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    );\n        \n        if(extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = class_name;\n\
    \    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n     \
    \   cap += ext.length();\n        sm += ext.length();\n    }\n    float strength\
    \ = cap - sm;\n    if (strength > 0) {\n        strongest_extension += \".\";\n\
    \    }\n    strongest_extension += extensions[0];\n    return strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.length();\n\
    \        sm += ext.length() - ext.length();\n    }\n    double strength = cap\
    \ - sm;\n    int max_strength = -1;\n    for (auto &ext : extensions) {\n    \
    \    if (ext.length() > max_strength) {\n            max_strength = ext.length();\n\
    \        }\n    }\n    for (auto &ext : extensions) {\n        if (ext.length()\
    \ == max_strength) {\n            if (ext.compare(0, cap, class_name, 0, cap)\
    \ == 0) {\n                strongest_extension = class_name + ext;\n         \
    \   }\n        }\n    }\n    return strongest_extension;", "    // Your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.length();\n        sm\
    \ += ext.length();\n    }\n    float strength = cap - sm;\n    if (strength >\
    \ 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n  \
    \  }\n    for (auto &ext : extensions) {\n        if (ext.length() == strongest_extension.length())\
    \ {\n            if (ext.compare(strongest_extension) == 0) {\n              \
    \  strongest_extension = class_name + \".\" + ext;\n            }\n        }\n\
    \    }\n    return strongest_extension;", "    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_num = 0, sm_num = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap_num += ext.length();\n        sm_num += ext.length()\
    \ - cap_num;\n    }\n    float strength = cap_num - sm_num;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (int i = 1; i < extensions.size(); i++) {\n        if (strength\
    \ > 0) {\n            strongest_extension = class_name + \".\" + extensions[i];\n\
    \        }\n    }\n    return strongest_extension;", "    int cap_num = 0, sm_num\
    \ = 0;\n    std::string strongest_ext;\n    for (auto ext : extensions) {\n  \
    \      cap_num += ext.length();\n        sm_num += ext.length() - cap_num;\n \
    \   }\n    if (cap_num - sm_num > 0) {\n        auto cap_num = cap_num - sm_num;\n\
    \        auto sm_num = sm_num;\n        auto cap_pos = cap_num / 2;\n        auto\
    \ sm_pos = sm_num / 2;\n        auto cap_ext = extensions[cap_pos];\n        auto\
    \ sm_ext = extensions[sm_pos];\n        auto cap_ext1 = extensions[cap_pos - 1];\n\
    \        auto sm_ext1 = extensions[sm_pos - 1];\n        if (cap_ext < sm_ext)\
    \ {\n            strongest_ext = class_name + cap_ext;\n        } else {\n   \
    \         strongest_ext = class_name + sm_ext;\n        }\n        if (cap_ext1\
    \ < sm_ext1) {\n            strongest_ext += cap_ext1;\n        } else {\n   \
    \         strongest_ext += sm_ext1;\n        }\n    } else {\n        strongest_ext\
    \ = class_name;\n    }\n    return strongest_ext;", "    std::string strongest_extension\
    \ = class_name;\n    int cap_counter = 0;\n    int sml_counter = 0;\n    for (auto\
    \ &extension : extensions) {\n        cap_counter += extension.at(0) - 'A';\n\
    \        sml_counter += extension.at(1) - 'a';\n    }\n    if (cap_counter > sml_counter)\
    \ {\n        strongest_extension += \".\";\n    }\n    strongest_extension +=\
    \ extensions[0];\n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap_num = 0, sm_num = 0;\n\
    \    for (auto ext : extensions) {\n        cap_num += ext.length();\n       \
    \ sm_num += ext.length();\n    }\n    float strength = cap_num - sm_num;\n   \
    \ if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto ext : extensions) {\n        if (ext.length() > strongest_extension.length())\
    \ {\n            strongest_extension = class_name + \".\" + ext;\n        }\n\
    \    }\n    return strongest_extension;", "    std::string strongest_extension\
    \ = class_name + \".\";\n    std::string strongest_extension_strength = \"-1\"\
    ;\n    int strongest_extension_strength_counter = 0;\n    for (auto extension\
    \ : extensions) {\n        int extension_strength = std::count_if(extension.begin(),\
    \ extension.end(), [](char c) {\n            return std::toupper(c) - std::toupper(std::tolower(c));\n\
    \        });\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension_strength_counter\
    \ = 1;\n        } else if (extension_strength == strongest_extension_strength)\
    \ {\n            strongest_extension_strength_counter++;\n        }\n    }\n \
    \   if (strongest_extension_strength_counter == 1) {\n        strongest_extension_strength\
    \ = strongest_extension_strength + extensions[extensions.size() - strongest_extension_strength_counter];\n\
    \    }\n    return strongest_extension;", "    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for(auto\
    \ &extension : extensions){\n        cap += extension.at(0);\n        sm += extension.at(1);\n\
    \    }\n    float strength = cap - sm;\n    for(auto &extension : extensions){\n\
    \        if(extension.at(1) == extension.at(0) && extension.at(1) == extension.at(1)){\n\
    \            strongest_extension = class_name + \".\" + extension.at(0);\n   \
    \     }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension;\n    double strongest_extension_strength\
    \ = -1;\n    for (auto extension : extensions) {\n        if (extension.at(0)\
    \ == class_name[0]) {\n            strongest_extension = extension;\n        \
    \    strongest_extension_strength = -1;\n            for (auto extension_letter\
    \ : extension) {\n                if (extension_letter == class_name[class_name.size()\
    \ - 1]) {\n                    strongest_extension_strength = extension_letter\
    \ - class_name[class_name.size() - 1];\n                    break;\n         \
    \       }\n            }\n        }\n    }\n    if (strongest_extension_strength\
    \ > 0) {\n        return class_name + \".\" + strongest_extension;\n    } else\
    \ {\n        return class_name;\n    }"]
stop_tokens:
- "\n}"
