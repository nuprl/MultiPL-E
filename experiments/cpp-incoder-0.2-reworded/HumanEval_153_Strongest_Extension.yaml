name: HumanEval_153_Strongest_Extension
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the name\
  \ of a class (a string) and a vector of extensions.\n// The extensions are to be\
  \ used to load additional classes to the class. The\n// strength of the extension\
  \ is as follows: Let CAP be the number of the uppercase\n// letters in the extension's\
  \ name, and let SM be the number of lowercase letters \n// in the extension's name,\
  \ the strength is given by the fraction CAP - SM. \n// You should find the strongest\
  \ extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
  // If there are two or more extensions with the same strength, you should\n// choose\
  \ the one that comes first in the vector.\n// For example, if you are given \"Slices\"\
  \ as the class and a vector of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
  \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
  \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"\
  my_class\"), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\"\
  , (std::string)\"CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string\
  \ class_name, std::vector<std::string> extensions) {\n"
tests: "}\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
  Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
  , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
  Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\"\
  , (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
  ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
  t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\", (std::string)\"\
  NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"));\n   \
  \ assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"Ta\", (std::string)\"\
  TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"}))) == (\"K.TAR\"));\n  \
  \  assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"Tab\"\
  , (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"}))) == (\"\
  __HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
  HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
  Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
  finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
  NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"));\n\
  \    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"Bb\", (std::string)\"\
  91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"), (std::vector<std::string>({(std::string)\"\
  671235\", (std::string)\"Bb\"}))) == (\"Sp.671235\"));\n}\n"
completions: ["    // Write your code here\n    std::string strongest_extension;\n\
    \    int cap_extension = 0;\n    int sm_extension = 0;\n    for (auto &extension\
    \ : extensions) {\n        if (extension.at(0) == class_name[0]) {\n         \
    \   cap_extension++;\n        }\n        if (extension.at(1) == class_name[1])\
    \ {\n            sm_extension++;\n        }\n    }\n    if (cap_extension - sm_extension\
    \ > 0) {\n        strongest_extension = class_name + extensions[cap_extension\
    \ - sm_extension];\n    }\n    return strongest_extension;", "    // Your code\
    \ here\n    \n    std::string strongest_extension = \"\";\n    \n    int cap_extension\
    \ = 0;\n    int sm_extension = 0;\n    \n    for(auto extension : extensions)\
    \ {\n        cap_extension = std::count_if(extension.begin(), extension.end(),\
    \ [](char c){ return std::isupper(c); });\n        sm_extension = std::count_if(extension.begin(),\
    \ extension.end(), [](char c){ return std::islower(c); });\n        \n       \
    \ float strength = cap_extension - sm_extension;\n        \n        if(strength\
    \ > 0) {\n            strongest_extension = class_name + \".\" + extension;\n\
    \            break;\n        }\n    }\n    \n    return strongest_extension;",
  "    // Your code here\n    \n    std::string strongest_extension = \"\";\n    int\
    \ strongest_extension_strength = 0;\n    \n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        int extension_strength = extensions[i].length() - extensions[i].find_first_not_of(\"\
    \ \");\n        if (extension_strength > strongest_extension_strength) {\n   \
    \         strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension;",
  "    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &extension : extensions) {\n        cap += (extension.at(0) - 'A');\n\
    \        sm += (extension.at(1) - 'a');\n    }\n    float strength = cap - sm;\n\
    \    int index = 0;\n    for (auto &extension : extensions) {\n        if (extension.at(0)\
    \ == class_name.at(0)) {\n            if (strength > index) {\n              \
    \  strongest_extension = class_name + \".\" + extension;\n                break;\n\
    \            }\n            index++;\n        }\n    }\n    return strongest_extension;",
  "    // Your code here\n    \n    std::string strongest_extension = \"\";\n    int\
    \ strongest_extension_strength = 0;\n    \n    for (auto &extension : extensions)\
    \ {\n        int extension_strength = extension.size()-extension.find_first_not_of(std::string(\"\
    \"));\n        if (extension_strength > strongest_extension_strength) {\n    \
    \        strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto &extension : extensions) {\n        cap\
    \ += extension.at(0) - 'A';\n        sm += extension.at(1) - 'a';\n    }\n   \
    \ if (cap - sm == 0) {\n        strongest_extension = class_name;\n    } else\
    \ {\n        strongest_extension = class_name + extensions[extensions.size() -\
    \ 1] + std::to_string(cap - sm);\n    }\n    return strongest_extension;", " \
    \   std::string strongest_extension;\n    int cap_counter = 0;\n    int sm_counter\
    \ = 0;\n    for (auto extension : extensions) {\n        cap_counter += extension.at(0)\
    \ - 'A';\n        sm_counter += extension.at(1) - 'a';\n    }\n    if (cap_counter\
    \ > sm_counter) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    } else {\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap_counter = 0;\n    int sm_counter = 0;\n  \
    \  for(auto &extension : extensions) {\n        if(extension.at(0) == class_name[0])\
    \ {\n            cap_counter++;\n        }\n        if(extension.at(1) == class_name[1])\
    \ {\n            sm_counter++;\n        }\n    }\n    double strength = cap_counter\
    \ - sm_counter;\n    double strength_percentage = strength / cap_counter;\n  \
    \  double strength_percentage_rounded = round(strength_percentage);\n    double\
    \ strength_percentage_rounded_down = floor(strength_percentage_rounded);\n   \
    \ double strength_percentage_rounded_up = ceil(strength_percentage_rounded);\n\
    \    double strength_percentage_rounded_down = round(strength_percentage_rounded);\n\
    \    if(strength_percentage_rounded_down == strength_percentage_rounded) {\n \
    \       strongest_extension = class_name + \".\" + extensions[0];\n    }\n   \
    \ else if(strength_percentage_rounded_up == strength_percentage_rounded) {\n \
    \       strongest_extension = class_name + \".\" + extensions[2];\n    }\n   \
    \ else {\n        strongest_extension = class_name + \".\" + extensions[strength_percentage_rounded_down];\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    \n\
    \    std::string strongest_extension = \"\";\n    \n    for(int i = 0; i < extensions.size();\
    \ i++){\n        std::string extension = extensions[i];\n        \n        for(int\
    \ j = 0; j < extension.size(); j++){\n            char c = extension[j];\n   \
    \         \n            if(c == toupper(extension[j])){\n                strongest_extension\
    \ += c;\n            }\n        }\n    }\n    \n    return class_name + \".\"\
    \ + strongest_extension;", "    int cap_letters = 0, sm_letters = 0;\n    for\
    \ (auto &ext : extensions) {\n        cap_letters += ext.length();\n        sm_letters\
    \ += ext.length();\n    }\n    int strength = cap_letters - sm_letters;\n    if\
    \ (strength > 0) {\n        auto it = std::min_element(extensions.begin(), extensions.end(),\
    \ \n            [](std::string a, std::string b) { return a.length() < b.length();\
    \ });\n        std::string extension = class_name + \".\" + extensions[it - extensions.begin()];\n\
    \        return extension;\n    }\n    return class_name;", "    // Your code\
    \ here\n    \n    std::string strongest_extension = \"\";\n    int strongest_extension_strength\
    \ = 0;\n    \n    for (auto extension : extensions) {\n        auto cap = extension.find_first_of('A');\n\
    \        auto sm = extension.find_first_of('l');\n        auto strength = cap\
    \ - sm;\n        if (strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    \n    return class_name + \".\" + strongest_extension;", "    // Write your\
    \ code here\n    std::string strongest_extension = \"\";\n    int cap_num = 0,\
    \ sm_num = 0;\n    for (auto &ext : extensions) {\n        cap_num += ext.length();\n\
    \        sm_num += ext.length() - 1;\n    }\n    float strength = cap_num - sm_num;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto &ext : extensions) {\n        if (ext.length() == strongest_extension.length())\
    \ {\n            if (ext.compare(0, strongest_extension.length(), strongest_extension)\
    \ == 0) {\n                strongest_extension = class_name + \".\" + ext;\n \
    \           }\n        }\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension = \"\";\n    int cap_counter\
    \ = 0;\n    int sm_counter = 0;\n    for (auto &extension : extensions) {\n  \
    \      if (extension.at(0) == class_name[0]) {\n            cap_counter++;\n \
    \       }\n        if (extension.at(1) == class_name[1]) {\n            sm_counter++;\n\
    \        }\n    }\n    if (cap_counter > sm_counter) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    else {\n        strongest_extension\
    \ = class_name + \".\" + extensions[1];\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension;\n    int cap_counter\
    \ = 0;\n    int sm_counter = 0;\n    for (auto &extension : extensions) {\n  \
    \      if (extension.at(0) == class_name[0]) {\n            cap_counter++;\n \
    \       }\n        if (extension.at(1) == class_name[1]) {\n            sm_counter++;\n\
    \        }\n    }\n    if (cap_counter > sm_counter) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    else {\n        strongest_extension\
    \ = class_name + \".\" + extensions[1];\n    }\n    return strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    int cap_counter\
    \ = 0;\n    int sm_counter = 0;\n    for (auto e : extensions) {\n        if (e.at(0)\
    \ == class_name[0]) {\n            cap_counter++;\n        }\n        if (e.at(1)\
    \ == class_name[1]) {\n            sm_counter++;\n        }\n    }\n    if (cap_counter\
    \ > sm_counter) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else {\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    }\n    return strongest_extension;", "    // Your code here\n    \n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    \n    for\
    \ (int i = 0; i < extensions.size(); i++) {\n        cap = extensions[i].size();\n\
    \        sm = cap - 1;\n        if (cap > sm) {\n            strongest_extension\
    \ = class_name + \".\" + extensions[i];\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto i : extensions) {\n        cap += i[0]-'A';\n\
    \        sm += i[1]-'a';\n    }\n    float strength = cap - sm;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else {\n        for (auto i : extensions) {\n            if (i[0]\
    \ == extensions[0][0] && i[1] == extensions[0][1]) {\n                strongest_extension\
    \ = class_name + \".\" + i;\n                break;\n            }\n        }\n\
    \    }\n    return strongest_extension;", "    int cap_num = 0, sm_num = 0;\n\
    \    for (auto &ext : extensions) {\n        cap_num += ext.length();\n      \
    \  sm_num += ext.length() - ext.find_first_not_of(ext.begin(), ext.end());\n \
    \   }\n    int cap = cap_num / sm_num;\n    int sm = cap_num - cap * sm_num;\n\
    \    int strength = cap - sm;\n    for (auto &ext : extensions) {\n        if\
    \ (ext.length() == cap) {\n            if (strength > 0) {\n                return\
    \ class_name + \".\" + ext;\n            }\n        }\n    }\n    return class_name;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    std::string\
    \ extension_strength = \"\";\n    std::string extension_class = \"\";\n    std::string\
    \ extension_class_name = \"\";\n    std::string extension_class_name_with_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_strength = \"\"\
    ;\n    std::string extension_class_name_with_extension_class = \"\";\n    std::string\
    \ extension_class_name_with_extension_class_name = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_strength\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_strength\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_strength\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_strength\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_strength\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap +=\
    \ ext.length();\n        sm += ext.length();\n    }\n    float strength = cap\
    \ - sm;\n    int index = std::distance(extensions.begin(), std::max_element(extensions.begin(),\
    \ extensions.end(), [&](std::string a, std::string b) { return a.length() < b.length();\
    \ }));\n    if (strength == -1) {\n        strongest_extension = class_name;\n\
    \    } else {\n        strongest_extension = class_name + \".\" + extensions[index];\n\
    \    }\n    return strongest_extension;"]
stop_tokens:
- "\n}"
