name: HumanEval_140_fix_spaces
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
  \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
  \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
  \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
  )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
  \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text) {\n"
tests: "}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
  Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"\
  Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) ==\
  \ (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) ==\
  \ (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
  ));\n}\n"
completions: ["    std::string fixed_text = text;\n    size_t pos = 0;\n    while\
    \ ((pos = fixed_text.find(\"  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos,\
    \ 2, \"_\");\n        pos += 2;\n    }\n    return fixed_text;", "    std::string\
    \ result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\" \", pos))\
    \ != std::string::npos) {\n        result.replace(pos, 1, std::string(\"_\"));\n\
    \        pos += 1;\n    }\n    if (result.size() > 2) {\n        pos = 0;\n  \
    \      while ((pos = result.find(\" \", pos)) != std::string::npos) {\n      \
    \      result.replace(pos, 1, std::string(\"-\"));\n            pos += 1;\n  \
    \      }\n    }\n    return result;", "    std::string result = text;\n    std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    }\n    return result;", "    std::string res =\
    \ text;\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n    if (res.size()\
    \ > 2) {\n        std::replace(std::begin(res), std::end(res), ' ', '-');\n  \
    \  }\n    return res;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if\
    \ (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n    }\n\
    \    return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    std::replace(s.begin(), s.end(), '_', ' ');\n    if (s.size()\
    \ > 2) {\n        std::replace(s.begin(), s.end(), '_', '-');\n    }\n    return\
    \ s;", "    std::string result = text;\n    size_t pos = 0;\n    while ((pos =\
    \ result.find_first_not_of(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"-\"));\n        pos += 1;\n    }\n    while ((pos = result.find_first_of(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    return result;", "    std::string res =\
    \ text;\n    size_t pos = 0;\n    while ((pos = res.find(\" \", pos)) != std::string::npos)\
    \ {\n        res = res.substr(0, pos) + \"_\" + res.substr(pos + 1);\n       \
    \ ++pos;\n    }\n    if (res.size() > 2) {\n        pos = 0;\n        while ((pos\
    \ = res.find(\" \", pos)) != std::string::npos) {\n            res = res.substr(0,\
    \ pos) + \"-\" + res.substr(pos + 1);\n            ++pos;\n        }\n    }\n\
    \    return res;", "    std::string result = text;\n    size_t pos = 0;\n    while\
    \ ((pos = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos += 1;\n    }\n    if (result.size() > 2)\
    \ {\n        size_t pos = 0;\n        while ((pos = result.find(\" \", pos)) !=\
    \ std::string::npos) {\n            result.replace(pos, 1, std::string(\"-\"));\n\
    \            pos += 1;\n        }\n    }\n    return result;", "    std::string\
    \ s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    std::replace(s.begin(),\
    \ s.end(), '_', ' ');\n    return s;", "    std::string result = text;\n    std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    if (result.find_first_not_of(' ') != std::string::npos)\
    \ {\n        std::replace(result.begin(), result.end(), ' ', '-');\n    }\n  \
    \  return result;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        s.replace(s.begin(),\
    \ s.begin() + 2, \"\");\n    }\n    return s;", "    std::string s = text;\n \
    \   std::replace(s.begin(), s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    std::replace(s.begin(), s.end(), ' ', '_');\n    return s;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;", "    std::string res = text;\n    size_t pos = 0;\n  \
    \  while ((pos = res.find(\" \", pos)) != std::string::npos) {\n        res.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos += 1;\n    }\n    if (res.size() > 2) {\n\
    \        res.replace(pos, res.size() - 2, std::string(\"_\"));\n    }\n    return\
    \ res;", "    std::string fixed_text = text;\n    size_t pos = 0;\n    while ((pos\
    \ = fixed_text.find(\"  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos,\
    \ 2, \" _\");\n        pos += 2;\n    }\n    return fixed_text;", "    std::string\
    \ fixed_text = text;\n    \n    // Replace all spaces with underscores\n    size_t\
    \ pos = 0;\n    while((pos = fixed_text.find(\" \", pos)) != std::string::npos)\
    \ {\n        fixed_text.replace(pos, 1, std::string(\"_\"));\n        pos += 1;\n\
    \    }\n    \n    // If there are more than 2 consecutive spaces, replace all\
    \ consecutive spaces with -\n    size_t pos2 = fixed_text.find(\" \", pos);\n\
    \    while(pos2 != std::string::npos) {\n        if(pos2 - pos > 1) {\n      \
    \      fixed_text.replace(pos2, pos2 - pos, std::string(\"-\"));\n        }\n\
    \        pos2 = fixed_text.find(\" \", pos2 + 1);\n    }\n    \n    return fixed_text;",
  "    std::string fixed_text = text;\n    size_t pos = 0;\n    while ((pos = fixed_text.find(\"\
    \  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos, 2, \"_\"\
    );\n        pos += 2;\n    }\n    return fixed_text;", "    std::string result\
    \ = text;\n    size_t pos = 0;\n    while (pos < result.length()) {\n        pos\
    \ = result.find_first_not_of(\" \", pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = result.find_first_not_of(\" \", pos + 1);\n    }\n    return\
    \ result;", "    std::string s = text;\n    std::replace(s.begin(), s.end(), '\
    \ ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    }\n    return s;"]
stop_tokens:
- "\n}"
