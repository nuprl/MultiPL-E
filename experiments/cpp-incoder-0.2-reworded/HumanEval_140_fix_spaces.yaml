name: HumanEval_140_fix_spaces
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
  \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
  \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
  \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
  )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
  \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text) {\n"
tests: "}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
  Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"\
  Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) ==\
  \ (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) ==\
  \ (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
  ));\n}\n"
completions: ["    std::string fixed_text = text;\n    size_t pos = 0;\n    while\
    \ ((pos = fixed_text.find(\"  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos,\
    \ 2, \"_\");\n        pos += 2;\n    }\n    return fixed_text;", "    std::string\
    \ result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\" \", pos))\
    \ != std::string::npos) {\n        result.replace(pos, 1, std::string(\"_\"));\n\
    \        pos += 1;\n    }\n    if (result.size() > 2) {\n        pos = 0;\n  \
    \      while ((pos = result.find(\" \", pos)) != std::string::npos) {\n      \
    \      result.replace(pos, 1, std::string(\"-\"));\n            pos += 1;\n  \
    \      }\n    }\n    return result;", "    std::string result = text;\n    std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    }\n    return result;", "    std::string res =\
    \ text;\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n    if (res.size()\
    \ > 2) {\n        std::replace(std::begin(res), std::end(res), ' ', '-');\n  \
    \  }\n    return res;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if\
    \ (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n    }\n\
    \    return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    std::replace(s.begin(), s.end(), '_', ' ');\n    if (s.size()\
    \ > 2) {\n        std::replace(s.begin(), s.end(), '_', '-');\n    }\n    return\
    \ s;", "    std::string result = text;\n    size_t pos = 0;\n    while ((pos =\
    \ result.find_first_not_of(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"-\"));\n        pos += 1;\n    }\n    while ((pos = result.find_first_of(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    return result;", "    std::string res =\
    \ text;\n    size_t pos = 0;\n    while ((pos = res.find(\" \", pos)) != std::string::npos)\
    \ {\n        res = res.substr(0, pos) + \"_\" + res.substr(pos + 1);\n       \
    \ ++pos;\n    }\n    if (res.size() > 2) {\n        pos = 0;\n        while ((pos\
    \ = res.find(\" \", pos)) != std::string::npos) {\n            res = res.substr(0,\
    \ pos) + \"-\" + res.substr(pos + 1);\n            ++pos;\n        }\n    }\n\
    \    return res;", "    std::string result = text;\n    size_t pos = 0;\n    while\
    \ ((pos = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos += 1;\n    }\n    if (result.size() > 2)\
    \ {\n        size_t pos = 0;\n        while ((pos = result.find(\" \", pos)) !=\
    \ std::string::npos) {\n            result.replace(pos, 1, std::string(\"-\"));\n\
    \            pos += 1;\n        }\n    }\n    return result;", "    std::string\
    \ s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    std::replace(s.begin(),\
    \ s.end(), '_', ' ');\n    return s;", "    std::string result = text;\n    std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    if (result.find_first_not_of(' ') != std::string::npos)\
    \ {\n        std::replace(result.begin(), result.end(), ' ', '-');\n    }\n  \
    \  return result;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        s.replace(s.begin(),\
    \ s.begin() + 2, \"\");\n    }\n    return s;", "    std::string s = text;\n \
    \   std::replace(s.begin(), s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    std::replace(s.begin(), s.end(), ' ', '_');\n    return s;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;", "    std::string res = text;\n    size_t pos = 0;\n  \
    \  while ((pos = res.find(\" \", pos)) != std::string::npos) {\n        res.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos += 1;\n    }\n    if (res.size() > 2) {\n\
    \        res.replace(pos, res.size() - 2, std::string(\"_\"));\n    }\n    return\
    \ res;", "    std::string fixed_text = text;\n    size_t pos = 0;\n    while ((pos\
    \ = fixed_text.find(\"  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos,\
    \ 2, \" _\");\n        pos += 2;\n    }\n    return fixed_text;", "    std::string\
    \ fixed_text = text;\n    \n    // Replace all spaces with underscores\n    size_t\
    \ pos = 0;\n    while((pos = fixed_text.find(\" \", pos)) != std::string::npos)\
    \ {\n        fixed_text.replace(pos, 1, std::string(\"_\"));\n        pos += 1;\n\
    \    }\n    \n    // If there are more than 2 consecutive spaces, replace all\
    \ consecutive spaces with -\n    size_t pos2 = fixed_text.find(\" \", pos);\n\
    \    while(pos2 != std::string::npos) {\n        if(pos2 - pos > 1) {\n      \
    \      fixed_text.replace(pos2, pos2 - pos, std::string(\"-\"));\n        }\n\
    \        pos2 = fixed_text.find(\" \", pos2 + 1);\n    }\n    \n    return fixed_text;",
  "    std::string fixed_text = text;\n    size_t pos = 0;\n    while ((pos = fixed_text.find(\"\
    \  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos, 2, \"_\"\
    );\n        pos += 2;\n    }\n    return fixed_text;", "    std::string result\
    \ = text;\n    size_t pos = 0;\n    while (pos < result.length()) {\n        pos\
    \ = result.find_first_not_of(\" \", pos);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = result.find_first_not_of(\" \", pos + 1);\n    }\n    return\
    \ result;", "    std::string s = text;\n    std::replace(s.begin(), s.end(), '\
    \ ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    }\n    return s;", "    std::string fixed_text = text;\n   \
    \ size_t pos = 0;\n    while ((pos = fixed_text.find(' ', pos)) != std::string::npos)\
    \ {\n        fixed_text.replace(pos, 1, \" _\");\n        pos += 1;\n    }\n \
    \   if (fixed_text.size() > 2) {\n        size_t pos = 0;\n        while ((pos\
    \ = fixed_text.find(' ', pos)) != std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" -\");\n            pos += 1;\n        }\n    }\n    return fixed_text;",
  "    std::replace(text.begin(), text.end(), ' ', '_');\n    std::string::size_type\
    \ pos = 0;\n    std::string::size_type prev = 0;\n    std::string::size_type next\
    \ = 0;\n    std::string::size_type count = 0;\n    while (pos < text.size()) {\n\
    \        next = text.find_first_of(' ', pos);\n        if (next == std::string::npos)\
    \ {\n            next = text.size();\n        }\n        prev = pos;\n       \
    \ pos = next;\n        if (pos - prev > 1) {\n            while (pos < text.size())\
    \ {\n                next = text.find_first_of(' ', pos);\n                if\
    \ (next == std::string::npos) {\n                    next = text.size();\n   \
    \             }\n                text[pos] = '-';\n                pos = next;\n\
    \            }\n            while (pos < text.size()) {\n                next\
    \ = text.find_first_of(' ', pos);\n                if (next == std::string::npos)\
    \ {\n                    next = text.size();\n                }\n            \
    \    text[pos] = '_';\n                pos = next;\n            }\n        }\n\
    \    }\n    return text;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  return res;", "    std::string s = text;\n    s.replace(s.begin(), s.end(),\
    \ ' ');\n    size_t prev = 0, pos = 0;\n    while (pos < s.size()) {\n       \
    \ pos = s.find_first_not_of(\" \", prev);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        s.replace(pos, 1, std::string(\"-\"\
    ));\n        prev = pos + 1;\n    }\n    return s;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2) {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;", " \
    \   std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    if (res.size() > 2) {\n        std::replace(std::begin(res),\
    \ std::end(res), ' ', '-');\n    }\n    return res;", "    std::string result\
    \ = text;\n    size_t pos = 0;\n    while ((pos = result.find(\" \", pos)) !=\
    \ std::string::npos) {\n        result.replace(pos, 1, std::string(\"_\"));\n\
    \        pos = result.find(\" \", pos + 1);\n    }\n    if (pos < result.length())\
    \ {\n        result.replace(pos, 1, std::string(\"-\"));\n    }\n    return result;",
  "    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    \ _\"));\n        pos += 2;\n    }\n    return result;", "    std::string s =\
    \ text;\n    size_t pos = 0;\n    while(pos < s.size()) {\n        size_t next\
    \ = s.find_first_not_of(\" \", pos);\n        if(next == std::string::npos) {\n\
    \            next = s.size();\n        }\n        s.replace(pos, next - pos, \"\
    _\");\n        pos = next + 1;\n    }\n    return s;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0,\
    \ 2) == \" \") {\n        std::replace(s.begin(), s.end(), ' ', '-');\n    }\n\
    \    return s;", "    std::string s = text;\n    s.replace(s.begin(), s.end(),\
    \ ' ');\n    size_t prev = 0, next = 0, count = 0;\n    while (next < s.size())\
    \ {\n        if (s[next] == ' ') {\n            count++;\n            if (count\
    \ == 2) {\n                s[prev] = '_';\n                s[next] = '-';\n  \
    \              prev = next + 1;\n                count = 0;\n            }\n \
    \       } else {\n            count = 0;\n        }\n        next++;\n    }\n\
    \    return s;", "    std::string s = text;\n    s.replace(s.begin(), s.end(),\
    \ ' ');\n    size_t pos = 0;\n    while (pos < s.size() && s[pos] == ' ') {\n\
    \        ++pos;\n    }\n    if (pos == s.size()) {\n        return text;\n   \
    \ }\n    size_t prev = pos;\n    while (pos < s.size() && s[pos] == ' ') {\n \
    \       ++pos;\n    }\n    if (pos == s.size()) {\n        return text;\n    }\n\
    \    size_t next = pos;\n    while (next < s.size() && s[next] == ' ') {\n   \
    \     ++next;\n    }\n    if (next == s.size()) {\n        return text;\n    }\n\
    \    s.replace(prev, next, ' ');\n    s.replace(pos, s.size(), '_');\n    return\
    \ s;", "    std::string result = text;\n    size_t pos = 0;\n    while ((pos =\
    \ result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos = result.find(\" \", pos + 1);\n    }\n\
    \    if (pos < result.length()) {\n        result.replace(pos, 1, std::string(\"\
    -\"));\n    }\n    return result;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '-');\n    }\n    return s;", " \
    \   std::string res = text;\n    std::size_t found = res.find_first_not_of(\"\
    \ \");\n    while (found != std::string::npos) {\n        res = res.substr(0,\
    \ found) + std::to_string(std::distance(text.begin(), found)) + res.substr(found\
    \ + 1);\n        found = res.find_first_not_of(\" \", found + 1);\n    }\n   \
    \ return res;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n        std::replace(s.begin(), s.end(), '-', '_');\n    }\n   \
    \ return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    }\n    return s;", "    std::string result = text;\n    size_t\
    \ pos = 0;\n    while (pos < result.length()) {\n        size_t next = result.find_first_not_of(\"\
    \ \", pos);\n        if (next == std::string::npos) {\n            next = result.length();\n\
    \        }\n        result.replace(pos, next - pos, \"_\");\n        pos = next\
    \ + 1;\n    }\n    if (result.length() > 2 && result.substr(0, 2) == \"_ \") {\n\
    \        result.replace(result.begin(), result.begin() + 2, \"\");\n    }\n  \
    \  return result;", "    std::string result = text;\n    size_t pos = 0;\n   \
    \ while ((pos = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos += 1;\n    }\n    if (result.size() > 2)\
    \ {\n        size_t pos = 0;\n        while ((pos = result.find(\" \", pos)) !=\
    \ std::string::npos) {\n            result.replace(pos, 1, std::string(\"-\"));\n\
    \            pos += 1;\n        }\n    }\n    return result;", "    std::string\
    \ s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size()\
    \ > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return\
    \ s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), '_', ' ');\n    if (s.size() > 2) {\n  \
    \      std::replace(s.begin(), s.end(), '_', '-');\n    }\n    return s;", " \
    \   std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    return res;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '-');\n    }\n    return s;", "    std::string fixed_text = text;\n\
    \    size_t pos = 0;\n    while ((pos = fixed_text.find(\" \", pos)) != std::string::npos)\
    \ {\n        fixed_text.replace(pos, 1, std::string(\"_\"));\n        ++pos;\n\
    \    }\n    if (fixed_text.size() > 2) {\n        size_t pos = 0;\n        while\
    \ ((pos = fixed_text.find(\" \", pos)) != std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, std::string(\"-\"));\n            ++pos;\n        }\n    }\n    return fixed_text;",
  "    std::string s = text;\n    size_t pos = 0;\n    while (pos < s.size()) {\n\
    \        pos = s.find_first_not_of(\" \", pos);\n        if (pos != std::string::npos)\
    \ {\n            s.insert(pos, \"_\");\n        }\n        pos = s.find_first_of(\"\
    \ \", pos);\n        if (pos != std::string::npos) {\n            s.insert(pos,\
    \ \"_\");\n        }\n    }\n    return s;", "    std::string result = text;\n\
    \    size_t pos = 0;\n    while ((pos = result.find_first_not_of(\" \", pos))\
    \ != std::string::npos) {\n        result.replace(pos, 1, std::string(\"_\"));\n\
    \        pos = result.find_first_not_of(\" \", pos + 1);\n    }\n    pos = 0;\n\
    \    while ((pos = result.find_first_of(\" \", pos)) != std::string::npos) {\n\
    \        result.replace(pos, 1, std::string(\"-\"));\n        pos = result.find_first_of(\"\
    \ \", pos + 1);\n    }\n    return result;", "    std::string s = text;\n    size_t\
    \ pos = 0;\n    while (pos < s.size()) {\n        size_t next_pos = s.find_first_not_of(\"\
    \ \", pos);\n        if (next_pos != std::string::npos) {\n            s.erase(pos,\
    \ next_pos - pos);\n        }\n        pos = next_pos + 1;\n    }\n    if (s.size()\
    \ > 2) {\n        size_t next_pos = s.find_first_not_of(\" \", pos);\n       \
    \ if (next_pos != std::string::npos) {\n            s.erase(next_pos + 1, s.size());\n\
    \        }\n    }\n    return s;", "    std::string result = text;\n    std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    std::replace(result.begin(), result.end(), ' \
    \ ', '-');\n    std::replace(result.begin(), result.end(), '\\t', '-');\n    std::replace(result.begin(),\
    \ result.end(), '\\n', '_');\n    std::replace(result.begin(), result.end(), '\\\
    r', '_');\n    std::replace(result.begin(), result.end(), '\\v', '_');\n    std::replace(result.begin(),\
    \ result.end(), '\\f', '_');\n    std::replace(result.begin(), result.end(), '\\\
    a', '_');\n    std::replace(result.begin(), result.end(), '\\e', '_');\n    std::replace(result.begin(),\
    \ result.end(), '\\v', '_');\n    std::replace(result.begin(), result.end(), '\\\
    s', '_');\n    std::replace(result.begin(), result.end(), '\\h', '_');\n    std::replace(result.begin(),\
    \ result.end(), '\\o', '_');\n    std::replace(result.begin(), result.end(), '\\\
    W', '_');\n    std::replace(result.begin(), result.end(), '\\s', '_');\n    std::replace(result.begin(),\
    \ result.end(), '\\h', '_');\n    std::replace(result.begin(), result.end(), '\\\
    o', '_');\n    std::replace(result.begin(), result.end(), '\\W', '_');\n    std::replace(result.begin(),\
    \ result.end(), '\\s', '_');\n    std::replace(result.begin(), result.end(), '\\\
    h', '_');\n    std::replace(result.begin(), result.end(), '\\o', '_');\n    std::replace(result.begin(),\
    \ result.end(), '\\W', '_');\n    std::replace(result.begin(), result.end(), '\\\
    s', '_');\n    std::replace(result.begin(), result.end(), '\\h', '_');\n    std::replace(result.begin(),\
    \ result.end(), '\\o', '_');\n    std::replace(result.begin(), result.end(), '\\\
    W', '_');\n    std::replace(result.begin(), result.end(), '\\s', '_');\n    std::replace(result.begin(),\
    \ result.end(), '\\h', '_');\n    std::replace(result.begin(), result.end(), '\\\
    o', '_');\n    std::replace(result.begin(), result.end(), '\\W', '_');\n    std::replace(result.begin(),\
    \ result.end(), '\\s', '_');\n    std::replace(result.begin(), result.end(), '\\\
    h', '_');\n    std::replace(result.begin(), result.end(), '\\o', '_');\n    std::replace(result.begin(),\
    \ result.end(), '\\W', '_');\n    std::replace(result.begin(), result.end(), '\\\
    s', '_');\n    std::replace(result.begin(), result.end(), '\\h', '_');\n    std::replace(result.begin(),\
    \ result.end(), '\\o', '_');\n    std::replace(result.begin(), result.end(), '\\\
    W', '_');\n    std::replace(result.begin(), result.end(), '\\s', '_');\n    std::replace(result.begin(), ",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  std::replace(s.begin(), s.end(), '_', ' ');\n    if (s.size() > 2) {\n    \
    \    std::replace(s.begin(), s.end(), '_', '-');\n    }\n    return s;", "   \
    \ std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n   \
    \ std::replace(s.begin(), s.end(), '_', ' ');\n    if (s.size() > 2 && s[0] ==\
    \ ' ' && s[1] == ' ') {\n        s.replace(s.begin() + 2, s.end(), '-');\n   \
    \ }\n    return s;", "    std::string result = text;\n    size_t pos = 0;\n  \
    \  while(pos < result.length()) {\n        pos = result.find_first_not_of(\" \"\
    , pos);\n        if(pos == std::string::npos) {\n            break;\n        }\n\
    \        result.replace(pos, 1, \" \");\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if(pos == std::string::npos) {\n            break;\n    \
    \    }\n        result.replace(pos, 1, \"-\");\n    }\n    return result;", " \
    \   std::string result = text;\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), '  ', '-');\n    }\n    return result;", "    std::string s =\
    \ text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2\
    \ && s.substr(0, 2) == \" \") {\n        std::replace(s.begin(), s.end(), ' ',\
    \ '-');\n    }\n    return s;", "    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, next = 0, count = 0;\n    while (next <\
    \ s.size()) {\n        next = s.find(' ', prev);\n        if (next == std::string::npos)\
    \ next = s.size();\n        s[count] = s[next];\n        prev = next + 1;\n  \
    \      count++;\n    }\n    s[count] = '_';\n    return s;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    \n    int spaces = 0;\n    \n    for (int i = 0;\
    \ i < text.size(); i++) {\n        if (text[i] == ' ') {\n            spaces++;\n\
    \        } else {\n            if (spaces > 1) {\n                text[i] = '_';\n\
    \            }\n            spaces = 0;\n        }\n    }\n    \n    return text;",
  "    std::string res = text;\n    std::replace(std::begin(res), std::end(res), '\
    \ ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    return res;", "    std::string out = text;\n\
    \    size_t pos = 0;\n    while ((pos = out.find(' ', pos)) != std::string::npos)\
    \ {\n        out.replace(pos, 1, \" \");\n        pos = out.find(' ', pos + 1);\n\
    \    }\n    if (out.size() > 2 && out.substr(0, 2) == \" \") {\n        out.replace(out.begin(),\
    \ out.begin() + 2, \"\");\n    }\n    return out;", "    std::string s = text;\n\
    \    size_t pos = 0;\n    while ((pos = s.find_first_of(' ', pos)) != std::string::npos)\
    \ {\n        s.replace((pos), 1, std::string(\"_\"));\n        pos = s.find_first_of('\
    \ ', pos + 1);\n    }\n    if (s.size() > 2 && s.substr(0, 2) == std::string(\"\
    _\")) {\n        s.erase(0, 2);\n    }\n    return s;", "    std::string s = text;\n\
    \    size_t pos = 0;\n    while ((pos = s.find_first_not_of(\" \\t\\n\", pos))\
    \ != std::string::npos) {\n        s.replace((pos), 1, std::string(\"_\"));\n\
    \        pos = s.find_first_not_of(\" \\t\\n\", pos);\n    }\n    return s;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  std::replace(s.begin(), s.end(), '_', ' ');\n    return s;", "    std::string\
    \ fixed_text = text;\n    \n    // Replace all spaces with underscores\n    size_t\
    \ pos = 0;\n    while(pos < fixed_text.size()) {\n        char c = fixed_text[pos];\n\
    \        if(c == ' ') {\n            fixed_text[pos] = '_';\n            pos++;\n\
    \        }\n        pos++;\n    }\n    \n    // If there are more than 2 consecutive\
    \ spaces, \n    // then replace all consecutive spaces with -\n    size_t pos2\
    \ = 0;\n    while(pos2 < fixed_text.size()) {\n        char c = fixed_text[pos2];\n\
    \        if(c == ' ') {\n            if((pos2 + 1 < fixed_text.size()) && (fixed_text[pos2\
    \ + 1] == ' ')) {\n                fixed_text[pos2] = '-';\n                pos2++;\n\
    \            }\n            pos2++;\n        }\n        pos2++;\n    }\n    \n\
    \    return fixed_text;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;", "    std::string fixed_text = text;\n\
    \    size_t pos = 0;\n    while ((pos = fixed_text.find(\" \", pos)) != std::string::npos)\
    \ {\n        fixed_text.replace(pos, 1, std::string(\"_\"));\n        pos++;\n\
    \    }\n    if (fixed_text.size() > 2) {\n        size_t pos = 0;\n        while\
    \ ((pos = fixed_text.find(\" \", pos)) != std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, std::string(\"-\"));\n            pos++;\n        }\n    }\n    return fixed_text;",
  "    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = pos + 1;\n    }\n    if (result.size() > 2) {\n        pos\
    \ = 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos) {\n\
    \            result.replace(pos, 1, std::string(\"-\"));\n            pos = pos\
    \ + 1;\n        }\n    }\n    return result;", "    std::string s = text;\n  \
    \  std::replace(s.begin(), s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(),\
    \ '_', ' ');\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;", "    std::string s = text;\n   \
    \ std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2) {\n     \
    \   std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;", "    std::string\
    \ fixed_text = text;\n    size_t pos = 0;\n    while(pos < fixed_text.size())\
    \ {\n        size_t space_pos = fixed_text.find(\" \", pos);\n        if (space_pos\
    \ != std::string::npos) {\n            fixed_text.replace(space_pos, 1, \" _\"\
    );\n            pos = space_pos + 1;\n        } else {\n            pos = fixed_text.size();\n\
    \        }\n    }\n    return fixed_text;", "    std::string fixed_text = text;\n\
    \    \n    size_t pos = 0;\n    while (pos < fixed_text.size()) {\n        size_t\
    \ next_pos = fixed_text.find(' ', pos);\n        if (next_pos == std::string::npos)\
    \ {\n            fixed_text.replace(pos, 1, \" \");\n        } else {\n      \
    \      fixed_text.replace(pos, 1, \" _\");\n            pos = next_pos + 1;\n\
    \        }\n    }\n    \n    return fixed_text;", "    std::string res = text;\n\
    \    size_t pos = 0;\n    while ((pos = res.find(\" \", pos)) != std::string::npos)\
    \ {\n        res.insert(pos, \"_\");\n        ++pos;\n    }\n    if (res.size()\
    \ > 2 && res.find(\"  \", pos) != std::string::npos) {\n        res.insert(pos,\
    \ \"-\");\n    }\n    return res;", "    std::string res = text;\n    size_t pos\
    \ = 0;\n    while(pos < res.size()) {\n        size_t next = res.find(' ', pos);\n\
    \        if(next == std::string::npos) {\n            next = res.size();\n   \
    \     }\n        res.replace(pos, 1, \" \");\n        pos = next;\n    }\n   \
    \ while(pos < res.size()) {\n        size_t next = res.find(' ', pos);\n     \
    \   if(next == std::string::npos) {\n            next = res.size();\n        }\n\
    \        res.replace(pos, 1, \"_\");\n        pos = next;\n    }\n    return res;",
  "    std::string out = text;\n    std::size_t pos = 0;\n    while (pos < out.size())\
    \ {\n        pos = out.find_first_not_of(\" \", pos);\n        if (pos != std::string::npos)\
    \ {\n            out.replace(pos, 1, \" \");\n            pos = out.find_first_not_of(\"\
    \ \", pos);\n        }\n    }\n    return out;", "    std::string s = text;\n\
    \    size_t pos = 0;\n    while (pos < s.size()) {\n        size_t prev = pos;\n\
    \        pos = s.find_first_not_of(\" \", pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = s.size();\n        }\n        size_t next = pos;\n    \
    \    pos = s.find_first_of(\" \", pos + 1);\n        if (pos == std::string::npos)\
    \ {\n            pos = s.size();\n        }\n        if (pos != prev) {\n    \
    \        s.replace(prev, next - prev, \" \");\n        }\n    }\n    return s;",
  "    std::string s = text;\n    s.replace(s.begin(), s.end(), ' ');\n    size_t\
    \ prev = 0, next = 0, count = 0;\n    while(next < s.size()) {\n        if(s[next]\
    \ == ' ') {\n            count++;\n            if(count == 2) {\n            \
    \    s[prev] = s[next];\n                s[next] = '-';\n                prev\
    \ = next;\n                count = 0;\n            }\n        } else {\n     \
    \       count = 0;\n        }\n        next++;\n    }\n    return s;", "    std::string\
    \ res = text;\n    size_t pos = 0;\n    while((pos = res.find(\" \", pos)) !=\
    \ std::string::npos) {\n        res.replace(pos, 1, std::to_string(pos));\n  \
    \      pos++;\n    }\n    while((pos = res.find(\" \", pos)) != std::string::npos)\
    \ {\n        res.replace(pos, 1, std::to_string(pos));\n        pos++;\n    }\n\
    \    return res;", "    std::string s = text;\n    size_t pos = 0;\n    while(pos\
    \ < s.size()) {\n        size_t next = s.find(' ', pos);\n        if(next == std::string::npos)\
    \ {\n            next = s.size();\n        }\n        s.replace(pos, next - pos,\
    \ \"_\");\n        pos = next + 1;\n    }\n    return s;", "    std::string s\
    \ = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() >\
    \ 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return\
    \ s;", "    std::replace(text.begin(), text.end(), ' ', '_');\n    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    std::replace(text.begin(), text.end(), '  ', '-');\n\
    \    return text;", "    std::string out = text;\n    for (auto &c : out) {\n\
    \        if (c == ' ') {\n            c = ' ';\n        } else if (c == '\\t')\
    \ {\n            c = '-';\n        }\n    }\n    return out;", "    std::string\
    \ res = text;\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n \
    \   std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  return res;", "    std::string s = text;\n    s.replace(s.begin(), s.end(),\
    \ ' ');\n    size_t prev = 0, next = 0, count = 0;\n    while (next < s.size())\
    \ {\n        next = s.find(' ', prev);\n        if (next == std::string::npos)\
    \ next = s.size();\n        std::string sub = s.substr(prev, next - prev);\n \
    \       s.replace(sub, \" \", \"_\");\n        prev = next + 1;\n        ++count;\n\
    \    }\n    return s;", "    std::string s = text;\n    size_t pos = 0;\n    while(pos\
    \ < s.size()) {\n        size_t next_pos = s.find_first_of(' ', pos);\n      \
    \  if(next_pos == std::string::npos) {\n            pos = s.size();\n        }\
    \ else {\n            s.erase(pos, next_pos - pos);\n            pos = next_pos\
    \ + 1;\n        }\n    }\n    return s;", "    std::string result = text;\n  \
    \  size_t pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, std::string(\" _\"));\n        pos += 1;\n\
    \    }\n    if (result.size() > 2) {\n        pos = 0;\n        while ((pos =\
    \ result.find(\" \", pos)) != std::string::npos) {\n            result.replace(pos,\
    \ 1, std::string(\"-\"));\n            pos += 1;\n        }\n    }\n    return\
    \ result;", "    std::string s = text;\n    s.replace(s.begin(), s.end(), ' ');\n\
    \    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i]\
    \ == ' ') {\n            count++;\n            if (count == 2) {\n           \
    \     s.replace(i, i + 1, \"-\");\n                i += 1;\n                count\
    \ = 0;\n            }\n        }\n    }\n    return s;", "    std::string s =\
    \ text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2\
    \ && s.substr(0, 2) == \" \") {\n        std::replace(s.begin(), s.end(), ' ',\
    \ '-');\n    }\n    return s;", "    std::string result = text;\n    size_t pos\
    \ = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos) {\n \
    \       result.replace(pos, 1, std::string(\"_\"));\n        pos += 1;\n    }\n\
    \    if (result.size() > 2) {\n        pos = 0;\n        while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n            result.replace(pos, 1, std::string(\"\
    -\"));\n            pos += 1;\n        }\n    }\n    return result;", "    std::string\
    \ res = text;\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n \
    \   std::replace(std::begin(res), std::end(res), ' ', '_');\n    if (res.size()\
    \ > 2) {\n        std::replace(std::begin(res), std::end(res), ' ', '-');\n  \
    \  }\n    return res;", "    std::string s = text;\n    size_t pos = 0;\n    while\
    \ (pos < s.size()) {\n        size_t next_space = s.find_first_of(' ', pos);\n\
    \        if (next_space != std::string::npos) {\n            s.erase(pos, next_space\
    \ - pos);\n            pos = next_space + 1;\n        } else {\n            pos\
    \ = s.size();\n        }\n    }\n    while (pos < s.size()) {\n        size_t\
    \ next_space = s.find_first_of(' ', pos);\n        if (next_space != std::string::npos)\
    \ {\n            s.insert(pos, \"-\");\n            pos = next_space + 1;\n  \
    \      } else {\n            pos = s.size();\n        }\n    }\n    return s;",
  "    std::string result = text;\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    if (result.find_first_not_of(' ') != std::string::npos) {\n\
    \        std::replace(result.begin(), result.end(), ' ', '-');\n    }\n    return\
    \ result;", "    std::string result = text;\n    std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    }\n    return result;", "    std::string out =\
    \ text;\n    for (auto &c : out) {\n        if (std::isspace(c)) {\n         \
    \   c = '_';\n        }\n    }\n    size_t pos = 0;\n    while (pos < out.size()\
    \ && out[pos] == ' ') {\n        ++pos;\n    }\n    while (pos < out.size() &&\
    \ out[pos] == '_') {\n        ++pos;\n    }\n    if (pos < out.size()) {\n   \
    \     out = out.substr(0, pos) + \"-\";\n    }\n    return out;", "    std::string\
    \ res = text;\n    size_t pos = 0;\n    while((pos = res.find(\" \", pos)) !=\
    \ std::string::npos) {\n        res = res.substr(0, pos) + \"_\" + res.substr(pos\
    \ + 1);\n        pos = res.find(\" \", pos + 1);\n    }\n    return res;", " \
    \   std::string fixed_text = text;\n    size_t pos = 0;\n    while(true) {\n \
    \       pos = fixed_text.find(\"  \", pos);\n        if(pos == std::string::npos)\
    \ {\n            break;\n        }\n        fixed_text.replace(pos, 2, \"_\");\n\
    \        pos += 2;\n    }\n    return fixed_text;", "    std::string s = text;\n\
    \    s.replace(s.begin(), s.end(), ' ');\n    size_t prev = 0, next = 0, count\
    \ = 0;\n    while (next < s.size()) {\n        if (s[next] == ' ') {\n       \
    \     count++;\n            if (count == 2) {\n                s[prev] = '_';\n\
    \                s[next] = '-';\n                prev = next + 1;\n          \
    \      count = 0;\n            } else if (count > 2) {\n                s[prev]\
    \ = '-';\n                s[next] = '_';\n                prev = next + 1;\n \
    \               count = 0;\n            }\n        } else {\n            count\
    \ = 0;\n        }\n        next++;\n    }\n    return s;", "    std::string result\
    \ = text;\n    size_t pos = 0;\n    while(pos < result.length()) {\n        pos\
    \ = result.find_first_not_of(\" \", pos);\n        if(pos == std::string::npos)\
    \ pos = result.length();\n        result.replace(pos, 1, \" \");\n        pos\
    \ = result.find_first_not_of(\" \", pos);\n        if(pos == std::string::npos)\
    \ pos = result.length();\n        result.replace(pos, 1, \"-\");\n    }\n    return\
    \ result;", "    std::string s = text;\n    std::replace(s.begin(), s.end(), '\
    \ ', '_');\n    std::replace(s.begin(), s.end(), '  ', '-');\n    return s;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;", "    std::string res = text;\n    size_t pos = 0;\n  \
    \  while ((pos = res.find(\" \", pos)) != std::string::npos) {\n        res.replace(pos,\
    \ 1, std::string(\"-\"));\n        pos += 1;\n    }\n    return res;", "    std::string\
    \ result = text;\n    size_t pos = 0;\n    while (pos < result.length()) {\n \
    \       pos = result.find_first_not_of(\" \", pos);\n        if (pos != std::string::npos)\
    \ {\n            result.replace(pos, 1, std::string(\"_\"));\n        }\n    \
    \    pos = result.find_first_of(\" \", pos);\n        if (pos != std::string::npos)\
    \ {\n            result.replace(pos, 1, std::string(\"-\"));\n        }\n    }\n\
    \    return result;", "    std::string result = text;\n    size_t pos = 0;\n \
    \   while ((pos = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos += 1;\n    }\n    if (result.size() > 2)\
    \ {\n        size_t pos2 = result.find(\" \", pos);\n        result.replace(pos2,\
    \ result.size() - 2, std::string(\"-\"));\n    }\n    return result;", "    std::string\
    \ res = text;\n    size_t pos = 0;\n    while (pos < res.size()) {\n        if\
    \ (res[pos] == ' ') {\n            res[pos] = '_';\n            pos += 1;\n  \
    \      } else if (res[pos] == '_' && res[pos + 1] == '_') {\n            res[pos]\
    \ = '-';\n            pos += 1;\n        } else {\n            pos += 1;\n   \
    \     }\n    }\n    return res;", "    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t pos = 0;\n    while (pos < s.size()) {\n        if\
    \ (s[pos] == ' ') {\n            s[pos] = '_';\n            ++pos;\n        }\n\
    \        else if (s[pos] == '_') {\n            s[pos] = ' ';\n            ++pos;\n\
    \        }\n        ++pos;\n    }\n    return s;", "    std::string res = text;\n\
    \    std::replace(std::begin(res), std::end(res), ' ', '_');\n    if (res.size()\
    \ > 2 && std::equal(std::begin(res), std::end(res), std::begin(res) + 2))\n  \
    \      std::replace(std::begin(res), std::end(res), ' ', '-');\n    return res;",
  "    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    if (result.size() > 2) {\n        pos =\
    \ 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos) {\n\
    \            result.replace(pos, 1, std::string(\"-\"));\n            pos += 1;\n\
    \        }\n    }\n    return result;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '-');\n    }\n    return s;", " \
    \   std::string out = text;\n    std::replace(out.begin(), out.end(), ' ', '_');\n\
    \    if (out.size() > 2 && out.substr(0, 2) == \" \") {\n        std::replace(out.begin(),\
    \ out.begin() + 2, ' ', '-');\n    }\n    return out;", "    std::string out =\
    \ text;\n    for (auto &c : out) {\n        if (c != ' ') {\n            c = tolower(c);\n\
    \        }\n    }\n    for (auto &c : out) {\n        if (c != ' ') {\n      \
    \      c = toupper(c);\n        }\n    }\n    for (auto &c : out) {\n        if\
    \ (c != ' ') {\n            c = tolower(c);\n        }\n    }\n    for (auto &c\
    \ : out) {\n        if (c != ' ') {\n            c = toupper(c);\n        }\n\
    \    }\n    for (auto &c : out) {\n        if (c != ' ') {\n            c = tolower(c);\n\
    \        }\n    }\n    for (auto &c : out) {\n        if (c != ' ') {\n      \
    \      c = toupper(c);\n        }\n    }\n    for (auto &c : out) {\n        if\
    \ (c != ' ') {\n            c = tolower(c);\n        }\n    }\n    for (auto &c\
    \ : out) {\n        if (c != ' ') {\n            c = toupper(c);\n        }\n\
    \    }\n    for (auto &c : out) {\n        if (c != ' ') {\n            c = tolower(c);\n\
    \        }\n    }\n    for (auto &c : out) {\n        if (c != ' ') {\n      \
    \      c = toupper(c);\n        }\n    }\n    for (auto &c : out) {\n        if\
    \ (c != ' ') {\n            c = tolower(c);\n        }\n    }\n    for (auto &c\
    \ : out) {\n        if (c != ' ') {\n            c = toupper(c);\n        }\n\
    \    }\n    for (auto &c : out) {\n        if (c != ' ') {\n            c = tolower(c);\n\
    \        }\n    }\n    for (auto &c : out) {\n        if (c != ' ') {\n      \
    \      c = toupper(c);\n        }\n    }\n    for (auto &c : out) {\n        if\
    \ (c != ' ') {\n            c = tolower(c);\n        }\n    }\n    for (auto &c\
    \ : out) {\n        if (c != ' ') {\n            c = toupper(c);\n        }\n\
    \    }\n    for (auto &c : out) {\n        if (c != ' ') {\n            c = tolower(c);\n\
    \        }\n    }\n    for (auto &c : out) {\n        if (c != ' ') {\n      \
    \      c = toupper(c);\n        }\n    }\n    for (auto &c : out) {\n        if\
    \ (c != ' ') {\n            c = tolower(c);\n        }\n    }\n    for (auto &c\
    \ : out) {\n        if (c != ' ') {\n            c = toupper(c);\n        }\n\
    \    }\n    for (auto &c : out) {\n        if (c != ' ') {\n            c = tolower(c);\n\
    \        }\n    }\n    for (auto &c : out) {\n        if (c != ' ') {\n      \
    \      c = toupper(c);\n        }\n    }\n", "    std::string result = text;\n\
    \    size_t pos = 0;\n    while ((pos = result.find_first_not_of(\" \", pos))\
    \ != std::string::npos) {\n        result.replace(pos, 1, \" \");\n    }\n   \
    \ if (result.size() > 2) {\n        pos = 0;\n        while ((pos = result.find_first_of(\"\
    \ \", pos)) != std::string::npos) {\n            result.replace(pos, 1, \" \"\
    );\n        }\n    }\n    return result;", "    std::string out = text;\n    size_t\
    \ pos = 0;\n    while (pos < out.size()) {\n        size_t next_space = out.find('\
    \ ', pos);\n        if (next_space == std::string::npos) {\n            out.insert(pos,\
    \ \"_\");\n            pos += 2;\n        } else {\n            out.insert(next_space,\
    \ \"-\");\n            pos = next_space + 1;\n        }\n    }\n    return out;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        s.replace(s.begin(),\
    \ s.begin() + 2, \"\");\n    }\n    return s;", "    std::string s = text;\n \
    \   std::replace(s.begin(), s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(),\
    \ '_', ' ');\n    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(),\
    \ '_', '-');\n    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '-');\n  \
    \  return res;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    std::replace(s.begin(), s.end(), '_', ' ');\n    return s;",
  "    std::string result = text;\n    size_t pos = 0;\n    while(pos < result.length())\
    \ {\n        pos = result.find_first_not_of(\" \", pos);\n        if(pos != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");\n        }\n    }\n    pos = 0;\n\
    \    while(pos < result.length()) {\n        pos = result.find_first_of(\" \"\
    , pos);\n        if(pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, \"_\");\n        }\n    }\n    return result;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    std::replace(s.begin(),\
    \ s.end(), '  ', '-');\n    return s;", "    std::string fixed_text = text;\n\
    \    size_t pos = 0;\n    while ((pos = fixed_text.find(\"  \", pos)) != std::string::npos)\
    \ {\n        fixed_text.replace(pos, 2, \"_\");\n        pos += 2;\n    }\n  \
    \  return fixed_text;", "    std::string fixed_text = text;\n    size_t pos =\
    \ 0;\n    while (pos < fixed_text.size()) {\n        size_t next_space = fixed_text.find('\
    \ ', pos);\n        if (next_space != std::string::npos) {\n            fixed_text.replace(pos,\
    \ next_space - pos, \"_\");\n            pos = next_space + 1;\n        } else\
    \ {\n            pos = fixed_text.size();\n        }\n    }\n    return fixed_text;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;", "    std::string fixed_text = \"\
    \";\n    std::string space_replacement_string = \"_\";\n    std::string consecutive_replacement_string\
    \ = \"-\";\n    \n    for (int i = 0; i < text.length(); i++) {\n        if (text[i]\
    \ == ' ') {\n            fixed_text += space_replacement_string;\n        } else\
    \ {\n            fixed_text += text[i];\n        }\n    }\n    \n    if (fixed_text.size()\
    \ > 2) {\n        for (int i = 0; i < fixed_text.size() - 2; i++) {\n        \
    \    fixed_text += consecutive_replacement_string;\n        }\n    }\n    \n \
    \   return fixed_text;", "    std::string s = text;\n    size_t pos = 0;\n   \
    \ while ((pos = s.find_first_not_of(\" \", pos)) != std::string::npos) {\n   \
    \     s.replace((pos), 1, std::string(\"_\"));\n        pos = s.find_first_not_of(\"\
    \ \", pos + 1);\n    }\n    if (s.find_first_not_of(\" \", pos) != std::string::npos)\
    \ {\n        s.replace((pos), 1, std::string(\"-\"));\n    }\n    return s;",
  "    std::string res = text;\n    std::replace(std::begin(res), std::end(res), '\
    \ ', '_');\n    if (res.size() > 2) {\n        std::replace(std::begin(res), std::end(res),\
    \ ' ', '-');\n    }\n    return res;", "    std::string res = text;\n    std::size_t\
    \ pos = 0;\n    while(pos < res.size()) {\n        pos = res.find_first_not_of(\"\
    \ \", pos);\n        if(pos != std::string::npos) {\n            res.insert(pos,\
    \ \"_\");\n            pos = res.find_first_not_of(\" \", pos);\n        }\n \
    \   }\n    return res;", "    std::string result = text;\n    size_t pos = 0;\n\
    \    while (pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if (pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, std::string(\"_\"));\n        }\n        pos = result.find_first_of(\" \"\
    , pos);\n        if (pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, std::string(\"-\"));\n        }\n    }\n    return result;", "    std::string\
    \ s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size()\
    \ > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n        s.replace(s.size()\
    \ - 2, s.size() - 1, \"-\");\n    }\n    return s;", "    std::string s = text;\n\
    \    s.replace(s.begin(), s.end(), ' ');\n    size_t prev = 0, pos = 0;\n    while\
    \ (pos < s.size()) {\n        pos = s.find_first_not_of(\" \", prev);\n      \
    \  if (pos == std::string::npos) pos = s.size();\n        s.replace(pos, 1, std::string(\"\
    _\"));\n        prev = pos + 1;\n    }\n    return s;", "    std::string fixed_text\
    \ = text;\n    size_t pos = 0;\n    size_t len = fixed_text.size();\n    while\
    \ (pos < len) {\n        char c = fixed_text[pos];\n        if (c == ' ') {\n\
    \            fixed_text[pos] = '_';\n            pos++;\n        } else if (c\
    \ != ' ' && c != '_') {\n            fixed_text[pos] = c;\n            pos++;\n\
    \        }\n    }\n    return fixed_text;", "    std::string res = text;\n   \
    \ std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  return res;", "    std::string res = text;\n    size_t pos = 0;\n    while\
    \ ((pos = res.find(\" \", pos)) != std::string::npos) {\n        res.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos += 1;\n    }\n    if (res.size() > 2) {\n\
    \        size_t pos2 = res.find(\" \", pos);\n        while ((pos2 = res.find(\"\
    \ \", pos2)) != std::string::npos) {\n            res.replace(pos2, 1, std::string(\"\
    -\"));\n            pos2 += 1;\n        }\n    }\n    return res;", "    std::string\
    \ s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size()\
    \ > 2 && s.substr(0, 2) == \" \") {\n        s.replace(s.begin(), s.begin() +\
    \ 2, \"\");\n    }\n    return s;", "    std::string result = text;\n    size_t\
    \ pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos) {\n\
    \        result.replace(pos, 1, std::string(\"_\"));\n        pos += 1;\n    }\n\
    \    if (result.size() > 2 && result[result.size() - 1] == ' ') {\n        result.replace(result.size()\
    \ - 1, 1, std::string(\"-\"));\n    }\n    return result;", "    std::string s\
    \ = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    std::replace(s.begin(),\
    \ s.end(), '_', ' ');\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if\
    \ (s.size() > 2) {\n        std::replace(s.begin(), s.end(), '  ', '-');\n   \
    \ }\n    return s;", "    std::string out = text;\n    size_t pos = 0;\n    while\
    \ ((pos = out.find(' ', pos)) != std::string::npos) {\n        out.replace(pos,\
    \ 1, \" _\");\n        pos = out.find(' ', pos + 1);\n    }\n    return out;",
  "    std::string out = text;\n    for (size_t i = 0; i < out.size(); i++) {\n  \
    \      if (out[i] == ' ') {\n            out[i] = '_';\n        }\n    }\n   \
    \ if (out.size() > 2) {\n        for (size_t i = 0; i < out.size() - 2; i++) {\n\
    \            if (out[i] == ' ' && out[i + 1] == ' ') {\n                out[i]\
    \ = '-';\n            }\n        }\n    }\n    return out;", "    std::string\
    \ res = text;\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n \
    \   std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    return res;", "    std::string s = text;\n  \
    \  std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0,\
    \ 2) == \" \") {\n        s.replace(s.begin(), s.begin() + 2, \"\");\n    }\n\
    \    return s;", "    std::string res = text;\n    std::size_t pos = 0;\n    while\
    \ (pos < res.size()) {\n        pos = res.find_first_not_of(\" \", pos);\n   \
    \     if (pos != std::string::npos) {\n            res.insert(pos, \"_\");\n \
    \           pos = res.find_first_not_of(\" \", pos);\n        }\n    }\n    return\
    \ res;", "    std::string fixed_text = text;\n    size_t pos = 0;\n    while (pos\
    \ < fixed_text.size()) {\n        size_t next_space = fixed_text.find(' ', pos);\n\
    \        if (next_space == std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n            pos = fixed_text.size();\n        } else {\n       \
    \     fixed_text.replace(pos, 1, \" _\");\n            pos = next_space + 1;\n\
    \        }\n    }\n    return fixed_text;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), '_', ' ');\n    if\
    \ (s.size() > 2 && s[0] == ' ' && s[1] == ' ') {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;", "    std::string s = text;\n   \
    \ std::replace(s.begin(), s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    std::replace(s.begin(), s.end(), ' ', '_');\n    return s;",
  "    std::string res = text;\n    size_t pos = 0;\n    while ((pos = res.find(\"\
    \ \", pos)) != std::string::npos) {\n        res.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    if (res.size() > 2) {\n        size_t pos2\
    \ = res.find(\" \", pos);\n        while (pos2 != std::string::npos) {\n     \
    \       res.replace(pos2, 2, std::string(\"-\"));\n            pos2 += 1;\n  \
    \      }\n    }\n    return res;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    if (res.find_first_not_of(' ') != std::string::npos)\
    \ {\n        std::replace(std::begin(res), std::end(res), ' ', '-');\n    }\n\
    \    return res;", "    std::string res = text;\n    std::size_t pos = 0;\n  \
    \  while (pos < res.size()) {\n        pos = res.find_first_not_of(\" \", pos);\n\
    \        if (pos == std::string::npos) {\n            break;\n        }\n    \
    \    res.replace(pos, 1, \" \");\n        pos = res.find_first_not_of(\" \", pos);\n\
    \        if (pos == std::string::npos) {\n            break;\n        }\n    \
    \    res.replace(pos, 1, \"-\");\n    }\n    return res;", "    std::string res\
    \ = text;\n    size_t pos = 0;\n    while ((pos = res.find(\" \", pos)) != std::string::npos)\
    \ {\n        res.replace(pos, 1, std::string(\"_\"));\n        pos += 1;\n   \
    \ }\n    if (res.size() > 2) {\n        size_t pos = 0;\n        while ((pos =\
    \ res.find(\" \", pos)) != std::string::npos) {\n            res.replace(pos,\
    \ 1, std::string(\"-\"));\n            pos += 1;\n        }\n    }\n    return\
    \ res;", "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ',\
    \ '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ',\
    \ '_');\n    }\n    return s;", "    std::string result = text;\n    std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    if (result.find_first_not_of(' ') != std::string::npos)\
    \ {\n        std::replace(result.begin(), result.end(), ' ', '-');\n    }\n  \
    \  return result;", "    std::string fixed_text = text;\n    size_t pos = 0;\n\
    \    size_t len = fixed_text.size();\n    while (pos < len) {\n        pos = fixed_text.find_first_not_of(\"\
    \ \", pos);\n        if (pos == std::string::npos) {\n            break;\n   \
    \     }\n        fixed_text.replace(pos, 1, \" \");\n        pos = fixed_text.find_first_not_of(\"\
    \ \", pos + 1);\n        if (pos == std::string::npos) {\n            break;\n\
    \        }\n        fixed_text.replace(pos, 1, \"-\");\n    }\n    return fixed_text;",
  "    std::string s = text;\n    size_t pos = 0;\n    size_t len = s.size();\n  \
    \  while (pos < len) {\n        pos = s.find_first_not_of(\" \", pos);\n     \
    \   if (pos == std::string::npos) {\n            break;\n        }\n        s.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos = s.find_first_not_of(\" \", pos + 1);\n\
    \        if (pos == std::string::npos) {\n            break;\n        }\n    \
    \    s.replace(pos, 1, std::string(\"-\"));\n    }\n    return s;", "    std::string\
    \ out = text;\n    size_t pos = 0;\n    while ((pos = out.find(' ', pos)) != std::string::npos)\
    \ {\n        out.replace(pos, 1, \" \");\n        pos = out.find(' ', pos + 1);\n\
    \    }\n    while (out.size() > 2 && out.substr(0, 2) == \" \") {\n        out.replace(out.begin(),\
    \ out.begin() + 2, \"\");\n    }\n    return out;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0,\
    \ 2) == \" \") {\n        std::replace(s.begin(), s.end(), ' ', '-');\n    }\n\
    \    return s;", "    std::string out = text;\n    size_t pos = 0;\n    while(pos\
    \ < out.size()) {\n        size_t next = out.find(' ', pos);\n        if(next\
    \ == std::string::npos) {\n            next = out.size();\n        }\n       \
    \ out.replace(pos, 1, out[pos]);\n        out.replace(next, 1, \"_\");\n     \
    \   pos = next + 1;\n    }\n    return out;", "    std::string s = text;\n   \
    \ std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2) {\n     \
    \   std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;", "    std::string\
    \ result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\" \", pos))\
    \ != std::string::npos) {\n        result.replace(pos, 1, std::string(\"_\"));\n\
    \        pos = result.find(\" \", pos + 1);\n    }\n    if (pos < result.length())\
    \ {\n        result.replace(pos, 1, std::string(\"-\"));\n    }\n    return result;",
  "    std::string s = text;\n    s.replace(s.begin(), s.end(), ' ');\n    size_t\
    \ prev = 0, pos = 0;\n    while (pos < s.size()) {\n        pos = s.find_first_of('\
    \ ', prev);\n        if (pos == std::string::npos) pos = s.size();\n        s.replace(pos,\
    \ 1, std::string(\"-\"));\n        prev = pos + 1;\n    }\n    return s;", " \
    \   std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n \
    \   if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \        std::replace(s.begin(), s.end(), '-', '_');\n    }\n    return s;", " \
    \   std::string out = text;\n    std::replace(out.begin(), out.end(), ' ', '_');\n\
    \    std::replace(out.begin(), out.end(), '_', ' ');\n    std::replace(out.begin(),\
    \ out.end(), ' ', '-');\n    return out;", "    std::string s = text;\n    size_t\
    \ pos = 0;\n    while (pos < s.size()) {\n        size_t next = s.find(' ', pos);\n\
    \        if (next == std::string::npos) {\n            next = s.size();\n    \
    \    }\n        s.replace(pos, next - pos, \"_\");\n        pos = next + 1;\n\
    \    }\n    return s;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    return res;", "    std::string result = text;\n    size_t pos\
    \ = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos) {\n \
    \       result.replace(pos, 1, std::string(\"_\"));\n        pos = result.find(\"\
    \ \", pos + 1);\n    }\n    if (result.size() > 2) {\n        size_t pos2 = result.find(\"\
    \ \", pos + 1);\n        while (pos2 != std::string::npos) {\n            result.replace(pos2,\
    \ result.size() - 1, std::string(\"-\"));\n            pos2 = result.find(\" \"\
    , pos2 + 1);\n        }\n    }\n    return result;", "    std::string fixed_text\
    \ = text;\n    size_t pos = 0;\n    while(pos < fixed_text.size()) {\n       \
    \ size_t next = fixed_text.find(' ', pos);\n        if(next == std::string::npos)\
    \ {\n            fixed_text.replace(pos, 1, \" \");\n        } else {\n      \
    \      fixed_text.replace(pos, 1, \" _\");\n            pos = next + 1;\n    \
    \    }\n    }\n    return fixed_text;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), ' ', '_');\n    std::replace(s.begin(),\
    \ s.end(), '_', ' ');\n    std::replace(s.begin(), s.end(), '_', '-');\n    return\
    \ s;", "    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  return res;", "    std::string result = text;\n    size_t pos = 0;\n    while\
    \ ((pos = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos = result.find(\" \", pos + 1);\n    }\n\
    \    if (result.size() > 2 && result.substr(0, 2) == \" \") {\n        result.replace(result.begin(),\
    \ result.begin() + 2, std::string(\"-\"));\n    }\n    return result;", "    std::string\
    \ res = text;\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n \
    \   std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    return res;", "    std::string res = text;\n\
    \    std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '-');\n    return res;", "    std::string s = text;\n    size_t pos = 0;\n\
    \    while(pos < s.size()) {\n        size_t next = s.find(' ', pos);\n      \
    \  if(next == std::string::npos) {\n            next = s.size();\n        }\n\
    \        s.replace(pos, next - pos, \"_\");\n        pos = next + 1;\n    }\n\
    \    return s;", "    std::string result = text;\n    size_t pos = 0;\n    while\
    \ (pos < result.length()) {\n        pos = result.find_first_not_of(\" \", pos);\n\
    \        if (pos == std::string::npos) {\n            break;\n        }\n    \
    \    result.replace(pos, 1, \" \");\n        pos = result.find_first_not_of(\"\
    \ \", pos + 1);\n        if (pos == std::string::npos) {\n            break;\n\
    \        }\n        result.replace(pos, 1, \"-\");\n    }\n    return result;",
  "    std::string s = text;\n    size_t pos = 0;\n    while (pos < s.size()) {\n\
    \        size_t prev = pos;\n        pos = s.find_first_not_of(\" \", pos);\n\
    \        if (pos == std::string::npos) {\n            pos = s.size();\n      \
    \  }\n        s.erase(prev, pos);\n        pos = s.find_first_of(\" \", pos);\n\
    \        if (pos == std::string::npos) {\n            pos = s.size();\n      \
    \  }\n        s.insert(prev, \"_\");\n    }\n    return s;", "    std::string\
    \ s = text;\n    s.replace(s.begin(), s.end(), ' ');\n    size_t prev = 0, pos\
    \ = 0;\n    while (pos < s.size()) {\n        pos = s.find_first_not_of(\" \"\
    , prev);\n        if (pos == std::string::npos) {\n            break;\n      \
    \  }\n        s.replace(pos, 1, std::string(\"-\"));\n        prev = pos + 1;\n\
    \    }\n    return s;", "    std::string s = text;\n    size_t pos = 0;\n    while(pos\
    \ < s.size()) {\n        size_t prev = pos;\n        pos = s.find_first_not_of(\"\
    \ \", pos);\n        if(pos != std::string::npos) {\n            s.erase(prev,\
    \ pos);\n            s.insert(prev, \"_\");\n        }\n    }\n    return s;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      s.replace(s.begin(), s.begin() + 2, \"\");\n    }\n    return s;", "  \
    \  std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;", "    std::string result = text;\n    size_t pos = 0;\n\
    \    while ((pos = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos = result.find(\" \", pos + 1);\n    }\n\
    \    if (pos < result.length()) {\n        result.replace(pos, 1, std::string(\"\
    -\"));\n    }\n    return result;", "    std::string res = text;\n    size_t pos\
    \ = 0;\n    while (pos < res.size()) {\n        size_t next = res.find(' ', pos);\n\
    \        if (next == std::string::npos) {\n            next = res.size();\n  \
    \      }\n        size_t len = next - pos;\n        if (len > 2) {\n         \
    \   while (next < res.size() && res[next] == ' ') {\n                ++next;\n\
    \            }\n            while (next < res.size() && res[next] == ' ') {\n\
    \                res[next] = '_';\n                ++next;\n            }\n  \
    \      }\n        pos = next;\n    }\n    return res;", "    std::string res =\
    \ text;\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    return res;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), '_', ' ');\n    if\
    \ (s.size() > 2) {\n        std::replace(s.begin(), s.end(), '_', '-');\n    }\n\
    \    return s;", "    std::string out = text;\n    std::size_t pos = 0;\n    while\
    \ (pos < out.size()) {\n        pos = out.find_first_not_of(\" \", pos);\n   \
    \     if (pos == std::string::npos) break;\n        out.erase(pos, 1);\n     \
    \   pos = out.find_first_not_of(\" \", pos);\n        if (pos == std::string::npos)\
    \ break;\n        out.insert(pos, \"_\");\n    }\n    return out;", "    std::string\
    \ s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    std::replace(s.begin(),\
    \ s.end(), '  ', '-');\n    return s;", "    std::string fixed_text = text;\n\
    \    size_t pos = 0;\n    while(pos < fixed_text.size()) {\n        size_t next_space\
    \ = fixed_text.find(' ', pos);\n        if(next_space == std::string::npos) {\n\
    \            fixed_text.replace(pos, 1, \" \");\n        } else {\n          \
    \  fixed_text.replace(pos, 1, \" _\");\n            pos = next_space + 1;\n  \
    \      }\n    }\n    return fixed_text;", "    std::string result = text;\n  \
    \  size_t pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, std::string(\"_\"));\n        pos = result.find(\"\
    \ \", pos + 1);\n    }\n    if (result.size() > 2) {\n        size_t pos2 = result.find(\"\
    \ \", pos);\n        while (pos2 != std::string::npos) {\n            result.replace(pos2,\
    \ result.size() - 1, std::string(\"-\"));\n            pos2 = result.find(\" \"\
    , pos2 + 1);\n        }\n    }\n    return result;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size()\
    \ - 1] == ' ' && s[s.size() - 2] == ' ') {\n        s.replace(s.size() - 2, s.size()\
    \ - 1, \"-\");\n    }\n    return s;", "    std::string out = text;\n    for(size_t\
    \ i = 0; i < out.size(); i++) {\n        if(out[i] == ' ') {\n            out[i]\
    \ = '_';\n        }\n        if(out[i] == ' ' && out[i+1] == ' ') {\n        \
    \    out[i] = '-';\n        }\n    }\n    return out;", "    std::string result\
    \ = text;\n    size_t pos = 0;\n    while (pos < result.length()) {\n        pos\
    \ = result.find_first_not_of(\" \", pos);\n        if (pos != std::string::npos)\
    \ {\n            result.replace(pos, 1, \" \");\n        }\n        pos = result.find_first_of(\"\
    \ \", pos);\n        if (pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, std::string(\"-\"));\n        }\n    }\n    return result;", "    std::string\
    \ res = text;\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n \
    \   std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    return res;", "    std::string fixed_text = text;\n    \n  \
    \  // Replace all spaces with underscores\n    size_t pos = 0;\n    while ((pos\
    \ = fixed_text.find(\"  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos,\
    \ 2, \"_\");\n        pos += 2;\n    }\n    \n    // Replace all consecutive spaces\
    \ with -\n    pos = 0;\n    while ((pos = fixed_text.find(\"  \", pos)) != std::string::npos)\
    \ {\n        fixed_text.replace(pos, 2, \"\");\n        pos += 2;\n    }\n   \
    \ \n    return fixed_text;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    \n    int i = 0;\n    while (i < text.size()) {\n\
    \        if (text[i] == ' ') {\n            i++;\n            if (i == text.size())\
    \ {\n                std::replace(text.begin(), text.end(), '_', ' ');\n     \
    \       } else {\n                std::replace(text.begin(), text.begin() + i,\
    \ '_', '-');\n                i += 1;\n            }\n        }\n        i++;\n\
    \    }\n    return text;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n        std::replace(s.begin(), s.end(), '-', '_');\n \
    \   }\n    return s;", "    std::replace(text.begin(), text.end(), ' ', '_');\n\
    \    std::replace(text.begin(), text.end(), ' ', '_');\n    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    return text;", "    std::string result = text;\n\
    \    size_t pos = 0;\n    while (pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if (pos == std::string::npos) {\n            break;\n   \
    \     }\n        result.replace(pos, 1, \" \");\n        pos = result.find_first_not_of(\"\
    \ \", pos + 1);\n        if (pos == std::string::npos) {\n            break;\n\
    \        }\n        result.replace(pos, 1, \"-\");\n    }\n    return result;",
  "    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    if (result.size() > 2) {\n        pos =\
    \ 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos) {\n\
    \            result.replace(pos, 1, std::string(\"-\"));\n            pos += 1;\n\
    \        }\n    }\n    return result;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;", "    std::string result = text;\n\
    \    size_t pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, std::string(\"_\"));\n        pos = result.find(\"\
    \ \", pos + 1);\n    }\n    if (result.size() > 2) {\n        result.replace(result.find_last_not_of(\"\
    \ \"), result.size(), std::string(\"-\"));\n    }\n    return result;", "    std::string\
    \ res = text;\n    std::size_t pos = 0;\n    while(pos < res.size()) {\n     \
    \   pos = res.find_first_not_of(\" \", pos);\n        if(pos == std::string::npos)\
    \ {\n            break;\n        }\n        res.replace(pos, 1, std::string(\"\
    \ \"));\n        pos = res.find_first_not_of(\" \", pos);\n        if(pos == std::string::npos)\
    \ {\n            break;\n        }\n        res.replace(pos, 1, std::string(\"\
    -\"));\n    }\n    return res;", "    std::string result = text;\n    size_t pos\
    \ = 0;\n    while(pos < result.length()) {\n        size_t next = result.find_first_not_of(\"\
    \ \", pos);\n        if(next == std::string::npos) {\n            break;\n   \
    \     }\n        result.replace(pos, next - pos, \"_\");\n        pos = next +\
    \ 1;\n    }\n    if(pos < result.length()) {\n        result.replace(pos, result.length(),\
    \ \"_\");\n    }\n    return result;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '-');\n  \
    \  return res;", "    std::string s = text;\n    size_t pos = 0;\n    while ((pos\
    \ = s.find_first_of(' ', pos)) != std::string::npos) {\n        s.replace( pos,\
    \ 1, std::string(\"_\") );\n        pos = s.find_first_of(' ', pos + 1);\n   \
    \ }\n    while ((pos = s.find_first_of('  ', pos)) != std::string::npos) {\n \
    \       s.replace( pos, 2, std::string(\"-\") );\n        pos = s.find_first_of('\
    \  ', pos + 2);\n    }\n    return s;", "    std::string result = text;\n    size_t\
    \ pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos) {\n\
    \        result.replace(pos, 1, std::string(\"_\"));\n        pos = result.find(\"\
    \ \", pos + 1);\n    }\n    if (pos < result.length()) {\n        result.replace(pos,\
    \ 1, std::string(\"-\"));\n    }\n    return result;"]
stop_tokens:
- "\n}"
