language: cpp
name: HumanEval_59_largest_prime_factor
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    while (true) {\n        if (q %\
    \ p == 0) {\n            return p;\n        }\n        if (q == 1) {\n       \
    \     return 1;\n        }\n        p++;\n        q /= p;\n    }\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpp9j3wh5u: /tmp/tmpp9j3wh5u.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i <= n / 2) {\n        if (n % i == 0) {\n            while (n\
    \ % i == 0) {\n                n /= i;\n                max_factor_index = i;\n\
    \            }\n        }\n        i++;\n    }\n    return max_factor_index;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpcbbyuod5: /tmp/tmpcbbyuod5.cpp:25: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            ans = p;\n            break;\n        }\n        p\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpm5s8netd: /tmp/tmpm5s8netd.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    while (p < q) {\n        while (n\
    \ % p == 0) {\n            n /= p;\n        }\n        if (n == 1) {\n       \
    \     return p;\n        }\n        p++;\n    }\n    return n;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062086
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    while (p < n) {\n        if (n % p == 0) {\n    \
    \        n = n / p;\n        } else {\n            p = p + 1;\n        }\n   \
    \ }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / 2) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp4lckd5t2: /tmp/tmp4lckd5t2.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            long j = 2;\n\
    \            while (j <= max_factor) {\n                if (n % i == 0) {\n  \
    \                  max_factor = j;\n                    max_factor_index = i;\n\
    \                }\n                j++;\n            }\n        }\n        i++;\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpmslpvlhs: /tmp/tmpmslpvlhs.cpp:29: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long largest = n;\n    while (i < largest) {\n  \
    \      if (n % i == 0) {\n            largest = i;\n        }\n        ++i;\n\
    \    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpm3mnqxga: /tmp/tmpm3mnqxga.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 1;\n    long p = 2;\n    while (p < n) {\n        if\
    \ (n % p == 0) {\n            factor = p;\n            break;\n        }\n   \
    \     p++;\n    }\n    return factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp86jgx1bi: /tmp/tmp86jgx1bi.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    long s = 2;\n \
    \   while (p <= q) {\n        while (r % p == 0) {\n            r /= p;\n    \
    \    }\n        while (s % p == 0) {\n            s /= p;\n        }\n       \
    \ if (p > s) {\n            p = s;\n        }\n    }\n    return p;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long temp = max_factor;\n\
    \            max_factor = i;\n            max_factor_index = i;\n        }\n \
    \   }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpcbbrqecb: /tmp/tmpcbbrqecb.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            ans = p;\n            break;\n        }\n        p++;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpi9fudhu3: /tmp/tmpi9fudhu3.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i < n) {\n        if (n % i == 0) {\n            long j = i;\n\
    \            while (j < n) {\n                if (n % j == 0) {\n            \
    \        max_factor = j;\n                    max_factor_index = i;\n        \
    \            break;\n                }\n                j++;\n            }\n\
    \        }\n        i++;\n    }\n    return max_factor;\n}\nint main() {\n   \
    \ auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpbrm__j5j: /tmp/tmpbrm__j5j.cpp:31: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long max_factor = 1;\n    while (i < n) {\n     \
    \   if (n % i == 0) {\n            while (n % i == 0) {\n                n /=\
    \ i;\n                max_factor++;\n            }\n        }\n        i++;\n\
    \    }\n    return max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpqn6o4mp8: /tmp/tmpqn6o4mp8.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (long\
    \ i = 2; i <= n; ++i) {\n        if (n % i == 0) {\n            long j = n / i;\n\
    \            if (j > max_factor) {\n                max_factor = j;\n        \
    \        max_factor_index = i;\n            }\n        }\n    }\n    return max_factor_index;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpktdiel0y: /tmp/tmpktdiel0y.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (long\
    \ i = 2; i <= n; ++i) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpjstxdzey: /tmp/tmpjstxdzey.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int\
    \ i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpyfao5ru6: /tmp/tmpyfao5ru6.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / 2) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp4lckd5t2: /tmp/tmp4lckd5t2.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 0;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i < n) {\n        if (n % i == 0) {\n            while (n % i\
    \ == 0) {\n                n /= i;\n                max_factor_index = i;\n  \
    \          }\n        }\n        i++;\n    }\n    return max_factor_index;\n}\n\
    int main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpesdwdmxo: /tmp/tmpesdwdmxo.cpp:25: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long j;\n    \
    \        for (j = i; j <= n; j += i) {\n                if (n % j == 0) {\n  \
    \                  break;\n                }\n            }\n            if (j\
    \ > i) {\n                max_factor = i;\n                max_factor_index =\
    \ j;\n            }\n        }\n    }\n    return max_factor;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpo069ku58: /tmp/tmpo069ku58.cpp:29: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long m = n;\n    long a = 1;\n    long b = 2;\n    long c = 1;\n \
    \   long d = 2;\n    long e = 2;\n    long f = 3;\n    long g = 3;\n    long h\
    \ = 2;\n    long i = 2;\n    long j = 2;\n    long k = 2;\n    long l = 2;\n \
    \   long m = n;\n    long n = m;\n    long o = m;\n    long p = m;\n    long q\
    \ = m;\n    long r = m;\n    long s = m;\n    long t = m;\n    long u = m;\n \
    \   long v = m;\n    long w = m;\n    long x = m;\n    long y = m;\n    long z\
    \ = m;\n    long a = 1;\n    long b = 2;\n    long c = 1;\n    long d = 2;\n \
    \   long e = 2;\n    long f = 3;\n    long g = 3;\n    long h = 2;\n    long i\
    \ = 2;\n    long j = 2;\n    long k = 2;\n    long l = 2;\n    long m = n;\n \
    \   long n = m;\n    long o = m;\n    long p = m;\n    long q = m;\n    long r\
    \ = m;\n    long s = m;\n    long t = m;\n    long u = m;\n    long v = m;\n \
    \   long w = m;\n    long x = m;\n    long y = m;\n    long z = m;\n    long a\
    \ = 1;\n    long b = 2;\n    long c = 1;\n    long d = 2;\n    long e = 2;\n \
    \   long f = 3;\n    long g = 3;\n    long h = 2;\n    long i = 2;\n    long j\
    \ = 2;\n    long k = 2;\n    long l = 2;\n    long m = n;\n    long n = m;\n \
    \   long o = m;\n    long p = m;\n    long q = m;\n    long r = m;\n    long s\
    \ = m;\n    long t = m;\n    long u = m;\n    long v = m;\n    long w = m;\n \
    \   long x = m;\n    long y = m;\n    long z = m;\n    long a = 1;\n    long b\
    \ = 2;\n    long c = 1;\n    long d = 2;\n    long e = 2;\n    long f = 3;\n \
    \   long g = 3;\n    long h = 2;\n    long i = 2;\n    long j = 2;\n    long k\
    \ = 2;\n    long l = 2;\n    long m = n;\n    long n = m;\n    long o = m;\n \
    \   long p = m;\n    long q = m;\n    long r = m;\n    long s = m;\n    long t\
    \ = m;\n    long u = m;\n    long v = m;\n    long w = m;\n    long \n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpj427i2li.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmpj427i2li.cpp:22:10: error: redeclaration of \u2018long\
    \ int m\u2019\n   22 |     long m = n;\n      |          ^\n/tmp/tmpj427i2li.cpp:9:10:\
    \ note: \u2018long int m\u2019 previously declared here\n    9 |     long m =\
    \ n;\n      |          ^\n/tmp/tmpj427i2li.cpp:23:10: error: declaration of \u2018\
    long int n\u2019 shadows a parameter\n   23 |     long n = m;\n      |       \
    \   ^\n/tmp/tmpj427i2li.cpp:36:10: error: redeclaration of \u2018long int a\u2019\
    \n   36 |     long a = 1;\n      |          ^\n/tmp/tmpj427i2li.cpp:10:10: note:\
    \ \u2018long int a\u2019 previously declared here\n   10 |     long a = 1;\n \
    \     |          ^\n/tmp/tmpj427i2li.cpp:37:10: error: redeclaration of \u2018\
    long int b\u2019\n   37 |     long b = 2;\n      |          ^\n/tmp/tmpj427i2li.cpp:11:10:\
    \ note: \u2018long int b\u2019 previously declared here\n   11 |     long b =\
    \ 2;\n      |          ^\n/tmp/tmpj427i2li.cpp:38:10: error: redeclaration of\
    \ \u2018long int c\u2019\n   38 |     long c = 1;\n      |          ^\n/tmp/tmpj427i2li.cpp:12:10:\
    \ note: \u2018long int c\u2019 previously declared here\n   12 |     long c =\
    \ 1;\n      |          ^\n/tmp/tmpj427i2li.cpp:39:10: error: redeclaration of\
    \ \u2018long int d\u2019\n   39 |     long d = 2;\n      |          ^\n/tmp/tmpj427i2li.cpp:13:10:\
    \ note: \u2018long int d\u2019 previously declared here\n   13 |     long d =\
    \ 2;\n      |          ^\n/tmp/tmpj427i2li.cpp:40:10: error: redeclaration of\
    \ \u2018long int e\u2019\n   40 |     long e = 2;\n      |          ^\n/tmp/tmpj427i2li.cpp:14:10:\
    \ note: \u2018long int e\u2019 previously declared here\n   14 |     long e =\
    \ 2;\n      |          ^\n/tmp/tmpj427i2li.cpp:41:10: error: redeclaration of\
    \ \u2018long int f\u2019\n   41 |     long f = 3;\n      |          ^\n/tmp/tmpj427i2li.cpp:15:10:\
    \ note: \u2018long int f\u2019 previously declared here\n   15 |     long f =\
    \ 3;\n      |          ^\n/tmp/tmpj427i2li.cpp:42:10: error: redeclaration of\
    \ \u2018long int g\u2019\n   42 |     long g = 3;\n      |          ^\n/tmp/tmpj427i2li.cpp:16:10:\
    \ note: \u2018long int g\u2019 previously declared here\n   16 |     long g =\
    \ 3;\n      |          ^\n/tmp/tmpj427i2li.cpp:43:10: error: redeclaration of\
    \ \u2018long int "
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long i = 2;\n    while (i <= n / i) {\n       \
    \ if (n % i == 0) {\n            res = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpnh00zqae: /tmp/tmpnh00zqae.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max = 2;\n    long i = 2;\n    while (i <= sqrt(n)) {\n     \
    \   if (n % i == 0) {\n            max = i;\n        }\n        i += 2;\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpweg28cjp: /tmp/tmpweg28cjp.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    long q = n;\n    long r = n;\n\
    \    while (p < q) {\n        while (r % p == 0) {\n            ans = p;\n   \
    \         p += 1;\n        }\n        r /= p;\n        p += 1;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i;\n\
    \    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long j\
    \ = i;\n            while (j > 1) {\n                if (n % j == 0) {\n     \
    \               break;\n                }\n                j--;\n            }\n\
    \            if (j == 1) {\n                max_factor = i;\n                max_factor_index\
    \ = i;\n            }\n        }\n    }\n    return max_factor;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmp371yay4s: /tmp/tmp371yay4s.cpp:31: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long d = 2;\n    while (d < n) {\n        while\
    \ (n % d == 0) {\n            ans = d;\n            n /= d;\n        }\n     \
    \   d++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp33z1e5zs: /tmp/tmp33z1e5zs.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / i) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            break;\n        }\n   \
    \     i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpy12ebze6: /tmp/tmpy12ebze6.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    while (q > 0) {\n\
    \        if (n % q == 0) {\n            p += q;\n            while (n % p == 0)\
    \ {\n                n /= p;\n            }\n        }\n        q = p * q;\n \
    \   }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp24oe8b2j: /tmp/tmp24oe8b2j.cpp:25: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i <= n / 2) {\n        if (n % i == 0) {\n            while (n\
    \ % i == 0) {\n                n /= i;\n                ++i;\n            }\n\
    \            if (n > max_factor) {\n                max_factor = n;\n        \
    \        max_factor_index = i;\n            }\n        }\n        ++i;\n    }\n\
    \    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpheymzmqg: /tmp/tmpheymzmqg.cpp:29: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 1;\n    long i = 2;\n    while (i <= n / i) {\n    \
    \    if (n % i == 0) {\n            factor *= i;\n            while (n % i ==\
    \ 0) {\n                n /= i;\n            }\n        }\n        i++;\n    }\n\
    \    return factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpwykx48a_: /tmp/tmpwykx48a_.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i < n) {\n        if (n % i == 0) {\n            while (n % i\
    \ == 0) {\n                n /= i;\n                max_factor_index = i;\n  \
    \          }\n        }\n        i++;\n    }\n    return max_factor_index;\n}\n\
    int main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpx30n476c: /tmp/tmpx30n476c.cpp:25: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long a = n;\n    long b = 2;\n    while (b <= a)\
    \ {\n        if (n % b == 0) {\n            ans = b;\n            break;\n   \
    \     }\n        b = b * 2;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp48p4z4m5: /tmp/tmp48p4z4m5.cpp:23: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    long s = 1;\n \
    \   while (p < q) {\n        while (r % p == 0) {\n            r /= p;\n     \
    \   }\n        while (r % q == 0) {\n            r /= q;\n        }\n        if\
    \ (p * q > r) {\n            q = r;\n        }\n        p += s;\n        s *=\
    \ 2;\n    }\n    return q;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpysuq8ie2: /tmp/tmpysuq8ie2.cpp:30: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long m = n;\n    long a = 2, b = 2;\n    long c = 1;\n    while (m\
    \ % 2 == 0) {\n        m /= 2;\n        a++;\n    }\n    while (m % 3 == 0) {\n\
    \        m /= 3;\n        b++;\n    }\n    while (m % 5 == 0) {\n        m /=\
    \ 5;\n        c++;\n    }\n    if (m > 1) {\n        while (m % 2 == 0) {\n  \
    \          m /= 2;\n            a++;\n        }\n        while (m % 3 == 0) {\n\
    \            m /= 3;\n            b++;\n        }\n        while (m % 5 == 0)\
    \ {\n            m /= 5;\n            c++;\n        }\n    }\n    if (a == 2 &&\
    \ b == 2) {\n        return c;\n    }\n    if (a == 2 && b == 3) {\n        return\
    \ c;\n    }\n    if (a == 3 && b == 2) {\n        return c;\n    }\n    if (a\
    \ == 3 && b == 3) {\n        return c;\n    }\n    if (a == 5 && b == 2) {\n \
    \       return c;\n    }\n    if (a == 5 && b == 3) {\n        return c;\n   \
    \ }\n    if (a == 5 && b == 5) {\n        return c;\n    }\n    if (a == 7 &&\
    \ b == 2) {\n        return c;\n    }\n    if (a == 7 && b == 3) {\n        return\
    \ c;\n    }\n    if (a == 7 && b == 7) {\n        return c;\n    }\n    if (a\
    \ == 11 && b == 2) {\n        return c;\n    }\n    if (a == 11 && b == 3) {\n\
    \        return c;\n    }\n    if (a == 11 && b == 11) {\n        return c;\n\
    \    }\n    if (a == 13 && b == 2) {\n        return c;\n    }\n    if (a == 13\
    \ && b == 3) {\n        return c;\n    }\n    if (a == 13 && b == 5) {\n     \
    \   return c;\n    }\n    if (a == 17 && b == 2) {\n        return c;\n    }\n\
    \    if (a == 17 && b == 3) {\n        return c;\n    }\n    if (a == 17 && b\
    \ == 5) {\n        return c;\n    }\n    if (a == 19 && b == 2) {\n        return\
    \ c;\n    }\n    if (a == 19 && b == 3) {\n        return c;\n    }\n    if (a\
    \ == 19 && b == 5) {\n        return c;\n    }\n    if (a == 23 && b == 2) {\n\
    \        return c;\n    }\n    if (a == 23 && b == 3) {\n        return c;\n \
    \   }\n    if (a == 23 && b == 5) {\n        return c;\n    }\n    if (a == 29\
    \ && b == 2) {\n        return c;\n    }\n    if (a == 29 && b == 3) {\n     \
    \   return c;\n    }\n    if (a == 29 && b == 5) {\n        return c;\n    }\n\
    \    if (a == 31 && b == 2) {\n        return c;\n    }\n    if (a == 31 && b\
    \ == 3) {\n        return c;\n    }\n    if (a == 31 && \n}\nint main() {\n  \
    \  auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpjxfrju0e.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmpjxfrju0e.cpp:129:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  129 | }\n      | ^\n/tmp/tmpjxfrju0e.cpp:128:19:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  128 |     if (a\
    \ == 31 &&\n      |        ~          ^\n      |                   )\n  129 |\
    \ }\n      | ~                  \n/tmp/tmpjxfrju0e.cpp:129:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n  129 | }\n      | ^\n/tmp/tmpjxfrju0e.cpp:129:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  129 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    while (q > 1) {\n\
    \        if (q % 2 == 0) {\n            q = (q / 2);\n        } else {\n     \
    \       p = p * 2;\n        }\n        q = q / 2;\n    }\n    while (r > 1) {\n\
    \        if (r % 2 == 0) {\n            r = (r / 2);\n        } else {\n     \
    \       p = p * 2;\n        }\n        r = r / 2;\n    }\n    return p;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp7e7le2xa: /tmp/tmp7e7le2xa.cpp:32: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (long\
    \ i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            n /= i;\n \
    \           max_factor_index = i;\n            max_factor = i;\n        }\n  \
    \  }\n    return max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long i = 2;\n    long max = 2;\n    while (i <\
    \ n) {\n        if (n % i == 0) {\n            res = i;\n            max = i;\n\
    \        }\n        i += 2;\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpwp5iq_h5: /tmp/tmpwp5iq_h5.cpp:23: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            ans = p;\n            break;\n        }\n        p\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpm5s8netd: /tmp/tmpm5s8netd.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i < n) {\n        if (n % i == 0) {\n            long j;\n  \
    \          for (j = i; j < n; j += i) {\n                if (n % j == 0) {\n \
    \                   break;\n                }\n            }\n            if (j\
    \ > i) {\n                max_factor = i;\n                max_factor_index =\
    \ j;\n            }\n        }\n        i += 1;\n    }\n    return max_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp6vy6vyba: /tmp/tmp6vy6vyba.cpp:31: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p * p <= n) {\n       \
    \ if (n % p == 0) {\n            ans = p;\n            n = n / p;\n        }\n\
    \        p++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpntif1v3c: /tmp/tmpntif1v3c.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i < n) {\n        if (n % i == 0) {\n            while (n % i\
    \ == 0) {\n                n /= i;\n                ++i;\n            }\n    \
    \        if (n > max_factor) {\n                max_factor = n;\n            \
    \    max_factor_index = i;\n            }\n        }\n        ++i;\n    }\n  \
    \  return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpuw427ny8: /tmp/tmpuw427ny8.cpp:29: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp583d8pnv: /tmp/tmp583d8pnv.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long i = 2;\n    while (i <= n / i) {\n       \
    \ if (n % i == 0) {\n            res = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpnh00zqae: /tmp/tmpnh00zqae.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long m = n;\n    long p = 2;\n    while (m % 2 == 0) {\n        m\
    \ /= 2;\n        p++;\n    }\n    while (m % 3 == 0) {\n        m /= 3;\n    \
    \    p++;\n    }\n    while (m % 5 == 0) {\n        m /= 5;\n        p++;\n  \
    \  }\n    while (m % 7 == 0) {\n        m /= 7;\n        p++;\n    }\n    while\
    \ (m % 11 == 0) {\n        m /= 11;\n        p++;\n    }\n    while (m % 13 ==\
    \ 0) {\n        m /= 13;\n        p++;\n    }\n    while (m % 17 == 0) {\n   \
    \     m /= 17;\n        p++;\n    }\n    while (m % 19 == 0) {\n        m /= 19;\n\
    \        p++;\n    }\n    while (m % 23 == 0) {\n        m /= 23;\n        p++;\n\
    \    }\n    while (m % 29 == 0) {\n        m /= 29;\n        p++;\n    }\n   \
    \ while (m % 31 == 0) {\n        m /= 31;\n        p++;\n    }\n    while (m %\
    \ 37 == 0) {\n        m /= 37;\n        p++;\n    }\n    while (m % 41 == 0) {\n\
    \        m /= 41;\n        p++;\n    }\n    while (m % 43 == 0) {\n        m /=\
    \ 43;\n        p++;\n    }\n    while (m % 47 == 0) {\n        m /= 47;\n    \
    \    p++;\n    }\n    while (m % 53 == 0) {\n        m /= 53;\n        p++;\n\
    \    }\n    while (m % 59 == 0) {\n        m /= 59;\n        p++;\n    }\n   \
    \ while (m % 61 == 0) {\n        m /= 61;\n        p++;\n    }\n    while (m %\
    \ 67 == 0) {\n        m /= 67;\n        p++;\n    }\n    while (m % 71 == 0) {\n\
    \        m /= 71;\n        p++;\n    }\n    while (m % 73 == 0) {\n        m /=\
    \ 73;\n        p++;\n    }\n    while (m % 79 == 0) {\n        m /= 79;\n    \
    \    p++;\n    }\n    while (m % 83 == 0) {\n        m /= 83;\n        p++;\n\
    \    }\n    while (m % 89 == 0) {\n        m /= 89;\n        p++;\n    }\n   \
    \ while (m % 97 == 0) {\n        m /= 97;\n        p++;\n    }\n    while (m %\
    \ 103 == 0) {\n        m /= 103;\n        p++;\n    }\n    while (m % 107 == 0)\
    \ {\n        m /= 107;\n        p++;\n    }\n    while (m % 113 == 0) {\n    \
    \    m /= 113;\n        p++;\n    }\n    while (m % 119 == 0) {\n        m /=\
    \ 119;\n        p++;\n    }\n    while (m % 127 == 0) {\n        m /= 127;\n \
    \       p++;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n  \
    \  assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63))\
    \ == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp9qj5ljr.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmpp9qj5ljr.cpp:131:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n  131 | int main() {\n      |     \
    \       ^\n/tmp/tmpp9qj5ljr.cpp:138:1: error: expected \u2018}\u2019 at end of\
    \ input\n  138 | }\n      | ^\n/tmp/tmpp9qj5ljr.cpp:8:35: note: to match this\
    \ \u2018{\u2019\n    8 | long largest_prime_factor(long n) {\n      |        \
    \                           ^\n/tmp/tmpp9qj5ljr.cpp:138:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n  138 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i;\n\
    \    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long factor\
    \ = i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpxj30jflx: /tmp/tmpxj30jflx.cpp:25: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 1;\n    long prime = 2;\n    long limit = sqrt(n);\n\
    \    long i = 2;\n    while (i <= limit) {\n        if (n % i == 0) {\n      \
    \      factor *= prime;\n            limit /= i;\n            prime++;\n     \
    \   }\n        i++;\n    }\n    return factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmppm0rht3z: /tmp/tmppm0rht3z.cpp:25: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 1;\n    long i = 2;\n    while (i <= n / 2) {\n    \
    \    if (n % i == 0) {\n            factor = i;\n            while (n % i == 0)\
    \ {\n                n /= i;\n                ++i;\n            }\n        }\n\
    \        ++i;\n    }\n    return factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpm_qicv2l: /tmp/tmpm_qicv2l.cpp:25: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            ans = p;\n            while (n % p == 0) {\n      \
    \          n /= p;\n            }\n        }\n        p++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpwky712c6: /tmp/tmpwky712c6.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i < n) {\n        if (n\
    \ % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n      \
    \          n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpui27rutd: /tmp/tmpui27rutd.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i <= n / 2) {\n        if (n % i == 0) {\n            long j\
    \ = i;\n            while (j <= n / i) {\n                if (n % j == 0) {\n\
    \                    max_factor_index = j;\n                    max_factor = i;\n\
    \                    break;\n                }\n                j++;\n       \
    \     }\n        }\n        i++;\n    }\n    return max_factor;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmp9420wjcx: /tmp/tmp9420wjcx.cpp:30: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max = 2;\n    long cur = 3;\n    while (cur <= n / 2) {\n   \
    \     while (n % cur == 0) {\n            max = cur;\n            cur += 2;\n\
    \        }\n        cur += 2;\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp3uz5pfts: /tmp/tmp3uz5pfts.cpp:23: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 1;\n    long max_factor = 1;\n    long max_divisor =\
    \ 1;\n    long max_divisor2 = 1;\n    long max_divisor3 = 1;\n    long max_divisor4\
    \ = 1;\n    long max_divisor5 = 1;\n    long max_divisor6 = 1;\n    long max_divisor7\
    \ = 1;\n    long max_divisor8 = 1;\n    long max_divisor9 = 1;\n    long max_divisor10\
    \ = 1;\n    long max_divisor11 = 1;\n    long max_divisor12 = 1;\n    long max_divisor13\
    \ = 1;\n    long max_divisor14 = 1;\n    long max_divisor15 = 1;\n    long max_divisor16\
    \ = 1;\n    long max_divisor17 = 1;\n    long max_divisor18 = 1;\n    long max_divisor19\
    \ = 1;\n    long max_divisor20 = 1;\n    long max_divisor21 = 1;\n    long max_divisor22\
    \ = 1;\n    long max_divisor23 = 1;\n    long max_divisor24 = 1;\n    long max_divisor25\
    \ = 1;\n    long max_divisor26 = 1;\n    long max_divisor27 = 1;\n    long max_divisor28\
    \ = 1;\n    long max_divisor29 = 1;\n    long max_divisor30 = 1;\n    long max_divisor31\
    \ = 1;\n    long max_divisor32 = 1;\n    long max_divisor33 = 1;\n    long max_divisor34\
    \ = 1;\n    long max_divisor35 = 1;\n    long max_divisor36 = 1;\n    long max_divisor37\
    \ = 1;\n    long max_divisor38 = 1;\n    long max_divisor39 = 1;\n    long max_divisor40\
    \ = 1;\n    long max_divisor41 = 1;\n    long max_divisor42 = 1;\n    long max_divisor43\
    \ = 1;\n    long max_divisor44 = 1;\n    long max_divisor45 = 1;\n    long max_divisor46\
    \ = 1;\n    long max_divisor47 = 1;\n    long max_divisor48 = 1;\n    long max_divisor49\
    \ = 1;\n    long max_divisor50 = 1;\n    long max_divisor51 = 1;\n    long max_divisor52\
    \ = 1;\n    long max_divisor53 = 1;\n    long max_divisor54 = 1;\n    long max_divisor55\
    \ = 1;\n    long max_divisor56 = 1;\n    long max_divisor57 = 1;\n    long max_divisor58\
    \ = 1;\n    long max_divisor59 = 1;\n    long max_divisor60 = 1;\n    long max_divisor61\
    \ = 1;\n    long max_divisor62 = 1;\n    long max_divisor63 = 1;\n    long max_divisor64\
    \ = 1;\n    long max_divisor65 = 1;\n    long max_divisor66 = 1;\n    long max_divisor67\
    \ = 1;\n    long max_divisor68 = 1;\n    long max_divisor69 = 1;\n    long max_divisor70\
    \ = 1;\n    long max_divisor71 = 1;\n    \n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp0zn6ljvb: /tmp/tmp0zn6ljvb.cpp:86: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / 2) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n                ++i;\n            }\n        }\n   \
    \     ++i;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpggbqf887: /tmp/tmpggbqf887.cpp:25: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 2;\n    while (n > 1) {\n        if (n % factor == 0)\
    \ {\n            n = n / factor;\n        } else {\n            factor++;\n  \
    \      }\n    }\n    return factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / i) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            break;\n        }\n   \
    \     i += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpvhqiz39z: /tmp/tmpvhqiz39z.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long i = 2;\n    while (i <= n / i) {\n       \
    \ if (n % i == 0) {\n            res = i;\n            break;\n        }\n   \
    \     i += 2;\n    }\n    return res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpynmtk48t: /tmp/tmpynmtk48t.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 1;\n    long max_factor = 1;\n    long max_factor_index\
    \ = 0;\n    long i = 2;\n    long j = 2;\n    while (i * j <= n) {\n        if\
    \ (n % i == 0) {\n            factor *= i;\n            n /= i;\n        }\n \
    \       if (n % j == 0) {\n            factor *= j;\n            n /= j;\n   \
    \     }\n        i++;\n        j++;\n    }\n    if (n > 1) {\n        factor *=\
    \ n;\n    }\n    return factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmptybvzyhk: /tmp/tmptybvzyhk.cpp:33: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp583d8pnv: /tmp/tmp583d8pnv.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 0;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i < n) {\n        if (n % i == 0) {\n            long j = i;\n\
    \            while (j < n) {\n                if (n % j == 0) {\n            \
    \        max_factor = j;\n                    max_factor_index = i;\n        \
    \            break;\n                }\n                j++;\n            }\n\
    \        }\n        i++;\n    }\n    return max_factor_index;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpel2hmwvm: /tmp/tmpel2hmwvm.cpp:31: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / 2) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n                ++i;\n            }\n        }\n   \
    \     ++i;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpggbqf887: /tmp/tmpggbqf887.cpp:25: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 0;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i < n) {\n        if (n % i == 0) {\n            long j = i;\n\
    \            while (j < n) {\n                if (n % j == 0) {\n            \
    \        max_factor = j;\n                    max_factor_index = i;\n        \
    \            break;\n                }\n                j++;\n            }\n\
    \        }\n        i++;\n    }\n    return max_factor_index;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpel2hmwvm: /tmp/tmpel2hmwvm.cpp:31: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i < n) {\n        if (n % i == 0) {\n            long j = max_factor;\n\
    \            while (j < i) {\n                if (n % j == 0) {\n            \
    \        max_factor = j;\n                    max_factor_index = j;\n        \
    \        }\n                j++;\n            }\n        }\n        i++;\n   \
    \ }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp2_564dxf: /tmp/tmp2_564dxf.cpp:29: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp583d8pnv: /tmp/tmp583d8pnv.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i <= n / 2) {\n        if (n % i == 0) {\n            while (n\
    \ % i == 0) {\n                n /= i;\n                ++i;\n            }\n\
    \            if (n > max_factor) {\n                max_factor = n;\n        \
    \        max_factor_index = i;\n            }\n        }\n        ++i;\n    }\n\
    \    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpheymzmqg: /tmp/tmpheymzmqg.cpp:29: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    while (p < n) {\n        if (n % p == 0) {\n    \
    \        n = n / p;\n        } else {\n            p = p + 1;\n        }\n   \
    \ }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / i) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpy2wwe82p: /tmp/tmpy2wwe82p.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i < n) {\n        if (n\
    \ % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n      \
    \          n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpui27rutd: /tmp/tmpui27rutd.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / 2) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n                ++i;\n            }\n        }\n   \
    \     ++i;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpggbqf887: /tmp/tmpggbqf887.cpp:25: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long largest = n;\n    while (i < largest) {\n  \
    \      if (n % i == 0) {\n            largest = i;\n        }\n        ++i;\n\
    \    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpm3mnqxga: /tmp/tmpm3mnqxga.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i;\n\
    \    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long j;\n\
    \            for (j = i; j <= n; j += i) {\n                if (j % i == 0) {\n\
    \                    break;\n                }\n            }\n            if\
    \ (j > i) {\n                max_factor = i;\n                max_factor_index\
    \ = i;\n            }\n        }\n    }\n    return max_factor;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmp9nt3rd4g: /tmp/tmp9nt3rd4g.cpp:30: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i <= n / 2) {\n        if (n % i == 0) {\n            while (n\
    \ % i == 0) {\n                n /= i;\n                ++i;\n            }\n\
    \            if (n > max_factor) {\n                max_factor = n;\n        \
    \        max_factor_index = i;\n            }\n        }\n        ++i;\n    }\n\
    \    return max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmps9qzpuno: /tmp/tmps9qzpuno.cpp:30: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long j = max_factor;\n\
    \            while (n % i == 0) {\n                n /= i;\n                j++;\n\
    \            }\n            if (j > max_factor) {\n                max_factor\
    \ = j;\n                max_factor_index = i;\n            }\n        }\n    }\n\
    \    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long d = 2;\n    long p = 2;\n    while (p < n)\
    \ {\n        while (n % p == 0) {\n            n /= p;\n            ans = p;\n\
    \        }\n        p++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmphhegftzb: /tmp/tmphhegftzb.cpp:23: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long m = n;\n    long p = 2;\n    while (m % p != 0) {\n        p\
    \ += 2;\n    }\n    while (p < n) {\n        while (n % p == 0) {\n          \
    \  n /= p;\n        }\n        p += 2;\n    }\n    return n;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660062095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long long ans = 1;\n    long long i = 2;\n    while (i <= n / i) {\n\
    \        if (n % i == 0) {\n            ans = i;\n            break;\n       \
    \ }\n        i += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpbkt56c0j: /tmp/tmpbkt56c0j.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 0;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i <= n / i) {\n        if (n % i == 0) {\n            long j\
    \ = i;\n            while (j * i <= n) {\n                j++;\n            }\n\
    \            if (max_factor < j) {\n                max_factor = j;\n        \
    \        max_factor_index = i;\n            }\n        }\n        i++;\n    }\n\
    \    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpdrswvzjl: /tmp/tmpdrswvzjl.cpp:29: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long i = 2;\n    while (i <= n / i) {\n       \
    \ if (n % i == 0) {\n            res = i;\n            break;\n        }\n   \
    \     i += 2;\n    }\n    return res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpynmtk48t: /tmp/tmpynmtk48t.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i <= n / 2) {\n        if (n % i == 0) {\n            while (n\
    \ % i == 0) {\n                n /= i;\n                max_factor_index = i;\n\
    \            }\n        }\n        i++;\n    }\n    return max_factor_index;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpcbbyuod5: /tmp/tmpcbbyuod5.cpp:25: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    long s = 1;\n \
    \   long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x\
    \ = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n \
    \   long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g\
    \ = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n \
    \   long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p\
    \ = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n \
    \   long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y\
    \ = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n \
    \   long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h\
    \ = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n \
    \   long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q\
    \ = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n \
    \   long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z\
    \ = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n \
    \   long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i\
    \ = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n \
    \   long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n \
    \   long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a\
    \ = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n \
    \   long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j\
    \ = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long \n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmppwn4cyxa.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmppwn4cyxa.cpp:33:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   33 |     long n = 1;\n      |          ^\n/tmp/tmppwn4cyxa.cpp:35:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   35 |     long p = 1;\n  \
    \    |          ^\n/tmp/tmppwn4cyxa.cpp:9:10: note: \u2018long int p\u2019 previously\
    \ declared here\n    9 |     long p = 2;\n      |          ^\n/tmp/tmppwn4cyxa.cpp:36:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   36 |     long q = 1;\n  \
    \    |          ^\n/tmp/tmppwn4cyxa.cpp:10:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   10 |     long q = n;\n      |          ^\n/tmp/tmppwn4cyxa.cpp:37:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   37 |     long r = 1;\n  \
    \    |          ^\n/tmp/tmppwn4cyxa.cpp:11:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   11 |     long r = n;\n      |          ^\n/tmp/tmppwn4cyxa.cpp:38:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   38 |     long s = 1;\n  \
    \    |          ^\n/tmp/tmppwn4cyxa.cpp:12:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   12 |     long s = 1;\n      |          ^\n/tmp/tmppwn4cyxa.cpp:39:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   39 |     long t = 1;\n  \
    \    |          ^\n/tmp/tmppwn4cyxa.cpp:13:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   13 |     long t = 1;\n      |          ^\n/tmp/tmppwn4cyxa.cpp:40:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   40 |     long u = 1;\n  \
    \    |          ^\n/tmp/tmppwn4cyxa.cpp:14:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   14 |     long u = 1;\n      |          ^\n/tmp/tmppwn4cyxa.cpp:41:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   41 |     long v = 1;\n  \
    \    |          ^\n/tmp/tmppwn4cyxa.cpp:15:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   15 |     long v = 1;\n      |          ^\n/tmp/tmppwn4cyxa.cpp:42:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   42 |     long w = 1;\n  \
    \    |          ^\n/tmp/tmppwn4cyxa.cpp:16:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   16 |     long w = 1;\n      |          ^\n/tmp/tmppwn4cyxa.cpp:43:10:\
    \ error: redeclaration of \u2018long int "
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        while\
    \ (n % p == 0) {\n            ans = p;\n            n /= p;\n        }\n     \
    \   p++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpxxkcac_i: /tmp/tmpxxkcac_i.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long max = 2;\n    while (i <= n / i) {\n       \
    \ if (n % i == 0) {\n            max = i;\n        }\n        i++;\n    }\n  \
    \  return max;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp6r45tkqg: /tmp/tmp6r45tkqg.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long max = 2;\n    while (i <= n / i) {\n       \
    \ if (n % i == 0) {\n            max = i;\n        }\n        ++i;\n    }\n  \
    \  return max;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp94yflm_p: /tmp/tmp94yflm_p.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i <= sqrt(n)) {\n        if (n % i == 0) {\n            long\
    \ j = sqrt(n);\n            while (j % i == 0) {\n                j = sqrt(j);\n\
    \            }\n            if (j > max_factor) {\n                max_factor\
    \ = j;\n                max_factor_index = i;\n            }\n        }\n    \
    \    i++;\n    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpd_1ih6nk: /tmp/tmpd_1ih6nk.cpp:29: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max = 2;\n    long i = 2;\n    while (i <= sqrt(n)) {\n     \
    \   if (n % i == 0) {\n            max = i;\n        }\n        i += 2;\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpweg28cjp: /tmp/tmpweg28cjp.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int\
    \ i = 2; i <= n; ++i) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp5__g37e_: /tmp/tmp5__g37e_.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p * p <= n) {\n       \
    \ if (n % p == 0) {\n            ans = p;\n            n /= p;\n        }\n  \
    \      p++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpjy6e0k15: /tmp/tmpjy6e0k15.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / 2) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n        ++i;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmphoou05po: /tmp/tmphoou05po.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062092
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    while (q > 1) {\n\
    \        if (n % q == 0) {\n            q = q / p;\n        } else {\n       \
    \     p = p * 2;\n        }\n    }\n    return p;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660062097
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i < n) {\n        if (n\
    \ % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n      \
    \          n /= i;\n            }\n        }\n        ++i;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpgmvv_ai_: /tmp/tmpgmvv_ai_.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / 2) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n        ++i;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmphoou05po: /tmp/tmphoou05po.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 2;\n    long max_factor = 1;\n    while (factor <= n\
    \ && max_factor < factor) {\n        max_factor = factor;\n        factor++;\n\
    \    }\n    return max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp5668ocsr: /tmp/tmp5668ocsr.cpp:19: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    while (q > 0) {\n\
    \        if (q % 2 == 0) {\n            q = (q / 2);\n        } else {\n     \
    \       p = p * 2;\n            q = (q / 2);\n        }\n    }\n    return p;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpt3ybq4wt: /tmp/tmpt3ybq4wt.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp583d8pnv: /tmp/tmp583d8pnv.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i;\n\
    \    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long factor\
    \ = i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpxj30jflx: /tmp/tmpxj30jflx.cpp:25: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int\
    \ i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n\
    \            max_factor_index = i;\n        }\n    }\n    return max_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpxem2n51b: /tmp/tmpxem2n51b.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    while (q > 0) {\n\
    \        if (q % 2 == 0) {\n            q = (q / 2);\n        }\n        else\
    \ {\n            p = p * 2;\n            q = (q / 2);\n        }\n    }\n    return\
    \ p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpz1eg4od_: /tmp/tmpz1eg4od_.cpp:25: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062092
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    while (q != 0)\
    \ {\n        if (q % p == 0) {\n            q = q / p;\n        } else {\n   \
    \         p = p * 2;\n        }\n    }\n    return p;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660062092
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    while (p < n) {\n        if (n % p == 0) {\n    \
    \        n = n / p;\n        } else {\n            p = p + 1;\n        }\n   \
    \ }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i;\n\
    \    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long factor\
    \ = i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpxj30jflx: /tmp/tmpxj30jflx.cpp:25: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long long ans = 1;\n    long long d = 2;\n    long long i = 3;\n \
    \   long long p = 2;\n    while (p < n) {\n        while (n % p == 0) {\n    \
    \        n /= p;\n            ans = p;\n        }\n        p += d;\n        d\
    \ += 2;\n        i += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpc20hq4e2: /tmp/tmpc20hq4e2.cpp:26: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    while (q > 1) {\n\
    \        if (n % q == 0) p = q;\n        q = p << 1;\n    }\n    while (r > 1)\
    \ {\n        if (n % r == 0) p = r;\n        r = p << 1;\n    }\n    return p;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660062098
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpyj9w9sa0: /tmp/tmpyj9w9sa0.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p * p <= n) {\n       \
    \ if (n % p == 0) {\n            ans = p;\n            break;\n        }\n   \
    \     p++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpibi0q7ym: /tmp/tmpibi0q7ym.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    while (q > 1) {\n\
    \        if (q % 2 == 0) {\n            q = (q / 2);\n        } else {\n     \
    \       q = (3 * q + 1);\n        }\n        if (p < q) {\n            p = q;\n\
    \        }\n    }\n    return p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp0hvidek1: /tmp/tmp0hvidek1.cpp:26: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long largest = i;\n    while (i < n) {\n        if\
    \ (n % i == 0) {\n            largest = i;\n        }\n        i += 2;\n    }\n\
    \    return largest;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp79__am2z: /tmp/tmp79__am2z.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long j = 2;\n\
    \            while (j * i <= n) {\n                if (n % i == 0) {\n       \
    \             max_factor = i;\n                    max_factor_index = j;\n   \
    \                 break;\n                }\n                j++;\n          \
    \  }\n        }\n    }\n    return max_factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpz1zd0gg4: /tmp/tmpz1zd0gg4.cpp:29: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long max_i = i;\n    long max_p = n;\n    long max_q\
    \ = n;\n    while (i < max_i) {\n        while (n % i == 0) {\n            n /=\
    \ i;\n            if (n > max_p) {\n                max_p = n;\n            }\n\
    \        }\n        i++;\n    }\n    while (n > 1) {\n        while (n % 2 ==\
    \ 0) {\n            n /= 2;\n            if (n > max_q) {\n                max_q\
    \ = n;\n            }\n        }\n        while (n % 3 == 0) {\n            n\
    \ /= 3;\n            if (n > max_q) {\n                max_q = n;\n          \
    \  }\n        }\n        n++;\n    }\n    return max_p;\n}\nint main() {\n   \
    \ auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660062098
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 0;\n    long max_factor_index = 0;\n    for (long\
    \ i = 2; i <= n; ++i) {\n        if (n % i == 0) {\n            long j = n / i;\n\
    \            if (j > max_factor) {\n                max_factor = j;\n        \
    \        max_factor_index = i;\n            }\n        }\n    }\n    return max_factor_index;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmplq2agzn5: /tmp/tmplq2agzn5.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062094
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int\
    \ i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            max_factor\
    \ = i;\n            max_factor_index = i;\n            n /= i;\n        }\n  \
    \  }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062094
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp583d8pnv: /tmp/tmp583d8pnv.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i < n) {\n        if (n % i == 0) {\n            while (n % i\
    \ == 0) {\n                n /= i;\n                ++max_factor;\n          \
    \  }\n            if (max_factor > max_factor_index) {\n                max_factor_index\
    \ = max_factor;\n            }\n        }\n        ++i;\n    }\n    return max_factor_index;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpgs8v_05f: /tmp/tmpgs8v_05f.cpp:28: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062094
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 1;\n    long max_factor = 1;\n    long max_factor_index\
    \ = 0;\n    long i = 2;\n    while (i <= n / 2) {\n        if (n % i == 0) {\n\
    \            factor *= i;\n            if (factor > max_factor) {\n          \
    \      max_factor = factor;\n                max_factor_index = i;\n         \
    \   }\n        }\n        i += 1;\n    }\n    return max_factor_index;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpzj6yh3o5: /tmp/tmpzj6yh3o5.cpp:28: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660062094
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long maxFactor = n;\n    long maxFactorPrime = 1;\n    long factor\
    \ = 2;\n    while (factor <= maxFactor) {\n        if (n % factor == 0) {\n  \
    \          maxFactorPrime = factor;\n        }\n        factor++;\n    }\n   \
    \ return maxFactorPrime;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpk539efsq: /tmp/tmpk539efsq.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long p = n;\n    while (p * p <= n) {\n        if\
    \ (n % i == 0) {\n            p = p / i;\n        }\n        else {\n        \
    \    i++;\n        }\n    }\n    return p;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpk7_uehl7: /tmp/tmpk7_uehl7.cpp:23: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 1;\n    long p = 2;\n    while (p < n) {\n        if\
    \ (n % p == 0) {\n            factor = p;\n            break;\n        }\n   \
    \     ++p;\n    }\n    return factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpi8qsyx50: /tmp/tmpi8qsyx50.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062095
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long m = n;\n    long p = 2;\n    long q = 3;\n    long r = 2;\n \
    \   long s = 2;\n    long t = 3;\n    long u = 3;\n    long v = 3;\n    long w\
    \ = 3;\n    long x = 2;\n    long y = 2;\n    long z = 2;\n    long A = 2;\n \
    \   long B = 2;\n    long C = 2;\n    long D = 2;\n    long E = 2;\n    long F\
    \ = 2;\n    long G = 2;\n    long H = 2;\n    long I = 2;\n    long J = 2;\n \
    \   long K = 2;\n    long L = 2;\n    long M = 2;\n    long N = 2;\n    long O\
    \ = 2;\n    long P = 2;\n    long Q = 2;\n    long R = 2;\n    long S = 2;\n \
    \   long T = 2;\n    long U = 2;\n    long V = 2;\n    long W = 2;\n    long X\
    \ = 2;\n    long Y = 2;\n    long Z = 2;\n    long aa = 2;\n    long bb = 2;\n\
    \    long cc = 2;\n    long dd = 2;\n    long ee = 2;\n    long ff = 2;\n    long\
    \ gg = 2;\n    long hh = 2;\n    long ii = 2;\n    long jj = 2;\n    long kk =\
    \ 2;\n    long ll = 2;\n    long mm = 2;\n    long nn = 2;\n    long oo = 2;\n\
    \    long pp = 2;\n    long qq = 2;\n    long rr = 2;\n    long ss = 2;\n    long\
    \ tt = 2;\n    long uu = 2;\n    long vv = 2;\n    long ww = 2;\n    long xx =\
    \ 3;\n    long yy = 3;\n    long zz = 3;\n    long Aa = 3;\n    long Bb = 3;\n\
    \    long Cc = 3;\n    long Dd = 3;\n    long Ee = 3;\n    long Ff = 3;\n    long\
    \ Gg = 3;\n    long Hh = 3;\n    long Ii = 3;\n    long Jj = 3;\n    long Kk =\
    \ 3;\n    long Ll = 3;\n    long Mm = 3;\n    long Nn = 3;\n    long Oo = 3;\n\
    \    long Pp = 3;\n    long Qq = 3;\n    long Rr = 3;\n    long Ss = 3;\n    long\
    \ Tt = 3;\n    long Uu = 3;\n    long Vv = 3;\n    long Ww = 3;\n    long Xx =\
    \ 3;\n    long Yy = 3;\n    long Zz = 3;\n    long aaa = 3;\n    long bbb = 3;\n\
    \    long ccc = 3;\n    long dd = 3;\n    long eee = 3;\n    long fff = 3;\n}\n\
    int main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp83r2hrfd.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmp83r2hrfd.cpp:102:10: error: redeclaration of \u2018long\
    \ int dd\u2019\n  102 |     long dd = 3;\n      |          ^~\n/tmp/tmp83r2hrfd.cpp:50:10:\
    \ note: \u2018long int dd\u2019 previously declared here\n   50 |     long dd\
    \ = 2;\n      |          ^~\n/tmp/tmp83r2hrfd.cpp:105:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n  105 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062094
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / 2) {\n       \
    \ while (n % i == 0) {\n            ans = i;\n            n = n / i;\n       \
    \ }\n        i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpgkm3p55w: /tmp/tmpgkm3p55w.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpyj9w9sa0: /tmp/tmpyj9w9sa0.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i < n) {\n        if (n % i == 0) {\n            long j = 2;\n\
    \            while (j < i) {\n                if (i % j == 0) {\n            \
    \        break;\n                }\n                j++;\n            }\n    \
    \        if (j > i) {\n                max_factor = i;\n                max_factor_index\
    \ = i;\n            }\n        }\n        i++;\n    }\n    return max_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpgtr4xey7: /tmp/tmpgtr4xey7.cpp:32: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i < n) {\n        if (n % i == 0) {\n            long j = i;\n\
    \            while (j < n) {\n                if (n % j == 0) {\n            \
    \        max_factor = j;\n                    max_factor_index = i;\n        \
    \            break;\n                }\n                j++;\n            }\n\
    \        }\n        i++;\n    }\n    return max_factor;\n}\nint main() {\n   \
    \ auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpbrm__j5j: /tmp/tmpbrm__j5j.cpp:31: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long d = 2;\n    while (d < n) {\n        if (n\
    \ % d == 0) {\n            ans = d;\n            while (n % d == 0) {\n      \
    \          n /= d;\n            }\n        }\n        d += 2;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmps_r7ll_m: /tmp/tmps_r7ll_m.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max = 2;\n    long cur = n;\n    long i = 3;\n    while (i <=\
    \ cur) {\n        if (cur % i == 0) {\n            max = i;\n        }\n     \
    \   i += 2;\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmphi0cbvyp: /tmp/tmphi0cbvyp.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 1;\n    long prime = 2;\n    long limit = (long) sqrt(n);\n\
    \    for (long i = 2; i <= limit; i++) {\n        if (n % i == 0) {\n        \
    \    while (n % i == 0) {\n                n /= i;\n                factor++;\n\
    \            }\n            if (n > 1) {\n                factor++;\n        \
    \    }\n        }\n    }\n    return factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpltz5jivu: /tmp/tmpltz5jivu.cpp:27: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long m = n;\n    long p = 2;\n    while (m % p == 0) {\n        m\
    \ /= p;\n        p++;\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpjdcytlee: /tmp/tmpjdcytlee.cpp:19: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062095
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long j = max_factor;\n\
    \            while (n % i == 0) {\n                n /= i;\n                j++;\n\
    \            }\n            if (j > max_factor) {\n                max_factor\
    \ = j;\n                max_factor_index = i;\n            }\n        }\n    }\n\
    \    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int\
    \ i = 2; i <= n; ++i) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp5__g37e_: /tmp/tmp5__g37e_.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / 2) {\n       \
    \ while (n % i == 0) {\n            ans = i;\n            n = n / i;\n       \
    \ }\n        i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpgkm3p55w: /tmp/tmpgkm3p55w.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long d = 2;\n    while (d < n) {\n        while\
    \ (n % d == 0) {\n            ans = d;\n            n /= d;\n        }\n     \
    \   d++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp33z1e5zs: /tmp/tmp33z1e5zs.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long i = 2;\n    while (i < n) {\n        if (n\
    \ % i == 0) {\n            res = i;\n            while (n % i == 0) {\n      \
    \          n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp4svp9432: /tmp/tmp4svp9432.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062094
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 0;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            long j = i;\n\
    \            while (j <= n) {\n                if (n % j == 0) {\n           \
    \         max_factor_index = j;\n                    break;\n                }\n\
    \                j++;\n            }\n            if (max_factor_index > max_factor)\
    \ {\n                max_factor = max_factor_index;\n            }\n        }\n\
    \        i++;\n    }\n    return max_factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpecajq4i4: /tmp/tmpecajq4i4.cpp:32: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long m = n;\n    long p = 2;\n    while (p < m) {\n        while (n\
    \ % p == 0) {\n            n /= p;\n        }\n        p++;\n    }\n    return\
    \ n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpk0cin135: /tmp/tmpk0cin135.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 1;\n    long p = 2;\n    while (p < n) {\n        if\
    \ (n % p == 0) {\n            factor = p;\n            break;\n        }\n   \
    \     p += 2;\n    }\n    return factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpfcoqiqlu: /tmp/tmpfcoqiqlu.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long p = n;\n    long max_factor = 1;\n    while\
    \ (i < p) {\n        if (n % i == 0) {\n            p /= i;\n            max_factor++;\n\
    \        }\n        i++;\n    }\n    return max_factor;\n}\nint main() {\n   \
    \ auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmp2pmwsw95: /tmp/tmp2pmwsw95.cpp:23: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpyj9w9sa0: /tmp/tmpyj9w9sa0.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i <= sqrt(n)) {\n        if (n % i == 0) {\n            long\
    \ j = i;\n            while (j <= sqrt(n)) {\n                if (n % j == 0)\
    \ {\n                    max_factor = j;\n                    max_factor_index\
    \ = i;\n                    break;\n                }\n                j++;\n\
    \            }\n        }\n        i++;\n    }\n    return max_factor_index;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpk3mri_ak: /tmp/tmpk3mri_ak.cpp:30: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long largest = i;\n    while (i < n) {\n        if\
    \ (n % i == 0) {\n            largest = i;\n        }\n        i += 2;\n    }\n\
    \    return largest;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp79__am2z: /tmp/tmp79__am2z.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long res = n;\n    long max_div = 1;\n    long max_div2 = 2;\n   \
    \ long max_div3 = 3;\n    long max_div4 = 4;\n    long max_div5 = 5;\n    long\
    \ max_div6 = 6;\n    long max_div7 = 7;\n    long max_div8 = 8;\n    long max_div9\
    \ = 9;\n    long max_div10 = 10;\n    long max_div11 = 11;\n    long max_div12\
    \ = 12;\n    long max_div13 = 13;\n    long max_div14 = 14;\n    long max_div15\
    \ = 15;\n    long max_div16 = 16;\n    long max_div17 = 17;\n    long max_div18\
    \ = 18;\n    long max_div19 = 19;\n    long max_div20 = 20;\n    long max_div21\
    \ = 21;\n    long max_div22 = 22;\n    long max_div23 = 23;\n    long max_div24\
    \ = 24;\n    long max_div25 = 25;\n    long max_div26 = 26;\n    long max_div27\
    \ = 27;\n    long max_div28 = 28;\n    long max_div29 = 29;\n    long max_div30\
    \ = 30;\n    long max_div31 = 31;\n    long max_div32 = 32;\n    long max_div33\
    \ = 33;\n    long max_div34 = 34;\n    long max_div35 = 35;\n    long max_div36\
    \ = 36;\n    long max_div37 = 37;\n    long max_div38 = 38;\n    long max_div39\
    \ = 39;\n    long max_div40 = 40;\n    long max_div41 = 41;\n    long max_div42\
    \ = 42;\n    long max_div43 = 43;\n    long max_div44 = 44;\n    long max_div45\
    \ = 45;\n    long max_div46 = 46;\n    long max_div47 = 47;\n    long max_div48\
    \ = 48;\n    long max_div49 = 49;\n    long max_div50 = 50;\n    long max_div51\
    \ = 51;\n    long max_div52 = 52;\n    long max_div53 = 53;\n    long max_div54\
    \ = 54;\n    long max_div55 = 55;\n    long max_div56 = 56;\n    long max_div57\
    \ = 57;\n    long max_div58 = 58;\n    long max_div59 = 59;\n    long max_div60\
    \ = 60;\n    long max_div61 = 61;\n    long max_div62 = 62;\n\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmp_00vc6q_: /tmp/tmp_00vc6q_.cpp:76: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 1;\n    long i = 2;\n    while (i < n && n % i == 0)\
    \ {\n        factor++;\n        n /= i;\n        i++;\n    }\n    return factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp_iesczoa: /tmp/tmp_iesczoa.cpp:20: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062097
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int\
    \ i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpyfao5ru6: /tmp/tmpyfao5ru6.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i;\n\
    \    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long j;\n\
    \            for (j = i; j <= n; j += i) {\n                if (n % j == 0) {\n\
    \                    break;\n                }\n            }\n            if\
    \ (j > max_factor) {\n                max_factor = j;\n                max_factor_index\
    \ = i;\n            }\n        }\n    }\n    return max_factor_index;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp6c5q_0o0: /tmp/tmp6c5q_0o0.cpp:30: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            ans = p;\n            break;\n        }\n        p\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpm5s8netd: /tmp/tmpm5s8netd.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / 2) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp4lckd5t2: /tmp/tmp4lckd5t2.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long p = n;\n    while (i < p) {\n        if (n %\
    \ i == 0) {\n            p /= i;\n        } else {\n            i++;\n       \
    \ }\n    }\n    return p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmph0oy6eht: /tmp/tmph0oy6eht.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062097
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 1;\n    long p = 2;\n    while (p < n) {\n        if\
    \ (n % p == 0) {\n            factor = p;\n            break;\n        }\n   \
    \     ++p;\n    }\n    return factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpi8qsyx50: /tmp/tmpi8qsyx50.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long largest = i;\n    while (i < n && n % i == 0)\
    \ {\n        largest = i;\n        i++;\n    }\n    return largest;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpfto86ktw: /tmp/tmpfto86ktw.cpp:19: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062097
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long max_i = i;\n    while (i < n) {\n        if\
    \ (n % i == 0) {\n            n = n / i;\n            max_i = i;\n        }\n\
    \        ++i;\n    }\n    return max_i;\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpaj0v886c: /tmp/tmpaj0v886c.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062097
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 2;\n    long max_factor = 1;\n    long max_factor_index\
    \ = 0;\n    long i;\n    long j;\n    long prime = 1;\n    long prime_index =\
    \ 0;\n    long is_prime = 1;\n    long is_prime_index = 0;\n    long max_prime\
    \ = 1;\n    long max_prime_index = 0;\n    long max_prime_divisor = 1;\n    long\
    \ max_prime_divisor_index = 0;\n    long max_prime_divisor_prime = 1;\n    long\
    \ max_prime_divisor_prime_index = 0;\n    long max_prime_divisor_prime_divisor\
    \ = 1;\n    long max_prime_divisor_prime_divisor_index = 0;\n    long max_prime_divisor_prime_divisor_prime\
    \ = 1;\n    long max_prime_divisor_prime_divisor_prime_index = 0;\n    long max_prime_divisor_prime_divisor_prime_divisor\
    \ = 1;\n    long max_prime_divisor_prime_divisor_prime_divisor_index = 0;\n  \
    \  long max_prime_divisor_prime_divisor_prime_divisor_prime = 1;\n    long max_prime_divisor_prime_divisor_prime_divisor_prime_index\
    \ = 0;\n    long max_prime_divisor_prime_divisor_prime_divisor_prime_divisor =\
    \ 1;\n    long max_prime_divisor_prime_divisor_prime_divisor_prime_divisor_index\
    \ = 0;\n    long max_prime_divisor_prime_divisor_prime_divisor_prime_divisor_prime\
    \ = 1;\n    long max_prime_divisor_prime_divisor_prime_divisor_prime_divisor_prime_index\
    \ = 0;\n    long max_prime_divisor_prime_divisor_prime_divisor_prime_divisor_prime_divisor\
    \ = 1;\n    long max_prime_divisor_prime_divisor_prime_divisor_prime_divisor_prime_divisor_index\
    \ = 0;\n    long max_prime_divisor_prime_divisor_prime_divisor_prime_divisor_prime_divisor_prime\
    \ = 1;\n    long max_prime_divisor_prime_divisor_prime_divisor_prime_divisor_prime_divisor_index\
    \ = 0;\n    long max_prime_divisor_prime_divisor_prime_divisor_prime_divisor_prime_divisor_prime\
    \ = 1;\n    long max_prime_divisor_prime_divisor_prime_divisor_prime_divisor_prime_divisor_prime_index\
    \ = 0;\n    long max_prime_divisor_prime_divisor_prime_divisor_prime_divisor_prime_divisor_prime_divisor\
    \ = 1;\n    long max_prime_divisor_prime_divisor_prime_divisor_prime_divisor_\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvbgwkmyz.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmpvbgwkmyz.cpp:39:10: error: redeclaration of \u2018long\
    \ int max_prime_divisor_prime_divisor_prime_divisor_prime_divisor_prime_divisor_index\u2019\
    \n   39 |     long max_prime_divisor_prime_divisor_prime_divisor_prime_divisor_prime_divisor_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvbgwkmyz.cpp:37:10: note: \u2018long int max_prime_divisor_prime_divisor_prime_divisor_prime_divisor_prime_divisor_index\u2019\
    \ previously declared here\n   37 |     long max_prime_divisor_prime_divisor_prime_divisor_prime_divisor_prime_divisor_index\
    \ = 0;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvbgwkmyz.cpp:40:10: error: redeclaration of \u2018long int max_prime_divisor_prime_divisor_prime_divisor_prime_divisor_prime_divisor_prime\u2019\
    \n   40 |     long max_prime_divisor_prime_divisor_prime_divisor_prime_divisor_prime_divisor_prime\
    \ = 1;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvbgwkmyz.cpp:38:10: note: \u2018long int max_prime_divisor_prime_divisor_prime_divisor_prime_divisor_prime_divisor_prime\u2019\
    \ previously declared here\n   38 |     long max_prime_divisor_prime_divisor_prime_divisor_prime_divisor_prime_divisor_prime\
    \ = 1;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvbgwkmyz.cpp:44:1: error: expected initializer before \u2018}\u2019 token\n\
    \   44 | }\n      | ^\n/tmp/tmpvbgwkmyz.cpp:44:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660062096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            ans = p;\n            break;\n        }\n        p\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpm5s8netd: /tmp/tmpm5s8netd.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    while (q != 1)\
    \ {\n        while (r != 1) {\n            if (q % r == 0) {\n               \
    \ p = q;\n                break;\n            }\n            r = r * q;\n    \
    \    }\n        q = q / p;\n    }\n    return p;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp5h1w041d: /tmp/tmp5h1w041d.cpp:26: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062097
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long i = 2;\n    while (i <= sqrt(n)) {\n     \
    \   if (n % i == 0) {\n            res = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpqs74aa8y: /tmp/tmpqs74aa8y.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062097
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long res = n;\n    long i = 2;\n    while (i < res) {\n        if\
    \ (n % i == 0) {\n            res = i;\n        }\n        i += 2;\n    }\n  \
    \  return res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpqr1qqcj8: /tmp/tmpqr1qqcj8.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062097
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long largest = i;\n    while (i <= n / i) {\n   \
    \     if (n % i == 0) {\n            largest = i;\n        }\n        ++i;\n \
    \   }\n    return largest;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmprpeu4gqe: /tmp/tmprpeu4gqe.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062097
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    long s = 2;\n \
    \   long t = 3;\n    long u = 3;\n    long v = 3;\n    long w = 3;\n    long x\
    \ = 3;\n    long y = 3;\n    long z = 3;\n    long A = 3;\n    long B = 3;\n \
    \   long C = 3;\n    long D = 3;\n    long E = 3;\n    long F = 3;\n    long G\
    \ = 3;\n    long H = 3;\n    long I = 3;\n    long J = 3;\n    long K = 3;\n \
    \   long L = 3;\n    long M = 3;\n    long N = 3;\n    long O = 3;\n    long P\
    \ = 3;\n    long Q = 3;\n    long R = 3;\n    long S = 3;\n    long T = 3;\n \
    \   long U = 3;\n    long V = 3;\n    long W = 3;\n    long X = 3;\n    long Y\
    \ = 3;\n    long Z = 3;\n    long aa = 3;\n    long ab = 3;\n    long ac = 3;\n\
    \    long ad = 3;\n    long ae = 3;\n    long af = 3;\n    long ag = 3;\n    long\
    \ ah = 3;\n    long ai = 3;\n    long aj = 3;\n    long ak = 3;\n    long al =\
    \ 3;\n    long am = 3;\n    long an = 3;\n    long ao = 3;\n    long ap = 3;\n\
    \    long aq = 3;\n    long ar = 3;\n    long as = 3;\n    long at = 3;\n    long\
    \ au = 3;\n    long av = 3;\n    long aw = 3;\n    long ax = 3;\n    long ay =\
    \ 3;\n    long az = 3;\n    long ba = 3;\n    long bb = 3;\n    long bc = 3;\n\
    \    long bd = 3;\n    long be = 3;\n    long bf = 3;\n    long bg = 3;\n    long\
    \ bh = 3;\n    long bi = 3;\n    long bj = 3;\n    long bk = 3;\n    long bl =\
    \ 3;\n    long bm = 3;\n    long bn = 3;\n    long bo = 3;\n    long bp = 3;\n\
    \    long bq = 3;\n    long br = 3;\n    long bs = 3;\n    long bt = 3;\n    long\
    \ bu = 3;\n    long bv = 3;\n    long bw = 3;\n    long bx = 3;\n    long by =\
    \ 3;\n    long bz = 3;\n    long ca = 3;\n    long cb = 3;\n    long cc = 3;\n\
    \    long cd = 3;\n    long ce = 3;\n    long cf = 3;\n    long cg = 3;\n    long\
    \ ch = 3;\n    long ci = 3;\n    long cj = 3;\n    long ck = 3;\n    long cl =\
    \ 3;\n    \n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpoue6xbij: /tmp/tmpoue6xbij.cpp:114: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062097
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / i) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            break;\n        }\n   \
    \     i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpy12ebze6: /tmp/tmpy12ebze6.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p * p <= n) {\n       \
    \ if (n % p == 0) {\n            ans = p;\n            n /= p;\n        }\n  \
    \      p++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpjy6e0k15: /tmp/tmpjy6e0k15.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long i = 2;\n    long max_i = n;\n    while (i\
    \ < max_i) {\n        if (n % i == 0) {\n            res = i;\n            max_i\
    \ = max_i / i;\n        }\n        i++;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpm8bef12u: /tmp/tmpm8bef12u.cpp:23: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062097
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 0;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i < n) {\n        if (n % i == 0) {\n            long j = i;\n\
    \            while (j < n) {\n                if (n % j == 0) {\n            \
    \        max_factor = j;\n                    max_factor_index = i;\n        \
    \            break;\n                }\n                j++;\n            }\n\
    \        }\n        i++;\n    }\n    return max_factor_index;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpel2hmwvm: /tmp/tmpel2hmwvm.cpp:31: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long largest = i;\n    while (i < n) {\n        if\
    \ (n % i == 0) {\n            largest = i;\n        }\n        ++i;\n    }\n \
    \   return largest;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpkne7_ha_: /tmp/tmpkne7_ha_.cpp:22: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660062097
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p * p <= n) {\n       \
    \ if (n % p == 0) {\n            ans = p;\n            n /= p;\n        }\n  \
    \      p++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpjy6e0k15: /tmp/tmpjy6e0k15.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i <= n / 2) {\n        if (n % i == 0) {\n            long j\
    \ = 2;\n            while (j * i <= n) {\n                if (n % j == 0) {\n\
    \                    max_factor = j;\n                    max_factor_index = i;\n\
    \                    break;\n                }\n                j++;\n       \
    \     }\n        }\n        i++;\n    }\n    return max_factor;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmp2r3_sbev: /tmp/tmp2r3_sbev.cpp:30: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062097
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    long s = 1;\n \
    \   while (p < q) {\n        while (r % p == 0) {\n            r /= p;\n     \
    \   }\n        while (r % q == 0) {\n            r /= q;\n        }\n        if\
    \ (s == 1) {\n            s = r;\n        }\n        if (p > q) {\n          \
    \  q = p;\n        }\n        p = q;\n    }\n    return s;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpsflbg5am: /tmp/tmpsflbg5am.cpp:32: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062097
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    while (p < n) {\n        if (n % p == 0) {\n    \
    \        n = n / p;\n        } else {\n            p = p + 1;\n        }\n   \
    \ }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i < n) {\n        if (n\
    \ % i == 0) {\n            ans = i;\n            break;\n        }\n        i\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp_o546wsc: /tmp/tmp_o546wsc.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062097
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int\
    \ i = 1; i <= n; ++i) {\n        long factor = 1;\n        while (n % i == 0)\
    \ {\n            n /= i;\n            factor++;\n        }\n        if (factor\
    \ > max_factor) {\n            max_factor = factor;\n            max_factor_index\
    \ = i;\n        }\n    }\n    return max_factor_index;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660062102
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long m = n;\n    while (m % 2 == 0) {\n       \
    \ m /= 2;\n        res++;\n    }\n    while (m % 3 == 0) {\n        m /= 3;\n\
    \        res++;\n    }\n    while (m % 5 == 0) {\n        m /= 5;\n        res++;\n\
    \    }\n    while (m % 7 == 0) {\n        m /= 7;\n        res++;\n    }\n   \
    \ while (m % 11 == 0) {\n        m /= 11;\n        res++;\n    }\n    while (m\
    \ % 13 == 0) {\n        m /= 13;\n        res++;\n    }\n    while (m % 17 ==\
    \ 0) {\n        m /= 17;\n        res++;\n    }\n    while (m % 19 == 0) {\n \
    \       m /= 19;\n        res++;\n    }\n    while (m % 23 == 0) {\n        m\
    \ /= 23;\n        res++;\n    }\n    while (m % 29 == 0) {\n        m /= 29;\n\
    \        res++;\n    }\n    while (m % 31 == 0) {\n        m /= 31;\n        res++;\n\
    \    }\n    while (m % 37 == 0) {\n        m /= 37;\n        res++;\n    }\n \
    \   while (m % 41 == 0) {\n        m /= 41;\n        res++;\n    }\n    while\
    \ (m % 43 == 0) {\n        m /= 43;\n        res++;\n    }\n    while (m % 47\
    \ == 0) {\n        m /= 47;\n        res++;\n    }\n    while (m % 53 == 0) {\n\
    \        m /= 53;\n        res++;\n    }\n    while (m % 59 == 0) {\n        m\
    \ /= 59;\n        res++;\n    }\n    while (m % 61 == 0) {\n        m /= 61;\n\
    \        res++;\n    }\n    while (m % 67 == 0) {\n        m /= 67;\n        res++;\n\
    \    }\n    while (m % 71 == 0) {\n        m /= 71;\n        res++;\n    }\n \
    \   while (m % 73 == 0) {\n        m /= 73;\n        res++;\n    }\n    while\
    \ (m % 79 == 0) {\n        m /= 79;\n        res++;\n    }\n    while (m % 83\
    \ == 0) {\n        m /= 83;\n        res++;\n    }\n    while (m % 89 == 0) {\n\
    \        m /= 89;\n        res++;\n    }\n    while (m % 97 == 0) {\n        m\
    \ /= 97;\n        res++;\n    }\n    while (m % 103 == 0) {\n        m /= 103;\n\
    \        res++;\n    }\n    while (m % 107 == 0) {\n        m /= 107;\n      \
    \  res++;\n    }\n    while (m % 111 == 0) {\n        m /= 111;\n        res++;\n\
    \    }\n    while (m % \n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpivmwxf14.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmpivmwxf14.cpp:124:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  124 | }\n      | ^\n/tmp/tmpivmwxf14.cpp:123:15:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  123 |     while\
    \ (m %\n      |           ~   ^\n      |               )\n  124 | }\n      | ~\
    \              \n/tmp/tmpivmwxf14.cpp:124:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  124 | }\n      | ^\n/tmp/tmpivmwxf14.cpp:124:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660062097
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i <= sqrt(n)) {\n        if (n % i == 0) {\n            long\
    \ j;\n            for (j = i; j <= sqrt(n); j++) {\n                if (n % j\
    \ == 0) {\n                    break;\n                }\n            }\n    \
    \        if (j > sqrt(n)) {\n                i = j;\n            } else {\n  \
    \              max_factor = i;\n                max_factor_index = i;\n      \
    \      }\n        }\n        i++;\n    }\n    return max_factor;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmpziouwjam: /tmp/tmpziouwjam.cpp:33: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062098
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (long\
    \ i = 2; i <= n; ++i) {\n        if (n % i == 0) {\n            long j = max_factor;\n\
    \            while (n % i == 0) {\n                n /= i;\n                ++j;\n\
    \            }\n            if (j > max_factor) {\n                max_factor\
    \ = j;\n                max_factor_index = i;\n            }\n        }\n    }\n\
    \    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062098
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i <= n / 2) {\n        if (n % i == 0) {\n            while (n\
    \ % i == 0) {\n                n /= i;\n                ++max_factor;\n      \
    \      }\n            ++max_factor_index;\n        }\n        ++i;\n    }\n  \
    \  return max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpnss636mp: /tmp/tmpnss636mp.cpp:26: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062098
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long max_i = n;\n    long max_factor = 1;\n    while\
    \ (i < max_i) {\n        if (n % i == 0) {\n            max_factor = i;\n    \
    \    }\n        i += 2;\n    }\n    return max_factor;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpc0_s9m0e: /tmp/tmpc0_s9m0e.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062099
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / 2) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n                ++i;\n            }\n        }\n   \
    \     ++i;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpggbqf887: /tmp/tmpggbqf887.cpp:25: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long m = n;\n    long a = 2, b = 2, c = 2, d = 2, e = 2;\n    while\
    \ (m != 1) {\n        if (m % a == 0) {\n            m = m / a;\n            n\
    \ = n - 1;\n        } else if (m % b == 0) {\n            m = m / b;\n       \
    \     n = n - 1;\n        } else if (m % c == 0) {\n            m = m / c;\n \
    \           n = n - 1;\n        } else if (m % d == 0) {\n            m = m /\
    \ d;\n            n = n - 1;\n        } else if (m % e == 0) {\n            m\
    \ = m / e;\n            n = n - 1;\n        } else {\n            m = m / e;\n\
    \            n = n - 1;\n        }\n        a = a + 2;\n        b = b + 2;\n \
    \       c = c + 2;\n        d = d + 2;\n        e = e + 2;\n    }\n    return\
    \ n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmp7uht0f6c: /tmp/tmp7uht0f6c.cpp:41: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062099
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    while (q > 0) {\n\
    \        if (q % 2 == 0) {\n            p += 1;\n        }\n        q = q / 2;\n\
    \    }\n    while (r > 1) {\n        if (r % 2 == 0) {\n            p += 1;\n\
    \        }\n        r = r / 2;\n    }\n    return p;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpeyc3bjzg: /tmp/tmpeyc3bjzg.cpp:28: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062099
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i < n) {\n        if (n\
    \ % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n      \
    \          n /= i;\n            }\n        }\n        ++i;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpgmvv_ai_: /tmp/tmpgmvv_ai_.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062092
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    long s = 1;\n \
    \   while (p <= q) {\n        while (r % p == 0) {\n            r /= p;\n    \
    \    }\n        while (r % q == 0) {\n            r /= q;\n        }\n       \
    \ if (r > 1) {\n            s *= r;\n        }\n        p += 1;\n        q +=\
    \ 1;\n    }\n    return s;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660062104
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i < n) {\n        if (n\
    \ % i == 0) {\n            ans = i;\n            break;\n        }\n        i\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp_o546wsc: /tmp/tmp_o546wsc.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062097
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i <= sqrt(n)) {\n        if (n % i == 0) {\n            long\
    \ j = i;\n            while (j <= sqrt(n)) {\n                if (n % j == 0)\
    \ {\n                    max_factor = 1;\n                    max_factor_index\
    \ = 0;\n                    break;\n                }\n                else {\n\
    \                    max_factor++;\n                    max_factor_index = j;\n\
    \                }\n                j++;\n            }\n        }\n        else\
    \ {\n            max_factor = 1;\n            max_factor_index = 0;\n        }\n\
    \        i++;\n    }\n    return max_factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpy76d0av8: /tmp/tmpy76d0av8.cpp:38: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062099
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    long max_i = n;\n    while (i\
    \ < max_i) {\n        if (n % i == 0) {\n            ans = i;\n            break;\n\
    \        }\n        i += 2;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmppqb_3_yn: /tmp/tmppqb_3_yn.cpp:23: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062099
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i <= n / 2) {\n        if (n % i == 0) {\n            while (n\
    \ % i == 0) {\n                n /= i;\n                max_factor_index = i;\n\
    \            }\n            max_factor = i;\n        }\n        ++i;\n    }\n\
    \    return max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp3ygz8kmf: /tmp/tmp3ygz8kmf.cpp:26: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062099
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long maxPrimeFactor = 1;\n    long maxPrimeFactorIndex = 0;\n    for\
    \ (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long primeFactor\
    \ = i;\n            while (n % primeFactor == 0) {\n                maxPrimeFactor\
    \ = primeFactor;\n                maxPrimeFactorIndex = i;\n                n\
    \ /= primeFactor;\n            }\n        }\n    }\n    return maxPrimeFactor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062099
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            ans = p;\n            break;\n        }\n        p++;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpi9fudhu3: /tmp/tmpi9fudhu3.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max = (long) sqrt(n);\n    long i = 2;\n    long p = 2;\n   \
    \ while (i <= max) {\n        if (n % i == 0) {\n            p += i;\n       \
    \     while (n % i == 0) {\n                n /= i;\n            }\n        }\n\
    \        i++;\n    }\n    return p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpu__j4sc5: /tmp/tmpu__j4sc5.cpp:26: int main(): Assertion `candidate((27))
    == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660062099
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int\
    \ i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpyfao5ru6: /tmp/tmpyfao5ru6.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int\
    \ i = 2; i <= n; ++i) {\n        if (n % i == 0) {\n            long temp = max_factor;\n\
    \            max_factor = i;\n            max_factor_index = i;\n        }\n \
    \   }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpjb9w5cpj: /tmp/tmpjb9w5cpj.cpp:22: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062099
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int\
    \ i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpyfao5ru6: /tmp/tmpyfao5ru6.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long res = n;\n    long i = 2;\n    while (i < res) {\n        if\
    \ (n % i == 0) {\n            res = i;\n        }\n        ++i;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmppfq7jutp: /tmp/tmppfq7jutp.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062099
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 2;\n    long max_factor = 1;\n    while (factor <= n\
    \ && n % factor == 0) {\n        max_factor = factor;\n        factor++;\n   \
    \ }\n    return max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp9vnc5zjs: /tmp/tmp9vnc5zjs.cpp:19: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062099
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max = 2;\n    long i = 2;\n    while (i <= sqrt(n)) {\n     \
    \   if (n % i == 0) {\n            max = i;\n        }\n        i += 2;\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpweg28cjp: /tmp/tmpweg28cjp.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / i) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmpy2wwe82p: /tmp/tmpy2wwe82p.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long max_factor = 1;\n    long max_factor_index =\
    \ 0;\n    while (i < n) {\n        if (n % i == 0) {\n            while (n % i\
    \ == 0) {\n                n /= i;\n                ++i;\n            }\n    \
    \        if (max_factor < i) {\n                max_factor = i;\n            \
    \    max_factor_index = i;\n            }\n        }\n        ++i;\n    }\n  \
    \  return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpek1qykwj: /tmp/tmpek1qykwj.cpp:29: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062099
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / 2) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n                ++i;\n            }\n        }\n   \
    \     ++i;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpggbqf887: /tmp/tmpggbqf887.cpp:25: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    long m = 1;\n \
    \   while (p <= q) {\n        while (r % p == 0) {\n            r /= p;\n    \
    \    }\n        p++;\n        while (r % p == 0) {\n            r /= p;\n    \
    \    }\n        p++;\n        m++;\n    }\n    return m;\n}\nint main() {\n  \
    \  auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmp7er5t800: /tmp/tmp7er5t800.cpp:28: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062099
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long i = 2;\n    while (i <= n / i) {\n       \
    \ if (n % i == 0) {\n            res = i;\n        }\n        i += 2;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmp43st_t60: /tmp/tmp43st_t60.cpp:21: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062099
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    while (q > 1) {\n\
    \        if (n % q == 0) {\n            p += q;\n            n /= q;\n       \
    \ } else {\n            q--;\n        }\n    }\n    if (n > 1) {\n        p +=\
    \ n;\n    }\n    return p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpv3981jv_: /tmp/tmpv3981jv_.cpp:27: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062099
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i < n) {\n        if (n % i == 0) {\n            long j = i;\n\
    \            while (j < n) {\n                if (n % j == 0) {\n            \
    \        max_factor_index = j;\n                    break;\n                }\n\
    \                j++;\n            }\n            max_factor = i;\n          \
    \  break;\n        }\n        i++;\n    }\n    return max_factor;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmp7xl2wanl: /tmp/tmp7xl2wanl.cpp:31: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062100
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / 2) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n        ++i;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  status: Exception
  stderr: 'tmphoou05po: /tmp/tmphoou05po.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062092
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 1;\n    long p = 2;\n    long q = n;\n    while (p <\
    \ q) {\n        while (q % p == 0) {\n            q = q / p;\n        }\n    \
    \    factor = p;\n        p = p * 2;\n    }\n    return factor;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmp7va65qer: /tmp/tmp7va65qer.cpp:23: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062100
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (long\
    \ i = 2; i <= n; ++i) {\n        while (n % i == 0) {\n            n /= i;\n \
    \           max_factor_index = i;\n            max_factor = i;\n        }\n  \
    \  }\n    return max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660062100
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    long s = 1;\n \
    \   while (p < q) {\n        while (r % p == 0) {\n            r /= p;\n     \
    \   }\n        while (r % q == 0) {\n            r /= q;\n        }\n        if\
    \ (p * q > r) {\n            q = r;\n        }\n        p += 1;\n        s +=\
    \ 1;\n    }\n    return s;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmph8bljst2: /tmp/tmph8bljst2.cpp:30: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062100
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    long m = 1;\n \
    \   while (p < q) {\n        while (r % p == 0) {\n            m += p;\n     \
    \       r /= p;\n        }\n        p += 1;\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  status: Exception
  stderr: 'tmptne6cgjj: /tmp/tmptne6cgjj.cpp:24: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062100
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
    // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i;\n\
    \    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long factor\
    \ = i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  status: Exception
  stderr: 'tmpxj30jflx: /tmp/tmpxj30jflx.cpp:25: int main(): Assertion `candidate((15))
    == (5)'' failed.

    '
  stdout: ''
  timestamp: 1660062088
