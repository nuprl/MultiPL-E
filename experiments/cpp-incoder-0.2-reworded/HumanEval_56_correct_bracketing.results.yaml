language: cpp
name: HumanEval_56_correct_bracketing
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int len = brackets.size();\n    for (int i = 0; i < len; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] != '>')\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm8gsy6xz.cpp: In function 'int main()':\n/tmp/tmpm8gsy6xz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm8gsy6xz.cpp:2:\n/tmp/tmpm8gsy6xz.cpp:26:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6pj8057r.cpp: In function 'bool correct_bracketing(std::string)':\n\
    /tmp/tmp6pj8057r.cpp:15:15: error: 'c' does not name a type\n     for (auto c\
    \ : brackets) {\n               ^\n/tmp/tmp6pj8057r.cpp:22:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp6pj8057r.cpp:22:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp6pj8057r.cpp:22:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp6pj8057r.cpp:22:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp6pj8057r.cpp:22:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp6pj8057r.cpp: In function 'int main()':\n/tmp/tmp6pj8057r.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6pj8057r.cpp:2:\n/tmp/tmp6pj8057r.cpp:26:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6pj8057r.cpp: In function 'bool correct_bracketing(std::string)':\n\
    /tmp/tmp6pj8057r.cpp:15:15: error: 'c' does not name a type\n     for (auto c\
    \ : brackets) {\n               ^\n/tmp/tmp6pj8057r.cpp:22:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp6pj8057r.cpp:22:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp6pj8057r.cpp:22:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp6pj8057r.cpp:22:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp6pj8057r.cpp:22:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp6pj8057r.cpp: In function 'int main()':\n/tmp/tmp6pj8057r.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6pj8057r.cpp:2:\n/tmp/tmp6pj8057r.cpp:26:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t len = brackets.size();\n    bool result = true;\n  \
    \  size_t i = 0;\n    while (i < len) {\n        if (brackets[i] != '<') {\n \
    \           result = false;\n            break;\n        }\n        i++;\n   \
    \     if (i >= len) {\n            result = false;\n            break;\n     \
    \   }\n        if (brackets[i] != '>') {\n            result = false;\n      \
    \      break;\n        }\n        i++;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpynrlwkb8.cpp: In function 'int main()':\n/tmp/tmpynrlwkb8.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpynrlwkb8.cpp:2:\n/tmp/tmpynrlwkb8.cpp:37:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6pj8057r.cpp: In function 'bool correct_bracketing(std::string)':\n\
    /tmp/tmp6pj8057r.cpp:15:15: error: 'c' does not name a type\n     for (auto c\
    \ : brackets) {\n               ^\n/tmp/tmp6pj8057r.cpp:22:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp6pj8057r.cpp:22:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp6pj8057r.cpp:22:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp6pj8057r.cpp:22:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp6pj8057r.cpp:22:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp6pj8057r.cpp: In function 'int main()':\n/tmp/tmp6pj8057r.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6pj8057r.cpp:2:\n/tmp/tmp6pj8057r.cpp:26:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t opening_brackets = 0;\n    size_t closing_brackets =\
    \ 0;\n    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++opening_brackets;\n            ++opening_brackets_size;\n\
    \        } else if (brackets[i] == '>') {\n            ++closing_brackets;\n \
    \           ++closing_brackets_size;\n        }\n    }\n    if (opening_brackets_size\
    \ != closing_brackets_size) {\n        return false;\n    }\n    if (opening_brackets\
    \ != closing_brackets) {\n        return false;\n    }\n    for (size_t i = 0;\
    \ i < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n           \
    \ ++opening_brackets;\n        } else if (brackets[i] == '>') {\n            ++closing_brackets;\n\
    \        }\n    }\n    if (opening_brackets != brackets.size()) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8f0186gt.cpp: In function 'int main()':\n/tmp/tmp8f0186gt.cpp:46:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8f0186gt.cpp:2:\n/tmp/tmp8f0186gt.cpp:47:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    size_t len = brackets.size();\n  \
    \  for (size_t i = 0; i < len; ++i) {\n        char c = brackets[i];\n       \
    \ if (c == '<') {\n            if (i + 1 < len && brackets[i + 1] == '>') {\n\
    \                ++i;\n            } else {\n                result = false;\n\
    \            }\n        } else if (c == '>') {\n            if (i + 1 < len &&\
    \ brackets[i + 1] == '<') {\n                ++i;\n            } else {\n    \
    \            result = false;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphm1t699q.cpp: In function 'int main()':\n/tmp/tmphm1t699q.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphm1t699q.cpp:2:\n/tmp/tmphm1t699q.cpp:36:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    size_t open_brackets_index = 0;\n    size_t close_brackets_index = 0;\n \
    \   for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] ==\
    \ '<') {\n            open_brackets++;\n            open_brackets_index = i;\n\
    \        } else if (brackets[i] == '>') {\n            close_brackets++;\n   \
    \         close_brackets_index = i;\n        }\n    }\n    if (open_brackets ==\
    \ close_brackets) {\n        return true;\n    }\n    if (open_brackets > close_brackets)\
    \ {\n        return false;\n    }\n    if (open_brackets_index == close_brackets_index)\
    \ {\n        return false;\n    }\n    if (open_brackets_index > close_brackets_index)\
    \ {\n        std::swap(open_brackets_index, close_brackets_index);\n    }\n  \
    \  std::string open_brackets_str = brackets.substr(0, open_brackets_index);\n\
    \    std::string close_brackets_str = brackets.substr(close_brackets_index + 1);\n\
    \    return correct_bracketing(open_brackets_str) && correct_bracketing(close_brackets_str);\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqsjpg_i2.cpp: In function 'int main()':\n/tmp/tmpqsjpg_i2.cpp:44:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqsjpg_i2.cpp:2:\n/tmp/tmpqsjpg_i2.cpp:45:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto it = brackets.begin(); it\
    \ != brackets.end(); ++it) {\n        if (*it == '<') {\n            result &=\
    \ (it + 1 != brackets.end()) && (*it == '>');\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcsm_k6d0.cpp: In function 'bool correct_bracketing(std::string)':\n\
    /tmp/tmpcsm_k6d0.cpp:15:15: error: 'it' does not name a type\n     for (auto it\
    \ = brackets.begin(); it != brackets.end(); ++it) {\n               ^\n/tmp/tmpcsm_k6d0.cpp:15:38:\
    \ error: expected ';' before 'it'\n     for (auto it = brackets.begin(); it !=\
    \ brackets.end(); ++it) {\n                                      ^\n/tmp/tmpcsm_k6d0.cpp:15:38:\
    \ error: 'it' was not declared in this scope\n/tmp/tmpcsm_k6d0.cpp: In function\
    \ 'int main()':\n/tmp/tmpcsm_k6d0.cpp:23:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = correct_bracketing;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcsm_k6d0.cpp:2:\n/tmp/tmpcsm_k6d0.cpp:24:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // initialize a stack to store opening brackets\n    std::stack<char>\
    \ brackets_stack;\n    // initialize a stack to store closing brackets\n    std::stack<char>\
    \ brackets_stack_close;\n    // initialize a stack to store opening brackets\n\
    \    std::stack<char> brackets_stack_open;\n    // initialize a stack to store\
    \ closing brackets\n    std::stack<char> brackets_stack_open_close;\n    // initialize\
    \ a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpacocvh8n.cpp: In function 'bool correct_bracketing(std::string)':\n\
    /tmp/tmpacocvh8n.cpp:43:22: error: redeclaration of 'std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close'\n\
    \     std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close;\n\
    \                      ^\n/tmp/tmpacocvh8n.cpp:41:22: error: 'std::stack<char>\
    \ brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close'\
    \ previously declared here\n     std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close;\n\
    \                      ^\n/tmp/tmpacocvh8n.cpp:47:22: error: redeclaration of\
    \ 'std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close_close'\n\
    \     std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close_close;\n\
    \                      ^\n/tmp/tmpacocvh8n.cpp:45:22: error: 'std::stack<char>\
    \ brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close_close'\
    \ previously declared here\n     std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close_close;\n\
    \                      ^\n/tmp/tmpacocvh8n.cpp:52:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpacocvh8n.cpp: In function 'int main()':\n\
    /tmp/tmpacocvh8n.cpp:54:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = correct_bracketing;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpacocvh8n.cpp:2:\n/tmp/tmpacocvh8n.cpp:55:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t brackets_size = brackets.size();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i) {\n        if (brackets[i] == '<') {\n            opening_brackets_size++;\n\
    \        } else if (brackets[i] == '>') {\n            closing_brackets_size++;\n\
    \        }\n    }\n    if (opening_brackets_size == closing_brackets_size) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpou5ftf41.cpp: In function 'int main()':\n/tmp/tmpou5ftf41.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpou5ftf41.cpp:2:\n/tmp/tmpou5ftf41.cpp:32:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6pj8057r.cpp: In function 'bool correct_bracketing(std::string)':\n\
    /tmp/tmp6pj8057r.cpp:15:15: error: 'c' does not name a type\n     for (auto c\
    \ : brackets) {\n               ^\n/tmp/tmp6pj8057r.cpp:22:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp6pj8057r.cpp:22:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp6pj8057r.cpp:22:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp6pj8057r.cpp:22:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp6pj8057r.cpp:22:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp6pj8057r.cpp: In function 'int main()':\n/tmp/tmp6pj8057r.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6pj8057r.cpp:2:\n/tmp/tmp6pj8057r.cpp:26:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int open_brackets = 0;\n    int close_brackets = 0;\n    for\
    \ (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n\
    \            open_brackets++;\n        } else if (brackets[i] == '>') {\n    \
    \        close_brackets++;\n        }\n    }\n    if (open_brackets != close_brackets)\
    \ {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_econhyr.cpp: In function 'int main()':\n/tmp/tmp_econhyr.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_econhyr.cpp:2:\n/tmp/tmp_econhyr.cpp:30:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t len = brackets.size();\n    bool result = true;\n  \
    \  for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n   \
    \         if (brackets[i + 1] != '>') {\n                result = false;\n   \
    \             break;\n            }\n            i += 2;\n        } else {\n \
    \           if (brackets[i + 1] != '>') {\n                result = false;\n \
    \               break;\n            }\n            i += 1;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmtmd90kj.cpp: In function 'int main()':\n/tmp/tmpmtmd90kj.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmtmd90kj.cpp:2:\n/tmp/tmpmtmd90kj.cpp:35:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int len = brackets.size();\n    for (int i = 0; i < len; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] != '>')\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm8gsy6xz.cpp: In function 'int main()':\n/tmp/tmpm8gsy6xz.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm8gsy6xz.cpp:2:\n/tmp/tmpm8gsy6xz.cpp:26:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t len = brackets.size();\n    bool result = true;\n  \
    \  for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] != '<' && brackets[i]\
    \ != '>') {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpth2fkalf.cpp: In function 'int main()':\n/tmp/tmpth2fkalf.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpth2fkalf.cpp:2:\n/tmp/tmpth2fkalf.cpp:26:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c != '<' && c != '>') {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7l3528t8.cpp: In function 'bool correct_bracketing(std::string)':\n\
    /tmp/tmp7l3528t8.cpp:15:15: error: 'c' does not name a type\n     for (auto c\
    \ : brackets) {\n               ^\n/tmp/tmp7l3528t8.cpp:21:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp7l3528t8.cpp:21:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp7l3528t8.cpp:21:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp7l3528t8.cpp:21:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp7l3528t8.cpp:21:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp7l3528t8.cpp: In function 'int main()':\n/tmp/tmp7l3528t8.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7l3528t8.cpp:2:\n/tmp/tmp7l3528t8.cpp:25:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int open_brackets = 0;\n    int close_brackets = 0;\n    for\
    \ (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n\
    \            open_brackets++;\n        } else if (brackets[i] == '>') {\n    \
    \        close_brackets++;\n        }\n    }\n    return open_brackets == close_brackets;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg7eeyhk3.cpp: In function 'int main()':\n/tmp/tmpg7eeyhk3.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg7eeyhk3.cpp:2:\n/tmp/tmpg7eeyhk3.cpp:27:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t brackets_size = brackets.size();\n    bool result =\
    \ true;\n    for (size_t i = 0; i < brackets_size; i++) {\n        if (brackets[i]\
    \ != '<') {\n            result = false;\n            break;\n        }\n    }\n\
    \    for (size_t i = 0; i < brackets_size; i++) {\n        if (brackets[i] !=\
    \ '>') {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplv3wdqmu.cpp: In function 'int main()':\n/tmp/tmplv3wdqmu.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplv3wdqmu.cpp:2:\n/tmp/tmplv3wdqmu.cpp:32:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n                break;\n            }\n    \
    \    } else if (c == '>') {\n            if (brackets[brackets.size() - 2] !=\
    \ '<') {\n                result = false;\n                break;\n          \
    \  }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0wwvws3c.cpp: In function 'bool correct_bracketing(std::string)':\n\
    /tmp/tmp0wwvws3c.cpp:15:15: error: 'c' does not name a type\n     for (auto c\
    \ : brackets) {\n               ^\n/tmp/tmp0wwvws3c.cpp:28:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmp0wwvws3c.cpp:28:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp0wwvws3c.cpp:28:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp0wwvws3c.cpp:28:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp0wwvws3c.cpp:28:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp0wwvws3c.cpp: In function 'int main()':\n/tmp/tmp0wwvws3c.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0wwvws3c.cpp:2:\n/tmp/tmp0wwvws3c.cpp:32:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"<>\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
