language: cpp
name: HumanEval_56_correct_bracketing
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int len = brackets.size();\n    for (int i = 0; i < len; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] != '>')\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmphb5ug1pq: /tmp/tmphb5ug1pq.cpp:27: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzwboieqs: /tmp/tmpzwboieqs.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzwboieqs: /tmp/tmpzwboieqs.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t len = brackets.size();\n    bool result = true;\n  \
    \  size_t i = 0;\n    while (i < len) {\n        if (brackets[i] != '<') {\n \
    \           result = false;\n            break;\n        }\n        i++;\n   \
    \     if (i >= len) {\n            result = false;\n            break;\n     \
    \   }\n        if (brackets[i] != '>') {\n            result = false;\n      \
    \      break;\n        }\n        i++;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6gjugbai: /tmp/tmp6gjugbai.cpp:38: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzwboieqs: /tmp/tmpzwboieqs.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t opening_brackets = 0;\n    size_t closing_brackets =\
    \ 0;\n    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++opening_brackets;\n            ++opening_brackets_size;\n\
    \        } else if (brackets[i] == '>') {\n            ++closing_brackets;\n \
    \           ++closing_brackets_size;\n        }\n    }\n    if (opening_brackets_size\
    \ != closing_brackets_size) {\n        return false;\n    }\n    if (opening_brackets\
    \ != closing_brackets) {\n        return false;\n    }\n    for (size_t i = 0;\
    \ i < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n           \
    \ ++opening_brackets;\n        } else if (brackets[i] == '>') {\n            ++closing_brackets;\n\
    \        }\n    }\n    if (opening_brackets != brackets.size()) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpi3sgyb03: /tmp/tmpi3sgyb03.cpp:52: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    size_t len = brackets.size();\n  \
    \  for (size_t i = 0; i < len; ++i) {\n        char c = brackets[i];\n       \
    \ if (c == '<') {\n            if (i + 1 < len && brackets[i + 1] == '>') {\n\
    \                ++i;\n            } else {\n                result = false;\n\
    \            }\n        } else if (c == '>') {\n            if (i + 1 < len &&\
    \ brackets[i + 1] == '<') {\n                ++i;\n            } else {\n    \
    \            result = false;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpg80q8y2w: /tmp/tmpg80q8y2w.cpp:37: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    size_t open_brackets_index = 0;\n    size_t close_brackets_index = 0;\n \
    \   for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] ==\
    \ '<') {\n            open_brackets++;\n            open_brackets_index = i;\n\
    \        } else if (brackets[i] == '>') {\n            close_brackets++;\n   \
    \         close_brackets_index = i;\n        }\n    }\n    if (open_brackets ==\
    \ close_brackets) {\n        return true;\n    }\n    if (open_brackets > close_brackets)\
    \ {\n        return false;\n    }\n    if (open_brackets_index == close_brackets_index)\
    \ {\n        return false;\n    }\n    if (open_brackets_index > close_brackets_index)\
    \ {\n        std::swap(open_brackets_index, close_brackets_index);\n    }\n  \
    \  std::string open_brackets_str = brackets.substr(0, open_brackets_index);\n\
    \    std::string close_brackets_str = brackets.substr(close_brackets_index + 1);\n\
    \    return correct_bracketing(open_brackets_str) && correct_bracketing(close_brackets_str);\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpm0nx2e8e: /tmp/tmpm0nx2e8e.cpp:50: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto it = brackets.begin(); it\
    \ != brackets.end(); ++it) {\n        if (*it == '<') {\n            result &=\
    \ (it + 1 != brackets.end()) && (*it == '>');\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmplgfav_aa: /tmp/tmplgfav_aa.cpp:24: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // initialize a stack to store opening brackets\n    std::stack<char>\
    \ brackets_stack;\n    // initialize a stack to store closing brackets\n    std::stack<char>\
    \ brackets_stack_close;\n    // initialize a stack to store opening brackets\n\
    \    std::stack<char> brackets_stack_open;\n    // initialize a stack to store\
    \ closing brackets\n    std::stack<char> brackets_stack_open_close;\n    // initialize\
    \ a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp58x7g8nr.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp58x7g8nr.cpp:43:22: error: redeclaration of \u2018std::stack<char>\
    \ brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close\u2019\
    \n   43 |     std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close;\n\
    \      |                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp58x7g8nr.cpp:41:22: note: \u2018std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close\u2019\
    \ previously declared here\n   41 |     std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close;\n\
    \      |                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp58x7g8nr.cpp:47:22: error: redeclaration of \u2018std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close_close\u2019\
    \n   47 |     std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close_close;\n\
    \      |                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp58x7g8nr.cpp:45:22: note: \u2018std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close_close\u2019\
    \ previously declared here\n   45 |     std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close_close;\n\
    \      |                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp58x7g8nr.cpp:52:1: error: expected initializer before \u2018}\u2019 token\n\
    \   52 | }\n      | ^\n/tmp/tmp58x7g8nr.cpp:52:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660130308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t brackets_size = brackets.size();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i) {\n        if (brackets[i] == '<') {\n            opening_brackets_size++;\n\
    \        } else if (brackets[i] == '>') {\n            closing_brackets_size++;\n\
    \        }\n    }\n    if (opening_brackets_size == closing_brackets_size) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzjx2zmhx: /tmp/tmpzjx2zmhx.cpp:37: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzwboieqs: /tmp/tmpzwboieqs.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int open_brackets = 0;\n    int close_brackets = 0;\n    for\
    \ (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n\
    \            open_brackets++;\n        } else if (brackets[i] == '>') {\n    \
    \        close_brackets++;\n        }\n    }\n    if (open_brackets != close_brackets)\
    \ {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp27fed68h: /tmp/tmp27fed68h.cpp:35: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t len = brackets.size();\n    bool result = true;\n  \
    \  for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n   \
    \         if (brackets[i + 1] != '>') {\n                result = false;\n   \
    \             break;\n            }\n            i += 2;\n        } else {\n \
    \           if (brackets[i + 1] != '>') {\n                result = false;\n \
    \               break;\n            }\n            i += 1;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp77yb05r2: /tmp/tmp77yb05r2.cpp:36: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int len = brackets.size();\n    for (int i = 0; i < len; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] != '>')\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmphb5ug1pq: /tmp/tmphb5ug1pq.cpp:27: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t len = brackets.size();\n    bool result = true;\n  \
    \  for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] != '<' && brackets[i]\
    \ != '>') {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpctfng3mr: /tmp/tmpctfng3mr.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c != '<' && c != '>') {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp42briyfu: /tmp/tmp42briyfu.cpp:29: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int open_brackets = 0;\n    int close_brackets = 0;\n    for\
    \ (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n\
    \            open_brackets++;\n        } else if (brackets[i] == '>') {\n    \
    \        close_brackets++;\n        }\n    }\n    return open_brackets == close_brackets;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpi0zjo56j: /tmp/tmpi0zjo56j.cpp:32: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t brackets_size = brackets.size();\n    bool result =\
    \ true;\n    for (size_t i = 0; i < brackets_size; i++) {\n        if (brackets[i]\
    \ != '<') {\n            result = false;\n            break;\n        }\n    }\n\
    \    for (size_t i = 0; i < brackets_size; i++) {\n        if (brackets[i] !=\
    \ '>') {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmrbggqcb: /tmp/tmpmrbggqcb.cpp:32: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n                break;\n            }\n    \
    \    } else if (c == '>') {\n            if (brackets[brackets.size() - 2] !=\
    \ '<') {\n                result = false;\n                break;\n          \
    \  }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpuulqpla0: /tmp/tmpuulqpla0.cpp:33: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto it = brackets.begin(); it\
    \ != brackets.end(); ++it) {\n        if (*it == '<') {\n            if (brackets.find('>',\
    \ it) != brackets.end()) {\n                result = false;\n                break;\n\
    \            }\n        } else if (*it == '>') {\n            if (brackets.find('<',\
    \ it) != brackets.end()) {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgwo12l76.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpgwo12l76.cpp:17:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::find(char, __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >&)\u2019\n   17 |             if (brackets.find('>',\
    \ it) != brackets.end()) {\n      |                                      ^\nIn\
    \ file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpgwo12l76.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2351:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::find(const _CharT*, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 2351 |       find(const _CharT* __s, size_type __pos, size_type\
    \ __n) const\n      |       ^~~~\n/usr/include/c++/9/bits/basic_string.h:2351:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2365:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::find(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<"
  stdout: ''
  timestamp: 1660130308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets.find(\"<\", brackets.find(c) + 1)\
    \ != std::string::npos) {\n                result = false;\n            }\n  \
    \      }\n        else if (c == '>') {\n            if (brackets.find(\">\", brackets.find(c)\
    \ + 1) != std::string::npos) {\n                result = false;\n            }\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpn3mkspan: /tmp/tmpn3mkspan.cpp:32: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = brackets.size() - 1;\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            open_brackets--;\n        } else if (brackets[i] == '>')\
    \ {\n            close_brackets++;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdiqsc444: /tmp/tmpdiqsc444.cpp:27: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = brackets.size();\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            open_brackets--;\n        }\n        if (brackets[i]\
    \ == '>') {\n            close_brackets++;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvcyk_c9i: /tmp/tmpvcyk_c9i.cpp:32: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            result &= (brackets[brackets.size() - 1] == '>');\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpu5lbyzmg: /tmp/tmpu5lbyzmg.cpp:28: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130308
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string opening_brackets = \"<\";\n    std::string closing_brackets\
    \ = \">\";\n    std::string opening_brackets_reversed = \">\";\n    std::string\
    \ closing_brackets_reversed = \"<\";\n    std::string opening_brackets_reversed_reversed\
    \ = \">\";\n    std::string closing_brackets_reversed_reversed = \"<\";\n    std::string\
    \ opening_brackets_reversed_reversed_reversed = \">\";\n    std::string closing_brackets_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed\
    \ = \">\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed\
    \ = \">\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \">\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \">\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \">\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \">\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \">\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \">\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reverse\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6z410twr.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp6z410twr.cpp:38:1: error: expected initializer before \u2018}\u2019\
    \ token\n   38 | }\n      | ^\n/tmp/tmp6z410twr.cpp:38:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660130308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c != '<' && c != '>') {\n            result = false;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfvwwl2sv: /tmp/tmpfvwwl2sv.cpp:28: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int open_brackets = 0;\n    int close_brackets = 0;\n    for(int\
    \ i = 0; i < brackets.size(); i++) {\n        if(brackets[i] == '<') {\n     \
    \       open_brackets++;\n        }\n        else if(brackets[i] == '>') {\n \
    \           close_brackets++;\n        }\n    }\n    return open_brackets == close_brackets;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpshngrw4k: /tmp/tmpshngrw4k.cpp:33: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzwboieqs: /tmp/tmpzwboieqs.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c != '<' && c != '>') {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp42briyfu: /tmp/tmp42briyfu.cpp:29: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = brackets.size();\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++close_brackets;\n        } else if (brackets[i] ==\
    \ '>') {\n            --close_brackets;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzarew7kr: /tmp/tmpzarew7kr.cpp:27: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t len = brackets.size();\n    bool result = true;\n  \
    \  for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] != brackets[len\
    \ - i - 1]) {\n            result = false;\n            break;\n        }\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp468ftk_d: /tmp/tmp468ftk_d.cpp:26: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (size_t i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] ==\
    \ '>') {\n                result = true;\n            }\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpp9tmfyer: /tmp/tmpp9tmfyer.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n                break;\n            }\n    \
    \    } else if (c == '>') {\n            if (brackets[brackets.size() - 2] !=\
    \ '<') {\n                result = false;\n                break;\n          \
    \  }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpuulqpla0: /tmp/tmpuulqpla0.cpp:33: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string brackets_copy = brackets;\n    size_t open_brackets\
    \ = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets_copy.size();\
    \ i++) {\n        if (brackets_copy[i] == '<') {\n            open_brackets++;\n\
    \        } else if (brackets_copy[i] == '>') {\n            close_brackets++;\n\
    \        }\n    }\n    if (open_brackets == close_brackets) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzeau9d12: /tmp/tmpzeau9d12.cpp:36: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int len = brackets.size();\n    for (int i = 0; i < len; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] == '>')\n\
    \                return true;\n        }\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7m99_1jo: /tmp/tmp7m99_1jo.cpp:29: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = brackets.size();\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++open_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            ++close_brackets;\n        } else {\n            return false;\n\
    \        }\n    }\n    return open_brackets == close_brackets;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdru7wert: /tmp/tmpdru7wert.cpp:29: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int opening_brackets = brackets.size();\n    for (int i = 0;\
    \ i < opening_brackets; ++i) {\n        if (brackets[i] == '<') {\n          \
    \  if (brackets[i + 1] == '>') {\n                return true;\n            }\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp69cnbl0_: /tmp/tmp69cnbl0_.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int len = brackets.size();\n    for (int i = 0; i < len; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] != '<')\
    \ {\n                return false;\n            }\n        }\n        else if\
    \ (brackets[i] == '>') {\n            if (brackets[i + 1] != '>') {\n        \
    \        return false;\n            }\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpod_k77ud: /tmp/tmpod_k77ud.cpp:31: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] ==\
    \ '<') {\n            open_brackets++;\n        } else if (brackets[i] == '>')\
    \ {\n            close_brackets++;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9pe38mg8: /tmp/tmp9pe38mg8.cpp:32: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t brackets_size = brackets.size();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i) {\n        if (brackets[i] == '<') {\n            opening_brackets_size++;\n\
    \        } else if (brackets[i] == '>') {\n            closing_brackets_size++;\n\
    \        }\n    }\n    if (opening_brackets_size != closing_brackets_size) {\n\
    \        return false;\n    }\n    for (size_t i = 0; i < brackets_size; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            if (opening_brackets_size\
    \ == closing_brackets_size) {\n                return true;\n            }\n \
    \       } else if (brackets[i] == '>') {\n            if (opening_brackets_size\
    \ != closing_brackets_size) {\n                return false;\n            }\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp46xf4ej3: /tmp/tmp46xf4ej3.cpp:47: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzwboieqs: /tmp/tmpzwboieqs.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t brackets_size = brackets.size();\n    bool result =\
    \ true;\n    for (size_t i = 0; i < brackets_size; i++) {\n        char c = brackets[i];\n\
    \        if (c == '<') {\n            if (brackets[i + 1] == '>') {\n        \
    \        result = true;\n            } else {\n                result = false;\n\
    \            }\n        } else if (c == '>') {\n            if (brackets[i + 1]\
    \ != '<') {\n                result = false;\n            }\n        } else {\n\
    \            result = false;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmphv78t_ba: /tmp/tmphv78t_ba.cpp:36: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            ++open_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            ++close_brackets;\n        } else {\n            return false;\n\
    \        }\n    }\n    if (open_brackets != close_brackets) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxfs2j8d8: /tmp/tmpxfs2j8d8.cpp:37: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets.find('>', c) == std::string::npos)\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        else if (c == '>') {\n            if (brackets.find('<', c)\
    \ == std::string::npos) {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmps3dfs_i0: /tmp/tmps3dfs_i0.cpp:33: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n                break;\n            }\n    \
    \    } else if (c == '>') {\n            if (brackets[brackets.size() - 1] !=\
    \ '<') {\n                result = false;\n                break;\n          \
    \  }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpg5qb798k: /tmp/tmpg5qb798k.cpp:32: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t opening_brackets = brackets.size();\n    size_t closing_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++opening_brackets;\n        } else if (brackets[i] ==\
    \ '>') {\n            ++closing_brackets;\n        } else {\n            return\
    \ false;\n        }\n    }\n    return opening_brackets == closing_brackets;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpe9shgald: /tmp/tmpe9shgald.cpp:29: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets.find(\"<\", brackets.find(c) + 1)\
    \ != brackets.npos) {\n                result = false;\n            }\n      \
    \  }\n        else if (c == '>') {\n            if (brackets.find(\">\", brackets.find(c)\
    \ + 1) != brackets.npos) {\n                result = false;\n            }\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpur8b0yev: /tmp/tmpur8b0yev.cpp:32: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzwboieqs: /tmp/tmpzwboieqs.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzwboieqs: /tmp/tmpzwboieqs.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto it = brackets.begin(); it\
    \ != brackets.end(); ++it) {\n        if (*it == '<') {\n            result +=\
    \ !(*(it + 1));\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbninkww2: /tmp/tmpbninkww2.cpp:28: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c != '<' && c != '>') {\n            result = false;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfvwwl2sv: /tmp/tmpfvwwl2sv.cpp:28: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto it = brackets.begin(); it\
    \ != brackets.end(); ++it) {\n        if (*it == '<') {\n            result &=\
    \ (*(it + 1) != '<');\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4310bkax: /tmp/tmp4310bkax.cpp:25: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzwboieqs: /tmp/tmpzwboieqs.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            result &= (brackets.find('>', brackets.find(c))\
    \ == std::string::npos);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9k_rkggv: /tmp/tmp9k_rkggv.cpp:24: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // initialize a stack\n    stack<char> brackets_stack;\n  \
    \  // initialize a stack\n    stack<char> brackets_stack_2;\n    // initialize\
    \ a stack\n    stack<char> brackets_stack_3;\n    // initialize a stack\n    stack<char>\
    \ brackets_stack_4;\n    // initialize a stack\n    stack<char> brackets_stack_5;\n\
    \    // initialize a stack\n    stack<char> brackets_stack_6;\n    // initialize\
    \ a stack\n    stack<char> brackets_stack_7;\n    // initialize a stack\n    stack<char>\
    \ brackets_stack_8;\n    // initialize a stack\n    stack<char> brackets_stack_9;\n\
    \    // initialize a stack\n    stack<char> brackets_stack_10;\n    // initialize\
    \ a stack\n    stack<char> brackets_stack_11;\n    // initialize a stack\n   \
    \ stack<char> brackets_stack_12;\n    // initialize a stack\n    stack<char> brackets_stack_13;\n\
    \    // initialize a stack\n    stack<char> brackets_stack_14;\n    // initialize\
    \ a stack\n    stack<char> brackets_stack_15;\n    // initialize a stack\n   \
    \ stack<char> brackets_stack_16;\n    // initialize a stack\n    stack<char> brackets_stack_17;\n\
    \    // initialize a stack\n    stack<char> brackets_stack_18;\n    // initialize\
    \ a stack\n    stack<char> brackets_stack_19;\n    // initialize a stack\n   \
    \ stack<char> brackets_stack_20;\n    // initialize a stack\n    stack<char> brackets_stack_21;\n\
    \    // initialize a stack\n    stack<char> brackets_stack_22;\n    // initialize\
    \ a stack\n    stack<char> brackets_stack_23;\n    // initialize a stack\n   \
    \ stack<char> brackets_stack_24;\n    // initialize a stack\n    stack<char> brackets_stack_25;\n\
    \    // initialize a stack\n    stack<char> brackets_stack_26;\n    // initialize\
    \ a stack\n    stack<char> brackets_stack_27;\n    // initialize a stack\n   \
    \ stack<char> brackets_stack_28;\n    // initialize a stack\n    stack<char> brackets_stack_29;\n\
    \    // initialize a stack\n    stack<char> brackets_stack_30;\n    // initialize\
    \ a stack\n    stack<char> brackets_stack_31;\n    // initialize a stack\n   \
    \ stack<char> brackets_stack_32;\n    // initialize a stack\n    stack<char> brackets_stack_33;\n\
    \    // initialize a stack\n    stack<char> brackets_stack_34;\n    // initialize\
    \ a stack\n    stack<char> brackets_stack_35;\n    // initialize a stack\n\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w7ykd47.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp9w7ykd47.cpp:15:5: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   15 |     stack<char> brackets_stack;\n\
    \      |     ^~~~~\n      |     std::stack\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmp9w7ykd47.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmp9w7ykd47.cpp:15:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   15 |     stack<char> brackets_stack;\n      |  \
    \         ^~~~\n/tmp/tmp9w7ykd47.cpp:17:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   17 |     stack<char> brackets_stack_2;\n      |\
    \           ^~~~\n/tmp/tmp9w7ykd47.cpp:19:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   19 |     stack<char> brackets_stack_3;\n      |\
    \           ^~~~\n/tmp/tmp9w7ykd47.cpp:21:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   21 |     stack<char> brackets_stack_4;\n      |\
    \           ^~~~\n/tmp/tmp9w7ykd47.cpp:23:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   23 |     stack<char> brackets_stack_5;\n      |\
    \           ^~~~\n/tmp/tmp9w7ykd47.cpp:25:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   25 |     stack<char> brackets_stack_6;\n      |\
    \           ^~~~\n/tmp/tmp9w7ykd47.cpp:27:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   27 |     stack<char> brackets_stack_7;\n      |\
    \           ^~~~\n/tmp/tmp9w7ykd47.cpp:29:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   29 |     stack<char> brackets_stack_8;\n      |\
    \           ^~~~\n/tmp/tmp9w7ykd47.cpp:31:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   31 |     stack<char> brackets_stack_9;\n      |\
    \           ^~~~\n/tmp/tmp9w7ykd47.cpp:33:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   33 |     stack<char> brackets_stack_10;\n      |\
    \           ^~~~\n/tmp/tmp9w7ykd47.cpp"
  stdout: ''
  timestamp: 1660130308
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string opening_brackets = \"<\";\n    std::string closing_brackets\
    \ = \">\";\n    std::string opening_brackets_reversed = \">\";\n    std::string\
    \ closing_brackets_reversed = \"<\";\n    std::string opening_brackets_reversed_2\
    \ = \">\";\n    std::string closing_brackets_reversed_2 = \"<\";\n    std::string\
    \ opening_brackets_reversed_3 = \"<\";\n    std::string closing_brackets_reversed_3\
    \ = \">\";\n    std::string opening_brackets_reversed_4 = \"<\";\n    std::string\
    \ closing_brackets_reversed_4 = \">\";\n    std::string opening_brackets_reversed_5\
    \ = \"<\";\n    std::string closing_brackets_reversed_5 = \">\";\n    std::string\
    \ opening_brackets_reversed_6 = \"<\";\n    std::string closing_brackets_reversed_6\
    \ = \">\";\n    std::string opening_brackets_reversed_7 = \"<\";\n    std::string\
    \ closing_brackets_reversed_7 = \">\";\n    std::string opening_brackets_reversed_8\
    \ = \"<\";\n    std::string closing_brackets_reversed_8 = \">\";\n    std::string\
    \ opening_brackets_reversed_9 = \"<\";\n    std::string closing_brackets_reversed_9\
    \ = \">\";\n    std::string opening_brackets_reversed_10 = \"<\";\n    std::string\
    \ closing_brackets_reversed_10 = \">\";\n    std::string opening_brackets_reversed_11\
    \ = \"<\";\n    std::string closing_brackets_reversed_11 = \">\";\n    std::string\
    \ opening_brackets_reversed_12 = \"<\";\n    std::string closing_brackets_reversed_12\
    \ = \">\";\n    std::string opening_brackets_reversed_13 = \"<\";\n    std::string\
    \ closing_brackets_reversed_13 = \">\";\n    std::string opening_brackets_reversed_14\
    \ = \"<\";\n    std::string closing_brackets_reversed_14 = \">\";\n    std::string\
    \ opening_brackets_reversed_15 = \"<\";\n    std::string closing_brackets_reversed_15\
    \ = \">\";\n    std::string opening_brackets_reversed_16 = \"<\";\n    std::string\
    \ closing_brackets_reversed_16 = \">\";\n    std::string opening_brackets_reversed_17\
    \ = \"<\";\n    std::string closing_brackets_reversed_17 = \">\";\n    std::string\
    \ opening_brackets_reversed_18 = \"\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0taiqxgp.cpp:50:48: warning: missing terminating \" character\n\
    \   50 |     std::string opening_brackets_reversed_18 = \"\n      |          \
    \                                      ^\n/tmp/tmp0taiqxgp.cpp:50:48: error: missing\
    \ terminating \" character\n/tmp/tmp0taiqxgp.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp0taiqxgp.cpp:51:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   51 | }\n      | ^\n/tmp/tmp0taiqxgp.cpp:51:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmp0taiqxgp.cpp:51:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int len = brackets.size();\n    for (int i = 0; i < len; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] == '>')\
    \ {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqnrexrwl: /tmp/tmpqnrexrwl.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    size_t open_brackets = 0;\n    size_t\
    \ close_brackets = 0;\n    for (size_t i = 0; i < brackets.size(); i++) {\n  \
    \      if (brackets[i] == '<') {\n            open_brackets++;\n        } else\
    \ if (brackets[i] == '>') {\n            close_brackets++;\n        } else if\
    \ (brackets[i] == '<' && brackets[i + 1] == '>') {\n            close_brackets++;\n\
    \        } else if (brackets[i] == '<' && brackets[i + 1] == '>' && brackets[i\
    \ + 2] == '>') {\n            close_brackets++;\n        } else if (brackets[i]\
    \ == '<' && brackets[i + 1] == '>' && brackets[i + 2] == '>' && brackets[i + 3]\
    \ == '>') {\n            close_brackets++;\n        } else if (brackets[i] ==\
    \ '<' && brackets[i + 1] == '>' && brackets[i + 2] == '>' && brackets[i + 3] ==\
    \ '>' && brackets[i + 4] == '>') {\n            close_brackets++;\n        } else\
    \ if (brackets[i] == '<' && brackets[i + 1] == '>' && brackets[i + 2] == '>' &&\
    \ brackets[i + 3] == '>' && brackets[i + 4] == '>' && brackets[i + 5] == '>')\
    \ {\n            close_brackets++;\n        } else if (brackets[i] == '<' && brackets[i\
    \ + 1] == '>' && brackets[i + 2] == '>' && brackets[i + 3] == '>' && brackets[i\
    \ + 4] == '>' && brackets[i + 5] == '>' && brackets[i + 6] == '>') {\n       \
    \     close_brackets++;\n        } else if (brackets[i] == '<' && brackets[i +\
    \ 1] == '>' && brackets[i + 2] == '>' && brackets[i + 3] == '>' && brackets[i\
    \ + 4] == '>' && brackets[i + 5] == '>' && brackets[i + 6] == '>' && brackets[i\
    \ + 7] == '>') {\n            close_brackets++;\n        } else if (brackets[i]\
    \ == '<' && brackets[i + 1] == '>' && brackets[i + 2] == '>' && brackets[i + 3]\
    \ == '>' && brackets[i + 4] == '>' && brackets[i + 5] == '>' && brackets[i + 6]\
    \ == '>' && brackets[i + 7] == '>' && brackets[i + 8] == '>') {\n            close_brackets++;\n\
    \        } else if (brackets[i] == '<' && brackets[i + 1] == '>' && brackets[i\
    \ + 2] == '>' && brackets[i + 3] == '>' && brackets[i + 4] == '>' && brackets[i\
    \ + 5] == '>' && brackets[i + 6] == '>' && brackets[i + 7] == '>' && brackets[i\
    \ + 8] == '>' && brackets[i + 9] == '>') {\n            close_brackets++;\n  \
    \      } else if (brackets[i] == '<' && brackets[i + 1] == '>' && bracket\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp172317_r.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp172317_r.cpp:40:68: error: \u2018bracket\u2019 was not declared in\
    \ this scope; did you mean \u2018brackets\u2019?\n   40 |         } else if (brackets[i]\
    \ == '<' && brackets[i + 1] == '>' && bracket\n      |                       \
    \                                             ^~~~~~~\n      |               \
    \                                                     brackets\n/tmp/tmp172317_r.cpp:40:75:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   40 |         }\
    \ else if (brackets[i] == '<' && brackets[i + 1] == '>' && bracket\n      |  \
    \                 ~                                                       ^\n\
    \      |                                                                     \
    \      )\n   41 | }\n      | ~                                               \
    \                           \n/tmp/tmp172317_r.cpp:41:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   41 | }\n      | ^\n/tmp/tmp172317_r.cpp:42:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   42 | int main() {\n      |            ^\n/tmp/tmp172317_r.cpp:56:1: error:\
    \ expected \u2018}\u2019 at end of input\n   56 | }\n      | ^\n/tmp/tmp172317_r.cpp:13:47:\
    \ note: to match this \u2018{\u2019\n   13 | bool correct_bracketing(std::string\
    \ brackets) {\n      |                                               ^\n/tmp/tmp172317_r.cpp:56:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   56 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660130311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = brackets.size();\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            open_brackets--;\n        } else if (brackets[i] == '>')\
    \ {\n            close_brackets++;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8fz_76ui: /tmp/tmp8fz_76ui.cpp:31: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t brackets_size = brackets.size();\n    bool result =\
    \ true;\n    size_t i = 0;\n    size_t j = 0;\n    while (i < brackets_size) {\n\
    \        if (brackets[i] == '<') {\n            i++;\n            while (i < brackets_size\
    \ && brackets[i] != '<') {\n                i++;\n            }\n            if\
    \ (i >= brackets_size) {\n                result = false;\n                break;\n\
    \            }\n            while (j < brackets_size && brackets[j] != '>') {\n\
    \                j++;\n            }\n            if (j >= brackets_size) {\n\
    \                result = false;\n                break;\n            }\n    \
    \        i++;\n            j++;\n        }\n        else if (brackets[i] == '>')\
    \ {\n            i++;\n            while (i < brackets_size && brackets[i] !=\
    \ '<') {\n                i++;\n            }\n            if (i >= brackets_size)\
    \ {\n                result = false;\n                break;\n            }\n\
    \            while (j < brackets_size && brackets[j] != '>') {\n             \
    \   j++;\n            }\n            if (j >= brackets_size) {\n             \
    \   result = false;\n                break;\n            }\n            i++;\n\
    \            j++;\n        }\n        else if (brackets[i] == '<') {\n       \
    \     i++;\n            while (i < brackets_size && brackets[i] != '<') {\n  \
    \              i++;\n            }\n            if (i >= brackets_size) {\n  \
    \              result = false;\n                break;\n            }\n      \
    \      while (j < brackets_size && brackets[j] != '>') {\n                j++;\n\
    \            }\n            if (j >= brackets_size) {\n                result\
    \ = false;\n                break;\n            }\n            i++;\n        \
    \    j++;\n        }\n        else if (brackets[i] == '>') {\n            i++;\n\
    \            while (i < brackets_size && brackets[i] != '<') {\n             \
    \   i++;\n            }\n            if (i >= brackets_size) {\n             \
    \   result = false;\n                break;\n            }\n            while\
    \ (j < brackets_size && brackets[j] != '>') {\n                j++;\n        \
    \    }\n            if (j >= brackets_size) {\n                result = false;\n\
    \                break;\n            }\n            i++;\n            j++;\n \
    \       }\n        else if (brackets[i] == '<') {\n            i++;\n        \
    \    while (i < brackets_size && brackets[i] != '<') {\n                i++;\n\
    \            }\n            if (i >= brackets_size) {\n                result\
    \ = false;\n                break;\n            }\n            while (j < brackets_size\
    \ && brackets[j] != '>') {\n                j++;\n            }\n            if\
    \ (j >= brackets_size) {\n                result = false;\n                break;\n\
    \            }\n            i++;\n            j++;\n        }\n        else if\
    \ (brackets[i] == '>') {\n            i++;\n            while (i < brackets_size\
    \ && brackets[i] != '<') {\n                i++;\n            }\n            if\
    \ (i >= brackets_size) {\n                result = false;\n                break;\n\
    \            }\n            while (j < brackets_size && brackets[j] != '>') {\n\
    \                j\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf1bptu2v.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpf1bptu2v.cpp:124:18: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n  124 |                 j\n      |                  ^\n      |      \
    \            ;\n  125 | }\n      | ~                 \n/tmp/tmpf1bptu2v.cpp:126:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  126 | int main() {\n      |            ^\n/tmp/tmpf1bptu2v.cpp:140:1: error:\
    \ expected \u2018}\u2019 at end of input\n  140 | }\n      | ^\n/tmp/tmpf1bptu2v.cpp:114:38:\
    \ note: to match this \u2018{\u2019\n  114 |         else if (brackets[i] == '>')\
    \ {\n      |                                      ^\n/tmp/tmpf1bptu2v.cpp:140:1:\
    \ error: expected \u2018}\u2019 at end of input\n  140 | }\n      | ^\n/tmp/tmpf1bptu2v.cpp:18:31:\
    \ note: to match this \u2018{\u2019\n   18 |     while (i < brackets_size) {\n\
    \      |                               ^\n/tmp/tmpf1bptu2v.cpp:140:1: error: expected\
    \ \u2018}\u2019 at end of input\n  140 | }\n      | ^\n/tmp/tmpf1bptu2v.cpp:13:47:\
    \ note: to match this \u2018{\u2019\n   13 | bool correct_bracketing(std::string\
    \ brackets) {\n      |                                               ^\n/tmp/tmpf1bptu2v.cpp:140:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  140 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660130311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t opening_brackets = 0;\n    size_t closing_brackets =\
    \ 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++opening_brackets;\n        } else if (brackets[i] ==\
    \ '>') {\n            ++closing_brackets;\n        } else {\n            return\
    \ false;\n        }\n    }\n    return opening_brackets == closing_brackets;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpm77s5n2b: /tmp/tmpm77s5n2b.cpp:34: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int open_brackets = 0;\n    int close_brackets = 0;\n    for\
    \ (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n\
    \            open_brackets++;\n        } else if (brackets[i] == '>') {\n    \
    \        close_brackets++;\n        }\n    }\n    if (open_brackets != close_brackets)\
    \ {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxxisv412: /tmp/tmpxxisv412.cpp:35: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (size_t i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] != '<') {\n            result = false;\n   \
    \         break;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp51kt2hia: /tmp/tmp51kt2hia.cpp:25: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    size_t brackets_size = brackets.size();\n    for (size_t i = 0; i < brackets_size;\
    \ i++) {\n        char c = brackets[i];\n        if (c == '<') {\n           \
    \ open_brackets++;\n        } else if (c == '>') {\n            close_brackets++;\n\
    \        }\n    }\n    if (open_brackets == close_brackets) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp19sc_6p6: /tmp/tmp19sc_6p6.cpp:37: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = brackets.size();\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++open_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            ++close_brackets;\n        } else {\n            return false;\n\
    \        }\n    }\n    return open_brackets == close_brackets;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdru7wert: /tmp/tmpdru7wert.cpp:29: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n                break;\n            }\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7i__js19: /tmp/tmp7i__js19.cpp:31: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] != '<') {\n            result = false;\n   \
    \         break;\n        }\n    }\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] != '>') {\n            result = false;\n   \
    \         break;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpr2j9cul3: /tmp/tmpr2j9cul3.cpp:31: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool correct = true;\n    for (auto c : brackets) {\n     \
    \   if (c == '<') {\n            correct = correct && false;\n        } else if\
    \ (c == '>') {\n            correct = correct && true;\n        } else {\n   \
    \         correct = correct && false;\n        }\n    }\n    return correct;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmps42ic_td: /tmp/tmps42ic_td.cpp:28: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c != '<' && c != '>') {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp42briyfu: /tmp/tmp42briyfu.cpp:29: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string opening_brackets = brackets;\n    std::string closing_brackets\
    \ = \"\";\n    bool result = false;\n    size_t opening_brackets_size = opening_brackets.size();\n\
    \    size_t closing_brackets_size = closing_brackets.size();\n    for (size_t\
    \ i = 0; i < opening_brackets_size; i++) {\n        if (opening_brackets[i] ==\
    \ '<') {\n            closing_brackets += \"</>\";\n        } else if (opening_brackets[i]\
    \ == '>') {\n            closing_brackets += \"</>\";\n        } else {\n    \
    \        closing_brackets += \"</>\";\n        }\n    }\n    closing_brackets\
    \ += \"<\";\n    closing_brackets_size = closing_brackets.size();\n    for (size_t\
    \ i = 0; i < closing_brackets_size; i++) {\n        if (closing_brackets[i] ==\
    \ '<') {\n            closing_brackets += \"</>\";\n        } else if (closing_brackets[i]\
    \ == '>') {\n            closing_brackets += \"</>\";\n        } else {\n    \
    \        closing_brackets += \"</>\";\n        }\n    }\n    result = opening_brackets\
    \ == closing_brackets;\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5i6sv926: /tmp/tmp5i6sv926.cpp:44: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string opening_brackets = \"<\";\n    std::string closing_brackets\
    \ = \">\";\n    std::string opening_brackets_reversed = \">\";\n    std::string\
    \ closing_brackets_reversed = \"<\";\n    std::string opening_brackets_reversed_reversed\
    \ = \">\";\n    std::string closing_brackets_reversed_reversed = \"<\";\n    std::string\
    \ opening_brackets_reversed_reversed_reversed = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjk2e3umo.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpjk2e3umo.cpp:35:17: error: redeclaration of \u2018std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\u2019\
    \n   35 |     std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpjk2e3umo.cpp:33:17: note: \u2018std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\u2019\
    \ previously declared here\n   33 |     std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpjk2e3umo.cpp:38:1: error: expected initializer before \u2018}\u2019 token\n\
    \   38 | }\n      | ^\n/tmp/tmpjk2e3umo.cpp:38:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660130311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t brackets_size = brackets.size();\n    bool result =\
    \ true;\n    for (size_t i = 0; i < brackets_size; ++i) {\n        if (brackets[i]\
    \ != '<') {\n            result = false;\n            break;\n        }\n    }\n\
    \    for (size_t i = 0; i < brackets_size; ++i) {\n        if (brackets[i] !=\
    \ '>') {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfaskf99y: /tmp/tmpfaskf99y.cpp:32: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzwboieqs: /tmp/tmpzwboieqs.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzwboieqs: /tmp/tmpzwboieqs.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string opening_brackets = brackets;\n    std::string closing_brackets\
    \ = brackets;\n    opening_brackets.erase(opening_brackets.begin(), opening_brackets.begin()\
    \ + 1);\n    closing_brackets.erase(closing_brackets.begin(), closing_brackets.begin()\
    \ + 1);\n    bool result = false;\n    for (size_t i = 0; i < opening_brackets.size();\
    \ i++) {\n        if (opening_brackets[i] == '<') {\n            if (closing_brackets[i]\
    \ == '>') {\n                result = true;\n                break;\n        \
    \    }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpt_vied21: /tmp/tmpt_vied21.cpp:31: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzwboieqs: /tmp/tmpzwboieqs.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n                break;\n            }\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7i__js19: /tmp/tmp7i__js19.cpp:31: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t len = brackets.size();\n    bool ret = true;\n    for\
    \ (size_t i = 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n        \
    \    if (brackets[i + 1] == '>') {\n                ret = false;\n           \
    \     break;\n            }\n        }\n    }\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpr89kray6: /tmp/tmpr89kray6.cpp:28: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string opening_brackets = brackets;\n    std::string closing_brackets\
    \ = brackets;\n    opening_brackets.erase(std::remove(opening_brackets.begin(),\
    \ opening_brackets.end(), '<'), opening_brackets.end());\n    closing_brackets.erase(std::remove(closing_brackets.begin(),\
    \ closing_brackets.end(), '>'), closing_brackets.end());\n    return opening_brackets\
    \ == closing_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmrfoa6fo: /tmp/tmpmrfoa6fo.cpp:22: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int len = brackets.size();\n    for (int i = 0; i < len; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] == '>')\
    \ {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqnrexrwl: /tmp/tmpqnrexrwl.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // Your code here\n    bool correct = true;\n    int opening_brackets\
    \ = 0;\n    int closing_brackets = 0;\n    for(int i = 0; i < brackets.length();\
    \ i++) {\n        if(brackets[i] == '<') {\n            opening_brackets++;\n\
    \        }\n        if(brackets[i] == '>') {\n            closing_brackets++;\n\
    \        }\n    }\n    if(opening_brackets == closing_brackets) {\n        correct\
    \ = false;\n    }\n    return correct;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8fu5c_90: /tmp/tmp8fu5c_90.cpp:33: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            result &= (brackets.find('>', brackets.find(c))\
    \ == std::string::npos);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9k_rkggv: /tmp/tmp9k_rkggv.cpp:24: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t len = brackets.size();\n    bool res = true;\n    for\
    \ (size_t i = 0; i < len; ++i) {\n        if (brackets[i] != '<') {\n        \
    \    res = false;\n            break;\n        }\n    }\n    for (size_t i = 0;\
    \ i < len; ++i) {\n        if (brackets[i] != '>') {\n            res = false;\n\
    \            break;\n        }\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4yva6hts: /tmp/tmp4yva6hts.cpp:32: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int open_brackets = brackets.size();\n    int close_brackets\
    \ = 0;\n    for (int i = 0; i < open_brackets; i++) {\n        if (brackets[i]\
    \ == '<') {\n            close_brackets++;\n        }\n    }\n    if (close_brackets\
    \ != open_brackets) {\n        return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpa__kyfa7: /tmp/tmpa__kyfa7.cpp:28: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string opening_brackets = brackets;\n    std::string closing_brackets;\n\
    \    size_t opening_brackets_size = opening_brackets.size();\n    size_t closing_brackets_size\
    \ = 0;\n    for (size_t i = 0; i < opening_brackets_size; i++) {\n        if (opening_brackets[i]\
    \ == '<') {\n            closing_brackets += opening_brackets[i];\n          \
    \  closing_brackets_size++;\n        }\n    }\n    for (size_t i = 0; i < opening_brackets_size;\
    \ i++) {\n        if (opening_brackets[i] == '>') {\n            closing_brackets\
    \ += opening_brackets[i];\n            closing_brackets_size++;\n        }\n \
    \   }\n    if (closing_brackets_size != opening_brackets_size) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo08evf94: /tmp/tmpo08evf94.cpp:41: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t brackets_size = brackets.size();\n    size_t open_brackets_size\
    \ = 0;\n    size_t close_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i) {\n        if (brackets[i] == '<') {\n            open_brackets_size++;\n\
    \        } else if (brackets[i] == '>') {\n            close_brackets_size++;\n\
    \        }\n    }\n    if (open_brackets_size != close_brackets_size) {\n    \
    \    return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzk66vm5z: /tmp/tmpzk66vm5z.cpp:36: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] ==\
    \ '<') {\n            open_brackets++;\n        } else if (brackets[i] == '>')\
    \ {\n            close_brackets++;\n        }\n    }\n    if (open_brackets !=\
    \ close_brackets) {\n        return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpj8j353u2: /tmp/tmpj8j353u2.cpp:35: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int len = brackets.size();\n    for (int i = 0; i < len; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] == '>')\
    \ {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqnrexrwl: /tmp/tmpqnrexrwl.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t len = brackets.size();\n    bool result = true;\n  \
    \  for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] != '<') result\
    \ = false;\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp02vim3xa: /tmp/tmp02vim3xa.cpp:23: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t brackets_size = brackets.size();\n    bool result =\
    \ true;\n    for (size_t i = 0; i < brackets_size; ++i) {\n        if (brackets[i]\
    \ != brackets[brackets_size - i - 1]) {\n            result = false;\n       \
    \     break;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_w3aiipe: /tmp/tmp_w3aiipe.cpp:26: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] ==\
    \ '<') {\n            open_brackets++;\n        } else if (brackets[i] == '>')\
    \ {\n            close_brackets++;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9pe38mg8: /tmp/tmp9pe38mg8.cpp:32: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = brackets.size();\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++open_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            ++close_brackets;\n        } else {\n            return false;\n\
    \        }\n    }\n    return open_brackets == close_brackets;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdru7wert: /tmp/tmpdru7wert.cpp:29: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130308
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto it = brackets.begin(); it\
    \ != brackets.end(); ++it) {\n        if (*it == '<') {\n            if (brackets.find('>',\
    \ it) != brackets.end()) {\n                result = false;\n                break;\n\
    \            }\n        } else if (*it == '>') {\n            if (brackets.find('<',\
    \ it) != brackets.end()) {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgwo12l76.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpgwo12l76.cpp:17:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::find(char, __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >&)\u2019\n   17 |             if (brackets.find('>',\
    \ it) != brackets.end()) {\n      |                                      ^\nIn\
    \ file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpgwo12l76.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2351:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::find(const _CharT*, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 2351 |       find(const _CharT* __s, size_type __pos, size_type\
    \ __n) const\n      |       ^~~~\n/usr/include/c++/9/bits/basic_string.h:2351:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2365:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::find(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<"
  stdout: ''
  timestamp: 1660130308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (size_t i = 0; i < brackets.size();\
    \ ++i) {\n        if (brackets[i] != '<' && brackets[i] != '>') {\n          \
    \  result = false;\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfdg1oaep: /tmp/tmpfdg1oaep.cpp:29: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool correct = false;\n    for (auto c : brackets) {\n    \
    \    if (c == '<') {\n            correct = true;\n        }\n    }\n    return\
    \ correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpu2yoh3ax: /tmp/tmpu2yoh3ax.cpp:28: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            open_brackets++;\n        } else if (brackets[i] == '>')\
    \ {\n            close_brackets++;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpaw22n_u6: /tmp/tmpaw22n_u6.cpp:32: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzwboieqs: /tmp/tmpzwboieqs.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string opening_brackets = brackets;\n    for (size_t i\
    \ = 0; i < opening_brackets.size(); ++i) {\n        if (opening_brackets[i] ==\
    \ '<') {\n            if (opening_brackets[i + 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbvwqjhgt: /tmp/tmpbvwqjhgt.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t len = brackets.size();\n    bool result = true;\n  \
    \  for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] != \"<\") {\n \
    \           result = false;\n            break;\n        }\n    }\n    for (size_t\
    \ i = 0; i < len; ++i) {\n        if (brackets[i] != \">\") {\n            result\
    \ = false;\n            break;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpih_jbt0a.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpih_jbt0a.cpp:17:28: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   17 |         if (brackets[i] != \"<\") {\n  \
    \    |                            ^~~\n/tmp/tmpih_jbt0a.cpp:23:28: error: ISO\
    \ C++ forbids comparison between pointer and integer [-fpermissive]\n   23 | \
    \        if (brackets[i] != \">\") {\n      |                            ^~~\n"
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int len = brackets.size();\n    for (int i = 0; i < len; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] != '<')\
    \ {\n                return false;\n            }\n        } else if (brackets[i]\
    \ == '>') {\n            if (brackets[i + 1] != '>') {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpf0k39cph: /tmp/tmpf0k39cph.cpp:30: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool correct = true;\n    for (auto c : brackets) {\n     \
    \   if (c == '<') {\n            correct = false;\n            break;\n      \
    \  }\n    }\n    return correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpctrwyo4w: /tmp/tmpctrwyo4w.cpp:25: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c != \">\" && c != \"<\" && c != \"<\" && c != \">\") {\n            result\
    \ = false;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn8hbq5rs.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpn8hbq5rs.cpp:16:18: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   16 |         if (c != \">\" && c != \"<\" &&\
    \ c != \"<\" && c != \">\") {\n      |                  ^~~\n/tmp/tmpn8hbq5rs.cpp:16:30:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   16 |         if (c != \">\" && c != \"<\" && c != \"<\" && c != \">\") {\n\
    \      |                              ^~~\n/tmp/tmpn8hbq5rs.cpp:16:42: error:\
    \ ISO C++ forbids comparison between pointer and integer [-fpermissive]\n   16\
    \ |         if (c != \">\" && c != \"<\" && c != \"<\" && c != \">\") {\n    \
    \  |                                          ^~~\n/tmp/tmpn8hbq5rs.cpp:16:54:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   16 |         if (c != \">\" && c != \"<\" && c != \"<\" && c != \">\") {\n\
    \      |                                                      ^~~\n"
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t brackets_size = brackets.size();\n    if (brackets_size\
    \ < 2)\n        return false;\n    size_t opening_brackets_size = brackets.find_first_not_of(\"\
    <>\");\n    if (opening_brackets_size == std::string::npos)\n        return false;\n\
    \    size_t closing_brackets_size = brackets.find_last_not_of(\"<>\");\n    if\
    \ (closing_brackets_size == std::string::npos)\n        return false;\n    if\
    \ (opening_brackets_size != closing_brackets_size)\n        return false;\n  \
    \  size_t opening_brackets_end = opening_brackets_size;\n    for (size_t i = opening_brackets_size;\
    \ i < brackets_size; ++i) {\n        char c = brackets[i];\n        if (c == '>')\n\
    \            opening_brackets_end = i;\n    }\n    size_t closing_brackets_start\
    \ = closing_brackets_size;\n    for (size_t i = closing_brackets_size; i < brackets_size;\
    \ ++i) {\n        char c = brackets[i];\n        if (c == '<')\n            closing_brackets_start\
    \ = i;\n    }\n    if (opening_brackets_end != closing_brackets_start)\n     \
    \   return false;\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpm_sj9u6j: /tmp/tmpm_sj9u6j.cpp:43: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets.find('>', brackets.find(c) + 1) !=\
    \ std::string::npos) {\n                result = false;\n            }\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmphi1is3er: /tmp/tmphi1is3er.cpp:26: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int len = brackets.size();\n    for (int i = 0; i < len; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] == '>')\n\
    \                return true;\n        }\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7m99_1jo: /tmp/tmp7m99_1jo.cpp:29: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = brackets.size();\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++open_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            ++close_brackets;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8azp7u6g: /tmp/tmp8azp7u6g.cpp:27: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t brackets_size = brackets.size();\n    size_t opening_brackets_size\
    \ = 0;\n    for (size_t i = 0; i < brackets_size; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            opening_brackets_size++;\n        }\n    }\n    if (opening_brackets_size\
    \ == 0) {\n        return false;\n    }\n    size_t closing_brackets_size = 0;\n\
    \    for (size_t i = brackets_size - 1; i >= 0; --i) {\n        if (brackets[i]\
    \ == '>') {\n            closing_brackets_size++;\n        }\n    }\n    if (closing_brackets_size\
    \ == 0) {\n        return false;\n    }\n    if (opening_brackets_size != closing_brackets_size)\
    \ {\n        return false;\n    }\n    for (size_t i = 0; i < brackets_size; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] != '>')\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (size_t i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] != '<') {\n            result = false;\n   \
    \         break;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp51kt2hia: /tmp/tmp51kt2hia.cpp:25: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n                break;\n            }\n    \
    \    } else if (c == '>') {\n            if (brackets[brackets.size() - 2] !=\
    \ '<') {\n                result = false;\n                break;\n          \
    \  }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpuulqpla0: /tmp/tmpuulqpla0.cpp:33: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t len = brackets.size();\n    bool ret = true;\n    for\
    \ (size_t i = 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n        \
    \    if (brackets[i + 1] == '>') {\n                ret = false;\n           \
    \     break;\n            }\n        }\n    }\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpr89kray6: /tmp/tmpr89kray6.cpp:28: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (size_t i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] != '<') {\n            result = false;\n   \
    \         break;\n        }\n    }\n    for (size_t i = brackets.length(); result\
    \ && i < brackets.length(); i++) {\n        if (brackets[i] != '>') {\n      \
    \      result = false;\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmphhmr_l7a: /tmp/tmphhmr_l7a.cpp:31: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int len = brackets.size();\n    for (int i = 0; i < len; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] == '>')\
    \ {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqnrexrwl: /tmp/tmpqnrexrwl.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c != \">\" && c != \"<\" && c != \"<\" && c != \">\") {\n            result\
    \ = false;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn8hbq5rs.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpn8hbq5rs.cpp:16:18: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   16 |         if (c != \">\" && c != \"<\" &&\
    \ c != \"<\" && c != \">\") {\n      |                  ^~~\n/tmp/tmpn8hbq5rs.cpp:16:30:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   16 |         if (c != \">\" && c != \"<\" && c != \"<\" && c != \">\") {\n\
    \      |                              ^~~\n/tmp/tmpn8hbq5rs.cpp:16:42: error:\
    \ ISO C++ forbids comparison between pointer and integer [-fpermissive]\n   16\
    \ |         if (c != \">\" && c != \"<\" && c != \"<\" && c != \">\") {\n    \
    \  |                                          ^~~\n/tmp/tmpn8hbq5rs.cpp:16:54:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   16 |         if (c != \">\" && c != \"<\" && c != \"<\" && c != \">\") {\n\
    \      |                                                      ^~~\n"
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = brackets.size();\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            open_brackets--;\n        }\n        if (brackets[i]\
    \ == '>') {\n            close_brackets++;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvcyk_c9i: /tmp/tmpvcyk_c9i.cpp:32: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool correct = true;\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] != '<') {\n            correct = false;\n  \
    \          break;\n        }\n    }\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] != '>') {\n            correct = false;\n  \
    \          break;\n        }\n    }\n    return correct;\n}\nint main() {\n  \
    \  auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpiuedfsqr: /tmp/tmpiuedfsqr.cpp:31: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            open_brackets++;\n        } else if (brackets[i] == '>')\
    \ {\n            close_brackets++;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpaw22n_u6: /tmp/tmpaw22n_u6.cpp:32: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int open_brackets = brackets.size() - 1;\n    int close_brackets\
    \ = 0;\n    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            open_brackets--;\n        } else if (brackets[i] == '>')\
    \ {\n            close_brackets++;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8hgov2n5: /tmp/tmp8hgov2n5.cpp:27: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130313
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string opening_brackets = \"<\";\n    std::string closing_brackets\
    \ = \">\";\n    std::string opening_brackets_reversed = \">\";\n    std::string\
    \ closing_brackets_reversed = \"<\";\n    std::string opening_brackets_reversed_reversed\
    \ = \">\";\n    std::string closing_brackets_reversed_reversed = \"<\";\n    std::string\
    \ opening_brackets_reversed_reversed_reversed = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjk2e3umo.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpjk2e3umo.cpp:35:17: error: redeclaration of \u2018std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\u2019\
    \n   35 |     std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpjk2e3umo.cpp:33:17: note: \u2018std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\u2019\
    \ previously declared here\n   33 |     std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpjk2e3umo.cpp:38:1: error: expected initializer before \u2018}\u2019 token\n\
    \   38 | }\n      | ^\n/tmp/tmpjk2e3umo.cpp:38:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660130311
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = brackets.size();\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++open_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            ++close_brackets;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8azp7u6g: /tmp/tmp8azp7u6g.cpp:27: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string opening_brackets = brackets;\n    std::string closing_brackets\
    \ = brackets;\n    std::string opening_brackets_copy = opening_brackets;\n   \
    \ std::string closing_brackets_copy = closing_brackets;\n    bool result = true;\n\
    \    for (size_t i = 0; i < opening_brackets.size(); i++) {\n        if (opening_brackets_copy[i]\
    \ == '<') {\n            opening_brackets_copy.erase(opening_brackets_copy.begin()\
    \ + i);\n            closing_brackets_copy.erase(closing_brackets_copy.begin()\
    \ + i);\n        }\n    }\n    for (size_t i = 0; i < closing_brackets.size();\
    \ i++) {\n        if (closing_brackets_copy[i] == '>') {\n            opening_brackets_copy.erase(opening_brackets_copy.begin()\
    \ + i);\n            closing_brackets_copy.erase(closing_brackets_copy.begin()\
    \ + i);\n        }\n    }\n    if (opening_brackets_copy == closing_brackets_copy)\
    \ {\n        result = false;\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmqo_z5yl: /tmp/tmpmqo_z5yl.cpp:38: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130313
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            result &= (brackets[brackets.size() - 1] == '>');\n\
    \        } else {\n            result &= (brackets[brackets.size() - 1] == '<');\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7fzfchhc: /tmp/tmp7fzfchhc.cpp:26: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130313
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c != '<' && c != '>') {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp42briyfu: /tmp/tmp42briyfu.cpp:29: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] ==\
    \ '<') {\n            open_brackets++;\n        } else if (brackets[i] == '>')\
    \ {\n            close_brackets++;\n        }\n    }\n    if (open_brackets !=\
    \ close_brackets) {\n        return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpj8j353u2: /tmp/tmpj8j353u2.cpp:35: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int len = brackets.size();\n    for (int i = 0; i < len; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] == '>')\
    \ {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqnrexrwl: /tmp/tmpqnrexrwl.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // Your code here\n    bool flag = false;\n    for(int i =\
    \ 0; i < brackets.size() - 1; i++) {\n        if(brackets[i] == '<' && brackets[i\
    \ + 1] == '>') {\n            flag = true;\n        }\n    }\n    return flag;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcgwkjjv9: /tmp/tmpcgwkjjv9.cpp:29: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130313
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzwboieqs: /tmp/tmpzwboieqs.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string brackets_copy = brackets;\n    size_t open_brackets\
    \ = 0;\n    size_t close_brackets = 0;\n    size_t open_brackets_size = brackets_copy.size();\n\
    \    size_t close_brackets_size = brackets_copy.size();\n    bool found = false;\n\
    \    while (!found && open_brackets < open_brackets_size) {\n        if (brackets_copy[open_brackets]\
    \ == '<') {\n            open_brackets++;\n        } else if (brackets_copy[open_brackets]\
    \ == '>') {\n            close_brackets++;\n        } else {\n            found\
    \ = true;\n        }\n    }\n    if (open_brackets == close_brackets) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660130317
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n                break;\n            }\n    \
    \    } else if (c == '>') {\n            if (brackets[brackets.size() - 1] !=\
    \ '<') {\n                result = false;\n                break;\n          \
    \  }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpg5qb798k: /tmp/tmpg5qb798k.cpp:32: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string opening_brackets = brackets;\n    std::string closing_brackets\
    \ = brackets;\n    opening_brackets.erase(std::remove(opening_brackets.begin(),\
    \ opening_brackets.end(), '<'), opening_brackets.end());\n    closing_brackets.erase(std::remove(closing_brackets.begin(),\
    \ closing_brackets.end(), '>'), closing_brackets.end());\n    return opening_brackets\
    \ == closing_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmrfoa6fo: /tmp/tmpmrfoa6fo.cpp:22: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string opening_brackets, closing_brackets;\n    opening_brackets\
    \ = brackets.substr(0, brackets.size() - 1);\n    closing_brackets = brackets.substr(brackets.size()\
    \ - 1, brackets.size());\n    for (int i = 0; i < opening_brackets.size(); i++)\
    \ {\n        if (opening_brackets[i] == '<' && closing_brackets[i] == '>') {\n\
    \            return true;\n        }\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpr3q8rl89: /tmp/tmpr3q8rl89.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130313
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            ++open_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            ++close_brackets;\n        } else {\n            return false;\n\
    \        }\n    }\n    return open_brackets == close_brackets;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyuje67hy: /tmp/tmpyuje67hy.cpp:34: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130313
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t len = brackets.size();\n    bool ret = true;\n    for\
    \ (size_t i = 0; i < len; ++i) {\n        if (brackets[i] != '<') {\n        \
    \    ret = false;\n            break;\n        }\n    }\n    return ret;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3_duu8fp: /tmp/tmp3_duu8fp.cpp:26: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130313
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int opening_brackets = 0;\n    int closing_brackets = 0;\n\
    \    for(int i = 0; i < brackets.size(); i++) {\n        if(brackets[i] == '<')\
    \ {\n            opening_brackets++;\n        }\n        if(brackets[i] == '>')\
    \ {\n            closing_brackets++;\n        }\n    }\n    return opening_brackets\
    \ == closing_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcr_avjth: /tmp/tmpcr_avjth.cpp:33: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int opening_brackets = 0;\n    int closing_brackets = 0;\n\
    \    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] ==\
    \ '<') {\n            opening_brackets++;\n        } else if (brackets[i] == '>')\
    \ {\n            closing_brackets++;\n        }\n    }\n    return opening_brackets\
    \ == closing_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmppfj359zk: /tmp/tmppfj359zk.cpp:32: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t len = brackets.size();\n    bool result = true;\n  \
    \  for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] != brackets[len\
    \ - i - 1]) {\n            result = false;\n            break;\n        }\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp468ftk_d: /tmp/tmp468ftk_d.cpp:26: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = brackets.size();\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++close_brackets;\n        } else if (brackets[i] ==\
    \ '>') {\n            --close_brackets;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzarew7kr: /tmp/tmpzarew7kr.cpp:27: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            result &= (brackets.find('>') != brackets.npos);\n\
    \        } else {\n            result &= (brackets.find('<') != brackets.npos);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpc3xoh1xo: /tmp/tmpc3xoh1xo.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t brackets_size = brackets.size();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i) {\n        if (brackets[i] == '<') {\n            ++opening_brackets_size;\n\
    \        } else if (brackets[i] == '>') {\n            ++closing_brackets_size;\n\
    \        }\n    }\n    if (opening_brackets_size != closing_brackets_size) {\n\
    \        return false;\n    }\n    for (size_t i = 0; i < brackets_size; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            if (opening_brackets_size\
    \ != closing_brackets_size) {\n                return false;\n            }\n\
    \        } else if (brackets[i] == '>') {\n            if (opening_brackets_size\
    \ != closing_brackets_size) {\n                return false;\n            }\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpd8mtjiel: /tmp/tmpd8mtjiel.cpp:47: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // initialize a stack to store opening brackets.\n    std::stack<char>\
    \ open_brackets;\n    // initialize a stack to store closing brackets.\n    std::stack<char>\
    \ close_brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n    std::stack<char>\
    \ brackets;\n    // initialize a stack to store brackets.\n}\nint main() {\n \
    \   auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7zge0v1x.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp7zge0v1x.cpp:19:22: error: declaration of \u2018std::stack<char> brackets\u2019\
    \ shadows a parameter\n   19 |     std::stack<char> brackets;\n      |       \
    \               ^~~~~~~~\n/tmp/tmp7zge0v1x.cpp:21:22: error: redeclaration of\
    \ \u2018std::stack<char> brackets\u2019\n   21 |     std::stack<char> brackets;\n\
    \      |                      ^~~~~~~~\n/tmp/tmp7zge0v1x.cpp:19:22: note: \u2018\
    std::stack<char> brackets\u2019 previously declared here\n   19 |     std::stack<char>\
    \ brackets;\n      |                      ^~~~~~~~\n/tmp/tmp7zge0v1x.cpp:23:22:\
    \ error: redeclaration of \u2018std::stack<char> brackets\u2019\n   23 |     std::stack<char>\
    \ brackets;\n      |                      ^~~~~~~~\n/tmp/tmp7zge0v1x.cpp:19:22:\
    \ note: \u2018std::stack<char> brackets\u2019 previously declared here\n   19\
    \ |     std::stack<char> brackets;\n      |                      ^~~~~~~~\n/tmp/tmp7zge0v1x.cpp:25:22:\
    \ error: redeclaration of \u2018std::stack<char> brackets\u2019\n   25 |     std::stack<char>\
    \ brackets;\n      |                      ^~~~~~~~\n/tmp/tmp7zge0v1x.cpp:19:22:\
    \ note: \u2018std::stack<char> brackets\u2019 previously declared here\n   19\
    \ |     std::stack<char> brackets;\n      |                      ^~~~~~~~\n/tmp/tmp7zge0v1x.cpp:27:22:\
    \ error: redeclaration of \u2018std::stack<char> brackets\u2019\n   27 |     std::stack<char>\
    \ brackets;\n      |                      ^~~~~~~~\n/tmp/tmp7zge0v1x.cpp:19:22:\
    \ note: \u2018std::stack<char> brackets\u2019 previously declared here\n   19\
    \ |     std::stack<char> brackets;\n      |                      ^~~~~~~~\n/tmp/tmp7zge0v1x.cpp:29:22:\
    \ error: redeclaration of \u2018std::stack<char> brackets\u2019\n   29 |     std::stack<char>\
    \ brackets;\n      |                      ^~~~~~~~\n/tmp/tmp7zge0v1x.cpp:19:22:\
    \ note: \u2018std::stack<char> brackets\u2019 previously declared here\n   19\
    \ |     std::stack<char> brackets;\n      |                      ^~~~~~~~\n/tmp/tmp7zge0v1x.cpp:31:22:\
    \ error: redeclaration of \u2018std::stack<char> brackets\u2019\n   31 |     std::stack<char>\
    \ brackets;\n      |                "
  stdout: ''
  timestamp: 1660130314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            ++open_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            ++close_brackets;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmphjj432lh: /tmp/tmphjj432lh.cpp:32: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t len = brackets.size();\n    bool result = true;\n  \
    \  for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] != '<') {\n   \
    \         result = false;\n            break;\n        }\n    }\n    for (size_t\
    \ i = 0; i < len; ++i) {\n        if (brackets[i] != '>') {\n            result\
    \ = false;\n            break;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbsf5x0q8: /tmp/tmpbsf5x0q8.cpp:32: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int len = brackets.size();\n    for (int i = 0; i < len; i++)\
    \ {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] == '>')\
    \ {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpq_f3m6a1: /tmp/tmpq_f3m6a1.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c != '<' && c != '>') {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp42briyfu: /tmp/tmp42briyfu.cpp:29: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t brackets_size = brackets.size();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i) {\n        if (brackets[i] == '<') {\n            opening_brackets_size++;\n\
    \        } else if (brackets[i] == '>') {\n            closing_brackets_size++;\n\
    \        }\n    }\n    if (opening_brackets_size == closing_brackets_size) {\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvxokq6et: /tmp/tmpvxokq6et.cpp:36: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t brackets_size = brackets.size();\n    if (brackets_size\
    \ < 2)\n        return false;\n    size_t opening_brackets_size = brackets.find_first_of(\"\
    <\");\n    size_t closing_brackets_size = brackets.find_first_of(\">\");\n   \
    \ if (opening_brackets_size == std::string::npos || closing_brackets_size == std::string::npos)\n\
    \        return false;\n    size_t opening_brackets_pos = opening_brackets_size;\n\
    \    size_t closing_brackets_pos = closing_brackets_size;\n    size_t opening_brackets_count\
    \ = opening_brackets_size;\n    size_t closing_brackets_count = closing_brackets_size;\n\
    \    while (opening_brackets_pos != std::string::npos) {\n        opening_brackets_count--;\n\
    \        opening_brackets_pos = brackets.find_first_of(\"<\", opening_brackets_pos\
    \ + 1);\n    }\n    while (closing_brackets_pos != std::string::npos) {\n    \
    \    closing_brackets_count--;\n        closing_brackets_pos = brackets.find_first_of(\"\
    >\", closing_brackets_pos + 1);\n    }\n    if (opening_brackets_count != closing_brackets_count)\n\
    \        return false;\n    size_t opening_brackets_pos = 0;\n    size_t closing_brackets_pos\
    \ = 0;\n    size_t opening_brackets_count = 0;\n    size_t closing_brackets_count\
    \ = 0;\n    while (opening_brackets_pos != std::string::npos && closing_brackets_pos\
    \ != std::string::npos) {\n        opening_brackets_count++;\n        closing_brackets_count++;\n\
    \        opening_brackets_pos = brackets.find_first_of(\"<\", opening_brackets_pos\
    \ + 1);\n        closing_brackets_pos = brackets.find_first_of(\">\", closing_brackets_pos\
    \ + 1);\n    }\n    if (opening_brackets_count != closing_brackets_count)\n  \
    \      return false;\n    size_t opening_brackets_pos = 0;\n    size_t closing_brackets_pos\
    \ = 0;\n    size_t opening_brackets_count = 0;\n    size_t closing_brackets_count\
    \ = 0;\n    while (opening_brackets_pos != std::string::npos && closing_brackets_pos\
    \ != std::string::npos) {\n        opening_brackets_count++;\n        closing_brackets_count++;\n\
    \        opening_brackets_pos = brackets.find_first_of(\"<\", opening_brackets_pos\
    \ + 1);\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxkkkdlih.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpxkkkdlih.cpp:35:12: error: redeclaration of \u2018size_t opening_brackets_pos\u2019\
    \n   35 |     size_t opening_brackets_pos = 0;\n      |            ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpxkkkdlih.cpp:21:12: note: \u2018size_t opening_brackets_pos\u2019 previously\
    \ declared here\n   21 |     size_t opening_brackets_pos = opening_brackets_size;\n\
    \      |            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxkkkdlih.cpp:36:12: error: redeclaration\
    \ of \u2018size_t closing_brackets_pos\u2019\n   36 |     size_t closing_brackets_pos\
    \ = 0;\n      |            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxkkkdlih.cpp:22:12: note:\
    \ \u2018size_t closing_brackets_pos\u2019 previously declared here\n   22 |  \
    \   size_t closing_brackets_pos = closing_brackets_size;\n      |            ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpxkkkdlih.cpp:37:12: error: redeclaration of \u2018size_t opening_brackets_count\u2019\
    \n   37 |     size_t opening_brackets_count = 0;\n      |            ^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpxkkkdlih.cpp:23:12: note: \u2018size_t opening_brackets_count\u2019 previously\
    \ declared here\n   23 |     size_t opening_brackets_count = opening_brackets_size;\n\
    \      |            ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxkkkdlih.cpp:38:12: error:\
    \ redeclaration of \u2018size_t closing_brackets_count\u2019\n   38 |     size_t\
    \ closing_brackets_count = 0;\n      |            ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxkkkdlih.cpp:24:12:\
    \ note: \u2018size_t closing_brackets_count\u2019 previously declared here\n \
    \  24 |     size_t closing_brackets_count = closing_brackets_size;\n      |  \
    \          ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxkkkdlih.cpp:47:12: error: redeclaration\
    \ of \u2018size_t opening_brackets_pos\u2019\n   47 |     size_t opening_brackets_pos\
    \ = 0;\n      |            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxkkkdlih.cpp:21:12: note:\
    \ \u2018size_t opening_brackets_pos\u2019 previously declared here\n   21 |  \
    \   size_t opening_brackets_pos = opening_brackets_size;\n      |            ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpxkkkdlih.cpp:48:12: error: redeclaration of \u2018size_t closing_brackets_pos\u2019\
    \n   48 |     siz"
  stdout: ''
  timestamp: 1660130314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = brackets.size();\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++close_brackets;\n        } else if (brackets[i] ==\
    \ '>') {\n            --close_brackets;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzarew7kr: /tmp/tmpzarew7kr.cpp:27: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c != \">\" && c != \"<\" && c != \"<\" && c != \">\") {\n            result\
    \ = false;\n            break;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_apv_wt5.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp_apv_wt5.cpp:16:18: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   16 |         if (c != \">\" && c != \"<\" &&\
    \ c != \"<\" && c != \">\") {\n      |                  ^~~\n/tmp/tmp_apv_wt5.cpp:16:30:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   16 |         if (c != \">\" && c != \"<\" && c != \"<\" && c != \">\") {\n\
    \      |                              ^~~\n/tmp/tmp_apv_wt5.cpp:16:42: error:\
    \ ISO C++ forbids comparison between pointer and integer [-fpermissive]\n   16\
    \ |         if (c != \">\" && c != \"<\" && c != \"<\" && c != \">\") {\n    \
    \  |                                          ^~~\n/tmp/tmp_apv_wt5.cpp:16:54:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   16 |         if (c != \">\" && c != \"<\" && c != \"<\" && c != \">\") {\n\
    \      |                                                      ^~~\n"
  stdout: ''
  timestamp: 1660130314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int open_brackets = 0;\n    int close_brackets = 0;\n    for\
    \ (int i = 0; i < brackets.length(); ++i) {\n        if (brackets[i] == '<') {\n\
    \            ++open_brackets;\n        } else if (brackets[i] == '>') {\n    \
    \        ++close_brackets;\n        }\n    }\n    return open_brackets == close_brackets;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpynmcik45: /tmp/tmpynmcik45.cpp:32: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130314
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto it = brackets.begin(); it\
    \ != brackets.end(); ++it) {\n        if (*it == '<') {\n            if (brackets.find('>',\
    \ it) != brackets.end()) {\n                result = false;\n                break;\n\
    \            }\n        } else if (*it == '>') {\n            if (brackets.find('<',\
    \ it) != brackets.end()) {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgwo12l76.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpgwo12l76.cpp:17:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::find(char, __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >&)\u2019\n   17 |             if (brackets.find('>',\
    \ it) != brackets.end()) {\n      |                                      ^\nIn\
    \ file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpgwo12l76.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2351:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::find(const _CharT*, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 2351 |       find(const _CharT* __s, size_type __pos, size_type\
    \ __n) const\n      |       ^~~~\n/usr/include/c++/9/bits/basic_string.h:2351:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2365:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::find(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<"
  stdout: ''
  timestamp: 1660130308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t bracket_count = 0;\n    for (size_t i = 0; i < brackets.size();\
    \ ++i) {\n        if (brackets[i] == '<') {\n            ++bracket_count;\n  \
    \      } else if (brackets[i] == '>') {\n            --bracket_count;\n      \
    \  }\n    }\n    return bracket_count == 0;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpupz8e2zc: /tmp/tmpupz8e2zc.cpp:31: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int len = brackets.size();\n    for (int i = 0; i < len; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] == '>')\
    \ {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqnrexrwl: /tmp/tmpqnrexrwl.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c != '<' && c != '>') {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp42briyfu: /tmp/tmp42briyfu.cpp:29: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = brackets.size();\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++open_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            ++close_brackets;\n        } else {\n            return false;\n\
    \        }\n    }\n    return open_brackets == close_brackets;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdru7wert: /tmp/tmpdru7wert.cpp:29: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] != '<') {\n            result = false;\n   \
    \         break;\n        }\n    }\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] != '>') {\n            result = false;\n   \
    \         break;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpr2j9cul3: /tmp/tmpr2j9cul3.cpp:31: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t brackets_size = brackets.size();\n    bool result =\
    \ true;\n    for (size_t i = 0; i < brackets_size; ++i) {\n        if (brackets[i]\
    \ != '<') result = false;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmput46ksef: /tmp/tmput46ksef.cpp:23: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzwboieqs: /tmp/tmpzwboieqs.cpp:30: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t len = brackets.size();\n    bool ret = true;\n    for\
    \ (size_t i = 0; i < len; ++i) {\n        if (brackets[i] != '<') {\n        \
    \    ret = false;\n            break;\n        }\n    }\n    return ret;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3_duu8fp: /tmp/tmp3_duu8fp.cpp:26: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130313
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t len = brackets.size();\n    bool result = true;\n  \
    \  for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] != '<') result\
    \ = false;\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp02vim3xa: /tmp/tmp02vim3xa.cpp:23: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    size_t open_brackets_size = brackets.size();\n    size_t close_brackets_size\
    \ = open_brackets_size;\n    for (size_t i = 0; i < open_brackets_size; i++) {\n\
    \        if (brackets[i] == '<') {\n            open_brackets++;\n        }\n\
    \        if (brackets[i] == '>') {\n            close_brackets++;\n        }\n\
    \    }\n    if (open_brackets == close_brackets) {\n        return true;\n   \
    \ }\n    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmppb4xve4h: /tmp/tmppb4xve4h.cpp:38: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t len = brackets.size();\n    bool ans = false;\n    for\
    \ (size_t i = 0; i < len; ++i) {\n        char c = brackets[i];\n        if (c\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                ans =\
    \ true;\n            }\n        }\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9i5rp4wy: /tmp/tmp9i5rp4wy.cpp:32: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // Your code here\n    bool correct = true;\n    for(int i\
    \ = 0; i < brackets.size(); i++) {\n        if(brackets[i] == '<') {\n       \
    \     if(brackets[i+1] == '>') {\n                correct = false;\n         \
    \   }\n        }\n    }\n    return correct;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_1hcp__e: /tmp/tmp_1hcp__e.cpp:27: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = brackets.size();\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++open_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            ++close_brackets;\n        } else {\n            return false;\n\
    \        }\n    }\n    return open_brackets == close_brackets;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdru7wert: /tmp/tmpdru7wert.cpp:29: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130308
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t opening_brackets = 0;\n    size_t closing_brackets =\
    \ 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++opening_brackets;\n        } else if (brackets[i] ==\
    \ '>') {\n            ++closing_brackets;\n        } else {\n            return\
    \ false;\n        }\n    }\n    return opening_brackets == closing_brackets;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpm77s5n2b: /tmp/tmpm77s5n2b.cpp:34: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string opening_brackets = brackets;\n    std::string closing_brackets;\n\
    \    for (size_t i = 0; i < opening_brackets.size(); i++) {\n        if (opening_brackets[i]\
    \ == '<') {\n            closing_brackets += '<';\n        } else if (opening_brackets[i]\
    \ == '>') {\n            closing_brackets += '>';\n        } else {\n        \
    \    return false;\n        }\n    }\n    return closing_brackets == brackets;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqpb4idvc: /tmp/tmpqpb4idvc.cpp:33: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string opening_brackets = brackets;\n    std::string closing_brackets\
    \ = brackets;\n    opening_brackets.erase(opening_brackets.begin(), std::find(opening_brackets.begin(),\
    \ opening_brackets.end(), '<'));\n    closing_brackets.erase(closing_brackets.begin(),\
    \ std::find(closing_brackets.begin(), closing_brackets.end(), '>'));\n    return\
    \ opening_brackets == closing_brackets;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgcdwfobx: /tmp/tmpgcdwfobx.cpp:22: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets.find('>', c) == std::string::npos)\
    \ {\n                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpstrqlxzx: /tmp/tmpstrqlxzx.cpp:26: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t brackets_size = brackets.size();\n    bool result =\
    \ true;\n    for (size_t i = 0; i < brackets_size; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i - 1] == '>') {\n                result\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpm8ckyvkd: /tmp/tmpm8ckyvkd.cpp:29: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string opening_brackets = \"<\";\n    std::string closing_brackets\
    \ = \">\";\n    std::string opening_brackets_reversed = \">\";\n    std::string\
    \ closing_brackets_reversed = \"<\";\n    std::string opening_brackets_reversed_2\
    \ = \">\";\n    std::string closing_brackets_reversed_2 = \"<\";\n    std::string\
    \ opening_brackets_reversed_3 = \"<\";\n    std::string closing_brackets_reversed_3\
    \ = \">\";\n    std::string opening_brackets_reversed_4 = \"<\";\n    std::string\
    \ closing_brackets_reversed_4 = \">\";\n    std::string opening_brackets_reversed_5\
    \ = \"<\";\n    std::string closing_brackets_reversed_5 = \">\";\n    std::string\
    \ opening_brackets_reversed_6 = \"<\";\n    std::string closing_brackets_reversed_6\
    \ = \">\";\n    std::string opening_brackets_reversed_7 = \"<\";\n    std::string\
    \ closing_brackets_reversed_7 = \">\";\n    std::string opening_brackets_reversed_8\
    \ = \"<\";\n    std::string closing_brackets_reversed_8 = \">\";\n    std::string\
    \ opening_brackets_reversed_9 = \"<\";\n    std::string closing_brackets_reversed_9\
    \ = \">\";\n    std::string opening_brackets_reversed_10 = \"<\";\n    std::string\
    \ closing_brackets_reversed_10 = \">\";\n    std::string opening_brackets_reversed_11\
    \ = \"<\";\n    std::string closing_brackets_reversed_11 = \">\";\n    std::string\
    \ opening_brackets_reversed_12 = \"<\";\n    std::string closing_brackets_reversed_12\
    \ = \">\";\n    std::string opening_brackets_reversed_13 = \"<\";\n    std::string\
    \ closing_brackets_reversed_13 = \">\";\n    std::string opening_brackets_reversed_14\
    \ = \"<\";\n    std::string closing_brackets_reversed_14 = \">\";\n    std::string\
    \ opening_brackets_reversed_15 = \"<\";\n    std::string closing_brackets_reversed_15\
    \ = \">\";\n    std::string opening_brackets_reversed_16 = \"<\";\n    std::string\
    \ closing_brackets_reversed_16 = \">\";\n    std::string opening_brackets_reversed_17\
    \ = \"<\";\n    std::string closing_brackets_reversed_17 = \">\";\n    std::string\
    \ opening_brackets_reversed_18 = \"\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0taiqxgp.cpp:50:48: warning: missing terminating \" character\n\
    \   50 |     std::string opening_brackets_reversed_18 = \"\n      |          \
    \                                      ^\n/tmp/tmp0taiqxgp.cpp:50:48: error: missing\
    \ terminating \" character\n/tmp/tmp0taiqxgp.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp0taiqxgp.cpp:51:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   51 | }\n      | ^\n/tmp/tmp0taiqxgp.cpp:51:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmp0taiqxgp.cpp:51:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] ==\
    \ '>') {\n                result = true;\n            } else {\n             \
    \   result = false;\n            }\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7wkwusn9: /tmp/tmp7wkwusn9.cpp:32: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c != '<' && c != '>') {\n            result = false;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfvwwl2sv: /tmp/tmpfvwwl2sv.cpp:28: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t len = brackets.size();\n    bool result = true;\n  \
    \  for (size_t i = 0; i < len; ++i) {\n        char c = brackets[i];\n       \
    \ if (c == '<') {\n            if (i < len - 1 && brackets[i + 1] == '>') {\n\
    \                result = true;\n            } else {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_l_1vdf3: /tmp/tmp_l_1vdf3.cpp:34: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    size_t brackets_size = brackets.size();\n\
    \    for (size_t i = 0; i < brackets_size; ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            if (brackets[i + 1] == '>') {\n                result =\
    \ true;\n            } else {\n                result = false;\n            }\n\
    \        } else {\n            result = false;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvu5b83h0: /tmp/tmpvu5b83h0.cpp:31: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t brackets_size = brackets.size();\n    size_t open_brackets_size\
    \ = 0;\n    size_t close_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ i++) {\n        char c = brackets[i];\n        if (c == '<') {\n           \
    \ open_brackets_size++;\n        } else if (c == '>') {\n            close_brackets_size++;\n\
    \        }\n    }\n    if (open_brackets_size != close_brackets_size) {\n    \
    \    return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpd272fswx: /tmp/tmpd272fswx.cpp:37: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n\
    \                result = false;\n                break;\n            }\n    \
    \    } else if (c == '>') {\n            if (brackets[brackets.size() - 2] !=\
    \ '<') {\n                result = false;\n                break;\n          \
    \  }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpuulqpla0: /tmp/tmpuulqpla0.cpp:33: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int len = brackets.size();\n    for (int i = 0; i < len; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            if (brackets[i - 1] == '>')\
    \ {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp1d0wype2: /tmp/tmp1d0wype2.cpp:26: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    size_t len = brackets.size();\n  \
    \  for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n   \
    \         if (brackets[i + 1] != '<') {\n                result = false;\n   \
    \             break;\n            }\n        } else if (brackets[i] == '>') {\n\
    \            if (brackets[i + 1] != '>') {\n                result = false;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpk6cqz3_k: /tmp/tmpk6cqz3_k.cpp:33: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int open_brackets = 0;\n    int close_brackets = 0;\n    std::string\
    \ bracket;\n    std::string brackets;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        bracket = brackets.substr(i, 1);\n        if (bracket == \"\
    <\") {\n            open_brackets++;\n        } else if (bracket == \">\") {\n\
    \            close_brackets++;\n        } else {\n            std::cout << \"\
    wrong bracketing \" << bracket << std::endl;\n            return false;\n    \
    \    }\n    }\n    if (open_brackets != close_brackets) {\n        std::cout <<\
    \ \"wrong bracketing \" << std::endl;\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw3i_c7sq.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpw3i_c7sq.cpp:17:17: error: declaration of \u2018std::string brackets\u2019\
    \ shadows a parameter\n   17 |     std::string brackets;\n      |            \
    \     ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int open_brackets = 0;\n    int close_brackets = 0;\n    for\
    \ (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n\
    \            open_brackets++;\n        } else if (brackets[i] == '>') {\n    \
    \        close_brackets++;\n        }\n    }\n    if (open_brackets == close_brackets)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcsqqh6n8: /tmp/tmpcsqqh6n8.cpp:36: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t len = brackets.size();\n    bool result = true;\n  \
    \  for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] != '>') {\n   \
    \         result = false;\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpn_tfg3_d: /tmp/tmpn_tfg3_d.cpp:26: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t brackets_size = brackets.size();\n    size_t opening_brackets_size\
    \ = 0;\n    size_t closing_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i) {\n        if (brackets[i] == '<') {\n            opening_brackets_size++;\n\
    \        } else if (brackets[i] == '>') {\n            closing_brackets_size++;\n\
    \        }\n    }\n    if (opening_brackets_size == closing_brackets_size) {\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvxokq6et: /tmp/tmpvxokq6et.cpp:36: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = brackets.size();\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++close_brackets;\n        } else if (brackets[i] ==\
    \ '>') {\n            --close_brackets;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzarew7kr: /tmp/tmpzarew7kr.cpp:27: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool correct = true;\n    for (auto it = brackets.begin();\
    \ it != brackets.end(); ++it) {\n        if (*it == '<') {\n            correct\
    \ = correct && (*(brackets.begin() + 1) != '<');\n        }\n        if (*it ==\
    \ '>') {\n            correct = correct && (*(brackets.begin() + 1) != '>');\n\
    \        }\n    }\n    return correct;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpec7097i2: /tmp/tmpec7097i2.cpp:27: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c != \">\" && c != \"<\") {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpasdax3l0.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpasdax3l0.cpp:16:18: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   16 |         if (c != \">\" && c != \"<\") {\n\
    \      |                  ^~~\n/tmp/tmpasdax3l0.cpp:16:30: error: ISO C++ forbids\
    \ comparison between pointer and integer [-fpermissive]\n   16 |         if (c\
    \ != \">\" && c != \"<\") {\n      |                              ^~~\n"
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            ++open_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            ++close_brackets;\n        } else {\n            return false;\n\
    \        }\n    }\n    return open_brackets == close_brackets;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyuje67hy: /tmp/tmpyuje67hy.cpp:34: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130313
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t len = brackets.size();\n    bool result = true;\n  \
    \  for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] != '<') {\n   \
    \         result = false;\n            break;\n        }\n    }\n    for (size_t\
    \ i = 0; i < len; ++i) {\n        if (brackets[i] != '>') {\n            result\
    \ = false;\n            break;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbsf5x0q8: /tmp/tmpbsf5x0q8.cpp:32: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    size_t brackets_size = brackets.size();\n\
    \    for (size_t i = 0; i < brackets_size; ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            if (i + 1 == brackets_size) {\n                result =\
    \ false;\n                break;\n            }\n            if (brackets[i +\
    \ 1] != '>') {\n                result = false;\n                break;\n    \
    \        }\n            i += 2;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5usssk_y: /tmp/tmp5usssk_y.cpp:34: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool correct = true;\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] != '<') {\n            correct = false;\n  \
    \          break;\n        }\n    }\n    for (size_t i = brackets.size() - 1;\
    \ i >= 0; i--) {\n        if (brackets[i] != '>') {\n            correct = false;\n\
    \            break;\n        }\n    }\n    return correct;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpe_v94b41: /tmp/tmpe_v94b41.cpp:31: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string opening_brackets = brackets;\n    std::string closing_brackets\
    \ = brackets;\n    opening_brackets.erase(std::remove(opening_brackets.begin(),\
    \ opening_brackets.end(), '<'), opening_brackets.end());\n    closing_brackets.erase(std::remove(closing_brackets.begin(),\
    \ closing_brackets.end(), '>'), closing_brackets.end());\n    return opening_brackets\
    \ == closing_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmrfoa6fo: /tmp/tmpmrfoa6fo.cpp:22: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130312
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string opening_brackets = brackets;\n    std::string closing_brackets;\n\
    \    size_t opening_brackets_size = opening_brackets.size();\n    size_t closing_brackets_size\
    \ = 0;\n    for (size_t i = 0; i < opening_brackets_size; ++i) {\n        if (opening_brackets[i]\
    \ == '<') {\n            closing_brackets += '<';\n            closing_brackets_size\
    \ += 1;\n        } else if (opening_brackets[i] == '>') {\n            closing_brackets\
    \ += '>';\n            closing_brackets_size += 1;\n        } else {\n       \
    \     return false;\n        }\n    }\n    if (closing_brackets_size != opening_brackets_size)\
    \ {\n        return false;\n    }\n    return opening_brackets == closing_brackets;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4jusngh2: /tmp/tmp4jusngh2.cpp:40: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string opening_brackets = brackets;\n    std::string closing_brackets\
    \ = brackets;\n    opening_brackets.erase(opening_brackets.begin(), opening_brackets.begin()\
    \ + 1);\n    closing_brackets.erase(closing_brackets.begin(), closing_brackets.begin()\
    \ + 1);\n    bool result = false;\n    for (auto it = opening_brackets.begin();\
    \ it != opening_brackets.end(); ++it) {\n        if (closing_brackets.find(*it)\
    \ == closing_brackets.end()) {\n            result = true;\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd7xr46l6.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpd7xr46l6.cpp:20:40: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018\
    long unsigned int\u2019} and \u2018std::__cxx11::basic_string<char>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019})\n   20 |         if (closing_brackets.find(*it) == closing_brackets.end())\
    \ {\n      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                  |                            |\n   \
    \   |                                  |                            std::__cxx11::basic_string<char>::iterator\
    \ {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}\n\
    \      |                                  std::__cxx11::basic_string<char>::size_type\
    \ {aka long unsigned int}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpd7xr46l6.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:883:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator==(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  883 |\
    \     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:883:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpd7xr46l6.cpp:20:64: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   20 |         if (closing_brackets.find(*it) == closing_brackets.end())\
    \ {\n      |                                                                ^\n\
    In file includ"
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t len = brackets.size();\n    bool result = true;\n  \
    \  for (size_t i = 0; i < len; ++i) {\n        char c = brackets[i];\n       \
    \ if (c == '<') {\n            if (brackets[i + 1] != '<') {\n               \
    \ result = false;\n                break;\n            }\n            i += 2;\n\
    \        } else if (c == '>') {\n            if (brackets[i + 1] != '>') {\n \
    \               result = false;\n                break;\n            }\n     \
    \       i += 2;\n        } else {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp1fd3mvq6: /tmp/tmp1fd3mvq6.cpp:39: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = brackets.size();\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++close_brackets;\n        } else if (brackets[i] ==\
    \ '>') {\n            --close_brackets;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzarew7kr: /tmp/tmpzarew7kr.cpp:27: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130309
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string opening_brackets = brackets;\n    std::string closing_brackets\
    \ = brackets;\n    opening_brackets.erase(std::remove(opening_brackets.begin(),\
    \ opening_brackets.end(), '<'), opening_brackets.end());\n    closing_brackets.erase(std::remove(closing_brackets.begin(),\
    \ closing_brackets.end(), '>'), closing_brackets.end());\n    bool result = opening_brackets.size()\
    \ == closing_brackets.size();\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpy0nczg2d: /tmp/tmpy0nczg2d.cpp:28: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130315
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string opening_brackets = \"<\";\n    std::string closing_brackets\
    \ = \">\";\n    std::string opening_brackets_reversed = \">\";\n    std::string\
    \ closing_brackets_reversed = \"<\";\n    std::string opening_brackets_reversed_2\
    \ = \">\";\n    std::string closing_brackets_reversed_2 = \"<\";\n    std::string\
    \ opening_brackets_reversed_3 = \">\";\n    std::string closing_brackets_reversed_3\
    \ = \"<\";\n    std::string opening_brackets_reversed_4 = \">\";\n    std::string\
    \ closing_brackets_reversed_4 = \"<\";\n    std::string opening_brackets_reversed_5\
    \ = \">\";\n    std::string closing_brackets_reversed_5 = \"<\";\n    std::string\
    \ opening_brackets_reversed_6 = \">\";\n    std::string closing_brackets_reversed_6\
    \ = \"<\";\n    std::string opening_brackets_reversed_7 = \">\";\n    std::string\
    \ closing_brackets_reversed_7 = \"<\";\n    std::string opening_brackets_reversed_8\
    \ = \">\";\n    std::string closing_brackets_reversed_8 = \"<\";\n    std::string\
    \ opening_brackets_reversed_9 = \">\";\n    std::string closing_brackets_reversed_9\
    \ = \"<\";\n    std::string opening_brackets_reversed_10 = \">\";\n    std::string\
    \ closing_brackets_reversed_10 = \"<\";\n    std::string opening_brackets_reversed_11\
    \ = \">\";\n    std::string closing_brackets_reversed_11 = \"<\";\n    std::string\
    \ opening_brackets_reversed_12 = \">\";\n    std::string closing_brackets_reversed_12\
    \ = \"<\";\n    std::string opening_brackets_reversed_13 = \">\";\n    std::string\
    \ closing_brackets_reversed_13 = \"<\";\n    std::string opening_brackets_reversed_14\
    \ = \">\";\n    std::string closing_brackets_reversed_14 = \"<\";\n    std::string\
    \ opening_brackets_reversed_15 = \">\";\n    std::string closing_brackets_reversed_15\
    \ = \"<\";\n    std::string opening_brackets_reversed_16 = \">\";\n    std::string\
    \ closing_brackets_reversed_16 = \"<\";\n    std::string opening_brackets_reversed_17\
    \ = \">\";\n    std::string closing_brackets_reversed_17 = \"<\";\n    std::string\
    \ opening_brackets_reversed_18 = \n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1fvaiyyq.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp1fvaiyyq.cpp:51:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   51 | }\n      | ^\n/tmp/tmp1fvaiyyq.cpp:51:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmp1fvaiyyq.cpp:51:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660130315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t len = brackets.size();\n    bool result = true;\n  \
    \  for (size_t i = 0; i < len; ++i) {\n        char ch = brackets[i];\n      \
    \  if (ch == '<') {\n            if (i + 1 < len && brackets[i + 1] == '>') {\n\
    \                i += 2;\n            } else {\n                result = false;\n\
    \                break;\n            }\n        } else if (ch == '>') {\n    \
    \        if (i + 1 < len && brackets[i + 1] == '<') {\n                i += 2;\n\
    \            } else {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmprodlvj8m: /tmp/tmprodlvj8m.cpp:39: int main(): Assertion `candidate(("<<><>>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130316
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t len = brackets.size();\n    bool result = true;\n  \
    \  for (size_t i = 0; i < len; ++i) {\n        bool found = false;\n        for\
    \ (size_t j = 0; j < len; ++j) {\n            if (brackets[i] == brackets[j])\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (!found) {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmp958bnd19: /tmp/tmp958bnd19.cpp:37: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130316
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t brackets_size = brackets.size();\n    bool result =\
    \ true;\n    size_t opening_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ i++) {\n        char c = brackets[i];\n        if (c == '<') {\n           \
    \ opening_brackets_size++;\n        } else if (c == '>') {\n            opening_brackets_size--;\n\
    \        } else {\n            result = false;\n            break;\n        }\n\
    \    }\n    if (opening_brackets_size == 0) {\n        result = true;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  status: Exception
  stderr: 'tmprfrvmz12: /tmp/tmprfrvmz12.cpp:39: int main(): Assertion `candidate(("<<<><>>>>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130316
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    // Your code here\n    bool correct = true;\n    std::string\
    \ opening_brackets = brackets;\n    std::string closing_brackets;\n    std::string\
    \ temp;\n    bool found = false;\n    for (int i = 0; i < opening_brackets.size();\
    \ i++) {\n        if (opening_brackets[i] == '<') {\n            closing_brackets\
    \ = opening_brackets.substr(i + 1);\n            found = true;\n        }\n  \
    \  }\n    if (!found) {\n        correct = false;\n    }\n    for (int i = 0;\
    \ i < closing_brackets.size(); i++) {\n        if (closing_brackets[i] == '>')\
    \ {\n            temp = opening_brackets.substr(0, i);\n            opening_brackets\
    \ = temp;\n        }\n    }\n    if (opening_brackets != closing_brackets) {\n\
    \        correct = false;\n    }\n    return correct;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2g07kav5: /tmp/tmp2g07kav5.cpp:42: int main(): Assertion `candidate(("<>"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660130316
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
    <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>>\
    \ correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            ++open_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            ++close_brackets;\n        } else {\n            return false;\n\
    \        }\n    }\n    return open_brackets == close_brackets;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyuje67hy: /tmp/tmpyuje67hy.cpp:34: int main(): Assertion `candidate(("><<>"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660130313
