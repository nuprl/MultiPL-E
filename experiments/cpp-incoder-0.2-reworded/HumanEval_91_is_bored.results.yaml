language: cpp
name: HumanEval_91_is_bored
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiter = \" .?!\";\n    std::string delimiter2 = \"\
    \ .?!\";\n    std::string delimiter3 = \" .?!\";\n    std::string delimiter4 =\
    \ \" .?!\";\n    std::string delimiter5 = \" .?!\";\n    std::string delimiter6\
    \ = \" .?!\";\n    std::string delimiter7 = \" .?!\";\n    std::string delimiter8\
    \ = \" .?!\";\n    std::string delimiter9 = \" .?!\";\n    std::string delimiter10\
    \ = \" .?!\";\n    std::string delimiter11 = \" .?!\";\n    std::string delimiter12\
    \ = \" .?!\";\n    std::string delimiter13 = \" .?!\";\n    std::string delimiter14\
    \ = \" .?!\";\n    std::string delimiter15 = \" .?!\";\n    std::string delimiter16\
    \ = \" .?!\";\n    std::string delimiter17 = \" .?!\";\n    std::string delimiter18\
    \ = \" .?!\";\n    std::string delimiter19 = \" .?!\";\n    std::string delimiter20\
    \ = \" .?!\";\n    std::string delimiter21 = \" .?!\";\n    std::string delimiter22\
    \ = \" .?!\";\n    std::string delimiter23 = \" .?!\";\n    std::string delimiter24\
    \ = \" .?!\";\n    std::string delimiter25 = \" .?!\";\n    std::string delimiter26\
    \ = \" .?!\";\n    std::string delimiter27 = \" .?!\";\n    std::string delimiter28\
    \ = \" .?!\";\n    std::string delimiter29 = \" .?!\";\n    std::string delimiter30\
    \ = \" .?!\";\n    std::string delimiter31 = \" .?!\";\n    std::string delimiter32\
    \ = \" .?!\";\n    std::string delimiter33 = \" .?!\";\n    std::string delimiter34\
    \ = \" .?!\";\n    std::string delimiter35 = \" .?!\";\n    std::string delimiter36\
    \ = \" .?!\";\n    std::string delimiter37 = \" .?!\";\n    std::string delimiter38\
    \ = \" .?!\";\n    std::string delimiter39 = \" .?!\";\n    std::string delimiter40\
    \ = \" .?!\";\n    std::string delimiter41 = \" .?!\";\n    std::string delimiter42\
    \ = \" .?!\";\n    std::string delimiter43 = \" .?!\";\n    std::string delimiter44\
    \ = \" .?!\";\n    std::string delimiter45 = \" .?!\";\n    std::string delimiter46\
    \ = \" .?!\";\n    std::string delimiter47 = \" \n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8zwlp6rs.cpp:60:31: warning: missing terminating \" character\n\
    \   60 |     std::string delimiter47 = \"\n      |                           \
    \    ^\n/tmp/tmp8zwlp6rs.cpp:60:31: error: missing terminating \" character\n\
    \   60 |     std::string delimiter47 = \"\n      |                           \
    \    ^ \n/tmp/tmp8zwlp6rs.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp8zwlp6rs.cpp:61:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   61 | }\n      | ^\n/tmp/tmp8zwlp6rs.cpp:61:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmp8zwlp6rs.cpp:61:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for(int i = 0; i < S.size(); i++) {\n        word = S[i];\n     \
    \   if(word == \"I\") {\n            boredoms++;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpn5tmqmqi: /tmp/tmpn5tmqmqi.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy7ejx2jf: /tmp/tmpy7ejx2jf.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom = 0;\n    int i = 0;\n\
    \    while (i < S.size()) {\n        if (S[i] == '.') {\n            boredom++;\n\
    \        }\n        if (S[i] == '?') {\n            boredom++;\n        }\n  \
    \      if (S[i] == '!') {\n            boredom++;\n        }\n        i++;\n \
    \   }\n    return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpk1_g80ki: /tmp/tmpk1_g80ki.cpp:31: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    for(int i = 0;\
    \ i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            ans += 1;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpuddmdyic: /tmp/tmpuddmdyic.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiter = \"\
    ,\";\n    std::string delimiter2 = \" \";\n    std::string delimiter3 = \" \"\
    ;\n    std::string delimiter4 = \" \";\n    std::string delimiter5 = \" \";\n\
    \    std::string delimiter6 = \" \";\n    std::string delimiter7 = \" \";\n  \
    \  std::string delimiter8 = \" \";\n    std::string delimiter9 = \" \";\n    std::string\
    \ delimiter10 = \" \";\n    std::string delimiter11 = \" \";\n    std::string\
    \ delimiter12 = \" \";\n    std::string delimiter13 = \" \";\n    std::string\
    \ delimiter14 = \" \";\n    std::string delimiter15 = \" \";\n    std::string\
    \ delimiter16 = \" \";\n    std::string delimiter17 = \" \";\n    std::string\
    \ delimiter18 = \" \";\n    std::string delimiter19 = \" \";\n    std::string\
    \ delimiter20 = \" \";\n    std::string delimiter21 = \" \";\n    std::string\
    \ delimiter22 = \" \";\n    std::string delimiter23 = \" \";\n    std::string\
    \ delimiter24 = \" \";\n    std::string delimiter25 = \" \";\n    std::string\
    \ delimiter26 = \" \";\n    std::string delimiter27 = \" \";\n    std::string\
    \ delimiter28 = \" \";\n    std::string delimiter29 = \" \";\n    std::string\
    \ delimiter30 = \" \";\n    std::string delimiter31 = \" \";\n    std::string\
    \ delimiter32 = \" \";\n    std::string delimiter33 = \" \";\n    std::string\
    \ delimiter34 = \" \";\n    std::string delimiter35 = \" \";\n    std::string\
    \ delimiter36 = \" \";\n    std::string delimiter37 = \" \";\n    std::string\
    \ delimiter38 = \" \";\n    std::string delimiter39 = \" \";\n    std::string\
    \ delimiter40 = \" \";\n    std::string delimiter41 = \" \";\n    std::string\
    \ delimiter42 = \" \";\n    std::string delimiter43 = \" \";\n    std::string\
    \ delimiter44 = \" \";\n    std::string delimiter45 = \" \";\n    std::string\
    \ delimiter46 = \" \";\n    std::string delimiter47 = \" \";\n    std::string\
    \ delimiter48 = \" \";\n    std::string delimiter49 = \" \";\n    std::string\
    \ delimiter50 = \" \";\n    std::string delimiter51 = \" \";\n    std::string\
    \ delimiter52 = \" \";\n    std::string delimiter53 = \" \";\n    std::string\
    \ delimiter54 = \" \";\n    std::string delimiter55 = \" \";\n    std::string\
    \ delimiter56 = \" \";\n    std::string delimiter57 = \" \";\n    std::string\
    \ delimiter58 = \" \";\n    std::string delimiter59 = \" \";\n    std::string\
    \ delimiter60 = \" \";\n    std::string delimiter61 = \" \";\n    std::string\
    \ delimiter62 = \" \";\n    std::string delimiter63 = \" \";\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_u1o5amj: /tmp/tmp_u1o5amj.cpp:81: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    for(int i =\
    \ 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpa4mngdxo: /tmp/tmpa4mngdxo.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!')\
    \ {\n            boredoms += 1;\n        }\n        else {\n            word =\
    \ word + c;\n        }\n    }\n    if (word == \"I\") {\n        boredoms += 1;\n\
    \    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpv28nqzv9: /tmp/tmpv28nqzv9.cpp:30: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094240
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &i : S) {\n        if (i == '.' || i == '?' || i == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnj8sujay: /tmp/tmpnj8sujay.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            boredoms++;\n        }\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp17a19xn9: /tmp/tmp17a19xn9.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \". ? !\";\n    std::string::size_type pos;\n\
    \    for (pos = 0; (pos = S.find_first_of(delimiters, pos)) != std::string::npos;\
    \ pos++) {\n        word = S.substr(0, pos);\n        if (word == \"I\") {\n \
    \           boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpezl9438a: /tmp/tmpezl9438a.cpp:30: int main(): Assertion `candidate(("I
    feel good today. I will be productive. will kill It")) == (2)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiter = \"\
    ,\";\n    std::string temp;\n    std::string temp2;\n    std::string temp3;\n\
    \    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string\
    \ temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n\
    \    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n \
    \   std::string temp14;\n    std::string temp15;\n    std::string temp16;\n  \
    \  std::string temp17;\n    std::string temp18;\n    std::string temp19;\n   \
    \ std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string\
    \ temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n\
    \    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n \
    \   std::string temp30;\n    std::string temp31;\n    std::string temp32;\n  \
    \  std::string temp33;\n    std::string temp34;\n    std::string temp35;\n   \
    \ std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string\
    \ temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n\
    \    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n \
    \   std::string temp46;\n    std::string temp47;\n    std::string temp48;\n  \
    \  std::string temp49;\n    std::string temp50;\n    std::string temp51;\n   \
    \ std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string\
    \ temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n\
    \    std::string temp59;\n    std::string temp60;\n    std::string temp61;\n \
    \   std::string temp62;\n    std::string temp63;\n    std::string temp64;\n  \
    \  std::string temp65;\n    std::string temp66;\n    std::string temp67;\n   \
    \ std::string temp68;\n    std::string temp69;\n    std::string temp70;\n    std::string\
    \ temp71;\n    std::string temp72;\n    std::string temp73;\n    std::string temp74;\n\
    \    std::string temp75;\n    std::string temp76;\n    std::string temp77;\n \
    \   std::string temp78;\n    std::string temp79;\n    std::string temp80;\n  \
    \  std::string temp81;\n    std::string temp82;\n    std::string temp83;\n   \
    \ std::string temp84;\n\n}\nint main() {\n    auto candidate = is_bored;\n   \
    \ assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9qzwlgwp: /tmp/tmp9qzwlgwp.cpp:104: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    for(int i = 0;\
    \ i < S.size(); i++){\n        if(S[i] == 'I'){\n            count++;\n      \
    \  }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp09yaqoei: /tmp/tmp09yaqoei.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom = 0;\n    for(int i =\
    \ 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            boredom++;\n        }\n    }\n    return boredom;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpts1a504n: /tmp/tmpts1a504n.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    std::string word;\n    std::string sentence;\n    std::stringstream\
    \ ss;\n    ss << S;\n    while(std::getline(ss, sentence, '.')) {\n        std::istringstream\
    \ iss(sentence);\n        while(std::getline(iss, word, '.')) {\n            if(word\
    \ == \"I\") {\n                boredom++;\n            }\n        }\n    }\n \
    \   return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpg6ct8b12: /tmp/tmpg6ct8b12.cpp:32: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!')\
    \ {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpszfxkps6: /tmp/tmpszfxkps6.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    for(int i =\
    \ 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqapbejzh: /tmp/tmpqapbejzh.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    int i = 0;\n\
    \    while (i < S.size()) {\n        if (S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!') {\n            boredoms++;\n        }\n        i++;\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpp3e3ys1k: /tmp/tmpp3e3ys1k.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdh6rv_dz.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdh6rv_dz.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmpdh6rv_dz.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom = 0;\n    int i = 0;\n\
    \    while(i < S.size()) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            boredom++;\n            i++;\n        } else {\n            i++;\n\
    \        }\n    }\n    return boredom;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpojvljp28: /tmp/tmpojvljp28.cpp:27: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \" .?!\";\n    size_t pos\
    \ = 0;\n    size_t len = S.length();\n    while(pos < len) {\n        word = S.substr(pos,\
    \ 1);\n        pos = pos + 1;\n        boredom = \"\";\n        pos = 0;\n   \
    \     while(pos < len) {\n            if(delimiter[0] == S[pos]) {\n         \
    \       boredom = boredom + S[pos];\n                pos = pos + 1;\n        \
    \    }\n            pos = pos + 1;\n        }\n        if(boredom == \"I\") {\n\
    \            count = count + 1;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpkzvjvmsl: /tmp/tmpkzvjvmsl.cpp:40: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &i : S) {\n        if (i == '.' || i == '?' || i == '!')\
    \ {\n            boredoms += 1;\n        }\n        else {\n            word =\
    \ i;\n        }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmfefn7sx: /tmp/tmpmfefn7sx.cpp:27: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    for (auto &c : S) {\n    \
    \    if (c == delimiters[0]) {\n            boredoms += 1;\n            word.clear();\n\
    \        } else if (c == delimiters[1]) {\n            boredoms += 1;\n      \
    \      word.clear();\n        } else if (c == delimiters[2]) {\n            word.clear();\n\
    \        } else {\n            word += c;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6ic4rsn5: /tmp/tmp6ic4rsn5.cpp:33: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom = 0;\n    for(int i =\
    \ 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            boredom++;\n        }\n    }\n    return boredom;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpts1a504n: /tmp/tmpts1a504n.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.') {\n\
    \            boredoms += 1;\n        }\n        else if(S[i] == '?') {\n     \
    \       boredoms += 1;\n        }\n        else if(S[i] == '!') {\n          \
    \  boredoms += 1;\n        }\n        else {\n            word = S[i];\n     \
    \       for(int j = i; j < S.size(); j++) {\n                if(S[j] == word)\
    \ {\n                    boredoms += 1;\n                }\n            }\n  \
    \      }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_djt3iez.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp_djt3iez.cpp:27:25: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   27 |                 if(S[j] == word) {\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp_djt3iez.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp_djt3iez.cpp:27:28:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   27 |                 if(S[j] == word) {\n      |\
    \                            ^~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp_djt3iez.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp_djt3iez.cpp:27:28: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_ty"
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n  \
    \  }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2nexha7c: /tmp/tmp2nexha7c.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string sentence;\n    std::string\
    \ delimiters = \".?!\";\n    std::string delimiters_lower = \"i.e\";\n    std::string\
    \ delimiters_upper = \"I.E\";\n    std::string delimiters_capital = \"I.E\";\n\
    \    std::string delimiters_capital2 = \"I.E\";\n    std::string delimiters_capital3\
    \ = \"I.E\";\n    std::string delimiters_capital4 = \"I.E\";\n    std::string\
    \ delimiters_capital5 = \"I.E\";\n    std::string delimiters_capital6 = \"I.E\"\
    ;\n    std::string delimiters_capital7 = \"I.E\";\n    std::string delimiters_capital8\
    \ = \"I.E\";\n    std::string delimiters_capital9 = \"I.E\";\n    std::string\
    \ delimiters_capital10 = \"I.E\";\n    std::string delimiters_capital11 = \"I.E\"\
    ;\n    std::string delimiters_capital12 = \"I.E\";\n    std::string delimiters_capital13\
    \ = \"I.E\";\n    std::string delimiters_capital14 = \"I.E\";\n    std::string\
    \ delimiters_capital15 = \"I.E\";\n    std::string delimiters_capital16 = \"I.E\"\
    ;\n    std::string delimiters_capital17 = \"I.E\";\n    std::string delimiters_capital18\
    \ = \"I.E\";\n    std::string delimiters_capital19 = \"I.E\";\n    std::string\
    \ delimiters_capital20 = \"I.E\";\n    std::string delimiters_capital21 = \"I.E\"\
    ;\n    std::string delimiters_capital22 = \"I.E\";\n    std::string delimiters_capital23\
    \ = \"I.E\";\n    std::string delimiters_capital24 = \"I.E\";\n    std::string\
    \ delimiters_capital25 = \"I.E\";\n    std::string delimiters_capital26 = \"I.E\"\
    ;\n    std::string delimiters_capital27 = \"I.E\";\n    std::string delimiters_capital28\
    \ = \"I.E\";\n    std::string delimiters_capital29 = \"I.E\";\n    std::string\
    \ delimiters_capital30 = \"I.E\";\n    std::string delimiters_capital31 = \"I.E\"\
    ;\n    std::string delimiters_capital32 = \"I.E\";\n    std::string delimiters_capital33\
    \ = \"I.E\";\n    std::string delimiters_capital34 = \"I.E\";\n    std::string\
    \ delimiters_capital35 = \"I.E\";\n    std::string delimiters_capital36 = \"I.E\"\
    ;\n    std::string delimiters_capital37 = \"I.E\";\n    std::string delimiters_capital38\
    \ = \"I.E\";\n    \n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp7w6xwepe: /tmp/tmp7w6xwepe.cpp:61: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom = 0;\n    int i = 0;\n\
    \    std::string word;\n    while (i < S.size()) {\n        word = S[i];\n   \
    \     if (word == \"I\") {\n            boredom++;\n        }\n        i++;\n\
    \    }\n    return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpre9g4vsp: /tmp/tmpre9g4vsp.cpp:27: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &i : S) {\n        if (i == '.' || i == '?' || i == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnj8sujay: /tmp/tmpnj8sujay.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0;\n    for(int i = 0;\
    \ i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpcevjsyr3: /tmp/tmpcevjsyr3.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom;\n    std::string delimiters = \".?!\";\n   \
    \ std::string delimiters_lower = \"i.e\";\n    std::string delimiters_upper =\
    \ \"I.E\";\n    std::string delimiters_caps = \"I.E\";\n    std::string delimiters_caps_lower\
    \ = \"i.e\";\n    std::string delimiters_caps_upper = \"I.E\";\n    std::string\
    \ delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper = \"\"\
    ;\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string delimiters_caps_upper\
    \ = \"\";\n    std::string delimiters_caps_lower = \"\";\n    std::string \n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprj14lehb.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmprj14lehb.cpp:21:17: error: redeclaration of \u2018std::string delimiters_caps_lower\u2019\
    \n   21 |     std::string delimiters_caps_lower = \"\";\n      |             \
    \    ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprj14lehb.cpp:19:17: note: \u2018std::string\
    \ delimiters_caps_lower\u2019 previously declared here\n   19 |     std::string\
    \ delimiters_caps_lower = \"i.e\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmprj14lehb.cpp:22:17: error: redeclaration of \u2018std::string delimiters_caps_upper\u2019\
    \n   22 |     std::string delimiters_caps_upper = \"\";\n      |             \
    \    ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprj14lehb.cpp:20:17: note: \u2018std::string\
    \ delimiters_caps_upper\u2019 previously declared here\n   20 |     std::string\
    \ delimiters_caps_upper = \"I.E\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmprj14lehb.cpp:23:17: error: redeclaration of \u2018std::string delimiters_caps_lower\u2019\
    \n   23 |     std::string delimiters_caps_lower = \"\";\n      |             \
    \    ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprj14lehb.cpp:19:17: note: \u2018std::string\
    \ delimiters_caps_lower\u2019 previously declared here\n   19 |     std::string\
    \ delimiters_caps_lower = \"i.e\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmprj14lehb.cpp:24:17: error: redeclaration of \u2018std::string delimiters_caps_upper\u2019\
    \n   24 |     std::string delimiters_caps_upper = \"\";\n      |             \
    \    ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprj14lehb.cpp:20:17: note: \u2018std::string\
    \ delimiters_caps_upper\u2019 previously declared here\n   20 |     std::string\
    \ delimiters_caps_upper = \"I.E\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmprj14lehb.cpp:25:17: error: redeclaration of \u2018std::string delimiters_caps_lower\u2019\
    \n   25 |     std::string delimiters_caps_lower = \"\";\n      |             \
    \    ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprj14lehb.cpp:19:17: note: \u2018std::string\
    \ delimiters_caps_lower\u2019 previously declared here\n   19 |     std::string\
    \ delimiters_caps_lower = \"i.e\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmprj14lehb.cpp:26:17"
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &i : S) {\n        if (i == '.' || i == '?' || i == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnj8sujay: /tmp/tmpnj8sujay.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdh6rv_dz.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdh6rv_dz.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmpdh6rv_dz.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t\
    \ i = 0;\n    while (pos < S.size()) {\n        word = S.substr(pos, 1);\n   \
    \     for (i = 0; i <= word.length(); i++) {\n            if (word.substr(0, i)\
    \ == \"I\") {\n                boredoms++;\n            }\n        }\n       \
    \ pos = pos + 1;\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp72x4fx4z: /tmp/tmp72x4fx4z.cpp:31: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiter = delimiters[0];\n\
    \    std::string temp;\n    std::string temp2;\n    std::string temp3;\n    std::string\
    \ temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n\
    \    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n   \
    \ std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string\
    \ temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n\
    \    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n \
    \   std::string temp21;\n    std::string temp22;\n    std::string temp23;\n  \
    \  std::string temp24;\n    std::string temp25;\n    std::string temp26;\n   \
    \ std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string\
    \ temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n\
    \    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n \
    \   std::string temp37;\n    std::string temp38;\n    std::string temp39;\n  \
    \  std::string temp40;\n    std::string temp41;\n    std::string temp42;\n   \
    \ std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string\
    \ temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n\
    \    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n \
    \   std::string temp53;\n    std::string temp54;\n    std::string temp55;\n  \
    \  std::string temp56;\n    std::string temp57;\n    std::string temp58;\n   \
    \ std::string temp59;\n    std::string temp60;\n    std::string temp61;\n    std::string\
    \ temp62;\n    std::string temp63;\n    std::string temp64;\n    std::string temp65;\n\
    \    std::string temp66;\n    std::string temp67;\n    std::string temp68;\n \
    \   std::string temp69;\n    std::string temp70;\n    std::string temp71;\n  \
    \  std::string temp72;\n    std::string temp73;\n    std::string temp74;\n   \
    \ std::string temp75;\n    std::string temp76;\n    std::string temp77;\n    std::string\
    \ temp78;\n    std::string temp79;\n    std::string temp80;\n    std::string temp81;\n\
    \    std::string temp82;\n    std::string temp83;\n    std::string temp84;\n\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb1x20m8l.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpb1x20m8l.cpp:15:41: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   15 |     std::string\
    \ delimiter = delimiters[0];\n      |                                        \
    \ ^\n/tmp/tmpb1x20m8l.cpp:101:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  101 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t\
    \ i = 0;\n    while (pos < S.size()) {\n        word = S.substr(pos, 1);\n   \
    \     if (word == \"I\") {\n            boredoms += 1;\n        }\n        pos\
    \ = pos + 1;\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmph96lvfuk: /tmp/tmph96lvfuk.cpp:29: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string temp;\n    std::string temp2;\n   \
    \ std::string temp3;\n    std::string temp4;\n    std::string temp5;\n    std::string\
    \ temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string temp9;\n\
    \    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n \
    \   std::string temp13;\n    std::string temp14;\n    std::string temp15;\n  \
    \  std::string temp16;\n    std::string temp17;\n    std::string temp18;\n   \
    \ std::string temp19;\n    std::string temp20;\n    std::string temp21;\n    std::string\
    \ temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string temp25;\n\
    \    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n \
    \   std::string temp29;\n    std::string temp30;\n    std::string temp31;\n  \
    \  std::string temp32;\n    std::string temp33;\n    std::string temp34;\n   \
    \ std::string temp35;\n    std::string temp36;\n    std::string temp37;\n    std::string\
    \ temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string temp41;\n\
    \    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n \
    \   std::string temp45;\n    std::string temp46;\n    std::string temp47;\n  \
    \  std::string temp48;\n    std::string temp49;\n    std::string temp50;\n   \
    \ std::string temp51;\n    std::string temp52;\n    std::string temp53;\n    std::string\
    \ temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string temp57;\n\
    \    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n \
    \   std::string temp61;\n    std::string temp62;\n    std::string temp63;\n  \
    \  std::string temp64;\n    std::string temp65;\n    std::string temp66;\n   \
    \ std::string temp67;\n    std::string temp68;\n    std::string temp69;\n    std::string\
    \ temp70;\n    std::string temp71;\n    std::string temp72;\n    std::string temp73;\n\
    \    std::string temp74;\n    std::string temp75;\n    std::string temp76;\n \
    \   std::string temp77;\n    std::string temp78;\n    std::string temp79;\n  \
    \  std::string temp80;\n    std::string temp81;\n    std::string temp82;\n   \
    \ std::string temp83;\n    std::string temp84;\n    std::string temp85;\n    std::string\
    \ temp86;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgbl2zbq6: /tmp/tmpgbl2zbq6.cpp:104: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &i : S) {\n        if (i == '.' || i == '?' || i == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnj8sujay: /tmp/tmpnj8sujay.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom = 0;\n    for(int i =\
    \ 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n            boredom++;\n \
    \       }\n    }\n    return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq9_pw21u: /tmp/tmpq9_pw21u.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    for (size_t i = 0; i < S.size(); i++)\
    \ {\n        word = S[i];\n        if (word == \".\" || word == \"?\" || word\
    \ == \"!\") {\n            boredom_word = S[i];\n            boredoms += 1;\n\
    \        }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp5q1z2njl: /tmp/tmp5q1z2njl.cpp:27: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiter = delimiters[0];\n\
    \    std::string temp;\n    std::string temp_2;\n    std::string temp_3;\n   \
    \ std::string temp_4;\n    std::string temp_5;\n    std::string temp_6;\n    std::string\
    \ temp_7;\n    std::string temp_8;\n    std::string temp_9;\n    std::string temp_10;\n\
    \    std::string temp_11;\n    std::string temp_12;\n    std::string temp_13;\n\
    \    std::string temp_14;\n    std::string temp_15;\n    std::string temp_16;\n\
    \    std::string temp_17;\n    std::string temp_18;\n    std::string temp_19;\n\
    \    std::string temp_20;\n    std::string temp_21;\n    std::string temp_22;\n\
    \    std::string temp_23;\n    std::string temp_24;\n    std::string temp_25;\n\
    \    std::string temp_26;\n    std::string temp_27;\n    std::string temp_28;\n\
    \    std::string temp_29;\n    std::string temp_30;\n    std::string temp_31;\n\
    \    std::string temp_32;\n    std::string temp_33;\n    std::string temp_34;\n\
    \    std::string temp_35;\n    std::string temp_36;\n    std::string temp_37;\n\
    \    std::string temp_38;\n    std::string temp_39;\n    std::string temp_40;\n\
    \    std::string temp_41;\n    std::string temp_42;\n    std::string temp_43;\n\
    \    std::string temp_44;\n    std::string temp_45;\n    std::string temp_46;\n\
    \    std::string temp_47;\n    std::string temp_48;\n    std::string temp_49;\n\
    \    std::string temp_50;\n    std::string temp_51;\n    std::string temp_52;\n\
    \    std::string temp_53;\n    std::string temp_54;\n    std::string temp_55;\n\
    \    std::string temp_56;\n    std::string temp_57;\n    std::string temp_58;\n\
    \    std::string temp_59;\n    std::string temp_60;\n    std::string temp_61;\n\
    \    std::string temp_62;\n    std::string temp_63;\n    std::string temp_64;\n\
    \    std::string temp_65;\n    std::string temp_66;\n    std::string temp_67;\n\
    \    std::string temp_68;\n    std::string temp_69;\n    std::string temp_70;\n\
    \    std::string temp_71;\n    std::string temp_72;\n    std::string temp_73;\n\
    \    std::string temp_74;\n    std::string temp_75;\n    std::string temp_76;\n\
    \    std::string temp_77;\n    std::string temp_78;\n    std::string temp_79;\n\
    \    std::string temp_80;\n    std::string temp_81;\n    std::string temp_82;\n\
    \    std::string temp_83;\n    std::string temp_84;\n\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_2uoocf9.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp_2uoocf9.cpp:15:41: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   15 |     std::string\
    \ delimiter = delimiters[0];\n      |                                        \
    \ ^\n/tmp/tmp_2uoocf9.cpp:101:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  101 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy7ejx2jf: /tmp/tmpy7ejx2jf.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiter = \"\
    ,\";\n    std::string delimiter1 = \"I\";\n    std::string delimiter2 = \".\"\
    ;\n    std::string delimiter3 = \"?\";\n    std::string delimiter4 = \"!\";\n\
    \    std::string delimiter5 = \".\";\n    std::string delimiter6 = \"?\";\n  \
    \  std::string delimiter7 = \"!\";\n    std::string delimiter8 = \".\";\n    std::string\
    \ delimiter9 = \"?\";\n    std::string delimiter10 = \"!\";\n    std::string delimiter11\
    \ = \".\";\n    std::string delimiter12 = \"?\";\n    std::string delimiter13\
    \ = \"!\";\n    std::string delimiter14 = \".\";\n    std::string delimiter15\
    \ = \"?\";\n    std::string delimiter16 = \"!\";\n    std::string delimiter17\
    \ = \".\";\n    std::string delimiter18 = \"?\";\n    std::string delimiter19\
    \ = \"!\";\n    std::string delimiter20 = \".\";\n    std::string delimiter21\
    \ = \"?\";\n    std::string delimiter22 = \"!\";\n    std::string delimiter23\
    \ = \".\";\n    std::string delimiter24 = \"?\";\n    std::string delimiter25\
    \ = \"!\";\n    std::string delimiter26 = \".\";\n    std::string delimiter27\
    \ = \"?\";\n    std::string delimiter28 = \"!\";\n    std::string delimiter29\
    \ = \".\";\n    std::string delimiter30 = \"?\";\n    std::string delimiter31\
    \ = \"!\";\n    std::string delimiter32 = \".\";\n    std::string delimiter33\
    \ = \"?\";\n    std::string delimiter34 = \"!\";\n    std::string delimiter35\
    \ = \".\";\n    std::string delimiter36 = \"?\";\n    std::string delimiter37\
    \ = \"!\";\n    std::string delimiter38 = \".\";\n    std::string delimiter39\
    \ = \"?\";\n    std::string delimiter40 = \"!\";\n    std::string delimiter41\
    \ = \"!\";\n    std::string delimiter42 = \".\";\n    std::string delimiter43\
    \ = \"?\";\n    std::string delimiter44 = \"!\";\n    std::string delimiter45\
    \ = \".\";\n    std::string delimiter46 = \"?\";\n    std::string delimiter47\
    \ = \"!\";\n    std::string delimiter48 = \".\";\n    std::string delimiter49\
    \ = \"?\";\n    std::string delimiter50 = \"!\";\n    std::string delimiter51\
    \ = \"!\";\n    std::string delimiter52 = \".\";\n    std::string delimiter53\
    \ = \"?\";\n    std::string delimiter54 = \"!\";\n    std::string delimiter55\
    \ = \".\";\n    std::string delimiter56 = \"?\";\n    std::string delimiter57\
    \ = \"!\";\n    std::string delimiter58 = \".\";\n    std::string delimiter59\
    \ = \"?\";\n    std::string delimiter60 = \"!\";\n\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp5b2crsjc: /tmp/tmp5b2crsjc.cpp:80: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ count = 0;\n    for(int i=0;i<S.size();i++){\n        if(S[i] == 'I'){\n   \
    \         count++;\n        }\n    }\n    return count;\n}\nint main() {\n   \
    \ auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqroamo4r: /tmp/tmpqroamo4r.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    for (size_t i = 0; i < S.size();\
    \ i++) {\n        word = S[i];\n        if (word.find(delimiters[0]) != std::string::npos)\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_l8f4uue: /tmp/tmp_l8f4uue.cpp:27: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word = \"I\";\n    std::string delimiter = \"\
    .?!\";\n    size_t pos = 0;\n    size_t count = 0;\n    while(pos < S.size())\
    \ {\n        word = S.substr(pos, 1);\n        pos = pos + 1;\n        count =\
    \ 0;\n        for(size_t i = 0; i < boredom_word.length(); i++) {\n          \
    \  if(word == boredom_word) {\n                count++;\n            }\n     \
    \   }\n        if(count == 0) {\n            boredoms += 1;\n        }\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp64la_cw9: /tmp/tmp64la_cw9.cpp:35: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiters_lower\
    \ = \".?!\";\n    std::string delimiters_upper = \".?!\";\n    std::string delimiters_mixed\
    \ = \".?!\";\n    std::string delimiters_mixed_upper = \".?!\";\n    std::string\
    \ delimiters_mixed_lower = \".?!\";\n    std::string delimiters_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_upper = \".?!\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper =\
    \ \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower = \"\
    .?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper =\
    \ \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hqju5cm.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp6hqju5cm.cpp:27:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_lower\u2019\
    \n   27 |     std::string delimiters_mixed_mixed_mixed_mixed_lower = \".?!\";\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6hqju5cm.cpp:25:17:\
    \ note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_lower\u2019 previously\
    \ declared here\n   25 |     std::string delimiters_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6hqju5cm.cpp:28:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \n   28 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper = \"\
    .?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6hqju5cm.cpp:26:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \ previously declared here\n   26 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6hqju5cm.cpp:34:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \n   34 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6hqju5cm.cpp:32:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \ previously declared here\n   32 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6hqju5cm.cpp:35:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \n   35 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tm"
  stdout: ''
  timestamp: 1660094241
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdh6rv_dz.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdh6rv_dz.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmpdh6rv_dz.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094241
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word = \"I\";\n    std::string delimiters = \"\
    .?!\";\n    std::string delimiters_lower = \"i.e\";\n    std::string delimiters_upper\
    \ = \"I.E\";\n    std::string delimiters_mixed = \"i.E.\";\n    std::string delimiters_mixed_upper\
    \ = \"I.E.\";\n    std::string delimiters_mixed_lower = \"i.E.\";\n    std::string\
    \ delimiters_mixed_mixed_upper = \"I.E.\";\n    std::string delimiters_mixed_mixed_lower\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_upper = \"I.E.\";\n\
    \    std::string delimiters_mixed_mixed_mixed_lower = \"I.E.\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_mixed_upper = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_lower\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_lower = \"I.E.\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper = \"I.E.\";\n\
    \    std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower = \"I.E.\";\n\
    \    std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper = \"I.E.\";\n\
    \    std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower = \"I.E.\";\n\
    \    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper = \"I.E.\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower = \"I.E.\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \"I.E.\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe7rl_9za.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpe7rl_9za.cpp:28:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_lower\u2019\
    \n   28 |     std::string delimiters_mixed_mixed_mixed_mixed_lower = \"I.E.\"\
    ;\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe7rl_9za.cpp:26:17:\
    \ note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_lower\u2019 previously\
    \ declared here\n   26 |     std::string delimiters_mixed_mixed_mixed_mixed_lower\
    \ = \"I.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpe7rl_9za.cpp:29:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \n   29 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper = \"\
    I.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpe7rl_9za.cpp:27:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \ previously declared here\n   27 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpe7rl_9za.cpp:31:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \n   31 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper = \"\
    I.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpe7rl_9za.cpp:27:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \ previously declared here\n   27 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \"I.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpe7rl_9za.cpp:32:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \n   32 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower = \"\
    I.E.\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpe7rl_9za.cpp:30:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \ previousl"
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiter = \"\
    ,\";\n    std::string delimiter2 = \" \";\n    std::string delimiter3 = \" \"\
    ;\n    std::string delimiter4 = \" \";\n    std::string delimiter5 = \" \";\n\
    \    std::string delimiter6 = \" \";\n    std::string delimiter7 = \" \";\n  \
    \  std::string delimiter8 = \" \";\n    std::string delimiter9 = \" \";\n    std::string\
    \ delimiter10 = \" \";\n    std::string delimiter11 = \" \";\n    std::string\
    \ delimiter12 = \" \";\n    std::string delimiter13 = \" \";\n    std::string\
    \ delimiter14 = \" \";\n    std::string delimiter15 = \" \";\n    std::string\
    \ delimiter16 = \" \";\n    std::string delimiter17 = \" \";\n    std::string\
    \ delimiter18 = \" \";\n    std::string delimiter19 = \" \";\n    std::string\
    \ delimiter20 = \" \";\n    std::string delimiter21 = \" \";\n    std::string\
    \ delimiter22 = \" \";\n    std::string delimiter23 = \" \";\n    std::string\
    \ delimiter24 = \" \";\n    std::string delimiter25 = \" \";\n    std::string\
    \ delimiter26 = \" \";\n    std::string delimiter27 = \" \";\n    std::string\
    \ delimiter28 = \" \";\n    std::string delimiter29 = \" \";\n    std::string\
    \ delimiter30 = \" \";\n    std::string delimiter31 = \" \";\n    std::string\
    \ delimiter32 = \" \";\n    std::string delimiter33 = \" \";\n    std::string\
    \ delimiter34 = \" \";\n    std::string delimiter35 = \" \";\n    std::string\
    \ delimiter36 = \" \";\n    std::string delimiter37 = \" \";\n    std::string\
    \ delimiter38 = \" \";\n    std::string delimiter39 = \" \";\n    std::string\
    \ delimiter40 = \" \";\n    std::string delimiter41 = \" \";\n    std::string\
    \ delimiter42 = \" \";\n    std::string delimiter43 = \" \";\n    std::string\
    \ delimiter44 = \" \";\n    std::string delimiter45 = \" \";\n    std::string\
    \ delimiter46 = \" \";\n    std::string delimiter47 = \" \";\n    std::string\
    \ delimiter48 = \" \";\n    std::string delimiter49 = \" \";\n    std::string\
    \ delimiter50 = \" \";\n    std::string delimiter51 = \" \";\n    std::string\
    \ delimiter52 = \" \";\n    std::string delimiter53 = \" \";\n    std::string\
    \ delimiter54 = \" \";\n    std::string delimiter55 = \" \";\n    std::string\
    \ delimiter56 = \" \";\n    std::string delimiter57 = \" \";\n    std::string\
    \ delimiter58 = \" \";\n    std::string delimiter59 = \" \";\n    std::string\
    \ delimiter60 = \" \";\n    std::string delimiter61 = \" \";\n    std::string\
    \ delimiter62 = \" \";\n    std::string delimiter63 = \" \";\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_u1o5amj: /tmp/tmp_u1o5amj.cpp:81: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom = 0;\n    int i = 0;\n\
    \    while(i < S.size()) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            boredom++;\n            i++;\n        }\n        else {\n   \
    \         i++;\n        }\n    }\n    return boredom;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_it0dlv_: /tmp/tmp_it0dlv_.cpp:28: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    int i = 0;\n\
    \    while(i < S.length()) {\n        if(S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!') {\n            boredoms += 1;\n        }\n        i++;\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpdkutfsw9: /tmp/tmpdkutfsw9.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiter = \"\
    ,\";\n    std::string temp;\n    std::string temp2;\n    std::string temp3;\n\
    \    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string\
    \ temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n\
    \    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n \
    \   std::string temp14;\n    std::string temp15;\n    std::string temp16;\n  \
    \  std::string temp17;\n    std::string temp18;\n    std::string temp19;\n   \
    \ std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string\
    \ temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n\
    \    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n \
    \   std::string temp30;\n    std::string temp31;\n    std::string temp32;\n  \
    \  std::string temp33;\n    std::string temp34;\n    std::string temp35;\n   \
    \ std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string\
    \ temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n\
    \    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n \
    \   std::string temp46;\n    std::string temp47;\n    std::string temp48;\n  \
    \  std::string temp49;\n    std::string temp50;\n    std::string temp51;\n   \
    \ std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string\
    \ temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n\
    \    std::string temp59;\n    std::string temp60;\n    std::string temp61;\n \
    \   std::string temp62;\n    std::string temp63;\n    std::string temp64;\n  \
    \  std::string temp65;\n    std::string temp66;\n    std::string temp67;\n   \
    \ std::string temp68;\n    std::string temp69;\n    std::string temp70;\n    std::string\
    \ temp71;\n    std::string temp72;\n    std::string temp73;\n    std::string temp74;\n\
    \    std::string temp75;\n    std::string temp76;\n    std::string temp77;\n \
    \   std::string temp78;\n    std::string temp79;\n    std::string temp80;\n  \
    \  std::string temp81;\n    std::string temp82;\n    std::string temp83;\n   \
    \ std::string temp84;\n\n}\nint main() {\n    auto candidate = is_bored;\n   \
    \ assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9qzwlgwp: /tmp/tmp9qzwlgwp.cpp:104: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n    std::string delimiter4\
    \ = \"!\";\n    std::string delimiter5 = \".\";\n    std::string delimiter6 =\
    \ \"?\";\n    std::string delimiter7 = \"!\";\n    std::string delimiter8 = \"\
    .\";\n    std::string delimiter9 = \"?\";\n    std::string delimiter10 = \"!\"\
    ;\n    std::string delimiter11 = \".\";\n    std::string delimiter12 = \"?\";\n\
    \    std::string delimiter13 = \"!\";\n    std::string delimiter14 = \".\";\n\
    \    std::string delimiter15 = \"?\";\n    std::string delimiter16 = \"!\";\n\
    \    std::string delimiter17 = \".\";\n    std::string delimiter18 = \"?\";\n\
    \    std::string delimiter19 = \"!\";\n    std::string delimiter20 = \".\";\n\
    \    std::string delimiter21 = \"?\";\n    std::string delimiter22 = \"!\";\n\
    \    std::string delimiter23 = \".\";\n    std::string delimiter24 = \"?\";\n\
    \    std::string delimiter25 = \"!\";\n    std::string delimiter26 = \".\";\n\
    \    std::string delimiter27 = \"?\";\n    std::string delimiter28 = \"!\";\n\
    \    std::string delimiter29 = \".\";\n    std::string delimiter30 = \"?\";\n\
    \    std::string delimiter31 = \"!\";\n    std::string delimiter32 = \".\";\n\
    \    std::string delimiter33 = \"?\";\n    std::string delimiter34 = \"!\";\n\
    \    std::string delimiter35 = \".\";\n    std::string delimiter36 = \"?\";\n\
    \    std::string delimiter37 = \"!\";\n    std::string delimiter38 = \".\";\n\
    \    std::string delimiter39 = \"?\";\n    std::string delimiter40 = \"!\";\n\
    \    std::string delimiter41 = \"!\";\n    std::string delimiter42 = \".\";\n\
    \    std::string delimiter43 = \"?\";\n    std::string delimiter44 = \"!\";\n\
    \    std::string delimiter45 = \".\";\n    std::string delimiter46 = \"?\";\n\
    \    std::string delimiter47 = \"!\";\n    std::string delimiter48 = \".\";\n\
    \    std::string delimiter49 = \"?\";\n    std::string delimiter50 = \"!\";\n\
    \    std::string delimiter51 = \"!\";\n    std::string delimiter52 = \".\";\n\
    \    std::string delimiter53 = \"?\";\n    std::string delimiter54 = \"!\";\n\
    \    std::string delimiter55 = \".\";\n    std::string delimiter56 = \"?\";\n\
    \    std::string delimiter57 = \"!\";\n    std::string delimiter58 = \".\";\n\
    \    std::string delimiter59 = \"?\";\n    std::string delimiter60 = \"!\";\n\
    \    std::string delimiter61 = \"!\";\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpeol3xpgz: /tmp/tmpeol3xpgz.cpp:79: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c : S) {\n        if (c == '.') {\n            boredoms\
    \ += 1;\n            word = \"\";\n        } else if (c == '?' || c == '!') {\n\
    \            boredoms += 1;\n            word += c;\n        } else if (c == 'I')\
    \ {\n            boredoms += 1;\n            word += c;\n        } else {\n  \
    \          word += c;\n        }\n    }\n    return boredoms;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmprn5dx_i1: /tmp/tmprn5dx_i1.cpp:33: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t\
    \ count = 0;\n    std::string temp;\n    while(pos < S.size()) {\n        pos\
    \ = S.find_first_of(delimiters, pos);\n        word = S.substr(pos, delimiters.size());\n\
    \        temp = S;\n        temp.erase(temp.begin() + pos);\n        temp.erase(temp.begin());\n\
    \        if(word == \"I\") {\n            boredoms += 1;\n        }\n        pos\
    \ = temp.find_first_of(delimiters, pos);\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 18446744073709551615) > this->size()\
    \ (which is 11)\n"
  stdout: ''
  timestamp: 1660094243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    for(int i =\
    \ 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpa4mngdxo: /tmp/tmpa4mngdxo.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiters_lower\
    \ = \".?!\";\n    std::string delimiters_upper = \".?!\";\n    std::string delimiters_mixed\
    \ = \".?!\";\n    std::string delimiters_mixed_upper = \".?!\";\n    std::string\
    \ delimiters_mixed_lower = \".?!\";\n    std::string delimiters_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_upper = \".?!\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper =\
    \ \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower = \"\
    .?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper =\
    \ \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hqju5cm.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp6hqju5cm.cpp:27:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_lower\u2019\
    \n   27 |     std::string delimiters_mixed_mixed_mixed_mixed_lower = \".?!\";\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6hqju5cm.cpp:25:17:\
    \ note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_lower\u2019 previously\
    \ declared here\n   25 |     std::string delimiters_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6hqju5cm.cpp:28:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \n   28 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper = \"\
    .?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6hqju5cm.cpp:26:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \ previously declared here\n   26 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6hqju5cm.cpp:34:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \n   34 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6hqju5cm.cpp:32:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \ previously declared here\n   32 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6hqju5cm.cpp:35:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \n   35 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tm"
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    for (size_t i = 0; i < S.size();\
    \ i++) {\n        word = S[i];\n        if (word.find(delimiters[0]) != std::string::npos)\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpng16te96: /tmp/tmpng16te96.cpp:27: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!'){\n            boredoms += 1;\n        }\n   \
    \ }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n \
    \   assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpd7b0vt8w: /tmp/tmpd7b0vt8w.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom = 0;\n    int i = 0;\n\
    \    while(i < S.size()) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            boredom++;\n        }\n        i++;\n    }\n    return boredom;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp013z_l7_: /tmp/tmp013z_l7_.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom = 0;\n    int i = 0;\n\
    \    while (i < S.size()) {\n        if (S[i] == '.') {\n            boredom++;\n\
    \        } else if (S[i] == '?') {\n            boredom++;\n        } else if\
    \ (S[i] == '!') {\n            boredom++;\n        }\n        i++;\n    }\n  \
    \  return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpkqxjfzi3: /tmp/tmpkqxjfzi3.cpp:29: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ count = 0;\n    for(int i = 0; i < S.length(); i++){\n        if(S[i] == 'I'){\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpesazyi0i: /tmp/tmpesazyi0i.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string delimiters = \".?!\";\n\
    \    std::string delimiters_lower = \"i.e\";\n    std::string delimiters_upper\
    \ = \"I.E\";\n    std::string delimiters_caps = \"I.E\";\n    std::string delimiters_caps_lower\
    \ = \"i.e\";\n    std::string delimiters_caps_upper = \"I.E\";\n    std::string\
    \ delimiters_caps_upper2 = \"I.E\";\n    std::string delimiters_caps_upper3 =\
    \ \"I.E\";\n    std::string delimiters_caps_upper4 = \"I.E\";\n    std::string\
    \ delimiters_caps_upper5 = \"I.E\";\n    std::string delimiters_caps_upper6 =\
    \ \"I.E\";\n    std::string delimiters_caps_upper7 = \"I.E\";\n    std::string\
    \ delimiters_caps_upper8 = \"I.E\";\n    std::string delimiters_caps_upper9 =\
    \ \"I.E\";\n    std::string delimiters_caps_upper10 = \"I.E\";\n    std::string\
    \ delimiters_caps_upper11 = \"I.E\";\n    std::string delimiters_caps_upper12\
    \ = \"I.E\";\n    std::string delimiters_caps_upper13 = \"I.E\";\n    std::string\
    \ delimiters_caps_upper14 = \"I.E\";\n    std::string delimiters_caps_upper15\
    \ = \"I.E\";\n    std::string delimiters_caps_upper16 = \"I.E\";\n    std::string\
    \ delimiters_caps_upper17 = \"I.E\";\n    std::string delimiters_caps_upper18\
    \ = \"I.E\";\n    std::string delimiters_caps_upper19 = \"I.E\";\n    std::string\
    \ delimiters_caps_upper20 = \"I.E\";\n    std::string delimiters_caps_upper21\
    \ = \"I.E\";\n    std::string delimiters_caps_upper22 = \"I.E\";\n    std::string\
    \ delimiters_caps_upper23 = \"I.E\";\n    std::string delimiters_caps_upper24\
    \ = \"I.E\";\n    std::string delimiters_caps_upper25 = \"I.E\";\n    std::string\
    \ delimiters_caps_upper26 = \"I.E\";\n    std::string delimiters_caps_upper27\
    \ = \"I.E\";\n    std::string delimiters_caps_upper28 = \"I.E\";\n    std::string\
    \ delimiters_caps_upper29 = \"I.E\";\n    std::string delimiters_caps_upper30\
    \ = \"I.E\";\n    std::string delimiters_caps_upper31 = \"I.E\";\n    std::string\
    \ delimiters_caps_upper32 = \"I.E\";\n    std::string delimiters_caps_upper33\
    \ = \"I.E\";\n    std::string delimiters_caps_upper34 = \"I.E\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_1oztkt3.cpp:53:43: warning: missing terminating \" character\n\
    \   53 |     std::string delimiters_caps_upper34 = \"I.E\n      |            \
    \                               ^\n/tmp/tmp_1oztkt3.cpp:53:43: error: missing\
    \ terminating \" character\n   53 |     std::string delimiters_caps_upper34 =\
    \ \"I.E\n      |                                           ^~~~\n/tmp/tmp_1oztkt3.cpp:\
    \ In function \u2018long int is_bored(std::string)\u2019:\n/tmp/tmp_1oztkt3.cpp:54:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   54 | }\n \
    \     | ^\n/tmp/tmp_1oztkt3.cpp:54:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmp_1oztkt3.cpp:54:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    std::string\
    \ temp;\n    while(pos < S.length()) {\n        word = S.substr(pos, delimiters.size());\n\
    \        temp = S;\n        temp = temp.substr(0, pos);\n        if(word == \"\
    I\") {\n            boredoms += 1;\n        }\n        pos = temp.find(delimiters,\
    \ pos);\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy_l76z_4: /tmp/tmpy_l76z_4.cpp:32: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &i : S) {\n        if (i == '.' || i == '?' || i == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnj8sujay: /tmp/tmpnj8sujay.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom = 0;\n    int i = 0;\n\
    \    while (i < S.size()) {\n        if (S[i] == '.') {\n            i++;\n  \
    \          while (i < S.size() && S[i] != '.') {\n                i++;\n     \
    \       }\n            if (i < S.size() && S[i] == '.') {\n                i++;\n\
    \                while (i < S.size() && S[i] != '.') {\n                    i++;\n\
    \                }\n                if (i < S.size() && S[i] == '.') {\n     \
    \               i++;\n                    while (i < S.size() && S[i] != '.')\
    \ {\n                        i++;\n                    }\n                   \
    \ if (i < S.size() && S[i] == '.') {\n                        i++;\n         \
    \               while (i < S.size() && S[i] != '.') {\n                      \
    \      i++;\n                        }\n                        if (i < S.size()\
    \ && S[i] == '.') {\n                            i++;\n                      \
    \      while (i < S.size() && S[i] != '.') {\n                               \
    \ i++;\n                            }\n                            if (i < S.size()\
    \ && S[i] == '.') {\n                                i++;\n                  \
    \              while (i < S.size() && S[i] != '.') {\n                       \
    \             i++;\n                                }\n                      \
    \          if (i < S.size() && S[i] == '.') {\n                              \
    \      i++;\n                                    while (i < S.size() && S[i] !=\
    \ '.') {\n                                        i++;\n                     \
    \               }\n                                    if (i < S.size() && S[i]\
    \ == '.') {\n                                        i++;\n                  \
    \                      while (i < S.size() && S[i] != '.') {\n               \
    \                             i++;\n                                        }\n\
    \                                        if (i < S.size() && S[i] == '.') {\n\
    \                                            i++;\n                          \
    \                  while (i < S.size() && S[i] != '.') {\n                   \
    \                             i++;\n                                         \
    \   }\n                                            if (i < S.size() && S[i] ==\
    \ '.') {\n                                                i++;\n             \
    \                                   while (i < S.size() && S[i] != '.') {\n  \
    \                                                  i++;\n                    \
    \                            }\n                                             \
    \   if (i < S.size() && S[i] == '.') {\n                                     \
    \               i++;\n                                                    while\
    \ (i < S.size() && S[i] != '.') {\n                                          \
    \              i++;\n                                                    }\n \
    \                                                   if (i < S.size() && S[i] ==\
    \ '.') {\n                                                        i++;\n     \
    \                                                   while (i < S.size() && S[i]\
    \ != '.') {\n                                                            i++;\n\
    \                                                        }\n                 \
    \                                       if (i < S.size() && S[i] == '.') {\n \
    \                                                           i++;\n           \
    \                                                 while (i < S.size() && S[i]\
    \ != '.') {\n                                                                i++;\n\
    \                                                            }\n             \
    \                                               if (i < S.size() && S[i] == '.')\
    \ {\n                                                                i++;\n  \
    \                                                              while (i < S.size()\
    \ && S[i] != '.') {\n                                                        \
    \            i++;\n                                                          \
    \      }\n                                                                if (i\
    \ < S.size() && S[i] == '.') {\n                                             \
    \                       i++;\n                                               \
    \                     while (\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcw5t3zmg.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpcw5t3zmg.cpp:88:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   88 | }\n      | ^\n/tmp/tmpcw5t3zmg.cpp:87:76: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   87 |                          \
    \                                           while (\n      |                 \
    \                                                          ~^\n      |       \
    \                                                                     )\n   88\
    \ | }\n      | ~                                                             \
    \              \n/tmp/tmpcw5t3zmg.cpp:88:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   88 | }\n      | ^\n/tmp/tmpcw5t3zmg.cpp:89:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   89 | int main() {\n      |            ^\n/tmp/tmpcw5t3zmg.cpp:97:1: error:\
    \ expected \u2018}\u2019 at end of input\n   97 | }\n      | ^\n/tmp/tmpcw5t3zmg.cpp:80:94:\
    \ note: to match this \u2018{\u2019\n   80 |                                 \
    \                            if (i < S.size() && S[i] == '.') {\n      |     \
    \                                                                            \
    \             ^\n/tmp/tmpcw5t3zmg.cpp:97:1: error: expected \u2018}\u2019 at end\
    \ of input\n   97 | }\n      | ^\n/tmp/tmpcw5t3zmg.cpp:75:90: note: to match this\
    \ \u2018{\u2019\n   75 |                                                     \
    \    if (i < S.size() && S[i] == '.') {\n      |                             \
    \                                                             ^\n/tmp/tmpcw5t3zmg.cpp:97:1:\
    \ error: expected \u2018}\u2019 at end of input\n   97 | }\n      | ^\n/tmp/tmpcw5t3zmg.cpp:70:86:\
    \ note: to match this \u2018{\u2019\n   70 |                                 \
    \                    if (i < S.size() && S[i] == '.') {\n      |             \
    \                                                                         ^\n\
    /tmp/tmpcw5t3zmg.cpp:97:1: error: expected \u2018}\u2019 at end of input\n   97\
    \ | }\n      | ^\n/tmp/tmpcw5t3zmg.cpp:65:82: note: to match this \u2018{\u2019\
    \n   65 |                                   "
  stdout: ''
  timestamp: 1660094243
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiters_lower\
    \ = \".?!\";\n    std::string delimiters_upper = \".?!\";\n    std::string delimiters_cap\
    \ = \".?!\";\n    std::string delimiters_lower = std::to_string(tolower(delimiters_lower));\n\
    \    std::string delimiters_upper = std::to_string(toupper(delimiters_upper));\n\
    \    std::string delimiters_cap = std::to_string(toupper(delimiters_cap));\n \
    \   std::string delimiters_lower = std::to_string(tolower(delimiters_lower));\n\
    \    std::string delimiters_upper = std::to_string(toupper(delimiters_upper));\n\
    \    std::string delimiters_cap = std::to_string(toupper(delimiters_cap));\n \
    \   std::string delimiters_lower = std::to_string(tolower(delimiters_lower));\n\
    \    std::string delimiters_upper = std::to_string(toupper(delimiters_upper));\n\
    \    std::string delimiters_cap = std::to_string(toupper(delimiters_cap));\n \
    \   std::string delimiters_lower = std::to_string(tolower(delimiters_lower));\n\
    \    std::string delimiters_upper = std::to_string(toupper(delimiters_upper));\n\
    \    std::string delimiters_cap = std::to_string(toupper(delimiters_cap));\n \
    \   std::string delimiters_lower = std::to_string(tolower(delimiters_lower));\n\
    \    std::string delimiters_upper = std::to_string(toupper(delimiters_upper));\n\
    \    std::string delimiters_cap = std::to_string(toupper(delimiters_cap));\n \
    \   std::string delimiters_lower = std::to_string(tolower(delimiters_lower));\n\
    \    std::string delimiters_upper = std::to_string(toupper(delimiters_upper));\n\
    \    std::string delimiters_cap = std::to_string(toupper(delimiters_cap));\n \
    \   std::string delimiters_lower = std::to_string(tolower(delimiters_lower));\n\
    \    std::string delimiters_upper = std::to_string(toupper(delimiters_upper));\n\
    \    std::string delimiters_cap = std::to_string(toupper(delimiters_cap));\n \
    \   std::string delimiters_lower = std::to_string(tolower(delimiters_lower));\n\
    \    std::string delimiters_upper = std::to_string(toupper(delimiters_upper));\n\
    \    std::string delimiters_cap = std::to_string(toupper(delimiters_cap));\n \
    \   std::string delimiters_lower = std::to_string(tolower(delimiters_lower));\n\
    \    std::string delimiters_upper = std::to_string(toupper(delimiters_upper));\n\
    \    std::string delimiters_cap = std::to_string(toupper(delimiters_cap));\n \
    \   std::string delimiters_lower = std::to_\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpor9ako9b.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpor9ako9b.cpp:18:17: error: redeclaration of \u2018std::string delimiters_lower\u2019\
    \n   18 |     std::string delimiters_lower = std::to_string(tolower(delimiters_lower));\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpor9ako9b.cpp:15:17: note: \u2018\
    std::string delimiters_lower\u2019 previously declared here\n   15 |     std::string\
    \ delimiters_lower = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpor9ako9b.cpp:18:75:\
    \ error: no matching function for call to \u2018tolower(std::string&)\u2019\n\
    \   18 |     std::string delimiters_lower = std::to_string(tolower(delimiters_lower));\n\
    \      |                                                                     \
    \      ^\nIn file included from /usr/include/c++/9/cctype:42,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n             \
    \    from /tmp/tmpor9ako9b.cpp:2:\n/usr/include/ctype.h:122:12: note: candidate:\
    \ \u2018int tolower(int)\u2019\n  122 | extern int tolower (int __c) __THROW;\n\
    \      |            ^~~~~~~\n/usr/include/ctype.h:122:25: note:   no known conversion\
    \ for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018int\u2019\n  122 | extern int tolower (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpor9ako9b.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2649:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const std::locale&)\u2019\
    \n 2649 |     tolower(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2649:5: note:   template argument deduction/substitution\
    \ fa"
  stdout: ''
  timestamp: 1660094243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    std::string word;\n    std::string boredom_word;\n    std::string\
    \ boredom_word_2;\n    std::string boredom_word_3;\n    std::string boredom_word_4;\n\
    \    std::string boredom_word_5;\n    std::string boredom_word_6;\n    std::string\
    \ boredom_word_7;\n    std::string boredom_word_8;\n    std::string boredom_word_9;\n\
    \    std::string boredom_word_10;\n    std::string boredom_word_11;\n    std::string\
    \ boredom_word_12;\n    std::string boredom_word_13;\n    std::string boredom_word_14;\n\
    \    std::string boredom_word_15;\n    std::string boredom_word_16;\n    std::string\
    \ boredom_word_17;\n    std::string boredom_word_18;\n    std::string boredom_word_19;\n\
    \    std::string boredom_word_20;\n    std::string boredom_word_21;\n    std::string\
    \ boredom_word_22;\n    std::string boredom_word_23;\n    std::string boredom_word_24;\n\
    \    std::string boredom_word_25;\n    std::string boredom_word_26;\n    std::string\
    \ boredom_word_27;\n    std::string boredom_word_28;\n    std::string boredom_word_29;\n\
    \    std::string boredom_word_30;\n    std::string boredom_word_31;\n    std::string\
    \ boredom_word_32;\n    std::string boredom_word_33;\n    std::string boredom_word_34;\n\
    \    std::string boredom_word_35;\n    std::string boredom_word_36;\n    std::string\
    \ boredom_word_37;\n    std::string boredom_word_38;\n    std::string boredom_word_39;\n\
    \    std::string boredom_word_40;\n    std::string boredom_word_41;\n    std::string\
    \ boredom_word_42;\n    std::string boredom_word_43;\n    std::string boredom_word_44;\n\
    \    std::string boredom_word_45;\n    std::string boredom_word_46;\n    std::string\
    \ boredom_word_47;\n    std::string boredom_word_48;\n    std::string boredom_word_49;\n\
    \    std::string boredom_word_50;\n    std::string boredom_word_51;\n    std::string\
    \ boredom_word_52;\n    std::string boredom_word_53;\n    std::string boredom_word_54;\n\
    \    std::string boredom_word_55;\n    std::string boredom_word_56;\n    std::string\
    \ boredom_word_57;\n    \n}\nint main() {\n    auto candidate = is_bored;\n  \
    \  assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmppbabe6g1: /tmp/tmppbabe6g1.cpp:76: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094245
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string temp;\n    size_t\
    \ pos = 0;\n    size_t i = 0;\n    size_t j = 0;\n    size_t k = 0;\n    size_t\
    \ l = 0;\n    size_t m = 0;\n    size_t n = 0;\n    size_t o = 0;\n    size_t\
    \ p = 0;\n    size_t q = 0;\n    size_t r = 0;\n    size_t s = 0;\n    size_t\
    \ t = 0;\n    size_t u = 0;\n    size_t v = 0;\n    size_t w = 0;\n    size_t\
    \ x = 0;\n    size_t y = 0;\n    size_t z = 0;\n    size_t A = 0;\n    size_t\
    \ B = 0;\n    size_t C = 0;\n    size_t D = 0;\n    size_t E = 0;\n    size_t\
    \ F = 0;\n    size_t G = 0;\n    size_t H = 0;\n    size_t I = 0;\n    size_t\
    \ J = 0;\n    size_t K = 0;\n    size_t L = 0;\n    size_t M = 0;\n    size_t\
    \ N = 0;\n    size_t O = 0;\n    size_t P = 0;\n    size_t Q = 0;\n    size_t\
    \ R = 0;\n    size_t S = 0;\n    size_t T = 0;\n    size_t U = 0;\n    size_t\
    \ V = 0;\n    size_t W = 0;\n    size_t X = 0;\n    size_t Y = 0;\n    size_t\
    \ Z = 0;\n    size_t a = 0;\n    size_t b = 0;\n    size_t c = 0;\n    size_t\
    \ d = 0;\n    size_t e = 0;\n    size_t f = 0;\n    size_t g = 0;\n    size_t\
    \ h = 0;\n    size_t i = 0;\n    size_t j = 0;\n    size_t k = 0;\n    size_t\
    \ l = 0;\n    size_t m = 0;\n    size_t n = 0;\n    size_t o = 0;\n    size_t\
    \ p = 0;\n    size_t q = 0;\n    size_t r = 0;\n    size_t s = 0;\n    size_t\
    \ t = 0;\n    size_t u = 0;\n    size_t v = 0;\n    size_t w = 0;\n    size_t\
    \ x = 0;\n    size_t y = 0;\n    size_t z = 0;\n    size_t A = 0;\n    size_t\
    \ B = 0;\n    size_t C = 0;\n    size_t D = 0;\n    size_t E = 0;\n    size_t\
    \ F = 0;\n    size_t G = 0;\n    size_t H = 0;\n    size_t I = 0;\n    size_t\
    \ J = 0;\n    size_t K = 0;\n    size_t L = 0;\n    size_t M = 0;\n    size_t\
    \ N = 0;\n    size_t O = 0;\n    size_t P = 0;\n    size_t Q = 0;\n    size_t\
    \ R = 0;\n    size_t S = 0;\n    size_t T = 0;\n    size_t U = 0;\n    size_t\
    \ V = 0;\n    size_t W = 0;\n    size_t X = 0;\n    size_t Y = 0;\n    size_t\
    \ Z = 0;\n    size_t a = 0;\n    size_t \n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpacn9fove.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpacn9fove.cpp:53:12: error: declaration of \u2018size_t S\u2019 shadows\
    \ a parameter\n   53 |     size_t S = 0;\n      |            ^\n/tmp/tmpacn9fove.cpp:69:12:\
    \ error: redeclaration of \u2018size_t i\u2019\n   69 |     size_t i = 0;\n  \
    \    |            ^\n/tmp/tmpacn9fove.cpp:17:12: note: \u2018size_t i\u2019 previously\
    \ declared here\n   17 |     size_t i = 0;\n      |            ^\n/tmp/tmpacn9fove.cpp:70:12:\
    \ error: redeclaration of \u2018size_t j\u2019\n   70 |     size_t j = 0;\n  \
    \    |            ^\n/tmp/tmpacn9fove.cpp:18:12: note: \u2018size_t j\u2019 previously\
    \ declared here\n   18 |     size_t j = 0;\n      |            ^\n/tmp/tmpacn9fove.cpp:71:12:\
    \ error: redeclaration of \u2018size_t k\u2019\n   71 |     size_t k = 0;\n  \
    \    |            ^\n/tmp/tmpacn9fove.cpp:19:12: note: \u2018size_t k\u2019 previously\
    \ declared here\n   19 |     size_t k = 0;\n      |            ^\n/tmp/tmpacn9fove.cpp:72:12:\
    \ error: redeclaration of \u2018size_t l\u2019\n   72 |     size_t l = 0;\n  \
    \    |            ^\n/tmp/tmpacn9fove.cpp:20:12: note: \u2018size_t l\u2019 previously\
    \ declared here\n   20 |     size_t l = 0;\n      |            ^\n/tmp/tmpacn9fove.cpp:73:12:\
    \ error: redeclaration of \u2018size_t m\u2019\n   73 |     size_t m = 0;\n  \
    \    |            ^\n/tmp/tmpacn9fove.cpp:21:12: note: \u2018size_t m\u2019 previously\
    \ declared here\n   21 |     size_t m = 0;\n      |            ^\n/tmp/tmpacn9fove.cpp:74:12:\
    \ error: redeclaration of \u2018size_t n\u2019\n   74 |     size_t n = 0;\n  \
    \    |            ^\n/tmp/tmpacn9fove.cpp:22:12: note: \u2018size_t n\u2019 previously\
    \ declared here\n   22 |     size_t n = 0;\n      |            ^\n/tmp/tmpacn9fove.cpp:75:12:\
    \ error: redeclaration of \u2018size_t o\u2019\n   75 |     size_t o = 0;\n  \
    \    |            ^\n/tmp/tmpacn9fove.cpp:23:12: note: \u2018size_t o\u2019 previously\
    \ declared here\n   23 |     size_t o = 0;\n      |            ^\n/tmp/tmpacn9fove.cpp:76:12:\
    \ error: redeclaration of \u2018size_t p\u2019\n   76 |     size_t p = 0;\n  \
    \    |            ^\n/tmp/tmpacn9fove.cpp:24:12: note: \u2018size_t p\u2019 previously\
    \ declared here\n   24 |    "
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ count = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_qcrlq84: /tmp/tmp_qcrlq84.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    std::string word;\n    std::string boredom;\n    for(int\
    \ i = 0; i < S.length(); i++) {\n        word = S.substr(i, 1);\n        if(word\
    \ == \".\" || word == \"?\" || word == \"!\") {\n            boredoms += 1;\n\
    \        }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6qwgt828: /tmp/tmp6qwgt828.cpp:27: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    for(int i = 0;\
    \ i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw4lcixf5: /tmp/tmpw4lcixf5.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    std::string word;\n    std::string boredom;\n    std::string\
    \ sentence;\n    std::string delimiter = \".?!\";\n    std::string delimiter2\
    \ = \".\";\n    std::string delimiter3 = \"?\";\n    std::string delimiter4 =\
    \ \"!\";\n    std::string delimiter5 = \".\";\n    std::string delimiter6 = \"\
    ?\";\n    std::string delimiter7 = \"!\";\n    std::string delimiter8 = \".\"\
    ;\n    std::string delimiter9 = \"?\";\n    std::string delimiter10 = \"!\";\n\
    \    std::string delimiter11 = \".\";\n    std::string delimiter12 = \"?\";\n\
    \    std::string delimiter13 = \"!\";\n    std::string delimiter14 = \".\";\n\
    \    std::string delimiter15 = \"?\";\n    std::string delimiter16 = \"!\";\n\
    \    std::string delimiter17 = \".\";\n    std::string delimiter18 = \"?\";\n\
    \    std::string delimiter19 = \"!\";\n    std::string delimiter20 = \".\";\n\
    \    std::string delimiter21 = \"?\";\n    std::string delimiter22 = \"!\";\n\
    \    std::string delimiter23 = \".\";\n    std::string delimiter24 = \"?\";\n\
    \    std::string delimiter25 = \"!\";\n    std::string delimiter26 = \".\";\n\
    \    std::string delimiter27 = \"?\";\n    std::string delimiter28 = \"!\";\n\
    \    std::string delimiter29 = \".\";\n    std::string delimiter30 = \"?\";\n\
    \    std::string delimiter31 = \"!\";\n    std::string delimiter32 = \".\";\n\
    \    std::string delimiter33 = \"?\";\n    std::string delimiter34 = \"!\";\n\
    \    std::string delimiter35 = \".\";\n    std::string delimiter36 = \"?\";\n\
    \    std::string delimiter37 = \"!\";\n    std::string delimiter38 = \".\";\n\
    \    std::string delimiter39 = \"?\";\n    std::string delimiter40 = \"!\";\n\
    \    std::string delimiter41 = \"!\";\n    std::string delimiter42 = \".\";\n\
    \    std::string delimiter43 = \"?\";\n    std::string delimiter44 = \"!\";\n\
    \    std::string delimiter45 = \".\";\n    std::string delimiter46 = \"?\";\n\
    \    std::string delimiter47 = \"!\";\n    std::string delimiter48 = \".\";\n\
    \    std::string delimiter49 = \"?\";\n    std::string delimiter50 = \"!\";\n\
    \    std::string delimiter51 = \"!\";\n    std::string delimiter52 = \".\";\n\
    \    std::string delimiter53 = \"?\";\n    std::string delimiter54 = \"!\";\n\
    \    std::string delimiter55 = \".\";\n    std::string delimiter56 = \"?\";\n\
    \    std::string delimiter57 = \"!\";\n    std::string delimiter58 = \".\";\n\
    \    std::string delimiter59 = \"?\";\n    std::string delimiter60 = \"!\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqxka9nuo.cpp:76:31: warning: missing terminating \" character\n\
    \   76 |     std::string delimiter60 = \"!\n      |                          \
    \     ^\n/tmp/tmpqxka9nuo.cpp:76:31: error: missing terminating \" character\n\
    \   76 |     std::string delimiter60 = \"!\n      |                          \
    \     ^~\n/tmp/tmpqxka9nuo.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpqxka9nuo.cpp:77:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   77 | }\n      | ^\n/tmp/tmpqxka9nuo.cpp:77:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpqxka9nuo.cpp:77:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (size_t i = 0; i < S.size(); i++) {\n        word = S[i];\n \
    \       if (word == \"I\") {\n            boredoms += 1;\n        }\n    }\n \
    \   return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmphnbiy297: /tmp/tmphnbiy297.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (size_t i = 0; i < S.size(); i++) {\n        word = S[i];\n \
    \       if (word == \"I\") {\n            boredoms++;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnrq_aue1: /tmp/tmpnrq_aue1.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n\
    \            boredom++;\n        }\n    }\n    return boredom;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_s10gvff: /tmp/tmp_s10gvff.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom = 0;\n    for(int i =\
    \ 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            boredom++;\n        }\n    }\n    return boredom;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpts1a504n: /tmp/tmpts1a504n.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    for (size_t i = 0; i < S.size(); i++)\
    \ {\n        word = S[i];\n        if (word == \".\" || word == \"?\" || word\
    \ == \"!\") {\n            boredoms += 1;\n        }\n    }\n    for (size_t i\
    \ = 0; i < S.size(); i++) {\n        word = S[i];\n        if (word == \"I\")\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpru2obqxq: /tmp/tmpru2obqxq.cpp:32: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n\
    \            boredom++;\n        }\n    }\n    return boredom;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_s10gvff: /tmp/tmp_s10gvff.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            boredoms++;\n        }\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp17a19xn9: /tmp/tmp17a19xn9.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom;\n    for (auto &i : S) {\n        if ((i ==\
    \ \".\") || (i == \"?\") || (i == \"!\")) {\n            boredom += i;\n     \
    \   } else {\n            word = i;\n        }\n    }\n    if (boredom.find(\"\
    I\") == 0) {\n        boredoms += 1;\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw3n3wqfn.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpw3n3wqfn.cpp:16:19: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   16 |         if ((i == \".\") || (i == \"?\"\
    ) || (i == \"!\")) {\n      |                   ^~~\n/tmp/tmpw3n3wqfn.cpp:16:33:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   16 |         if ((i == \".\") || (i == \"?\") || (i == \"!\")) {\n      |\
    \                                 ^~~\n/tmp/tmpw3n3wqfn.cpp:16:47: error: ISO\
    \ C++ forbids comparison between pointer and integer [-fpermissive]\n   16 | \
    \        if ((i == \".\") || (i == \"?\") || (i == \"!\")) {\n      |        \
    \                                       ^~~\n"
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!'){\n            boredom++;\n        }\n    }\n\
    \    return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpogh3bhbd: /tmp/tmpogh3bhbd.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiter = \" .?!\";\n    size_t pos = 0;\n    size_t\
    \ i = 0;\n    bool flag = false;\n    while(pos < S.size()) {\n        flag =\
    \ false;\n        pos = 0;\n        while(pos < S.size() && flag == false) {\n\
    \            pos = S.find(delimiter, pos);\n            if(pos == std::string::npos)\
    \ {\n                flag = true;\n            }\n            else {\n       \
    \         word = S.substr(pos, (pos - i));\n                if(word == \"I\")\
    \ {\n                    boredoms++;\n                }\n                i = pos;\n\
    \            }\n        }\n    }\n    return boredoms;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpyltgsdiy: /tmp/tmpyltgsdiy.cpp:41: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string::size_type pos\
    \ = 0;\n    std::string::size_type lastPos = 0;\n    std::string::size_type lastDelimiter\
    \ = 0;\n    std::string::size_type i = 0;\n    std::string::size_type j = 0;\n\
    \    std::string::size_type k = 0;\n    std::string::size_type l = 0;\n    std::string::size_type\
    \ m = 0;\n    std::string::size_type n = 0;\n    std::string::size_type o = 0;\n\
    \    std::string::size_type p = 0;\n    std::string::size_type q = 0;\n    std::string::size_type\
    \ r = 0;\n    std::string::size_type s = 0;\n    std::string::size_type t = 0;\n\
    \    std::string::size_type u = 0;\n    std::string::size_type v = 0;\n    std::string::size_type\
    \ w = 0;\n    std::string::size_type x = 0;\n    std::string::size_type y = 0;\n\
    \    std::string::size_type z = 0;\n    std::string::size_type A = 0;\n    std::string::size_type\
    \ B = 0;\n    std::string::size_type C = 0;\n    std::string::size_type D = 0;\n\
    \    std::string::size_type E = 0;\n    std::string::size_type F = 0;\n    std::string::size_type\
    \ G = 0;\n    std::string::size_type H = 0;\n    std::string::size_type I = 0;\n\
    \    std::string::size_type J = 0;\n    std::string::size_type K = 0;\n    std::string::size_type\
    \ L = 0;\n    std::string::size_type M = 0;\n    std::string::size_type N = 0;\n\
    \    std::string::size_type O = 0;\n    std::string::size_type P = 0;\n    std::string::size_type\
    \ Q = 0;\n    std::string::size_type R = 0;\n    std::string::size_type S = 0;\n\
    \    std::string::size_type T = 0;\n    std::string::size_type U = 0;\n    std::string::size_type\
    \ V = 0;\n    std::string::size_type W = 0;\n    std::string::size_type X = 0;\n\
    \    std::string::size_type Y = 0;\n    std::string::size_type Z = 0;\n    std::string::size_type\
    \ _ = 0;\n    std::string::size_type _1 = 0;\n    std::string::size_type _2 =\
    \ 1;\n    std::string::size_type _3 = 1;\n    std::string::size_type _4 = 2;\n\
    \    std::string::size_type _5 = 3;\n    std::string::size_type _6 = 6;\n    std::string::size_type\
    \ _7 = 4;\n    std::string::size_type _8 = 5;\n    std::string::size_type _9 =\
    \ 6;\n    std::string::size_type _10 = 7;\n    std::string::size_type _11 = 8;\n\
    \    std::string::size_type _12 = 9;\n    std::string::size_type \n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46av8ngq.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp46av8ngq.cpp:54:28: error: declaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ S\u2019 shadows a parameter\n   54 |     std::string::size_type S = 0;\n   \
    \   |                            ^\n/tmp/tmp46av8ngq.cpp:76:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   76 | }\n      | ^\n/tmp/tmp46av8ngq.cpp:76:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy7ejx2jf: /tmp/tmpy7ejx2jf.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::string temp;\n\
    \    temp = S;\n    while(temp != \"\"){\n        if(temp[0] == 'I'){\n      \
    \      count++;\n        }\n        temp = temp.substr(1);\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmprk_oqu_o: /tmp/tmprk_oqu_o.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiter = \".?!\";\n    size_t pos = 0;\n    size_t\
    \ count = 0;\n    while(pos < S.size()) {\n        word = S.substr(pos, 1);\n\
    \        pos = 0;\n        count = 0;\n        for(size_t i = 0; i < S.size();\
    \ i++) {\n            if(delimiter[i] == S[i]) {\n                count++;\n \
    \           }\n            if(delimiter[i] == word) {\n                pos = i\
    \ + 1;\n            }\n        }\n        if(count == 1) {\n            boredoms++;\n\
    \        }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0u5_3ajn.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp0u5_3ajn.cpp:25:29: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   25 |             if(delimiter[i] == word) {\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp0u5_3ajn.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp0u5_3ajn.cpp:25:32:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   25 |             if(delimiter[i] == word) {\n   \
    \   |                                ^~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp0u5_3ajn.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp0u5_3ajn.cpp:25:32: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ cha"
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    for (auto &c : S) {\n    \
    \    if (c == delimiters[0]) {\n            boredoms += 1;\n        }\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpck0077o2: /tmp/tmpck0077o2.cpp:26: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdh6rv_dz.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdh6rv_dz.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmpdh6rv_dz.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094241
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    std::string word;\n    std::string delimiter = \" .,?!\";\n\
    \    std::string delimiter2 = \".?!\";\n    std::string delimiter3 = \".?!.\"\
    ;\n    std::string delimiter4 = \".?!.?!\";\n    std::string delimiter5 = \".?!.?!.\"\
    ;\n    std::string delimiter6 = \".?!.?!.?!\";\n    std::string delimiter7 = \"\
    .?!.?!.?!.\";\n    std::string delimiter8 = \".?!.?!.?!.?!\";\n    std::string\
    \ delimiter9 = \".?!.?!.?!.?!.\";\n    std::string delimiter10 = \".?!.?!.?!.?!.?!\"\
    ;\n    std::string delimiter11 = \".?!.?!.?!.?!.?!.\";\n    std::string delimiter12\
    \ = \".?!.?!.?!.?!.?!.?!\";\n    std::string delimiter13 = \".?!.?!.?!.?!.?!.?!.\"\
    ;\n    std::string delimiter14 = \".?!.?!.?!.?!.?!.?!.?!\";\n    std::string delimiter15\
    \ = \".?!.?!.?!.?!.?!.?!.?!.\";\n    std::string delimiter16 = \".?!.?!.?!.?!.?!.?!.?!.?!\"\
    ;\n    std::string delimiter17 = \".?!.?!.?!.?!.?!.?!.?!.?!.\";\n    std::string\
    \ delimiter18 = \".?!.?!.?!.?!.?!.?!.?!.?!.?!\";\n    std::string delimiter19\
    \ = \".?!.?!.?!.?!.?!.?!.?!.?!.?!.\";\n    std::string delimiter20 = \".?!.?!.?!.?!.?!.?!.?!.?!.?!.?!\"\
    ;\n    std::string delimiter21 = \".?!.?!.?!.?!.?!.?!.?!.?!.?!.?!.\";\n    std::string\
    \ delimiter22\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqo13rjbg.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpqo13rjbg.cpp:37:1: error: expected initializer before \u2018}\u2019\
    \ token\n   37 | }\n      | ^\n/tmp/tmpqo13rjbg.cpp:37:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    for(int i =\
    \ 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpa4mngdxo: /tmp/tmpa4mngdxo.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n\
    \    for (auto &i : S) {\n        if (i == '.' || i == '?' || i == '!') {\n  \
    \          ans += 1;\n        }\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmprwrlvoy8: /tmp/tmprwrlvoy8.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    for (int i\
    \ = 0; i < S.size(); i++) {\n        if (S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!') {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpn5p2ebmj: /tmp/tmpn5p2ebmj.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word = \"I\";\n    std::string delimiter = \"\
    .?!\";\n    std::string delimiters = \". ? !\";\n    std::string delimiters_1\
    \ = \". ? !\";\n    std::string delimiters_2 = \". ? !\";\n    std::string delimiters_3\
    \ = \". ? !\";\n    std::string delimiters_4 = \". ? !\";\n    std::string delimiters_5\
    \ = \". ? !\";\n    std::string delimiters_6 = \". ? !\";\n    std::string delimiters_7\
    \ = \". ? !\";\n    std::string delimiters_8 = \". ? !\";\n    std::string delimiters_9\
    \ = \". ? !\";\n    std::string delimiters_10 = \". ? !\";\n    std::string delimiters_11\
    \ = \". ? !\";\n    std::string delimiters_12 = \". ? !\";\n    std::string delimiters_13\
    \ = \". ? !\";\n    std::string delimiters_14 = \". ? !\";\n    std::string delimiters_15\
    \ = \". ? !\";\n    std::string delimiters_16 = \". ? !\";\n    std::string delimiters_17\
    \ = \". ? !\";\n    std::string delimiters_18 = \". ? !\";\n    std::string delimiters_19\
    \ = \". ? !\";\n    std::string delimiters_20 = \". ? !\";\n    std::string delimiters_21\
    \ = \". ? !\";\n    std::string delimiters_22 = \". ? !\";\n    std::string delimiters_23\
    \ = \". ? !\";\n    std::string delimiters_24 = \". ? !\";\n    std::string delimiters_25\
    \ = \". ? !\";\n    std::string delimiters_26 = \". ? !\";\n    std::string delimiters_27\
    \ = \". ? !\";\n    std::string delimiters_28 = \". ? !\";\n    std::string delimiters_29\
    \ = \". ? !\";\n    std::string delimiters_30 = \". ? !\";\n    std::string delimiters_31\
    \ = \". ? !\";\n    std::string delimiters_32 = \". ? !\";\n    std::string delimiters_33\
    \ = \". ? !\";\n    std::string delimiters_34 = \". ? !\";\n    std::string delimiters_35\
    \ = \". ? !\";\n    std::string delimiters_36 = \". ? !\";\n    std::string delimiters_37\
    \ = \". ? !\";\n    std::string delimiters_38 = \". ? !\";\n    std::string delimiters_39\
    \ = \". ? !\";\n    std::string delimiters_40 = \". ? !\";\n    std::string delimiters_41\
    \ = \". ? !\";\n    std::string delimiters_42 = \". ? !\";\n    std::string delimiters_43\
    \ = \". \n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt4n_ng6v.cpp:59:33: warning: missing terminating \" character\n\
    \   59 |     std::string delimiters_43 = \".\n      |                        \
    \         ^\n/tmp/tmpt4n_ng6v.cpp:59:33: error: missing terminating \" character\n\
    \   59 |     std::string delimiters_43 = \".\n      |                        \
    \         ^~ \n/tmp/tmpt4n_ng6v.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpt4n_ng6v.cpp:60:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   60 | }\n      | ^\n/tmp/tmpt4n_ng6v.cpp:60:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpt4n_ng6v.cpp:60:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t\
    \ i = 0;\n    while(pos < S.length()) {\n        word = S.substr(pos, delimiters.length());\n\
    \        if(word == \"I\") {\n            boredoms++;\n        }\n        pos\
    \ = pos + delimiters.length();\n    }\n    return boredoms;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpbwg4uw4k: /tmp/tmpbwg4uw4k.cpp:30: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n  \
    \  }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2nexha7c: /tmp/tmp2nexha7c.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiters_lower\
    \ = \".?!\";\n    std::string delimiters_upper = \".?!\";\n    std::string delimiters_capital\
    \ = \".?!\";\n    std::string delimiters_mixed = \".?!\";\n    std::string delimiters_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_capital = \".?!\";\n    std::string delimiters_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_capital = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_lower = \".?!\";\n\
    \    std::string delimiters_mixed_mixed_mixed_capital = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_capital = \".?!\";\n\
    \    std::string delimiters_mixed_mixed_mixed_upper = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_lower = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_capital\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_upper = \".?!\";\n\
    \    std::string delimiters_mixed_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_capital = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_lower = \".?!\";\n\
    \    std::string delimiters_mixed_mixed_mixed_capital = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_capital = \".?!\";\n\
    \    std::string delimiters_mixed_mixed_mixed_upper = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_lower = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_capital\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_upper = \".?!\";\n\
    \    std::string delimiters_mixed_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_capital = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_lower = \".?\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd28a5ffu.cpp:50:54: warning: missing terminating \" character\n\
    \   50 |     std::string delimiters_mixed_mixed_mixed_lower = \".?\n      |  \
    \                                                    ^\n/tmp/tmpd28a5ffu.cpp:50:54:\
    \ error: missing terminating \" character\n   50 |     std::string delimiters_mixed_mixed_mixed_lower\
    \ = \".?\n      |                                                      ^~~\n/tmp/tmpd28a5ffu.cpp:\
    \ In function \u2018long int is_bored(std::string)\u2019:\n/tmp/tmpd28a5ffu.cpp:28:17:\
    \ error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_upper\u2019\
    \n   28 |     std::string delimiters_mixed_mixed_mixed_upper = \".?!\";\n    \
    \  |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd28a5ffu.cpp:25:17:\
    \ note: \u2018std::string delimiters_mixed_mixed_mixed_upper\u2019 previously\
    \ declared here\n   25 |     std::string delimiters_mixed_mixed_mixed_upper =\
    \ \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd28a5ffu.cpp:29:17:\
    \ error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_lower\u2019\
    \n   29 |     std::string delimiters_mixed_mixed_mixed_lower = \".?!\";\n    \
    \  |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd28a5ffu.cpp:26:17:\
    \ note: \u2018std::string delimiters_mixed_mixed_mixed_lower\u2019 previously\
    \ declared here\n   26 |     std::string delimiters_mixed_mixed_mixed_lower =\
    \ \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd28a5ffu.cpp:30:17:\
    \ error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_capital\u2019\
    \n   30 |     std::string delimiters_mixed_mixed_mixed_capital = \".?!\";\n  \
    \    |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd28a5ffu.cpp:27:17:\
    \ note: \u2018std::string delimiters_mixed_mixed_mixed_capital\u2019 previously\
    \ declared here\n   27 |     std::string delimiters_mixed_mixed_mixed_capital\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd28a5ffu.cpp:31:17:\
    \ error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_upper\u2019\
    \n   31 |     std::string delimiters_mixed_mixed_mixed"
  stdout: ''
  timestamp: 1660094244
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    std::string word;\n    std::string boredom;\n    std::string\
    \ delimiters = \".?!\";\n    std::string delimiters_lower = \"i.\";\n    std::string\
    \ delimiters_upper = \"I.\";\n    std::string delimiters_capital = \"I.\";\n \
    \   std::string delimiters_capital2 = \"I.\";\n    std::string delimiters_capital3\
    \ = \"I.\";\n    std::string delimiters_capital4 = \"I.\";\n    std::string delimiters_capital5\
    \ = \"I.\";\n    std::string delimiters_capital6 = \"I.\";\n    std::string delimiters_capital7\
    \ = \"I.\";\n    std::string delimiters_capital8 = \"I.\";\n    std::string delimiters_capital9\
    \ = \"I.\";\n    std::string delimiters_capital10 = \"I.\";\n    std::string delimiters_capital11\
    \ = \"I.\";\n    std::string delimiters_capital12 = \"I.\";\n    std::string delimiters_capital13\
    \ = \"I.\";\n    std::string delimiters_capital14 = \"I.\";\n    std::string delimiters_capital15\
    \ = \"I.\";\n    std::string delimiters_capital16 = \"I.\";\n    std::string delimiters_capital17\
    \ = \"I.\";\n    std::string delimiters_capital18 = \"I.\";\n    std::string delimiters_capital19\
    \ = \"I.\";\n    std::string delimiters_capital20 = \"I.\";\n    std::string delimiters_capital21\
    \ = \"I.\";\n    std::string delimiters_capital22 = \"I.\";\n    std::string delimiters_capital23\
    \ = \"I.\";\n    std::string delimiters_capital24 = \"I.\";\n    std::string delimiters_capital25\
    \ = \"I.\";\n    std::string delimiters_capital26 = \"I.\";\n    std::string delimiters_capital27\
    \ = \"I.\";\n    std::string delimiters_capital28 = \"I.\";\n    std::string delimiters_capital29\
    \ = \"I.\";\n    std::string delimiters_capital30 = \"I.\";\n    std::string delimiters_capital31\
    \ = \"I.\";\n    std::string delimiters_capital32 = \"I.\";\n    std::string delimiters_capital33\
    \ = \"I.\";\n    std::string delimiters_capital34 = \"I.\";\n    std::string delimiters_capital35\
    \ = \"I.\";\n    std::string delimiters_capital36 = \"I.\";\n    std::string delimiters_capital37\
    \ = \"I.\";\n    std::string delimiters_capital38 = \"I.\";\n    std::string delimiters_capital39\
    \ = \"I.\";\n    std::string delimiters_capital40 = \"I.\";\n    std::string delimiters_capital41\
    \ = \"I.\";\n    std::string delimiters_capital42 = \"\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkzql_yh_.cpp:60:40: warning: missing terminating \" character\n\
    \   60 |     std::string delimiters_capital42 = \"\n      |                  \
    \                      ^\n/tmp/tmpkzql_yh_.cpp:60:40: error: missing terminating\
    \ \" character\n/tmp/tmpkzql_yh_.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpkzql_yh_.cpp:61:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   61 | }\n      | ^\n/tmp/tmpkzql_yh_.cpp:61:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpkzql_yh_.cpp:61:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094243
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdh6rv_dz.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdh6rv_dz.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmpdh6rv_dz.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string sentence;\n    std::string delimiters = \".?!\";\n  \
    \  size_t pos = 0;\n    size_t i = 0;\n    while (pos < S.size()) {\n        word\
    \ = S.substr(pos, 1);\n        if (word == \"I\") {\n            boredoms += 1;\n\
    \        }\n        pos = pos + 1;\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpdo7rsk7_: /tmp/tmpdo7rsk7_.cpp:30: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    for (auto &c : S) {\n    \
    \    if (c == delimiters[0]) {\n            boredoms++;\n            word = S;\n\
    \        }\n        else if (c == delimiters[1]) {\n            boredoms++;\n\
    \            word = S;\n        }\n        else if (c == delimiters[2]) {\n  \
    \          boredoms++;\n            word = S;\n        }\n        else {\n   \
    \         word = word + c;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp99fzxc_j: /tmp/tmp99fzxc_j.cpp:37: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n\
    \            boredom++;\n        }\n    }\n    return boredom;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_s10gvff: /tmp/tmp_s10gvff.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094245
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdh6rv_dz.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdh6rv_dz.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmpdh6rv_dz.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094241
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiter = \".?!\";\n    std::string delimiter2 = \"\
    .\";\n    std::string delimiter3 = \"?\";\n    std::string delimiter4 = \"!\"\
    ;\n    std::string delimiter5 = \".\";\n    std::string delimiter6 = \"?\";\n\
    \    std::string delimiter7 = \"!\";\n    std::string delimiter8 = \".\";\n  \
    \  std::string delimiter9 = \"?\";\n    std::string delimiter10 = \"!\";\n   \
    \ std::string delimiter11 = \".\";\n    std::string delimiter12 = \"?\";\n   \
    \ std::string delimiter13 = \"!\";\n    std::string delimiter14 = \".\";\n   \
    \ std::string delimiter15 = \"?\";\n    std::string delimiter16 = \"!\";\n   \
    \ std::string delimiter17 = \".\";\n    std::string delimiter18 = \"?\";\n   \
    \ std::string delimiter19 = \"!\";\n    std::string delimiter20 = \".\";\n   \
    \ std::string delimiter21 = \"?\";\n    std::string delimiter22 = \"!\";\n   \
    \ std::string delimiter23 = \".\";\n    std::string delimiter24 = \"?\";\n   \
    \ std::string delimiter25 = \"!\";\n    std::string delimiter26 = \".\";\n   \
    \ std::string delimiter27 = \"?\";\n    std::string delimiter28 = \"!\";\n   \
    \ std::string delimiter29 = \".\";\n    std::string delimiter30 = \"?\";\n   \
    \ std::string delimiter31 = \"!\";\n    std::string delimiter32 = \".\";\n   \
    \ std::string delimiter33 = \"?\";\n    std::string delimiter34 = \"!\";\n   \
    \ std::string delimiter35 = \".\";\n    std::string delimiter36 = \"?\";\n   \
    \ std::string delimiter37 = \"!\";\n    std::string delimiter38 = \".\";\n   \
    \ std::string delimiter39 = \"?\";\n    std::string delimiter40 = \"!\";\n   \
    \ std::string delimiter41 = \"!\";\n    std::string delimiter42 = \".\";\n   \
    \ std::string delimiter43 = \"?\";\n    std::string delimiter44 = \"!\";\n   \
    \ std::string delimiter45 = \".\";\n    std::string delimiter46 = \"?\";\n   \
    \ std::string delimiter47 = \"!\";\n    std::string delimiter48 = \".\";\n   \
    \ std::string delimiter49 = \"?\";\n    std::string delimiter50 = \"!\";\n   \
    \ std::string delimiter51 = \"!\";\n    std::string delimiter52 = \".\";\n   \
    \ std::string delimiter53 = \"?\";\n    std::string delimiter54 = \"!\";\n   \
    \ std::string delimiter55 = \".\";\n    std::string delimiter56 = \"?\";\n   \
    \ std::string delimiter57 = \"!\";\n    std::string delimiter58 = \".\";\n   \
    \ std::string delimiter59 = \"?\";\n    std::string delimiter60 = \"!\";\n   \
    \ std::string delimiter61 = \"!\";\n    std::string delimiter62 = \".\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptz7m1jdu.cpp:75:31: warning: missing terminating \" character\n\
    \   75 |     std::string delimiter62 = \".\n      |                          \
    \     ^\n/tmp/tmptz7m1jdu.cpp:75:31: error: missing terminating \" character\n\
    \   75 |     std::string delimiter62 = \".\n      |                          \
    \     ^~\n/tmp/tmptz7m1jdu.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmptz7m1jdu.cpp:76:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   76 | }\n      | ^\n/tmp/tmptz7m1jdu.cpp:76:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmptz7m1jdu.cpp:76:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094244
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiter = \"\
    ,\";\n    std::string delimiter2 = \" \";\n    std::string delimiter3 = \".\"\
    ;\n    std::string delimiter4 = \"?\";\n    std::string delimiter5 = \"!\";\n\
    \    std::string delimiter6 = \".\";\n    std::string delimiter7 = \"?\";\n  \
    \  std::string delimiter8 = \"!\";\n    std::string delimiter9 = \".\";\n    std::string\
    \ delimiter10 = \"?\";\n    std::string delimiter11 = \"!\";\n    std::string\
    \ delimiter12 = \".\";\n    std::string delimiter13 = \"?\";\n    std::string\
    \ delimiter14 = \"!\";\n    std::string delimiter15 = \".\";\n    std::string\
    \ delimiter16 = \"?\";\n    std::string delimiter17 = \"!\";\n    std::string\
    \ delimiter18 = \".\";\n    std::string delimiter19 = \"?\";\n    std::string\
    \ delimiter20 = \"!\";\n    std::string delimiter21 = \",\";\n    std::string\
    \ delimiter22 = \" \";\n    std::string delimiter23 = \".\";\n    std::string\
    \ delimiter24 = \"?\";\n    std::string delimiter25 = \"!\";\n    std::string\
    \ delimiter26 = \".\";\n    std::string delimiter27 = \"?\";\n    std::string\
    \ delimiter28 = \"!\";\n    std::string delimiter29 = \".\";\n    std::string\
    \ delimiter30 = \"?\";\n    std::string delimiter31 = \"!\";\n    std::string\
    \ delimiter32 = \".\";\n    std::string delimiter33 = \"?\";\n    std::string\
    \ delimiter34 = \"!\";\n    std::string delimiter35 = \".\";\n    std::string\
    \ delimiter36 = \"?\";\n    std::string delimiter37 = \"!\";\n    std::string\
    \ delimiter38 = \".\";\n    std::string delimiter39 = \"?\";\n    std::string\
    \ delimiter40 = \"!\";\n    std::string delimiter41 = \",\";\n    std::string\
    \ delimiter42 = \".\";\n    std::string delimiter43 = \"?\";\n    std::string\
    \ delimiter44 = \"!\";\n    std::string delimiter45 = \".\";\n    std::string\
    \ delimiter46 = \"?\";\n    std::string delimiter47 = \"!\";\n    std::string\
    \ delimiter48 = \".\";\n    std::string delimiter49 = \"?\";\n    std::string\
    \ delimiter50 = \"!\";\n    std::string delimiter51 = \",\";\n    std::string\
    \ delimiter52 = \".\";\n    std::string delimiter53 = \"?\";\n    std::string\
    \ delimiter54 = \"!\";\n    std::string delimiter55 = \".\";\n    std::string\
    \ delimiter56 = \"?\";\n    std::string delimiter57 = \"!\";\n    std::string\
    \ delimiter58 = \".\";\n    std::string delimiter59 = \"?\";\n    std::string\
    \ delimiter60 = \"!\";\n    std::string delimiter61 = \",\";\n    std::string\
    \ delimiter62\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ql80vd5.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp0ql80vd5.cpp:77:1: error: expected initializer before \u2018}\u2019\
    \ token\n   77 | }\n      | ^\n/tmp/tmp0ql80vd5.cpp:77:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094244
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t\
    \ count = 0;\n    while(pos < S.size()) {\n        word = S.substr(pos, 1);\n\
    \        pos = S.find(delimiters, pos);\n        if(pos != std::string::npos)\
    \ {\n            boredoms += 1;\n        }\n        pos = pos + 1;\n    }\n  \
    \  return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660094249
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for(int i = 0; i < S.size(); i++) {\n        word = S[i];\n     \
    \   if(word == \"I\") {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmppocq6sub: /tmp/tmppocq6sub.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdh6rv_dz.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdh6rv_dz.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmpdh6rv_dz.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter1 = \"I\";\n    std::string delimiter2 = \"the\";\n    std::string\
    \ delimiter3 = \"a\";\n    std::string delimiter4 = \"bore\";\n    std::string\
    \ delimiter5 = \"of\";\n    std::string delimiter6 = \"a\";\n    std::string delimiter7\
    \ = \"bore\";\n    std::string delimiter8 = \"of\";\n    std::string delimiter9\
    \ = \"a\";\n    std::string delimiter10 = \"bore\";\n    std::string delimiter11\
    \ = \"of\";\n    std::string delimiter12 = \"a\";\n    std::string delimiter13\
    \ = \"bore\";\n    std::string delimiter14 = \"of\";\n    std::string delimiter15\
    \ = \"a\";\n    std::string delimiter16 = \"bore\";\n    std::string delimiter17\
    \ = \"of\";\n    std::string delimiter18 = \"a\";\n    std::string delimiter19\
    \ = \"bore\";\n    std::string delimiter20 = \"of\";\n    std::string delimiter21\
    \ = \"a\";\n    std::string delimiter22 = \"bore\";\n    std::string delimiter23\
    \ = \"of\";\n    std::string delimiter24 = \"a\";\n    std::string delimiter25\
    \ = \"bore\";\n    std::string delimiter26 = \"of\";\n    std::string delimiter27\
    \ = \"a\";\n    std::string delimiter28 = \"bore\";\n    std::string delimiter29\
    \ = \"of\";\n    std::string delimiter30 = \"a\";\n    std::string delimiter31\
    \ = \"bore\";\n    std::string delimiter32 = \"of\";\n    std::string delimiter33\
    \ = \"a\";\n    std::string delimiter34 = \"bore\";\n    std::string delimiter35\
    \ = \"of\";\n    std::string delimiter36 = \"a\";\n    std::string delimiter37\
    \ = \"bore\";\n    std::string delimiter38 = \"of\";\n    std::string delimiter39\
    \ = \"a\";\n    std::string delimiter40 = \"bore\";\n    std::string delimiter41\
    \ = \"of\";\n    std::string delimiter42 = \"a\";\n    std::string delimiter43\
    \ = \"bore\";\n    std::string delimiter44 = \"of\";\n    std::string delimiter45\
    \ = \"a\";\n    std::string delimiter46 = \"bore\";\n    std::string delimiter47\
    \ = \"of\";\n    std::string delimiter48 = \"a\";\n    std::string delimiter49\
    \ = \"bore\";\n    std::string delimiter50 = \"of\";\n    std::string delimiter51\
    \ = \"a\";\n    std::string delimiter52 = \"bore\";\n    std::string delimiter53\
    \ = \"of\";\n    std::string delimiter54 = \"a\";\n    std::string delimiter55\
    \ = \"bore\";\n    std::string delimiter56 = \"of\";\n    std::string delimiter57\
    \ = \"a\";\n    std::string delimiter58 = \"bore\";\n\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpj_3euura: /tmp/tmpj_3euura.cpp:78: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    std::string word;\n    for(int i = 0; i < S.length(); i++){\n\
    \        if(S[i] == '.'){\n            boredoms += 1;\n        }\n        if(S[i]\
    \ == '?'){\n            boredoms += 1;\n        }\n        if(S[i] == '!'){\n\
    \            boredoms += 1;\n        }\n        if(S[i] == 'I'){\n           \
    \ boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main() {\n  \
    \  auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpbh63s3_y: /tmp/tmpbh63s3_y.cpp:34: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t\
    \ i = 0;\n    while ((pos = S.find(delimiters, pos)) != std::string::npos) {\n\
    \        word = S.substr(pos, delimiters.size());\n        if (word == \"I\")\
    \ {\n            boredoms++;\n        }\n        pos = pos + delimiters.size();\n\
    \        i++;\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpvkdbuh_d: /tmp/tmpvkdbuh_d.cpp:31: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom;\n    for (auto &i : S) {\n        if (i == '.'\
    \ || i == '?' || i == '!') {\n            boredom += i;\n        } else {\n  \
    \          word += i;\n        }\n    }\n    if (boredom == \"I\") {\n       \
    \ boredoms += 1;\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp99t0ktua: /tmp/tmp99t0ktua.cpp:31: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    for(int i =\
    \ 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpa4mngdxo: /tmp/tmpa4mngdxo.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0;\n    for(int i = 0;\
    \ i < S.size(); i++) {\n        if(S[i] == '.') {\n            count++;\n    \
    \    }\n        if(S[i] == '?') {\n            count++;\n        }\n        if(S[i]\
    \ == '!') {\n            count++;\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp7j29d_ef: /tmp/tmp7j29d_ef.cpp:29: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094245
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdh6rv_dz.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdh6rv_dz.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmpdh6rv_dz.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094241
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdh6rv_dz.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdh6rv_dz.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmpdh6rv_dz.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094241
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word = \"I\";\n    std::string delimiter = \"\
    .?!\";\n    std::string delimiter2 = \" \";\n    std::string delimiter3 = \" \"\
    ;\n    std::string delimiter4 = \" \";\n    std::string delimiter5 = \" \";\n\
    \    std::string delimiter6 = \" \";\n    std::string delimiter7 = \" \";\n  \
    \  std::string delimiter8 = \" \";\n    std::string delimiter9 = \" \";\n    std::string\
    \ delimiter10 = \" \";\n    std::string delimiter11 = \" \";\n    std::string\
    \ delimiter12 = \" \";\n    std::string delimiter13 = \" \";\n    std::string\
    \ delimiter14 = \" \";\n    std::string delimiter15 = \" \";\n    std::string\
    \ delimiter16 = \" \";\n    std::string delimiter17 = \" \";\n    std::string\
    \ delimiter18 = \" \";\n    std::string delimiter19 = \" \";\n    std::string\
    \ delimiter20 = \" \";\n    std::string delimiter21 = \" \";\n    std::string\
    \ delimiter22 = \" \";\n    std::string delimiter23 = \" \";\n    std::string\
    \ delimiter24 = \" \";\n    std::string delimiter25 = \" \";\n    std::string\
    \ delimiter26 = \" \";\n    std::string delimiter27 = \" \";\n    std::string\
    \ delimiter28 = \" \";\n    std::string delimiter29 = \" \";\n    std::string\
    \ delimiter30 = \" \";\n    std::string delimiter31 = \" \";\n    std::string\
    \ delimiter32 = \" \";\n    std::string delimiter33 = \" \";\n    std::string\
    \ delimiter34 = \" \";\n    std::string delimiter35 = \" \";\n    std::string\
    \ delimiter36 = \" \";\n    std::string delimiter37 = \" \";\n    std::string\
    \ delimiter38 = \" \";\n    std::string delimiter39 = \" \";\n    std::string\
    \ delimiter40 = \" \";\n    std::string delimiter41 = \" \";\n    std::string\
    \ delimiter42 = \" \";\n    std::string delimiter43 = \" \";\n    std::string\
    \ delimiter44 = \" \";\n    std::string delimiter45 = \" \";\n    std::string\
    \ delimiter46 = \" \";\n    std::string delimiter47 = \" \";\n    std::string\
    \ delimiter48 = \" \";\n    std::string delimiter49 = \" \";\n    std::string\
    \ delimiter50 = \" \";\n    std::string delimiter51 = \" \";\n    std::string\
    \ delimiter52 = \" \";\n    std::string delimiter53 = \" \";\n    std::string\
    \ delimiter54 = \" \";\n    std::string delimiter55 = \" \";\n    std::string\
    \ delimiter56 = \" \";\n    std::string delimiter57 = \" \";\n    std::string\
    \ delimiter58 = \" \";\n    std::string delimiter59 = \" \";\n    std::string\
    \ delimiter60 = \" \";\n    std::string delimiter61 = \" \";\n    std::string\
    \ delimiter62 = \" \";\n    std::string delimiter6\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0_9c6sf5.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp0_9c6sf5.cpp:78:1: error: expected initializer before \u2018}\u2019\
    \ token\n   78 | }\n      | ^\n/tmp/tmp0_9c6sf5.cpp:78:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094244
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdh6rv_dz.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdh6rv_dz.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmpdh6rv_dz.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    for (size_t i = 0; i < S.size();\
    \ i++) {\n        word = S[i];\n        if (word.compare(0, 2, \"I\") == 0) {\n\
    \            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpjid651y5: /tmp/tmpjid651y5.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n    std::string delimiter4\
    \ = \"!\";\n    std::string delimiter5 = \".?!\";\n    std::string delimiter6\
    \ = \".\";\n    std::string delimiter7 = \"?\";\n    std::string delimiter8 =\
    \ \"!\";\n    std::string delimiter9 = \".?!\";\n    std::string delimiter10 =\
    \ \".\";\n    std::string delimiter11 = \"?\";\n    std::string delimiter12 =\
    \ \"!\";\n    std::string delimiter13 = \".?!\";\n    std::string delimiter14\
    \ = \".\";\n    std::string delimiter15 = \"?\";\n    std::string delimiter16\
    \ = \"!\";\n    std::string delimiter17 = \".?!\";\n    std::string delimiter18\
    \ = \".\";\n    std::string delimiter19 = \"?\";\n    std::string delimiter20\
    \ = \"!\";\n    std::string delimiter21 = \"?!\";\n    std::string delimiter22\
    \ = \".\";\n    std::string delimiter23 = \"?\";\n    std::string delimiter24\
    \ = \"!\";\n    std::string delimiter25 = \".?!\";\n    std::string delimiter26\
    \ = \".\";\n    std::string delimiter27 = \"?\";\n    std::string delimiter28\
    \ = \"!\";\n    std::string delimiter29 = \".?!\";\n    std::string delimiter30\
    \ = \".\";\n    std::string delimiter31 = \"?\";\n    std::string delimiter32\
    \ = \"!\";\n    std::string delimiter33 = \".?!\";\n    std::string delimiter34\
    \ = \".\";\n    std::string delimiter35 = \"?\";\n    std::string delimiter36\
    \ = \"!\";\n    std::string delimiter37 = \".?!\";\n    std::string delimiter38\
    \ = \".\";\n    std::string delimiter39 = \"?\";\n    std::string delimiter40\
    \ = \"!\";\n    std::string delimiter41 = \"?!\";\n    std::string delimiter42\
    \ = \".\";\n    std::string delimiter43 = \"?\";\n    std::string delimiter44\
    \ = \"!\";\n    std::string delimiter45 = \".?!\";\n    std::string delimiter46\
    \ = \".\";\n    std::string delimiter47 = \"?\";\n    std::string delimiter48\
    \ = \"!\";\n    std::string delimiter49 = \".?!\";\n    std::string delimiter50\
    \ = \".\";\n    std::string delimiter51 = \"?\";\n    std::string delimiter52\
    \ = \"!\";\n    std::string delimiter53 = \".?!\";\n    std::string delimiter54\
    \ = \".\";\n    std::string delimiter55 = \"?\";\n    std::string delimiter56\
    \ = \"!\";\n    std::string delimiter57 = \".?!\";\n    std::string delimiter58\
    \ = \".\";\n\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpah3wbo6x: /tmp/tmpah3wbo6x.cpp:77: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    std::string word;\n    std::string sentence;\n    std::stringstream\
    \ ss(S);\n    while (std::getline(ss, sentence, '.'))\n    {\n        std::istringstream\
    \ iss(sentence);\n        while (std::getline(iss, word, '.'))\n        {\n  \
    \          if (word == \"I\")\n            {\n                boredoms++;\n  \
    \          }\n        }\n    }\n    return boredoms;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp63f2qtao: /tmp/tmp63f2qtao.cpp:34: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094246
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    std::string word;\n    std::string sentence;\n    std::string\
    \ delimiters = \".?!\";\n    size_t pos = 0;\n    size_t count = 0;\n    while(pos\
    \ < S.length()) {\n        word = S.substr(pos, 1);\n        pos = S.find(delimiters,\
    \ pos);\n        sentence = S.substr(0, pos);\n        if(word == \"I\") {\n \
    \           boredom++;\n        }\n        pos = pos + 1;\n    }\n    return boredom;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660094251
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t\
    \ i = 0;\n    while(pos < S.size()) {\n        word = S.substr(pos, delimiters.size());\n\
    \        pos = word.find_first_of(delimiters);\n        if(pos != std::string::npos)\
    \ {\n            word = word.substr(0, pos);\n            if(word == \"I\") {\n\
    \                boredoms++;\n            }\n        }\n        i++;\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpuz9z7wbs: /tmp/tmpuz9z7wbs.cpp:34: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094246
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n    std::string delimiter4\
    \ = \"!\";\n    std::string delimiter5 = \".\";\n    std::string delimiter6 =\
    \ \"?\";\n    std::string delimiter7 = \"!\";\n    std::string delimiter8 = \"\
    .\";\n    std::string delimiter9 = \"?\";\n    std::string delimiter10 = \"!\"\
    ;\n    std::string delimiter11 = \".\";\n    std::string delimiter12 = \"?\";\n\
    \    std::string delimiter13 = \"!\";\n    std::string delimiter14 = \".\";\n\
    \    std::string delimiter15 = \"?\";\n    std::string delimiter16 = \"!\";\n\
    \    std::string delimiter17 = \".\";\n    std::string delimiter18 = \"?\";\n\
    \    std::string delimiter19 = \"!\";\n    std::string delimiter20 = \".\";\n\
    \    std::string delimiter21 = \"?\";\n    std::string delimiter22 = \"!\";\n\
    \    std::string delimiter23 = \".\";\n    std::string delimiter24 = \"?\";\n\
    \    std::string delimiter25 = \"!\";\n    std::string delimiter26 = \".\";\n\
    \    std::string delimiter27 = \"?\";\n    std::string delimiter28 = \"!\";\n\
    \    std::string delimiter29 = \".\";\n    std::string delimiter30 = \"?\";\n\
    \    std::string delimiter31 = \"!\";\n    std::string delimiter32 = \".\";\n\
    \    std::string delimiter33 = \"?\";\n    std::string delimiter34 = \"!\";\n\
    \    std::string delimiter35 = \".\";\n    std::string delimiter36 = \"?\";\n\
    \    std::string delimiter37 = \"!\";\n    std::string delimiter38 = \".\";\n\
    \    std::string delimiter39 = \"?\";\n    std::string delimiter40 = \"!\";\n\
    \    std::string delimiter41 = \"!\";\n    std::string delimiter42 = \".\";\n\
    \    std::string delimiter43 = \"?\";\n    std::string delimiter44 = \"!\";\n\
    \    std::string delimiter45 = \".\";\n    std::string delimiter46 = \"?\";\n\
    \    std::string delimiter47 = \"!\";\n    std::string delimiter48 = \".\";\n\
    \    std::string delimiter49 = \"?\";\n    std::string delimiter50 = \"!\";\n\
    \    std::string delimiter51 = \"!\";\n    std::string delimiter52 = \".\";\n\
    \    std::string delimiter53 = \"?\";\n    std::string delimiter54 = \"!\";\n\
    \    std::string delimiter55 = \".\";\n    std::string delimiter56 = \"?\";\n\
    \    std::string delimiter57 = \"!\";\n    std::string delimiter58 = \".\";\n\
    \    std::string delimiter59 = \"?\";\n    std::string delimiter60 = \"!\";\n\
    \    std::string delimiter61 = \"!\";\n    std::string \n}\nint main() {\n   \
    \ auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd82862hv.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpd82862hv.cpp:77:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   77 | }\n      | ^\n/tmp/tmpd82862hv.cpp:77:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string word;\n\
    \    for(auto &i : S) {\n        if(i == '.' || i == '?' || i == '!') {\n    \
    \        ans += 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpye454b6p: /tmp/tmpye454b6p.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word = \"I\";\n    std::string delimiter = \"\
    .?!\";\n    std::string delimiter1 = \"I\";\n    std::string delimiter2 = \".\"\
    ;\n    std::string delimiter3 = \".\";\n    std::string delimiter4 = \".\";\n\
    \    std::string delimiter5 = \".\";\n    std::string delimiter6 = \".\";\n  \
    \  std::string delimiter7 = \".\";\n    std::string delimiter8 = \".\";\n    std::string\
    \ delimiter9 = \".\";\n    std::string delimiter10 = \".\";\n    std::string delimiter11\
    \ = \".\";\n    std::string delimiter12 = \".\";\n    std::string delimiter13\
    \ = \".\";\n    std::string delimiter14 = \".\";\n    std::string delimiter15\
    \ = \".\";\n    std::string delimiter16 = \".\";\n    std::string delimiter17\
    \ = \".\";\n    std::string delimiter18 = \".\";\n    std::string delimiter19\
    \ = \".\";\n    std::string delimiter20 = \".\";\n    std::string delimiter21\
    \ = \".\";\n    std::string delimiter22 = \".\";\n    std::string delimiter23\
    \ = \".\";\n    std::string delimiter24 = \".\";\n    std::string delimiter25\
    \ = \".\";\n    std::string delimiter26 = \".\";\n    std::string delimiter27\
    \ = \".\";\n    std::string delimiter28 = \".\";\n    std::string delimiter29\
    \ = \".\";\n    std::string delimiter30 = \".\";\n    std::string delimiter31\
    \ = \".\";\n    std::string delimiter32 = \".\";\n    std::string delimiter33\
    \ = \".\";\n    std::string delimiter34 = \".\";\n    std::string delimiter35\
    \ = \".\";\n    std::string delimiter36 = \".\";\n    std::string delimiter37\
    \ = \".\";\n    std::string delimiter38 = \".\";\n    std::string delimiter39\
    \ = \".\";\n    std::string delimiter40 = \".\";\n    std::string delimiter41\
    \ = \".\";\n    std::string delimiter42 = \".\";\n    std::string delimiter43\
    \ = \".\";\n    std::string delimiter44 = \".\";\n    std::string delimiter45\
    \ = \".\";\n    std::string delimiter46 = \".\";\n    std::string delimiter47\
    \ = \".\";\n    std::string delimiter48 = \".\";\n    std::string delimiter49\
    \ = \".\";\n    std::string delimiter50 = \".\";\n    std::string delimiter51\
    \ = \".\";\n    std::string delimiter52 = \".\";\n    std::string delimiter53\
    \ = \".\";\n    std::string delimiter54 = \".\";\n    std::string delimiter55\
    \ = \".\";\n    std::string delimiter56 = \".\";\n    std::string delimiter57\
    \ = \".\";\n    std::string delimiter58 = \".\";\n    std::string delimiter59\
    \ = \".\";\n    std::string delimiter60 = \".\";\n    \n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp218cvi_n: /tmp/tmp218cvi_n.cpp:80: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ count = 0;\n    for(int i=0;i<S.size();i++){\n        if(S[i] == 'I'){\n   \
    \         count++;\n        }\n    }\n    return count;\n}\nint main() {\n   \
    \ auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqroamo4r: /tmp/tmpqroamo4r.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    std::string word;\n    for(int i = 0; i < S.length(); i++)\
    \ {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            boredom++;\n\
    \        }\n    }\n    return boredom;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpbg8rqndr: /tmp/tmpbg8rqndr.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    for (auto &c : S) {\n    \
    \    if (c == delimiters[0]) {\n            boredoms++;\n            word = c;\n\
    \        }\n        else if (c == delimiters[1]) {\n            boredoms++;\n\
    \            word = c;\n        }\n        else if (c == delimiters[2]) {\n  \
    \          boredoms++;\n            word = c;\n        }\n        else if (c ==\
    \ delimiters[3]) {\n            boredoms++;\n            word = c;\n        }\n\
    \        else if (c == delimiters[4]) {\n            boredoms++;\n           \
    \ word = c;\n        }\n        else if (c == delimiters[5]) {\n            boredoms++;\n\
    \            word = c;\n        }\n        else if (c == delimiters[6]) {\n  \
    \          boredoms++;\n            word = c;\n        }\n        else if (c ==\
    \ delimiters[7]) {\n            boredoms++;\n            word = c;\n        }\n\
    \        else if (c == delimiters[8]) {\n            boredoms++;\n           \
    \ word = c;\n        }\n        else if (c == delimiters[9]) {\n            boredoms++;\n\
    \            word = c;\n        }\n        else if (c == delimiters[10]) {\n \
    \           boredoms++;\n            word = c;\n        }\n        else if (c\
    \ == delimiters[11]) {\n            boredoms++;\n            word = c;\n     \
    \   }\n        else if (c == delimiters[12]) {\n            boredoms++;\n    \
    \        word = c;\n        }\n        else if (c == delimiters[13]) {\n     \
    \       boredoms++;\n            word = c;\n        }\n        else if (c == delimiters[14])\
    \ {\n            boredoms++;\n            word = c;\n        }\n        else if\
    \ (c == delimiters[15]) {\n            boredoms++;\n            word = c;\n  \
    \      }\n        else if (c == delimiters[16]) {\n            boredoms++;\n \
    \           word = c;\n        }\n        else if (c == delimiters[17]) {\n  \
    \          boredoms++;\n            word = c;\n        }\n        else if (c ==\
    \ delimiters[18]) {\n            boredoms++;\n            word = c;\n        }\n\
    \        else if (c == delimiters[19]) {\n            boredoms++;\n          \
    \  word = c;\n        }\n        else if (c == delimiters[20]) {\n           \
    \ boredoms++;\n            word = c;\n        }\n        else if (c == delimiters[21])\
    \ {\n            boredoms++;\n            word = c;\n        }\n        else if\
    \ (c == delimiters[22]) {\n            boredoms++;\n            word = c;\n  \
    \      }\n        else if (c == delimiters[23]) {\n            boredoms++;\n \
    \           word = c;\n        }\n        else if (c == delimiters[24\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdrvtohju.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdrvtohju.cpp:112:36: error: expected \u2018]\u2019 before \u2018}\u2019\
    \ token\n  112 |         else if (c == delimiters[24\n      |                \
    \                    ^\n      |                                    ]\n  113 |\
    \ }\n      | ~                                   \n/tmp/tmpdrvtohju.cpp:112:36:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  112 |         else\
    \ if (c == delimiters[24\n      |                 ~                  ^\n     \
    \ |                                    )\n  113 | }\n      | ~               \
    \                    \n/tmp/tmpdrvtohju.cpp:113:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  113 | }\n      | ^\n/tmp/tmpdrvtohju.cpp:114:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  114 | int main() {\n      |            ^\n/tmp/tmpdrvtohju.cpp:122:1: error:\
    \ expected \u2018}\u2019 at end of input\n  122 | }\n      | ^\n/tmp/tmpdrvtohju.cpp:11:30:\
    \ note: to match this \u2018{\u2019\n   11 | long is_bored(std::string S) {\n\
    \      |                              ^\n/tmp/tmpdrvtohju.cpp:122:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n  122 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660094246
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string sentence;\n    std::string::size_type pos;\n    std::string::size_type\
    \ i;\n    std::string::size_type j;\n    std::string::size_type k;\n    std::string::size_type\
    \ l;\n    std::string::size_type m;\n    std::string::size_type n;\n    std::string::size_type\
    \ o;\n    std::string::size_type p;\n    std::string::size_type q;\n    std::string::size_type\
    \ r;\n    std::string::size_type s;\n    std::string::size_type t;\n    std::string::size_type\
    \ u;\n    std::string::size_type v;\n    std::string::size_type w;\n    std::string::size_type\
    \ x;\n    std::string::size_type y;\n    std::string::size_type z;\n    std::string::size_type\
    \ A;\n    std::string::size_type B;\n    std::string::size_type C;\n    std::string::size_type\
    \ D;\n    std::string::size_type E;\n    std::string::size_type F;\n    std::string::size_type\
    \ G;\n    std::string::size_type H;\n    std::string::size_type I;\n    std::string::size_type\
    \ J;\n    std::string::size_type K;\n    std::string::size_type L;\n    std::string::size_type\
    \ M;\n    std::string::size_type N;\n    std::string::size_type O;\n    std::string::size_type\
    \ P;\n    std::string::size_type Q;\n    std::string::size_type R;\n    std::string::size_type\
    \ S;\n    std::string::size_type T;\n    std::string::size_type U;\n    std::string::size_type\
    \ V;\n    std::string::size_type W;\n    std::string::size_type X;\n    std::string::size_type\
    \ Y;\n    std::string::size_type Z;\n    std::string::size_type A;\n    std::string::size_type\
    \ B;\n    std::string::size_type C;\n    std::string::size_type D;\n    std::string::size_type\
    \ E;\n    std::string::size_type F;\n    std::string::size_type G;\n    std::string::size_type\
    \ H;\n    std::string::size_type I;\n    std::string::size_type J;\n    std::string::size_type\
    \ K;\n    std::string::size_type L;\n    std::string::size_type M;\n    std::string::size_type\
    \ N;\n    std::string::size_type O;\n    std::string::size_type P;\n    std::string::size_type\
    \ Q;\n    std::string::size_type R;\n    std::string::size_type S;\n    \n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl8a8fksh.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpl8a8fksh.cpp:52:28: error: declaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ S\u2019 shadows a parameter\n   52 |     std::string::size_type S;\n      |\
    \                            ^\n/tmp/tmpl8a8fksh.cpp:60:28: error: redeclaration\
    \ of \u2018std::__cxx11::basic_string<char>::size_type A\u2019\n   60 |     std::string::size_type\
    \ A;\n      |                            ^\n/tmp/tmpl8a8fksh.cpp:34:28: note:\
    \ \u2018std::__cxx11::basic_string<char>::size_type A\u2019 previously declared\
    \ here\n   34 |     std::string::size_type A;\n      |                       \
    \     ^\n/tmp/tmpl8a8fksh.cpp:61:28: error: redeclaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ B\u2019\n   61 |     std::string::size_type B;\n      |                    \
    \        ^\n/tmp/tmpl8a8fksh.cpp:35:28: note: \u2018std::__cxx11::basic_string<char>::size_type\
    \ B\u2019 previously declared here\n   35 |     std::string::size_type B;\n  \
    \    |                            ^\n/tmp/tmpl8a8fksh.cpp:62:28: error: redeclaration\
    \ of \u2018std::__cxx11::basic_string<char>::size_type C\u2019\n   62 |     std::string::size_type\
    \ C;\n      |                            ^\n/tmp/tmpl8a8fksh.cpp:36:28: note:\
    \ \u2018std::__cxx11::basic_string<char>::size_type C\u2019 previously declared\
    \ here\n   36 |     std::string::size_type C;\n      |                       \
    \     ^\n/tmp/tmpl8a8fksh.cpp:63:28: error: redeclaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ D\u2019\n   63 |     std::string::size_type D;\n      |                    \
    \        ^\n/tmp/tmpl8a8fksh.cpp:37:28: note: \u2018std::__cxx11::basic_string<char>::size_type\
    \ D\u2019 previously declared here\n   37 |     std::string::size_type D;\n  \
    \    |                            ^\n/tmp/tmpl8a8fksh.cpp:64:28: error: redeclaration\
    \ of \u2018std::__cxx11::basic_string<char>::size_type E\u2019\n   64 |     std::string::size_type\
    \ E;\n      |                            ^\n/tmp/tmpl8a8fksh.cpp:38:28: note:\
    \ \u2018std::__cxx11::basic_string<char>::size_type E\u2019 previously declared\
    \ here\n   38 |     std::string::size"
  stdout: ''
  timestamp: 1660094246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiter = \"\
    ,\";\n    std::string delimiter2 = \" \";\n    std::string delimiter3 = \" \"\
    ;\n    std::string delimiter4 = \" \";\n    std::string delimiter5 = \" \";\n\
    \    std::string delimiter6 = \" \";\n    std::string delimiter7 = \" \";\n  \
    \  std::string delimiter8 = \" \";\n    std::string delimiter9 = \" \";\n    std::string\
    \ delimiter10 = \" \";\n    std::string delimiter11 = \" \";\n    std::string\
    \ delimiter12 = \" \";\n    std::string delimiter13 = \" \";\n    std::string\
    \ delimiter14 = \" \";\n    std::string delimiter15 = \" \";\n    std::string\
    \ delimiter16 = \" \";\n    std::string delimiter17 = \" \";\n    std::string\
    \ delimiter18 = \" \";\n    std::string delimiter19 = \" \";\n    std::string\
    \ delimiter20 = \" \";\n    std::string delimiter21 = \" \";\n    std::string\
    \ delimiter22 = \" \";\n    std::string delimiter23 = \" \";\n    std::string\
    \ delimiter24 = \" \";\n    std::string delimiter25 = \" \";\n    std::string\
    \ delimiter26 = \" \";\n    std::string delimiter27 = \" \";\n    std::string\
    \ delimiter28 = \" \";\n    std::string delimiter29 = \" \";\n    std::string\
    \ delimiter30 = \" \";\n    std::string delimiter31 = \" \";\n    std::string\
    \ delimiter32 = \" \";\n    std::string delimiter33 = \" \";\n    std::string\
    \ delimiter34 = \" \";\n    std::string delimiter35 = \" \";\n    std::string\
    \ delimiter36 = \" \";\n    std::string delimiter37 = \" \";\n    std::string\
    \ delimiter38 = \" \";\n    std::string delimiter39 = \" \";\n    std::string\
    \ delimiter40 = \" \";\n    std::string delimiter41 = \" \";\n    std::string\
    \ delimiter42 = \" \";\n    std::string delimiter43 = \" \";\n    std::string\
    \ delimiter44 = \" \";\n    std::string delimiter45 = \" \";\n    std::string\
    \ delimiter46 = \" \";\n    std::string delimiter47 = \" \";\n    std::string\
    \ delimiter48 = \" \";\n    std::string delimiter49 = \" \";\n    std::string\
    \ delimiter50 = \" \";\n    std::string delimiter51 = \" \";\n    std::string\
    \ delimiter52 = \" \";\n    std::string delimiter53 = \" \";\n    std::string\
    \ delimiter54 = \" \";\n    std::string delimiter55 = \" \";\n    std::string\
    \ delimiter56 = \" \";\n    std::string delimiter57 = \" \";\n    std::string\
    \ delimiter58 = \" \";\n    std::string delimiter59 = \" \";\n    std::string\
    \ delimiter60 = \" \";\n    std::string delimiter61 = \" \";\n    std::string\
    \ delimiter62 = \" \";\n    std::string delimiter63 = \" \";\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_u1o5amj: /tmp/tmp_u1o5amj.cpp:81: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &i : S) {\n        if (i == '.' || i == '?' || i == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnj8sujay: /tmp/tmpnj8sujay.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string sentence;\n    std::stringstream ss(S);\n    while(std::getline(ss,\
    \ sentence, '.')){\n        word = sentence;\n        std::cout << word << std::endl;\n\
    \        if(word == \"I\"){\n            boredoms += 1;\n        }\n    }\n  \
    \  return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp4hthhouz: /tmp/tmp4hthhouz.cpp:29: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: 'Hello world

    Is the sky blue?

    I love It !

    '
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!')\
    \ {\n            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy7ejx2jf: /tmp/tmpy7ejx2jf.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            boredom++;\n        }\n    }\n\
    \    return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_g5viq00: /tmp/tmp_g5viq00.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (size_t i = 0; i < S.size(); i++) {\n        if (S[i] == '.')\
    \ {\n            boredoms += 1;\n        }\n        if (S[i] == '?') {\n     \
    \       boredoms += 1;\n        }\n        if (S[i] == '!') {\n            boredoms\
    \ += 1;\n        }\n        if (S[i] == 'I') {\n            boredoms += 1;\n \
    \       }\n        if (S[i] == 'I') {\n            boredoms += 1;\n        }\n\
    \        if (S[i] == 'I') {\n            boredoms += 1;\n        }\n        if\
    \ (S[i] == 'I') {\n            boredoms += 1;\n        }\n        if (S[i] ==\
    \ 'I') {\n            boredoms += 1;\n        }\n        if (S[i] == 'I') {\n\
    \            boredoms += 1;\n        }\n        if (S[i] == 'I') {\n         \
    \   boredoms += 1;\n        }\n        if (S[i] == 'I') {\n            boredoms\
    \ += 1;\n        }\n        if (S[i] == 'I') {\n            boredoms += 1;\n \
    \       }\n        if (S[i] == 'I') {\n            boredoms += 1;\n        }\n\
    \        if (S[i] == 'I') {\n            boredoms += 1;\n        }\n        if\
    \ (S[i] == 'I') {\n            boredoms += 1;\n        }\n        if (S[i] ==\
    \ 'I') {\n            boredoms += 1;\n        }\n        if (S[i] == 'I') {\n\
    \            boredoms += 1;\n        }\n        if (S[i] == 'I') {\n         \
    \   boredoms += 1;\n        }\n        if (S[i] == 'I') {\n            boredoms\
    \ += 1;\n        }\n        if (S[i] == 'I') {\n            boredoms += 1;\n \
    \       }\n        if (S[i] == 'I') {\n            boredoms += 1;\n        }\n\
    \        if (S[i] == 'I') {\n            boredoms += 1;\n        }\n        if\
    \ (S[i] == 'I') {\n            boredoms += 1;\n        }\n        if (S[i] ==\
    \ 'I') {\n            boredoms += 1;\n        }\n        if (S[i] == 'I') {\n\
    \            boredoms += 1;\n        }\n        if (S[i] == 'I') {\n         \
    \   boredoms += 1;\n        }\n        if (S[i] == 'I') {\n            boredoms\
    \ += 1;\n        }\n        if (S[i] == 'I') {\n            boredoms += 1;\n \
    \       }\n        if (S[i] == 'I') {\n            boredoms += 1;\n        }\n\
    \        if (S[i] == 'I') {\n            boredoms += 1;\n        }\n        if\
    \ (S[i] == 'I') {\n            boredoms += 1;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphpqfo9ny.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmphpqfo9ny.cpp:108:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  108 | int main() {\n      |            ^\n/tmp/tmphpqfo9ny.cpp:116:1:\
    \ error: expected \u2018}\u2019 at end of input\n  116 | }\n      | ^\n/tmp/tmphpqfo9ny.cpp:14:43:\
    \ note: to match this \u2018{\u2019\n   14 |     for (size_t i = 0; i < S.size();\
    \ i++) {\n      |                                           ^\n/tmp/tmphpqfo9ny.cpp:116:1:\
    \ error: expected \u2018}\u2019 at end of input\n  116 | }\n      | ^\n/tmp/tmphpqfo9ny.cpp:11:30:\
    \ note: to match this \u2018{\u2019\n   11 | long is_bored(std::string S) {\n\
    \      |                              ^\n/tmp/tmphpqfo9ny.cpp:116:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n  116 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660094246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string delimiters = \".?!\";\n\
    \    std::string delimiters_reversed = \"\";\n    for (size_t i = 0; i < S.size();\
    \ i++) {\n        word = S[i];\n        boredom_word = word;\n        for (size_t\
    \ j = 0; j < delimiters.size(); j++) {\n            if (boredom_word.find(delimiters[j])\
    \ != std::string::npos) {\n                boredom_word = boredom_word.substr(0,\
    \ boredom_word.find(delimiters[j]));\n            }\n        }\n        if (boredom_word\
    \ == \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpandmutgu: /tmp/tmpandmutgu.cpp:34: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".\";\n    std::string delimiter3 = \".?!\";\n    std::string\
    \ delimiter4 = \".\";\n    std::string delimiter5 = \".?!\";\n    std::string\
    \ delimiter6 = \".\";\n    std::string delimiter7 = \".?!\";\n    std::string\
    \ delimiter8 = \".\";\n    std::string delimiter9 = \".?!\";\n    std::string\
    \ delimiter10 = \".\";\n    std::string delimiter11 = \".?!\";\n    std::string\
    \ delimiter12 = \".\";\n    std::string delimiter13 = \".?!\";\n    std::string\
    \ delimiter14 = \".\";\n    std::string delimiter15 = \".?!\";\n    std::string\
    \ delimiter16 = \".\";\n    std::string delimiter17 = \".?!\";\n    std::string\
    \ delimiter18 = \".\";\n    std::string delimiter19 = \".?!\";\n    std::string\
    \ delimiter20 = \".\";\n    std::string delimiter21 = \".?!\";\n    std::string\
    \ delimiter22 = \".\";\n    std::string delimiter23 = \".?!\";\n    std::string\
    \ delimiter24 = \".\";\n    std::string delimiter25 = \".?!\";\n    std::string\
    \ delimiter26 = \".\";\n    std::string delimiter27 = \".?!\";\n    std::string\
    \ delimiter28 = \".\";\n    std::string delimiter29 = \".?!\";\n    std::string\
    \ delimiter30 = \".\";\n    std::string delimiter31 = \".?!\";\n    std::string\
    \ delimiter32 = \".\";\n    std::string delimiter33 = \".?!\";\n    std::string\
    \ delimiter34 = \".\";\n    std::string delimiter35 = \".?!\";\n    std::string\
    \ delimiter36 = \".\";\n    std::string delimiter37 = \".?!\";\n    std::string\
    \ delimiter38 = \".\";\n    std::string delimiter39 = \".?!\";\n    std::string\
    \ delimiter40 = \".\";\n    std::string delimiter41 = \".?!\";\n    std::string\
    \ delimiter42 = \".\";\n    std::string delimiter43 = \".?!\";\n    std::string\
    \ delimiter44 = \".\";\n    std::string delimiter45 = \".?!\";\n    std::string\
    \ delimiter46 = \".\";\n    std::string delimiter47 = \".?!\";\n    std::string\
    \ delimiter48 = \".\";\n    std::string delimiter49 = \".?!\";\n    std::string\
    \ delimiter50 = \".\";\n    std::string delimiter51 = \".?!\";\n    std::string\
    \ delimiter52 = \".\";\n    std::string delimiter53 = \".?!\";\n    std::string\
    \ delimiter54 = \".\";\n    std::string delimiter55 = \".?!\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb2toqspq.cpp:69:31: warning: missing terminating \" character\n\
    \   69 |     std::string delimiter55 = \".?!\n      |                        \
    \       ^\n/tmp/tmpb2toqspq.cpp:69:31: error: missing terminating \" character\n\
    \   69 |     std::string delimiter55 = \".?!\n      |                        \
    \       ^~~~\n/tmp/tmpb2toqspq.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpb2toqspq.cpp:70:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   70 | }\n      | ^\n/tmp/tmpb2toqspq.cpp:70:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpb2toqspq.cpp:70:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.') {\n\
    \            boredoms += 1;\n        }\n        if(S[i] == '?') {\n          \
    \  boredoms += 1;\n        }\n        if(S[i] == '!') {\n            boredoms\
    \ += 1;\n        }\n        if(S[i] == 'I') {\n            boredoms += 1;\n  \
    \      }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpuvuohx56: /tmp/tmpuvuohx56.cpp:33: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiter = \"\
    ,\";\n    std::string delimiter1 = \"I\";\n    std::string delimiter2 = \"the\"\
    ;\n    std::string delimiter3 = \"a\";\n    std::string delimiter4 = \"bore\"\
    ;\n    std::string delimiter5 = \"of\";\n    std::string delimiter6 = \"the\"\
    ;\n    std::string delimiter7 = \"sky\";\n    std::string delimiter8 = \"is\"\
    ;\n    std::string delimiter9 = \"blue\";\n    std::string delimiter10 = \"the\"\
    ;\n    std::string delimiter11 = \"sun\";\n    std::string delimiter12 = \"is\"\
    ;\n    std::string delimiter13 = \"shining\";\n    std::string delimiter14 = \"\
    I\";\n    std::string delimiter15 = \"love\";\n    std::string delimiter16 = \"\
    this\";\n    std::string delimiter17 = \"weather\";\n    std::string delimiter18\
    \ = \".\";\n    std::string delimiter19 = \".\";\n    std::string delimiter20\
    \ = \".\";\n    std::string delimiter21 = \"!\";\n    std::string delimiter22\
    \ = \".\";\n    std::string delimiter23 = \".\";\n    std::string delimiter24\
    \ = \".\";\n    std::string delimiter25 = \".\";\n    std::string delimiter26\
    \ = \".\";\n    std::string delimiter27 = \".\";\n    std::string delimiter28\
    \ = \".\";\n    std::string delimiter29 = \".\";\n    std::string delimiter30\
    \ = \".\";\n    std::string delimiter31 = \".\";\n    std::string delimiter32\
    \ = \".\";\n    std::string delimiter33 = \".\";\n    std::string delimiter34\
    \ = \".\";\n    std::string delimiter35 = \".\";\n    std::string delimiter36\
    \ = \".\";\n    std::string delimiter37 = \".\";\n    std::string delimiter38\
    \ = \".\";\n    std::string delimiter39 = \".\";\n    std::string delimiter40\
    \ = \".\";\n    std::string delimiter41 = \".\";\n    std::string delimiter42\
    \ = \".\";\n    std::string delimiter43 = \".\";\n    std::string delimiter44\
    \ = \".\";\n    std::string delimiter45 = \".\";\n    std::string delimiter46\
    \ = \".\";\n    std::string delimiter47 = \".\";\n    std::string delimiter48\
    \ = \".\";\n    std::string delimiter49 = \".\";\n    std::string delimiter50\
    \ = \".\";\n    std::string delimiter51 = \".\";\n    std::string delimiter52\
    \ = \".\";\n    std::string delimiter53 = \".\";\n    std::string delimiter54\
    \ = \".\";\n    std::string delimiter55 = \".\";\n    std::string delimiter56\
    \ = \".\";\n    std::string delimiter57 = \".\";\n    std::string delimiter58\
    \ = \".\";\n    std::string delimiter59 = \".\";\n    std::string delimiter60\
    \ = \".\";\n    \n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpkinv9fgh: /tmp/tmpkinv9fgh.cpp:80: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            boredoms++;\n        }\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp17a19xn9: /tmp/tmp17a19xn9.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!')\
    \ {\n            boredoms += 1;\n        }\n        if (c == ' ') {\n        \
    \    word = \"\";\n        }\n        else {\n            word += c;\n       \
    \ }\n    }\n    if (boredoms == 0) {\n        boredoms = 1;\n    }\n    if (word\
    \ == \"I\") {\n        boredoms += 1;\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmzsnd3i5: /tmp/tmpmzsnd3i5.cpp:35: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n\
    \            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp73nu3oco: /tmp/tmp73nu3oco.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiters_lower\
    \ = \".?!\";\n    std::string delimiters_upper = \".?!\";\n    std::string delimiters_caps\
    \ = \"...!\";\n    std::string delimiters_caps_lower = \"...!\";\n    std::string\
    \ delimiters_caps_upper = \"...!\";\n    std::string delimiters_caps_all = \"\
    ...!\";\n    std::string delimiters_caps_all_lower = \"...!\";\n    std::string\
    \ delimiters_caps_all_upper = \"...!\";\n    std::string delimiters_caps_all_all\
    \ = \"...!\";\n    std::string delimiters_caps_all_all_lower = \"...!\";\n   \
    \ std::string delimiters_caps_all_all_upper = \"...!\";\n    std::string delimiters_caps_all_all_all\
    \ = \"...!\";\n    std::string delimiters_caps_all_all_all_lower = \"...!\";\n\
    \    std::string delimiters_caps_all_all_all_upper = \"...!\";\n    std::string\
    \ delimiters_caps_all_all_all_all = \"...!\";\n    std::string delimiters_caps_all_all_all_all_lower\
    \ = \"...!\";\n    std::string delimiters_caps_all_all_all_all_upper = \"...!\"\
    ;\n    std::string delimiters_caps_all_all_all_all_all = \"...!\";\n    std::string\
    \ delimiters_caps_all_all_all_all_all_lower = \"...!\";\n    std::string delimiters_caps_all_all_all_all_all_upper\
    \ = \"...!\";\n    std::string delimiters_caps_all_all_all_all_all_all = \"...!\"\
    ;\n    std::string delimiters_caps_all_all_all_all_all_all_lower = \"...!\";\n\
    \    std::string delimiters_caps_all_all_all_all_all_all_upper = \"...!\";\n \
    \   std::string delimiters_caps_all_all_all_all_all_all_all = \"...!\";\n    std::string\
    \ delimiters_caps_all_all_all_all_all_all_all_lower = \"...!\";\n    std::string\
    \ delimiters_caps_all_all_all_all_all_all_all_upper = \"...!\";\n    std::string\
    \ delimiters_caps_all_all_all_all_all_all_all_all = \"...!\";\n    std::string\
    \ delimiters_caps_all_all_all_all_all_all_all_all_lower = \"...!\";\n    std::string\
    \ delimiters_caps_all_all_all_all_all_all_all_all_upper = \"...!\";\n    std::string\
    \ delimiters_caps_all_all_all_all_all_all_all_all_all = \"...!\";\n    std::string\
    \ delimiters_caps_all_all_all_all_all_all_all_all_all_lower = \"...!\";\n    std::string\
    \ delimiters_caps_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr_rkccse.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpr_rkccse.cpp:47:1: error: expected initializer before \u2018}\u2019\
    \ token\n   47 | }\n      | ^\n/tmp/tmpr_rkccse.cpp:47:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094246
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string temp;\n    size_t\
    \ pos = 0;\n    size_t i = 0;\n    size_t j = 0;\n    size_t k = 0;\n    size_t\
    \ l = 0;\n    size_t m = 0;\n    size_t n = 0;\n    size_t o = 0;\n    size_t\
    \ p = 0;\n    size_t q = 0;\n    size_t r = 0;\n    size_t s = 0;\n    size_t\
    \ t = 0;\n    size_t u = 0;\n    size_t v = 0;\n    size_t w = 0;\n    size_t\
    \ x = 0;\n    size_t y = 0;\n    size_t z = 0;\n    size_t A = 0;\n    size_t\
    \ B = 0;\n    size_t C = 0;\n    size_t D = 0;\n    size_t E = 0;\n    size_t\
    \ F = 0;\n    size_t G = 0;\n    size_t H = 0;\n    size_t I = 0;\n    size_t\
    \ J = 0;\n    size_t K = 0;\n    size_t L = 0;\n    size_t M = 0;\n    size_t\
    \ N = 0;\n    size_t O = 0;\n    size_t P = 0;\n    size_t Q = 0;\n    size_t\
    \ R = 0;\n    size_t S = 0;\n    size_t T = 0;\n    size_t U = 0;\n    size_t\
    \ V = 0;\n    size_t W = 0;\n    size_t X = 0;\n    size_t Y = 0;\n    size_t\
    \ Z = 0;\n    size_t a = 0;\n    size_t b = 0;\n    size_t c = 0;\n    size_t\
    \ d = 0;\n    size_t e = 0;\n    size_t f = 0;\n    size_t g = 0;\n    size_t\
    \ h = 0;\n    size_t i = 0;\n    size_t j = 0;\n    size_t k = 0;\n    size_t\
    \ l = 0;\n    size_t m = 0;\n    size_t n = 0;\n    size_t o = 0;\n    size_t\
    \ p = 0;\n    size_t q = 0;\n    size_t r = 0;\n    size_t s = 0;\n    size_t\
    \ t = 0;\n    size_t u = 0;\n    size_t v = 0;\n    size_t w = 0;\n    size_t\
    \ x = 0;\n    size_t y = 0;\n    size_t z = 0;\n    size_t A = 0;\n    size_t\
    \ B = 0;\n    size_t C = 0;\n    size_t D = 0;\n    size_t E = 0;\n    size_t\
    \ F = 0;\n    size_t G = 0;\n    size_t H = 0;\n    size_t I = 0;\n    size_t\
    \ J = 0;\n    size_t K = 0;\n    size_t L = 0;\n    size_t M = 0;\n    size_t\
    \ N = 0;\n    size_t O = 0;\n    size_t P = 0;\n    size_t Q = 0;\n    size_t\
    \ R = 0;\n    size_t S = 0;\n    size_t T = 0;\n    size_t U = 0;\n    size_t\
    \ V = 0;\n    size_t W = 0;\n    size_t X = 0;\n    size_t Y = 0;\n    size_t\
    \ Z = 0;\n    size_t a = 0;\n    size_t \n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpacn9fove.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpacn9fove.cpp:53:12: error: declaration of \u2018size_t S\u2019 shadows\
    \ a parameter\n   53 |     size_t S = 0;\n      |            ^\n/tmp/tmpacn9fove.cpp:69:12:\
    \ error: redeclaration of \u2018size_t i\u2019\n   69 |     size_t i = 0;\n  \
    \    |            ^\n/tmp/tmpacn9fove.cpp:17:12: note: \u2018size_t i\u2019 previously\
    \ declared here\n   17 |     size_t i = 0;\n      |            ^\n/tmp/tmpacn9fove.cpp:70:12:\
    \ error: redeclaration of \u2018size_t j\u2019\n   70 |     size_t j = 0;\n  \
    \    |            ^\n/tmp/tmpacn9fove.cpp:18:12: note: \u2018size_t j\u2019 previously\
    \ declared here\n   18 |     size_t j = 0;\n      |            ^\n/tmp/tmpacn9fove.cpp:71:12:\
    \ error: redeclaration of \u2018size_t k\u2019\n   71 |     size_t k = 0;\n  \
    \    |            ^\n/tmp/tmpacn9fove.cpp:19:12: note: \u2018size_t k\u2019 previously\
    \ declared here\n   19 |     size_t k = 0;\n      |            ^\n/tmp/tmpacn9fove.cpp:72:12:\
    \ error: redeclaration of \u2018size_t l\u2019\n   72 |     size_t l = 0;\n  \
    \    |            ^\n/tmp/tmpacn9fove.cpp:20:12: note: \u2018size_t l\u2019 previously\
    \ declared here\n   20 |     size_t l = 0;\n      |            ^\n/tmp/tmpacn9fove.cpp:73:12:\
    \ error: redeclaration of \u2018size_t m\u2019\n   73 |     size_t m = 0;\n  \
    \    |            ^\n/tmp/tmpacn9fove.cpp:21:12: note: \u2018size_t m\u2019 previously\
    \ declared here\n   21 |     size_t m = 0;\n      |            ^\n/tmp/tmpacn9fove.cpp:74:12:\
    \ error: redeclaration of \u2018size_t n\u2019\n   74 |     size_t n = 0;\n  \
    \    |            ^\n/tmp/tmpacn9fove.cpp:22:12: note: \u2018size_t n\u2019 previously\
    \ declared here\n   22 |     size_t n = 0;\n      |            ^\n/tmp/tmpacn9fove.cpp:75:12:\
    \ error: redeclaration of \u2018size_t o\u2019\n   75 |     size_t o = 0;\n  \
    \    |            ^\n/tmp/tmpacn9fove.cpp:23:12: note: \u2018size_t o\u2019 previously\
    \ declared here\n   23 |     size_t o = 0;\n      |            ^\n/tmp/tmpacn9fove.cpp:76:12:\
    \ error: redeclaration of \u2018size_t p\u2019\n   76 |     size_t p = 0;\n  \
    \    |            ^\n/tmp/tmpacn9fove.cpp:24:12: note: \u2018size_t p\u2019 previously\
    \ declared here\n   24 |    "
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n\
    \            boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp73nu3oco: /tmp/tmp73nu3oco.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ count = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == '.' ||\
    \ S[i] == '?' || S[i] == '!'){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpepbm__hy: /tmp/tmpepbm__hy.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdh6rv_dz.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdh6rv_dz.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmpdh6rv_dz.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    std::string word;\n    for(int i = 0; i < S.size(); i++){\n\
    \        if(S[i] == '.'){\n            boredom++;\n        }\n        if(S[i]\
    \ == '?'){\n            boredom++;\n        }\n        if(S[i] == '!'){\n    \
    \        boredom++;\n        }\n    }\n    return boredom;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpb38t0n1q: /tmp/tmpb38t0n1q.cpp:31: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::string word;\n\
    \    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n    std::string delimiter4\
    \ = \"!\";\n    std::string delimiter5 = \".?!\";\n    std::string delimiter6\
    \ = \".\";\n    std::string delimiter7 = \"?\";\n    std::string delimiter8 =\
    \ \"!\";\n    std::string delimiter9 = \".?!\";\n    std::string delimiter10 =\
    \ \".\";\n    std::string delimiter11 = \"?\";\n    std::string delimiter12 =\
    \ \"!\";\n    std::string delimiter13 = \".?!\";\n    std::string delimiter14\
    \ = \".\";\n    std::string delimiter15 = \"?\";\n    std::string delimiter16\
    \ = \"!\";\n    std::string delimiter17 = \".?!\";\n    std::string delimiter18\
    \ = \".\";\n    std::string delimiter19 = \"?\";\n    std::string delimiter20\
    \ = \"!\";\n    std::string delimiter21 = \".?!\";\n    std::string delimiter22\
    \ = \".\";\n    std::string delimiter23 = \"?\";\n    std::string delimiter24\
    \ = \"!\";\n    std::string delimiter25 = \".?!\";\n    std::string delimiter26\
    \ = \".\";\n    std::string delimiter27 = \"?\";\n    std::string delimiter28\
    \ = \"!\";\n    std::string delimiter29 = \".?!\";\n    std::string delimiter30\
    \ = \".\";\n    std::string delimiter31 = \"?\";\n    std::string delimiter32\
    \ = \"!\";\n    std::string delimiter33 = \".?!\";\n    std::string delimiter34\
    \ = \".\";\n    std::string delimiter35 = \"?\";\n    std::string delimiter36\
    \ = \"!\";\n    std::string delimiter37 = \".?!\";\n    std::string delimiter38\
    \ = \".\";\n    std::string delimiter39 = \"?\";\n    std::string delimiter40\
    \ = \"!\";\n    std::string delimiter41 = \".?!\";\n    std::string delimiter42\
    \ = \".\";\n    std::string delimiter43 = \"?\";\n    std::string delimiter44\
    \ = \"!\";\n    std::string delimiter45 = \".?!\";\n    std::string delimiter46\
    \ = \".\";\n    std::string delimiter47 = \"?\";\n    std::string delimiter48\
    \ = \"!\";\n    std::string delimiter49 = \".?!\";\n    std::string delimiter50\
    \ = \".\";\n    std::string delimiter51 = \"?\";\n    std::string delimiter52\
    \ = \"!\";\n    std::string delimiter53 = \".?!\";\n    std::string delimiter54\
    \ = \".\";\n    std::string delimiter55 = \"?\";\n    std::string delimiter56\
    \ = \"!\";\n    std::string delimiter57 = \".?!\";\n    std::string delimiter58\
    \ = \".\";\n    \n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpadeis6zy: /tmp/tmpadeis6zy.cpp:77: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".?!\";\n    std::string delimiter3 = \".?!\";\n    std::string\
    \ delimiter4 = \".?!\";\n    std::string delimiter5 = \".?!\";\n    std::string\
    \ delimiter6 = \".?!\";\n    std::string delimiter7 = \".?!\";\n    std::string\
    \ delimiter8 = \".?!\";\n    std::string delimiter9 = \".?!\";\n    std::string\
    \ delimiter10 = \".?!\";\n    std::string delimiter11 = \".?!\";\n    std::string\
    \ delimiter12 = \".?!\";\n    std::string delimiter13 = \".?!\";\n    std::string\
    \ delimiter14 = \".?!\";\n    std::string delimiter15 = \".?!\";\n    std::string\
    \ delimiter16 = \".?!\";\n    std::string delimiter17 = \".?!\";\n    std::string\
    \ delimiter18 = \".?!\";\n    std::string delimiter19 = \".?!\";\n    std::string\
    \ delimiter20 = \".?!\";\n    std::string delimiter21 = \".?!\";\n    std::string\
    \ delimiter22 = \".?!\";\n    std::string delimiter23 = \".?!\";\n    std::string\
    \ delimiter24 = \".?!\";\n    std::string delimiter25 = \".?!\";\n    std::string\
    \ delimiter26 = \".?!\";\n    std::string delimiter27 = \".?!\";\n    std::string\
    \ delimiter28 = \".?!\";\n    std::string delimiter29 = \".?!\";\n    std::string\
    \ delimiter30 = \".?!\";\n    std::string delimiter31 = \".?!\";\n    std::string\
    \ delimiter32 = \".?!\";\n    std::string delimiter33 = \".?!\";\n    std::string\
    \ delimiter34 = \".?!\";\n    std::string delimiter35 = \".?!\";\n    std::string\
    \ delimiter36 = \".?!\";\n    std::string delimiter37 = \".?!\";\n    std::string\
    \ delimiter38 = \".?!\";\n    std::string delimiter39 = \".?!\";\n    std::string\
    \ delimiter40 = \".?!\";\n    std::string delimiter41 = \".?!\";\n    std::string\
    \ delimiter42 = \".?!\";\n    std::string delimiter43 = \".?!\";\n    std::string\
    \ delimiter44 = \".?!\";\n    std::string delimiter45 = \".?!\";\n    std::string\
    \ delimiter46 = \".?!\";\n    std::string delimiter47 = \".?!\";\n    std::string\
    \ delimiter48 = \".?!\";\n    std::string delimiter49 = \".?!\";\n    std::string\
    \ delimiter50\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp923t8krt.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp923t8krt.cpp:65:1: error: expected initializer before \u2018}\u2019\
    \ token\n   65 | }\n      | ^\n/tmp/tmp923t8krt.cpp:65:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &i : S) {\n        if (i == '.' || i == '?' || i == '!')\
    \ {\n            boredoms += 1;\n        }\n        word = i;\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9e06guas: /tmp/tmp9e06guas.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            boredoms += 1;\n        }\n  \
    \  }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2nexha7c: /tmp/tmp2nexha7c.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n\
    \            boredom++;\n        }\n    }\n    return boredom;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_s10gvff: /tmp/tmp_s10gvff.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094245
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdh6rv_dz.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdh6rv_dz.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmpdh6rv_dz.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n\
    \            boredom++;\n        }\n    }\n    return boredom;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_s10gvff: /tmp/tmp_s10gvff.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n\
    \            boredom++;\n        }\n    }\n    return boredom;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_s10gvff: /tmp/tmp_s10gvff.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    for(int i =\
    \ 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpa4mngdxo: /tmp/tmpa4mngdxo.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word = \"I\";\n    std::string delimiter = \"\
    .,?!\";\n    std::string delimiter2 = \".,?!\";\n    std::string delimiter3 =\
    \ \".,?!\";\n    std::string delimiter4 = \".,?!\";\n    std::string delimiter5\
    \ = \".,?!\";\n    std::string delimiter6 = \".,?!\";\n    std::string delimiter7\
    \ = \".,?!\";\n    std::string delimiter8 = \".,?!\";\n    std::string delimiter9\
    \ = \".,?!\";\n    std::string delimiter10 = \".,?!\";\n    std::string delimiter11\
    \ = \".,?!\";\n    std::string delimiter12 = \".,?!\";\n    std::string delimiter13\
    \ = \".,?!\";\n    std::string delimiter14 = \".,?!\";\n    std::string delimiter15\
    \ = \".,?!\";\n    std::string delimiter16 = \".,?!\";\n    std::string delimiter17\
    \ = \".,?!\";\n    std::string delimiter18 = \".,?!\";\n    std::string delimiter19\
    \ = \".,?!\";\n    std::string delimiter20 = \".,?!\";\n    std::string delimiter21\
    \ = \".,?!\";\n    std::string delimiter22 = \".,?!\";\n    std::string delimiter23\
    \ = \".,?!\";\n    std::string delimiter24 = \".,?!\";\n    std::string delimiter25\
    \ = \".,?!\";\n    std::string delimiter26 = \".,?!\";\n    std::string delimiter27\
    \ = \".,?!\";\n    std::string delimiter28 = \".,?!\";\n    std::string delimiter29\
    \ = \".,?!\";\n    std::string delimiter30 = \".,?!\";\n    std::string delimiter31\
    \ = \".,?!\";\n    std::string delimiter32 = \".,?!\";\n    std::string delimiter33\
    \ = \".,?!\";\n    std::string delimiter34 = \".,?!\";\n    std::string delimiter35\
    \ = \".,?!\";\n    std::string delimiter36 = \".,?!\";\n    std::string delimiter37\
    \ = \".,?!\";\n    std::string delimiter38 = \".,?!\";\n    std::string delimiter39\
    \ = \".,?!\";\n    std::string delimiter40 = \".,?!\";\n    std::string delimiter41\
    \ = \".,?!\";\n    std::string delimiter42 = \".,?!\";\n    std::string delimiter43\
    \ = \".,?!\";\n    std::string delimiter44 = \".,?!\";\n    std::string delimiter45\
    \ = \".,\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2vkcv66t.cpp:59:31: warning: missing terminating \" character\n\
    \   59 |     std::string delimiter45 = \".,\n      |                         \
    \      ^\n/tmp/tmp2vkcv66t.cpp:59:31: error: missing terminating \" character\n\
    \   59 |     std::string delimiter45 = \".,\n      |                         \
    \      ^~~\n/tmp/tmp2vkcv66t.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp2vkcv66t.cpp:60:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   60 | }\n      | ^\n/tmp/tmp2vkcv66t.cpp:60:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmp2vkcv66t.cpp:60:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiter = \"\
    ,\";\n    std::string temp;\n    std::string temp2;\n    std::string temp3;\n\
    \    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string\
    \ temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n\
    \    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n \
    \   std::string temp14;\n    std::string temp15;\n    std::string temp16;\n  \
    \  std::string temp17;\n    std::string temp18;\n    std::string temp19;\n   \
    \ std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string\
    \ temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n\
    \    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n \
    \   std::string temp30;\n    std::string temp31;\n    std::string temp32;\n  \
    \  std::string temp33;\n    std::string temp34;\n    std::string temp35;\n   \
    \ std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string\
    \ temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n\
    \    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n \
    \   std::string temp46;\n    std::string temp47;\n    std::string temp48;\n  \
    \  std::string temp49;\n    std::string temp50;\n    std::string temp51;\n   \
    \ std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string\
    \ temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n\
    \    std::string temp59;\n    std::string temp60;\n    std::string temp61;\n \
    \   std::string temp62;\n    std::string temp63;\n    std::string temp64;\n  \
    \  std::string temp65;\n    std::string temp66;\n    std::string temp67;\n   \
    \ std::string temp68;\n    std::string temp69;\n    std::string temp70;\n    std::string\
    \ temp71;\n    std::string temp72;\n    std::string temp73;\n    std::string temp74;\n\
    \    std::string temp75;\n    std::string temp76;\n    std::string temp77;\n \
    \   std::string temp78;\n    std::string temp79;\n    std::string temp80;\n  \
    \  std::string temp81;\n    std::string temp82;\n    std::string temp83;\n   \
    \ std::string temp84;\n\n}\nint main() {\n    auto candidate = is_bored;\n   \
    \ assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9qzwlgwp: /tmp/tmp9qzwlgwp.cpp:104: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n\
    \            boredom++;\n        }\n    }\n    return boredom;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_s10gvff: /tmp/tmp_s10gvff.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long count = 0;\n    std::string word;\n\
    \    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!') {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nint main() {\n  \
    \  auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp1xls1gkb: /tmp/tmp1xls1gkb.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string sentence;\n    std::string delimiter = \".?!\";\n   \
    \ size_t pos = 0;\n    size_t i = 0;\n    size_t j = 0;\n    size_t k = 0;\n \
    \   size_t l = 0;\n    size_t m = 0;\n    size_t n = 0;\n    size_t o = 0;\n \
    \   size_t p = 0;\n    size_t q = 0;\n    size_t r = 0;\n    size_t s = 0;\n \
    \   size_t t = 0;\n    size_t u = 0;\n    size_t v = 0;\n    size_t w = 0;\n \
    \   size_t x = 0;\n    size_t y = 0;\n    size_t z = 0;\n    size_t A = 0;\n \
    \   size_t B = 0;\n    size_t C = 0;\n    size_t D = 0;\n    size_t E = 0;\n \
    \   size_t F = 0;\n    size_t G = 0;\n    size_t H = 0;\n    size_t I = 0;\n \
    \   size_t J = 0;\n    size_t K = 0;\n    size_t L = 0;\n    size_t M = 0;\n \
    \   size_t N = 0;\n    size_t O = 0;\n    size_t P = 0;\n    size_t Q = 0;\n \
    \   size_t R = 0;\n    size_t S = 0;\n    size_t T = 0;\n    size_t U = 0;\n \
    \   size_t V = 0;\n    size_t W = 0;\n    size_t X = 0;\n    size_t Y = 0;\n \
    \   size_t Z = 0;\n    size_t a = 0;\n    size_t b = 0;\n    size_t c = 0;\n \
    \   size_t d = 0;\n    size_t e = 0;\n    size_t f = 0;\n    size_t g = 0;\n \
    \   size_t h = 0;\n    size_t i = 0;\n    size_t j = 0;\n    size_t k = 0;\n \
    \   size_t l = 0;\n    size_t m = 0;\n    size_t n = 0;\n    size_t o = 0;\n \
    \   size_t p = 0;\n    size_t q = 0;\n    size_t r = 0;\n    size_t s = 0;\n \
    \   size_t t = 0;\n    size_t u = 0;\n    size_t v = 0;\n    size_t w = 0;\n \
    \   size_t x = 0;\n    size_t y = 0;\n    size_t z = 0;\n    size_t A = 0;\n \
    \   size_t B = 0;\n    size_t C = 0;\n    size_t D = 0;\n    size_t E = 0;\n \
    \   size_t F = 0;\n    size_t G = 0;\n    size_t H = 0;\n    size_t I = 0;\n \
    \   size_t J = 0;\n    size_t K = 0;\n    size_t L = 0;\n    size_t M = 0;\n \
    \   size_t N = 0;\n    size_t O = 0;\n    size_t P = 0;\n    size_t Q = 0;\n \
    \   size_t R = 0;\n    size_t S = 0;\n    size_t T = 0;\n    size_t U = 0;\n \
    \   size_t V = 0;\n    size_t W = 0;\n    size_t X = 0;\n    size_t Y = 0;\n \
    \   size_t Z = 0;\n    size_t a = 0;\n    size_t \n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxyzau8xb.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpxyzau8xb.cpp:53:12: error: declaration of \u2018size_t S\u2019 shadows\
    \ a parameter\n   53 |     size_t S = 0;\n      |            ^\n/tmp/tmpxyzau8xb.cpp:69:12:\
    \ error: redeclaration of \u2018size_t i\u2019\n   69 |     size_t i = 0;\n  \
    \    |            ^\n/tmp/tmpxyzau8xb.cpp:17:12: note: \u2018size_t i\u2019 previously\
    \ declared here\n   17 |     size_t i = 0;\n      |            ^\n/tmp/tmpxyzau8xb.cpp:70:12:\
    \ error: redeclaration of \u2018size_t j\u2019\n   70 |     size_t j = 0;\n  \
    \    |            ^\n/tmp/tmpxyzau8xb.cpp:18:12: note: \u2018size_t j\u2019 previously\
    \ declared here\n   18 |     size_t j = 0;\n      |            ^\n/tmp/tmpxyzau8xb.cpp:71:12:\
    \ error: redeclaration of \u2018size_t k\u2019\n   71 |     size_t k = 0;\n  \
    \    |            ^\n/tmp/tmpxyzau8xb.cpp:19:12: note: \u2018size_t k\u2019 previously\
    \ declared here\n   19 |     size_t k = 0;\n      |            ^\n/tmp/tmpxyzau8xb.cpp:72:12:\
    \ error: redeclaration of \u2018size_t l\u2019\n   72 |     size_t l = 0;\n  \
    \    |            ^\n/tmp/tmpxyzau8xb.cpp:20:12: note: \u2018size_t l\u2019 previously\
    \ declared here\n   20 |     size_t l = 0;\n      |            ^\n/tmp/tmpxyzau8xb.cpp:73:12:\
    \ error: redeclaration of \u2018size_t m\u2019\n   73 |     size_t m = 0;\n  \
    \    |            ^\n/tmp/tmpxyzau8xb.cpp:21:12: note: \u2018size_t m\u2019 previously\
    \ declared here\n   21 |     size_t m = 0;\n      |            ^\n/tmp/tmpxyzau8xb.cpp:74:12:\
    \ error: redeclaration of \u2018size_t n\u2019\n   74 |     size_t n = 0;\n  \
    \    |            ^\n/tmp/tmpxyzau8xb.cpp:22:12: note: \u2018size_t n\u2019 previously\
    \ declared here\n   22 |     size_t n = 0;\n      |            ^\n/tmp/tmpxyzau8xb.cpp:75:12:\
    \ error: redeclaration of \u2018size_t o\u2019\n   75 |     size_t o = 0;\n  \
    \    |            ^\n/tmp/tmpxyzau8xb.cpp:23:12: note: \u2018size_t o\u2019 previously\
    \ declared here\n   23 |     size_t o = 0;\n      |            ^\n/tmp/tmpxyzau8xb.cpp:76:12:\
    \ error: redeclaration of \u2018size_t p\u2019\n   76 |     size_t p = 0;\n  \
    \    |            ^\n/tmp/tmpxyzau8xb.cpp:24:12: note: \u2018size_t p\u2019 previously\
    \ declared here\n   24 |    "
  stdout: ''
  timestamp: 1660094246
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdh6rv_dz.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdh6rv_dz.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmpdh6rv_dz.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long ans = 0;\n    std::string temp;\n\
    \    temp = S;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            ans += 1;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp4e9rhul8: /tmp/tmp4e9rhul8.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ count = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6xkr66ph: /tmp/tmp6xkr66ph.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdh6rv_dz.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdh6rv_dz.cpp:72:1: error: expected initializer before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmpdh6rv_dz.cpp:72:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ count = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            count++;\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6xkr66ph: /tmp/tmp6xkr66ph.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (auto &c : S) {\n        if (c == '.' || c == '?' || c == '!')\
    \ {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpsbi939bq: /tmp/tmpsbi939bq.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    for(int i =\
    \ 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpa4mngdxo: /tmp/tmpa4mngdxo.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom;\n    std::string delimiter = \".?!\";\n    std::string\
    \ delimiter2 = \".\";\n    std::string delimiter3 = \"?\";\n    std::string delimiter4\
    \ = \"!\";\n    std::string delimiter5 = \".\";\n    std::string delimiter6 =\
    \ \"?\";\n    std::string delimiter7 = \"!\";\n    std::string delimiter8 = \"\
    .\";\n    std::string delimiter9 = \"?\";\n    std::string delimiter10 = \"!\"\
    ;\n    std::string delimiter11 = \".\";\n    std::string delimiter12 = \"?\";\n\
    \    std::string delimiter13 = \"!\";\n    std::string delimiter14 = \".\";\n\
    \    std::string delimiter15 = \"?\";\n    std::string delimiter16 = \"!\";\n\
    \    std::string delimiter17 = \".\";\n    std::string delimiter18 = \"?\";\n\
    \    std::string delimiter19 = \"!\";\n    std::string delimiter20 = \".\";\n\
    \    std::string delimiter21 = \"?\";\n    std::string delimiter22 = \"!\";\n\
    \    std::string delimiter23 = \".\";\n    std::string delimiter24 = \"?\";\n\
    \    std::string delimiter25 = \"!\";\n    std::string delimiter26 = \".\";\n\
    \    std::string delimiter27 = \"?\";\n    std::string delimiter28 = \"!\";\n\
    \    std::string delimiter29 = \".\";\n    std::string delimiter30 = \"?\";\n\
    \    std::string delimiter31 = \"!\";\n    std::string delimiter32 = \".\";\n\
    \    std::string delimiter33 = \"?\";\n    std::string delimiter34 = \"!\";\n\
    \    std::string delimiter35 = \".\";\n    std::string delimiter36 = \"?\";\n\
    \    std::string delimiter37 = \"!\";\n    std::string delimiter38 = \".\";\n\
    \    std::string delimiter39 = \"?\";\n    std::string delimiter40 = \"!\";\n\
    \    std::string delimiter41 = \"!\";\n    std::string delimiter42 = \".\";\n\
    \    std::string delimiter43 = \"?\";\n    std::string delimiter44 = \"!\";\n\
    \    std::string delimiter45 = \".\";\n    std::string delimiter46 = \"?\";\n\
    \    std::string delimiter47 = \"!\";\n    std::string delimiter48 = \".\";\n\
    \    std::string delimiter49 = \"?\";\n    std::string delimiter50 = \"!\";\n\
    \    std::string delimiter51 = \"!\";\n    std::string delimiter52 = \".\";\n\
    \    std::string delimiter53 = \"?\";\n    std::string delimiter54 = \"!\";\n\
    \    std::string delimiter55 = \".\";\n    std::string delimiter56 = \"?\";\n\
    \    std::string delimiter57 = \"!\";\n    std::string delimiter58 = \".\";\n\
    \    std::string delimiter59 = \"?\";\n    std::string delimiter60 = \"!\";\n\
    \    std::string delimiter61 = \"!\";\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpeol3xpgz: /tmp/tmpeol3xpgz.cpp:79: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0;\n    for(int i = 0;\
    \ i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpcevjsyr3: /tmp/tmpcevjsyr3.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0;\n    for(int i = 0;\
    \ i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpcevjsyr3: /tmp/tmpcevjsyr3.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.') {\n\
    \            boredoms += 1;\n            word = S.substr(i, S.size() - i);\n \
    \           i = S.size() - 1;\n        }\n        else if(S[i] == '?') {\n   \
    \         boredoms += 1;\n            word = S.substr(i, S.size() - i);\n    \
    \        i = S.size() - 1;\n        }\n        else if(S[i] == '!') {\n      \
    \      boredoms += 1;\n            word = S.substr(i, S.size() - i);\n       \
    \     i = S.size() - 1;\n        }\n        else {\n            word = S[i];\n\
    \        }\n        if(word == \"I\") {\n            boredoms += 1;\n        }\n\
    \    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpg_x14vfu: /tmp/tmpg_x14vfu.cpp:42: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    for (size_t i = 0; i < S.size();\
    \ i++) {\n        word = S[i];\n        if (word.compare(0, 2, \"I\") == 0) {\n\
    \            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpjid651y5: /tmp/tmpjid651y5.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094246
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    int i = 0;\n\
    \    while (i < S.size()) {\n        if (S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!') {\n            boredoms += 1;\n        }\n        i += 1;\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp0el8u11w: /tmp/tmp0el8u11w.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiter = delimiters[0];\n\
    \    size_t pos = 0;\n    size_t count = 0;\n    while(pos < S.size()) {\n   \
    \     pos = S.find(delimiter, pos);\n        if(pos == std::string::npos) {\n\
    \            word = S.substr(pos);\n            pos = S.size();\n        } else\
    \ {\n            word = S.substr(pos, pos-pos-1);\n            pos = pos + 1;\n\
    \        }\n        std::transform(word.begin(), word.end(), word.begin(), ::tolower);\n\
    \        if(word == \"i\") {\n            boredoms += 1;\n        }\n    }\n \
    \   return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplab9ykb0.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmplab9ykb0.cpp:15:41: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   15 |     std::string\
    \ delimiter = delimiters[0];\n      |                                        \
    \ ^\n"
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiter = \"\
    ,\";\n    std::string temp;\n    std::string temp2;\n    std::string temp3;\n\
    \    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string\
    \ temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n\
    \    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n \
    \   std::string temp14;\n    std::string temp15;\n    std::string temp16;\n  \
    \  std::string temp17;\n    std::string temp18;\n    std::string temp19;\n   \
    \ std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string\
    \ temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n\
    \    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n \
    \   std::string temp30;\n    std::string temp31;\n    std::string temp32;\n  \
    \  std::string temp33;\n    std::string temp34;\n    std::string temp35;\n   \
    \ std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string\
    \ temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n\
    \    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n \
    \   std::string temp46;\n    std::string temp47;\n    std::string temp48;\n  \
    \  std::string temp49;\n    std::string temp50;\n    std::string temp51;\n   \
    \ std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string\
    \ temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n\
    \    std::string temp59;\n    std::string temp60;\n    std::string temp61;\n \
    \   std::string temp62;\n    std::string temp63;\n    std::string temp64;\n  \
    \  std::string temp65;\n    std::string temp66;\n    std::string temp67;\n   \
    \ std::string temp68;\n    std::string temp69;\n    std::string temp70;\n    std::string\
    \ temp71;\n    std::string temp72;\n    std::string temp73;\n    std::string temp74;\n\
    \    std::string temp75;\n    std::string temp76;\n    std::string temp77;\n \
    \   std::string temp78;\n    std::string temp79;\n    std::string temp80;\n  \
    \  std::string temp81;\n    std::string temp82;\n    std::string temp83;\n   \
    \ std::string temp84;\n\n}\nint main() {\n    auto candidate = is_bored;\n   \
    \ assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9qzwlgwp: /tmp/tmp9qzwlgwp.cpp:104: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom = 0;\n    for(int i =\
    \ 0; i < S.length(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!') {\n            boredom++;\n        }\n    }\n    return boredom;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp7ah3aqbe: /tmp/tmp7ah3aqbe.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string::size_type pos;\n\
    \    pos = S.find_first_of(delimiters);\n    while (pos != std::string::npos)\
    \ {\n        word = S.substr(0, pos);\n        if (word == \"I\") {\n        \
    \    boredoms += 1;\n        }\n        S = S.substr(pos + 1);\n        pos =\
    \ S.find_first_of(delimiters);\n    }\n    return boredoms;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpdch5y29z: /tmp/tmpdch5y29z.cpp:31: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0;\n    for(int i = 0;\
    \ i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpcevjsyr3: /tmp/tmpcevjsyr3.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredoms = 0;\n    for (int i\
    \ = 0; i < S.size(); i++) {\n        if (S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!') {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpn5p2ebmj: /tmp/tmpn5p2ebmj.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiter = \"\
    ,\";\n    std::string temp;\n    std::string temp2;\n    std::string temp3;\n\
    \    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string\
    \ temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n\
    \    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n \
    \   std::string temp14;\n    std::string temp15;\n    std::string temp16;\n  \
    \  std::string temp17;\n    std::string temp18;\n    std::string temp19;\n   \
    \ std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string\
    \ temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n\
    \    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n \
    \   std::string temp30;\n    std::string temp31;\n    std::string temp32;\n  \
    \  std::string temp33;\n    std::string temp34;\n    std::string temp35;\n   \
    \ std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string\
    \ temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n\
    \    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n \
    \   std::string temp46;\n    std::string temp47;\n    std::string temp48;\n  \
    \  std::string temp49;\n    std::string temp50;\n    std::string temp51;\n   \
    \ std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string\
    \ temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n\
    \    std::string temp59;\n    std::string temp60;\n    std::string temp61;\n \
    \   std::string temp62;\n    std::string temp63;\n    std::string temp64;\n  \
    \  std::string temp65;\n    std::string temp66;\n    std::string temp67;\n   \
    \ std::string temp68;\n    std::string temp69;\n    std::string temp70;\n    std::string\
    \ temp71;\n    std::string temp72;\n    std::string temp73;\n    std::string temp74;\n\
    \    std::string temp75;\n    std::string temp76;\n    std::string temp77;\n \
    \   std::string temp78;\n    std::string temp79;\n    std::string temp80;\n  \
    \  std::string temp81;\n    std::string temp82;\n    std::string temp83;\n   \
    \ std::string temp84;\n\n}\nint main() {\n    auto candidate = is_bored;\n   \
    \ assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9qzwlgwp: /tmp/tmp9qzwlgwp.cpp:104: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t\
    \ count = 0;\n    while(pos < S.size()) {\n        word = S.substr(pos, 1);\n\
    \        pos = 0;\n        for(size_t i = 0; i < delimiters.size(); i++) {\n \
    \           if(word.find(delimiters[i]) != std::string::npos) {\n            \
    \    pos = word.find(delimiters[i]);\n                break;\n            }\n\
    \        }\n        if(pos != std::string::npos) {\n            count++;\n   \
    \     }\n    }\n    boredoms = count;\n    return boredoms;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660094252
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    size_t pos = 0;\n    size_t\
    \ i = 0;\n    while(pos < S.size()) {\n        word = S.substr(pos, 1);\n    \
    \    pos = 0;\n        for(i = 0; i < delimiters.size(); i++) {\n            if(word.find(delimiters[i])\
    \ != std::string::npos) {\n                pos = word.find(delimiters[i]);\n \
    \               break;\n            }\n        }\n        if(pos != std::string::npos)\
    \ {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660094252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom = 0;\n    int i = 0;\n\
    \    while (i < S.size()) {\n        if (S[i] == '.') {\n            i++;\n  \
    \          while (i < S.size() && S[i] != '.') {\n                i++;\n     \
    \       }\n            if (i == S.size()) {\n                boredom++;\n    \
    \        }\n        }\n        else if (S[i] == '?') {\n            i++;\n   \
    \         while (i < S.size() && S[i] != '?') {\n                i++;\n      \
    \      }\n            if (i == S.size()) {\n                boredom++;\n     \
    \       }\n        }\n        else if (S[i] == '!') {\n            i++;\n    \
    \        while (i < S.size() && S[i] != '!') {\n                i++;\n       \
    \     }\n            if (i == S.size()) {\n                boredom++;\n      \
    \      }\n        }\n        else {\n            i++;\n        }\n    }\n    return\
    \ boredom;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpcvgtszqv: /tmp/tmpcvgtszqv.cpp:51: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            boredom++;\n        }\n    }\n\
    \    return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_g5viq00: /tmp/tmp_g5viq00.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    for (size_t i = 0; i < S.size();\
    \ i++) {\n        word = S[i];\n        for (size_t j = 0; j < delimiters.size();\
    \ j++) {\n            if (word.find(delimiters[j]) != std::string::npos) {\n \
    \               boredoms += 1;\n                break;\n            }\n      \
    \  }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpm_9hytv1: /tmp/tmpm_9hytv1.cpp:29: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredom = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] ==\
    \ '.' || S[i] == '?' || S[i] == '!') {\n            boredom++;\n        }\n  \
    \  }\n    return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n \
    \   assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqjvcxe60: /tmp/tmpqjvcxe60.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            boredoms++;\n        }\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp17a19xn9: /tmp/tmp17a19xn9.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ boredoms = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!') {\n            boredoms++;\n        }\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp17a19xn9: /tmp/tmp17a19xn9.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    // Write your code here\n    long\
    \ count = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == '.' ||\
    \ S[i] == '?' || S[i] == '!'){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpepbm__hy: /tmp/tmpepbm__hy.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int count = 0;\n    for(int i = 0;\
    \ i < S.length(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpz7j867ei: /tmp/tmpz7j867ei.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    for (size_t i = 0; i < S.size();\
    \ i++) {\n        word = S[i];\n        for (size_t j = 0; j < delimiters.size();\
    \ j++) {\n            if (word.find(delimiters[j]) != std::string::npos) {\n \
    \               boredoms += 1;\n                break;\n            }\n      \
    \  }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpm_9hytv1: /tmp/tmpm_9hytv1.cpp:29: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    for (size_t i = 0; i < S.size(); i++) {\n        word = S[i];\n \
    \       if (word == \"I\") {\n            boredoms += 1;\n        }\n    }\n \
    \   return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmphnbiy297: /tmp/tmphnbiy297.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom;\n    std::string delimiter = \" .?!\";\n   \
    \ std::string delimiter2 = \" .?!\";\n    std::string delimiter3 = \" .?!\";\n\
    \    std::string delimiter4 = \" .?!\";\n    std::string delimiter5 = \" .?!\"\
    ;\n    std::string delimiter6 = \" .?!\";\n    std::string delimiter7 = \" .?!\"\
    ;\n    std::string delimiter8 = \" .?!\";\n    std::string delimiter9 = \" .?!\"\
    ;\n    std::string delimiter10 = \" .?!\";\n    std::string delimiter11 = \" .?!\"\
    ;\n    std::string delimiter12 = \" .?!\";\n    std::string delimiter13 = \" .?!\"\
    ;\n    std::string delimiter14 = \" .?!\";\n    std::string delimiter15 = \" .?!\"\
    ;\n    std::string delimiter16 = \" .?!\";\n    std::string delimiter17 = \" .?!\"\
    ;\n    std::string delimiter18 = \" .?!\";\n    std::string delimiter19 = \" .?!\"\
    ;\n    std::string delimiter20 = \" .?!\";\n    std::string delimiter21 = \" .?!\"\
    ;\n    std::string delimiter22 = \" .?!\";\n    std::string delimiter23 = \" .?!\"\
    ;\n    std::string delimiter24 = \" .?!\";\n    std::string delimiter25 = \" .?!\"\
    ;\n    std::string delimiter26 = \" .?!\";\n    std::string delimiter27 = \" .?!\"\
    ;\n    std::string delimiter28 = \" .?!\";\n    std::string delimiter29 = \" .?!\"\
    ;\n    std::string delimiter30 = \" .?!\";\n    std::string delimiter31 = \" .?!\"\
    ;\n    std::string delimiter32 = \" .?!\";\n    std::string delimiter33 = \" .?!\"\
    ;\n    std::string delimiter34 = \" .?!\";\n    std::string delimiter35 = \" .?!\"\
    ;\n    std::string delimiter36 = \" .?!\";\n    std::string delimiter37 = \" .?!\"\
    ;\n    std::string delimiter38 = \" .?!\";\n    std::string delimiter39 = \" .?!\"\
    ;\n    std::string delimiter40 = \" .?!\";\n    std::string delimiter41 = \" .?!\"\
    ;\n    std::string delimiter42 = \" .?!\";\n    std::string delimiter43 = \" .?!\"\
    ;\n    std::string delimiter44 = \" .?!\";\n    std::string delimiter45 = \" .?!\"\
    ;\n    std::string delimiter46 = \" .?!\";\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9fjcq4hs: /tmp/tmp9fjcq4hs.cpp:64: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094247
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiters_lower\
    \ = \".?!\";\n    std::string delimiters_upper = \".?!\";\n    std::string delimiters_mixed\
    \ = \".?!\";\n    std::string delimiters_mixed_upper = \".?!\";\n    std::string\
    \ delimiters_mixed_lower = \".?!\";\n    std::string delimiters_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_upper = \".?!\"\
    ;\n    std::string delimiters_mixed_mixed_mixed_mixed_lower = \".?!\";\n    std::string\
    \ delimiters_mixed_mixed_mixed_mixed_mixed_upper = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n    std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9d8li3a.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpf9d8li3a.cpp:40:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \n   40 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpf9d8li3a.cpp:38:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\u2019\
    \ previously declared here\n   38 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_upper\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpf9d8li3a.cpp:41:17: error: redeclaration of \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \n   41 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpf9d8li3a.cpp:39:17: note: \u2018std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\u2019\
    \ previously declared here\n   39 |     std::string delimiters_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_mixed_lower\
    \ = \".?!\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpf9d8li3a.cpp:44:1: error: expected initializer before \u2018}\u2019 token\n\
    \   44 | }\n      | ^\n/tmp/tmpf9d8li3a.cpp:44:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094247
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom;\n    std::string sentence;\n    std::string\
    \ delimiters = \".?!\";\n    std::string delimiters_lower = \"i.e\";\n    std::string\
    \ delimiters_upper = \"I.E\";\n    std::string delimiters_caps = \"I.E\";\n  \
    \  std::string delimiters_caps_lower = \"i.e\";\n    std::string delimiters_caps_upper\
    \ = \"I.E\";\n    std::string delimiters_caps_lower2 = \"i.E\";\n    std::string\
    \ delimiters_caps_upper2 = \"I.E\";\n    std::string delimiters_caps_lower3 =\
    \ \"i.E\";\n    std::string delimiters_caps_upper3 = \"I.E\";\n    std::string\
    \ delimiters_caps_lower4 = \"i.E\";\n    std::string delimiters_caps_upper4 =\
    \ \"I.E\";\n    std::string delimiters_caps_lower5 = \"i.E\";\n    std::string\
    \ delimiters_caps_upper5 = \"I.E\";\n    std::string delimiters_caps_lower6 =\
    \ \"i.E\";\n    std::string delimiters_caps_upper6 = \"I.E\";\n    std::string\
    \ delimiters_caps_lower7 = \"i.E\";\n    std::string delimiters_caps_upper7 =\
    \ \"I.E\";\n    std::string delimiters_caps_lower8 = \"i.E\";\n    std::string\
    \ delimiters_caps_upper8 = \"I.E\";\n    std::string delimiters_caps_lower9 =\
    \ \"i.E\";\n    std::string delimiters_caps_upper9 = \"I.E\";\n    std::string\
    \ delimiters_caps_lower10 = \"i.E\";\n    std::string delimiters_caps_upper10\
    \ = \"I.E\";\n    std::string delimiters_caps_lower11 = \"i.E\";\n    std::string\
    \ delimiters_caps_upper11 = \"I.E\";\n    std::string delimiters_caps_lower12\
    \ = \"i.E\";\n    std::string delimiters_caps_upper12 = \"I.E\";\n    std::string\
    \ delimiters_caps_lower13 = \"i.E\";\n    std::string delimiters_caps_upper13\
    \ = \"I.E\";\n    std::string delimiters_caps_lower14 = \"i.E\";\n    std::string\
    \ delimiters_caps_upper14 = \"I.E\";\n    std::string delimiters_caps_lower15\
    \ = \"i.E\";\n    std::string delimiters_caps_upper15 = \"I.E\";\n    std::string\
    \ delimiters_caps_lower16 = \"i.E\";\n    std::string delimiters_caps_upper16\
    \ = \"I.E\";\n    std::string delimiters_caps_lower17 = \"i.E\";\n    std::string\
    \ delimiters_caps_upper17 = \"I.E\";\n    std::string delimiters_caps_lower18\
    \ = \"\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn0_g8e67.cpp:54:43: warning: missing terminating \" character\n\
    \   54 |     std::string delimiters_caps_lower18 = \"\n      |               \
    \                            ^\n/tmp/tmpn0_g8e67.cpp:54:43: error: missing terminating\
    \ \" character\n/tmp/tmpn0_g8e67.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpn0_g8e67.cpp:55:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   55 | }\n      | ^\n/tmp/tmpn0_g8e67.cpp:55:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpn0_g8e67.cpp:55:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660094247
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n//\
    \ >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n\
    // (1)\nlong is_bored(std::string S) {\n    int boredom = 0;\n    int i = 0;\n\
    \    while(i < S.size()) {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            boredom++;\n            i++;\n        } else {\n            i++;\n\
    \        }\n    }\n    return boredom;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpojvljp28: /tmp/tmpojvljp28.cpp:27: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094242
