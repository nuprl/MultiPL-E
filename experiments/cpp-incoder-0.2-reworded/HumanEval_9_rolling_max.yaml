name: HumanEval_9_rolling_max
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given vector of integers,\
  \ generate a vector of rolling maximum element found until given moment\n// in the\
  \ sequence.\n// >>> rolling_max((std::vector<long>({(long)1, (long)2, (long)3, (long)2,\
  \ (long)3, (long)4, (long)2})))\n// (std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)3, (long)3, (long)4, (long)4}))\nstd::vector<long> rolling_max(std::vector<long>\
  \ numbers) {\n"
tests: "}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
  \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
  \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100, (long)3})))\
  \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
  }\n"
completions: []
stop_tokens:
- "\n}"
