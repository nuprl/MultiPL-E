name: HumanEval_9_rolling_max
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given vector of integers,\
  \ generate a vector of rolling maximum element found until given moment\n// in the\
  \ sequence.\n// >>> rolling_max((std::vector<long>({(long)1, (long)2, (long)3, (long)2,\
  \ (long)3, (long)4, (long)2})))\n// (std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)3, (long)3, (long)4, (long)4}))\nstd::vector<long> rolling_max(std::vector<long>\
  \ numbers) {\n"
tests: "}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
  \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
  \   assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100, (long)3})))\
  \ == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
  }\n"
completions: ["    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (size_t i = 1; i < numbers.size(); ++i) {\n\
    \        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long current_element = numbers[0];\n    for (long i : numbers)\
    \ {\n        if (i > current_element) {\n            result.push_back(current_element);\n\
    \            current_element = i;\n        } else {\n            current_element\
    \ = i;\n        }\n        if (current_element > max_element) {\n            max_element\
    \ = current_element;\n        }\n    }\n    result.push_back(max_element);\n \
    \   return result;", "    std::vector<long> max_element;\n    long max_number\
    \ = numbers[0];\n    for (long number : numbers) {\n        if (number > max_number)\
    \ {\n            max_number = number;\n        }\n    }\n    max_element.push_back(max_number);\n\
    \    for (long i = numbers.size(); i > 0; i--) {\n        long number = numbers[i\
    \ - 1];\n        if (number > max_number) {\n            max_number = number;\n\
    \        }\n        max_element.push_back(max_number);\n    }\n    return max_element;",
  "    std::vector<long> max_elements;\n    long max_element = numbers[0];\n    max_elements.push_back(max_element);\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n        }\n        max_elements.push_back(max_element);\n\
    \    }\n    return max_elements;", "    std::vector<long> result;\n    long max_so_far\
    \ = numbers[0];\n    long max_so_far_pos = 0;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \            max_so_far_pos = i;\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    result.push_back(numbers[max_so_far_pos]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            max_element = i;\n        }\n   \
    \ }\n    for (long i : numbers) {\n        if (i > max_element) {\n          \
    \  result.push_back(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ max_element;\n    long max_value = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_value) {\n            max_value = i;\n        }\n    }\n\
    \    max_element.push_back(max_value);\n    for (long i : numbers) {\n       \
    \ if (i > max_value) {\n            max_element.push_back(i);\n        }\n   \
    \ }\n    return max_element;", "    std::vector<long> result;\n    long max_value\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_value) {\n            max_value = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_value);\n\
    \    result.push_back(numbers[max_index]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_element) {\n\
    \            max_element = i;\n        }\n    }\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ ++i) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long current_element = numbers[0];\n    for (long i : numbers)\
    \ {\n        if (i > current_element) {\n            result.push_back(current_element);\n\
    \            current_element = i;\n        } else {\n            current_element\
    \ = i;\n        }\n        if (current_element > max_element) {\n            result.push_back(current_element);\n\
    \            max_element = current_element;\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (size_t i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n        }\n    }\n\
    \    result.push_back(max_element);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_element) {\n\
    \            max_element = i;\n        }\n    }\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> max_element;\n    max_element.reserve(numbers.size());\n\
    \    for (long i = 0; i < numbers.size(); i++) {\n        max_element.push_back(numbers[i]);\n\
    \    }\n    for (long i = numbers.size(); i > 0; i--) {\n        long max_element\
    \ = max_element[0];\n        for (long j = 0; j < i; j++) {\n            if (max_element\
    \ < max_element[j]) {\n                max_element = max_element[j];\n       \
    \     }\n        }\n        max_element.push_back(i);\n    }\n    return max_element;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    result.push_back(numbers[max_index]);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    for (long number : numbers) {\n        if (number > max_element) {\n    \
    \        max_element = number;\n        }\n    }\n    for (long i = numbers.size();\
    \ i > 0; i--) {\n        result.push_back(max_element);\n        max_element =\
    \ std::max(max_element, numbers[i - 1]);\n    }\n    return result;"]
stop_tokens:
- "\n}"
