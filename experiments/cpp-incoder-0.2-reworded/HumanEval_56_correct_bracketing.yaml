name: HumanEval_56_correct_bracketing
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"\
  <\" and \">\".\n// return true if every opening bracket has a corresponding closing\
  \ bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
  <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>> correct_bracketing((\"\
  ><<>\"))\n// (false)\nbool correct_bracketing(std::string brackets) {\n"
tests: "}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
  <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
  <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
  )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
  ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
  <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
  <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
  \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
completions: ["    int len = brackets.size();\n    for (int i = 0; i < len; ++i) {\n\
    \        if (brackets[i] == '<') {\n            if (brackets[i + 1] != '>') {\n\
    \                return false;\n            }\n        }\n    }\n    return true;",
  "    bool result = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n\
    \            if (brackets[brackets.size() - 1] != '>') {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;", "    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;", "    size_t len = brackets.size();\n\
    \    bool result = true;\n    size_t i = 0;\n    while (i < len) {\n        if\
    \ (brackets[i] != '<') {\n            result = false;\n            break;\n  \
    \      }\n        i++;\n        if (i >= len) {\n            result = false;\n\
    \            break;\n        }\n        if (brackets[i] != '>') {\n          \
    \  result = false;\n            break;\n        }\n        i++;\n    }\n    return\
    \ result;", "    bool result = true;\n    for (auto c : brackets) {\n        if\
    \ (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n    \
    \            result = false;\n            }\n        }\n    }\n    return result;",
  "    size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n    size_t\
    \ opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n    for (size_t\
    \ i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n    \
    \        ++opening_brackets;\n            ++opening_brackets_size;\n        }\
    \ else if (brackets[i] == '>') {\n            ++closing_brackets;\n          \
    \  ++closing_brackets_size;\n        }\n    }\n    if (opening_brackets_size !=\
    \ closing_brackets_size) {\n        return false;\n    }\n    if (opening_brackets\
    \ != closing_brackets) {\n        return false;\n    }\n    for (size_t i = 0;\
    \ i < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n           \
    \ ++opening_brackets;\n        } else if (brackets[i] == '>') {\n            ++closing_brackets;\n\
    \        }\n    }\n    if (opening_brackets != brackets.size()) {\n        return\
    \ false;\n    }\n    return true;", "    bool result = true;\n    size_t len =\
    \ brackets.size();\n    for (size_t i = 0; i < len; ++i) {\n        char c = brackets[i];\n\
    \        if (c == '<') {\n            if (i + 1 < len && brackets[i + 1] == '>')\
    \ {\n                ++i;\n            } else {\n                result = false;\n\
    \            }\n        } else if (c == '>') {\n            if (i + 1 < len &&\
    \ brackets[i + 1] == '<') {\n                ++i;\n            } else {\n    \
    \            result = false;\n            }\n        }\n    }\n    return result;",
  "    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t open_brackets_index\
    \ = 0;\n    size_t close_brackets_index = 0;\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \          open_brackets_index = i;\n        } else if (brackets[i] == '>') {\n\
    \            close_brackets++;\n            close_brackets_index = i;\n      \
    \  }\n    }\n    if (open_brackets == close_brackets) {\n        return true;\n\
    \    }\n    if (open_brackets > close_brackets) {\n        return false;\n   \
    \ }\n    if (open_brackets_index == close_brackets_index) {\n        return false;\n\
    \    }\n    if (open_brackets_index > close_brackets_index) {\n        std::swap(open_brackets_index,\
    \ close_brackets_index);\n    }\n    std::string open_brackets_str = brackets.substr(0,\
    \ open_brackets_index);\n    std::string close_brackets_str = brackets.substr(close_brackets_index\
    \ + 1);\n    return correct_bracketing(open_brackets_str) && correct_bracketing(close_brackets_str);",
  "    bool result = true;\n    for (auto it = brackets.begin(); it != brackets.end();\
    \ ++it) {\n        if (*it == '<') {\n            result &= (it + 1 != brackets.end())\
    \ && (*it == '>');\n        }\n    }\n    return result;", "    // initialize\
    \ a stack to store opening brackets\n    std::stack<char> brackets_stack;\n  \
    \  // initialize a stack to store closing brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store closing brackets\n    std::stack<char> brackets_stack_open_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_",
  "    size_t brackets_size = brackets.size();\n    size_t opening_brackets_size =\
    \ 0;\n    size_t closing_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i) {\n        if (brackets[i] == '<') {\n            opening_brackets_size++;\n\
    \        } else if (brackets[i] == '>') {\n            closing_brackets_size++;\n\
    \        }\n    }\n    if (opening_brackets_size == closing_brackets_size) {\n\
    \        return true;\n    } else {\n        return false;\n    }", "    bool\
    \ result = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n   \
    \         if (brackets[brackets.size() - 1] != '>') {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;", "    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    if (open_brackets != close_brackets) {\n        return false;\n\
    \    }\n    return true;", "    size_t len = brackets.size();\n    bool result\
    \ = true;\n    for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            if (brackets[i + 1] != '>') {\n                result =\
    \ false;\n                break;\n            }\n            i += 2;\n       \
    \ } else {\n            if (brackets[i + 1] != '>') {\n                result\
    \ = false;\n                break;\n            }\n            i += 1;\n     \
    \   }\n    }\n    return result;", "    int len = brackets.size();\n    for (int\
    \ i = 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n            if (brackets[i\
    \ + 1] != '>') {\n                return false;\n            }\n        }\n  \
    \  }\n    return true;", "    size_t len = brackets.size();\n    bool result =\
    \ true;\n    for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] != '<'\
    \ && brackets[i] != '>') {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;", "    bool result = true;\n    for (auto\
    \ c : brackets) {\n        if (c != '<' && c != '>') {\n            result = false;\n\
    \            break;\n        }\n    }\n    return result;", "    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;", "    size_t brackets_size\
    \ = brackets.size();\n    bool result = true;\n    for (size_t i = 0; i < brackets_size;\
    \ i++) {\n        if (brackets[i] != '<') {\n            result = false;\n   \
    \         break;\n        }\n    }\n    for (size_t i = 0; i < brackets_size;\
    \ i++) {\n        if (brackets[i] != '>') {\n            result = false;\n   \
    \         break;\n        }\n    }\n    return result;", "    bool result = true;\n\
    \    for (auto c : brackets) {\n        if (c == '<') {\n            if (brackets[brackets.size()\
    \ - 1] != '>') {\n                result = false;\n                break;\n  \
    \          }\n        } else if (c == '>') {\n            if (brackets[brackets.size()\
    \ - 2] != '<') {\n                result = false;\n                break;\n  \
    \          }\n        }\n    }\n    return result;", "    bool result = true;\n\
    \    for (auto it = brackets.begin(); it != brackets.end(); ++it) {\n        if\
    \ (*it == '<') {\n            if (brackets.find('>', it) != brackets.end()) {\n\
    \                result = false;\n                break;\n            }\n    \
    \    } else if (*it == '>') {\n            if (brackets.find('<', it) != brackets.end())\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n    }\n    return result;", "    bool result = true;\n    for (auto\
    \ c : brackets) {\n        if (c == '<') {\n            if (brackets.find(\"<\"\
    , brackets.find(c) + 1) != std::string::npos) {\n                result = false;\n\
    \            }\n        }\n        else if (c == '>') {\n            if (brackets.find(\"\
    >\", brackets.find(c) + 1) != std::string::npos) {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;", "    size_t open_brackets\
    \ = brackets.size() - 1;\n    size_t close_brackets = 0;\n    for (size_t i =\
    \ 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n        \
    \    open_brackets--;\n        } else if (brackets[i] == '>') {\n            close_brackets++;\n\
    \        }\n    }\n    return open_brackets == close_brackets;", "    size_t open_brackets\
    \ = brackets.size();\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets--;\n\
    \        }\n        if (brackets[i] == '>') {\n            close_brackets++;\n\
    \        }\n    }\n    return open_brackets == close_brackets;", "    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  result &= (brackets[brackets.size() - 1] == '>');\n        }\n    }\n    return\
    \ result;", "    std::string opening_brackets = \"<\";\n    std::string closing_brackets\
    \ = \">\";\n    std::string opening_brackets_reversed = \">\";\n    std::string\
    \ closing_brackets_reversed = \"<\";\n    std::string opening_brackets_reversed_reversed\
    \ = \">\";\n    std::string closing_brackets_reversed_reversed = \"<\";\n    std::string\
    \ opening_brackets_reversed_reversed_reversed = \">\";\n    std::string closing_brackets_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed\
    \ = \">\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed\
    \ = \">\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \">\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \">\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \">\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \">\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \">\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \">\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reverse",
  "    bool result = true;\n    for (auto c : brackets) {\n        if (c != '<' &&\
    \ c != '>') {\n            result = false;\n        }\n    }\n    return result;",
  "    int open_brackets = 0;\n    int close_brackets = 0;\n    for(int i = 0; i <\
    \ brackets.size(); i++) {\n        if(brackets[i] == '<') {\n            open_brackets++;\n\
    \        }\n        else if(brackets[i] == '>') {\n            close_brackets++;\n\
    \        }\n    }\n    return open_brackets == close_brackets;", "    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;", "    bool result = true;\n\
    \    for (auto c : brackets) {\n        if (c != '<' && c != '>') {\n        \
    \    result = false;\n            break;\n        }\n    }\n    return result;",
  "    size_t open_brackets = brackets.size();\n    size_t close_brackets = 0;\n \
    \   for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            ++close_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            --close_brackets;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    size_t len = brackets.size();\n    bool result = true;\n\
    \    for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] != brackets[len\
    \ - i - 1]) {\n            result = false;\n            break;\n        }\n  \
    \  }\n    return result;", "    bool result = true;\n    for (size_t i = 0; i\
    \ < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n           \
    \ if (brackets[i + 1] == '>') {\n                result = true;\n            }\n\
    \        }\n    }\n    return result;", "    bool result = true;\n    for (auto\
    \ c : brackets) {\n        if (c == '<') {\n            if (brackets[brackets.size()\
    \ - 1] != '>') {\n                result = false;\n                break;\n  \
    \          }\n        } else if (c == '>') {\n            if (brackets[brackets.size()\
    \ - 2] != '<') {\n                result = false;\n                break;\n  \
    \          }\n        }\n    }\n    return result;", "    std::string brackets_copy\
    \ = brackets;\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets_copy.size(); i++) {\n        if (brackets_copy[i]\
    \ == '<') {\n            open_brackets++;\n        } else if (brackets_copy[i]\
    \ == '>') {\n            close_brackets++;\n        }\n    }\n    if (open_brackets\
    \ == close_brackets) {\n        return true;\n    }\n    return false;", "   \
    \ int len = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if\
    \ (brackets[i] == '<') {\n            if (brackets[i + 1] == '>')\n          \
    \      return true;\n        }\n    }\n    return false;", "    size_t open_brackets\
    \ = brackets.size();\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n\
    \        } else if (brackets[i] == '>') {\n            ++close_brackets;\n   \
    \     } else {\n            return false;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    int opening_brackets = brackets.size();\n    for (int\
    \ i = 0; i < opening_brackets; ++i) {\n        if (brackets[i] == '<') {\n   \
    \         if (brackets[i + 1] == '>') {\n                return true;\n      \
    \      }\n        }\n    }\n    return false;", "    int len = brackets.size();\n\
    \    for (int i = 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n    \
    \        if (brackets[i + 1] != '<') {\n                return false;\n      \
    \      }\n        }\n        else if (brackets[i] == '>') {\n            if (brackets[i\
    \ + 1] != '>') {\n                return false;\n            }\n        }\n  \
    \  }\n    return true;", "    size_t open_brackets = 0;\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            open_brackets++;\n        } else if (brackets[i] == '>')\
    \ {\n            close_brackets++;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    size_t brackets_size = brackets.size();\n    size_t\
    \ opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n    for (size_t\
    \ i = 0; i < brackets_size; ++i) {\n        if (brackets[i] == '<') {\n      \
    \      opening_brackets_size++;\n        } else if (brackets[i] == '>') {\n  \
    \          closing_brackets_size++;\n        }\n    }\n    if (opening_brackets_size\
    \ != closing_brackets_size) {\n        return false;\n    }\n    for (size_t i\
    \ = 0; i < brackets_size; ++i) {\n        if (brackets[i] == '<') {\n        \
    \    if (opening_brackets_size == closing_brackets_size) {\n                return\
    \ true;\n            }\n        } else if (brackets[i] == '>') {\n           \
    \ if (opening_brackets_size != closing_brackets_size) {\n                return\
    \ false;\n            }\n        }\n    }\n    return false;", "    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;", "    size_t brackets_size\
    \ = brackets.size();\n    bool result = true;\n    for (size_t i = 0; i < brackets_size;\
    \ i++) {\n        char c = brackets[i];\n        if (c == '<') {\n           \
    \ if (brackets[i + 1] == '>') {\n                result = true;\n            }\
    \ else {\n                result = false;\n            }\n        } else if (c\
    \ == '>') {\n            if (brackets[i + 1] != '<') {\n                result\
    \ = false;\n            }\n        } else {\n            result = false;\n   \
    \     }\n    }\n    return result;", "    size_t open_brackets = 0;\n    size_t\
    \ close_brackets = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n  \
    \      if (brackets[i] == '<') {\n            ++open_brackets;\n        } else\
    \ if (brackets[i] == '>') {\n            ++close_brackets;\n        } else {\n\
    \            return false;\n        }\n    }\n    if (open_brackets != close_brackets)\
    \ {\n        return false;\n    }\n    return true;", "    bool result = true;\n\
    \    for (auto c : brackets) {\n        if (c == '<') {\n            if (brackets.find('>',\
    \ c) == std::string::npos) {\n                result = false;\n              \
    \  break;\n            }\n        }\n        else if (c == '>') {\n          \
    \  if (brackets.find('<', c) == std::string::npos) {\n                result =\
    \ false;\n                break;\n            }\n        }\n    }\n    return\
    \ result;", "    bool result = true;\n    for (auto c : brackets) {\n        if\
    \ (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n    \
    \            result = false;\n                break;\n            }\n        }\
    \ else if (c == '>') {\n            if (brackets[brackets.size() - 1] != '<')\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n    }\n    return result;", "    size_t opening_brackets = brackets.size();\n\
    \    size_t closing_brackets = 0;\n    for (size_t i = 0; i < brackets.size();\
    \ ++i) {\n        if (brackets[i] == '<') {\n            ++opening_brackets;\n\
    \        } else if (brackets[i] == '>') {\n            ++closing_brackets;\n \
    \       } else {\n            return false;\n        }\n    }\n    return opening_brackets\
    \ == closing_brackets;", "    bool result = true;\n    for (auto c : brackets)\
    \ {\n        if (c == '<') {\n            if (brackets.find(\"<\", brackets.find(c)\
    \ + 1) != brackets.npos) {\n                result = false;\n            }\n \
    \       }\n        else if (c == '>') {\n            if (brackets.find(\">\",\
    \ brackets.find(c) + 1) != brackets.npos) {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;", "    bool result = true;\n\
    \    for (auto c : brackets) {\n        if (c == '<') {\n            if (brackets[brackets.size()\
    \ - 1] != '>') {\n                result = false;\n            }\n        }\n\
    \    }\n    return result;", "    bool result = true;\n    for (auto c : brackets)\
    \ {\n        if (c == '<') {\n            if (brackets[brackets.size() - 1] !=\
    \ '>') {\n                result = false;\n            }\n        }\n    }\n \
    \   return result;", "    bool result = true;\n    for (auto it = brackets.begin();\
    \ it != brackets.end(); ++it) {\n        if (*it == '<') {\n            result\
    \ += !(*(it + 1));\n        }\n    }\n    return result;", "    bool result =\
    \ true;\n    for (auto c : brackets) {\n        if (c != '<' && c != '>') {\n\
    \            result = false;\n        }\n    }\n    return result;", "    bool\
    \ result = true;\n    for (auto it = brackets.begin(); it != brackets.end(); ++it)\
    \ {\n        if (*it == '<') {\n            result &= (*(it + 1) != '<');\n  \
    \      }\n    }\n    return result;", "    bool result = true;\n    for (auto\
    \ c : brackets) {\n        if (c == '<') {\n            if (brackets[brackets.size()\
    \ - 1] != '>') {\n                result = false;\n            }\n        }\n\
    \    }\n    return result;", "    bool result = true;\n    for (auto c : brackets)\
    \ {\n        if (c == '<') {\n            result &= (brackets.find('>', brackets.find(c))\
    \ == std::string::npos);\n        }\n    }\n    return result;", "    // initialize\
    \ a stack\n    stack<char> brackets_stack;\n    // initialize a stack\n    stack<char>\
    \ brackets_stack_2;\n    // initialize a stack\n    stack<char> brackets_stack_3;\n\
    \    // initialize a stack\n    stack<char> brackets_stack_4;\n    // initialize\
    \ a stack\n    stack<char> brackets_stack_5;\n    // initialize a stack\n    stack<char>\
    \ brackets_stack_6;\n    // initialize a stack\n    stack<char> brackets_stack_7;\n\
    \    // initialize a stack\n    stack<char> brackets_stack_8;\n    // initialize\
    \ a stack\n    stack<char> brackets_stack_9;\n    // initialize a stack\n    stack<char>\
    \ brackets_stack_10;\n    // initialize a stack\n    stack<char> brackets_stack_11;\n\
    \    // initialize a stack\n    stack<char> brackets_stack_12;\n    // initialize\
    \ a stack\n    stack<char> brackets_stack_13;\n    // initialize a stack\n   \
    \ stack<char> brackets_stack_14;\n    // initialize a stack\n    stack<char> brackets_stack_15;\n\
    \    // initialize a stack\n    stack<char> brackets_stack_16;\n    // initialize\
    \ a stack\n    stack<char> brackets_stack_17;\n    // initialize a stack\n   \
    \ stack<char> brackets_stack_18;\n    // initialize a stack\n    stack<char> brackets_stack_19;\n\
    \    // initialize a stack\n    stack<char> brackets_stack_20;\n    // initialize\
    \ a stack\n    stack<char> brackets_stack_21;\n    // initialize a stack\n   \
    \ stack<char> brackets_stack_22;\n    // initialize a stack\n    stack<char> brackets_stack_23;\n\
    \    // initialize a stack\n    stack<char> brackets_stack_24;\n    // initialize\
    \ a stack\n    stack<char> brackets_stack_25;\n    // initialize a stack\n   \
    \ stack<char> brackets_stack_26;\n    // initialize a stack\n    stack<char> brackets_stack_27;\n\
    \    // initialize a stack\n    stack<char> brackets_stack_28;\n    // initialize\
    \ a stack\n    stack<char> brackets_stack_29;\n    // initialize a stack\n   \
    \ stack<char> brackets_stack_30;\n    // initialize a stack\n    stack<char> brackets_stack_31;\n\
    \    // initialize a stack\n    stack<char> brackets_stack_32;\n    // initialize\
    \ a stack\n    stack<char> brackets_stack_33;\n    // initialize a stack\n   \
    \ stack<char> brackets_stack_34;\n    // initialize a stack\n    stack<char> brackets_stack_35;\n\
    \    // initialize a stack\n", "    std::string opening_brackets = \"<\";\n  \
    \  std::string closing_brackets = \">\";\n    std::string opening_brackets_reversed\
    \ = \">\";\n    std::string closing_brackets_reversed = \"<\";\n    std::string\
    \ opening_brackets_reversed_2 = \">\";\n    std::string closing_brackets_reversed_2\
    \ = \"<\";\n    std::string opening_brackets_reversed_3 = \"<\";\n    std::string\
    \ closing_brackets_reversed_3 = \">\";\n    std::string opening_brackets_reversed_4\
    \ = \"<\";\n    std::string closing_brackets_reversed_4 = \">\";\n    std::string\
    \ opening_brackets_reversed_5 = \"<\";\n    std::string closing_brackets_reversed_5\
    \ = \">\";\n    std::string opening_brackets_reversed_6 = \"<\";\n    std::string\
    \ closing_brackets_reversed_6 = \">\";\n    std::string opening_brackets_reversed_7\
    \ = \"<\";\n    std::string closing_brackets_reversed_7 = \">\";\n    std::string\
    \ opening_brackets_reversed_8 = \"<\";\n    std::string closing_brackets_reversed_8\
    \ = \">\";\n    std::string opening_brackets_reversed_9 = \"<\";\n    std::string\
    \ closing_brackets_reversed_9 = \">\";\n    std::string opening_brackets_reversed_10\
    \ = \"<\";\n    std::string closing_brackets_reversed_10 = \">\";\n    std::string\
    \ opening_brackets_reversed_11 = \"<\";\n    std::string closing_brackets_reversed_11\
    \ = \">\";\n    std::string opening_brackets_reversed_12 = \"<\";\n    std::string\
    \ closing_brackets_reversed_12 = \">\";\n    std::string opening_brackets_reversed_13\
    \ = \"<\";\n    std::string closing_brackets_reversed_13 = \">\";\n    std::string\
    \ opening_brackets_reversed_14 = \"<\";\n    std::string closing_brackets_reversed_14\
    \ = \">\";\n    std::string opening_brackets_reversed_15 = \"<\";\n    std::string\
    \ closing_brackets_reversed_15 = \">\";\n    std::string opening_brackets_reversed_16\
    \ = \"<\";\n    std::string closing_brackets_reversed_16 = \">\";\n    std::string\
    \ opening_brackets_reversed_17 = \"<\";\n    std::string closing_brackets_reversed_17\
    \ = \">\";\n    std::string opening_brackets_reversed_18 = \"", "    int len =\
    \ brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;", "    bool result\
    \ = true;\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n   \
    \ for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<')\
    \ {\n            open_brackets++;\n        } else if (brackets[i] == '>') {\n\
    \            close_brackets++;\n        } else if (brackets[i] == '<' && brackets[i\
    \ + 1] == '>') {\n            close_brackets++;\n        } else if (brackets[i]\
    \ == '<' && brackets[i + 1] == '>' && brackets[i + 2] == '>') {\n            close_brackets++;\n\
    \        } else if (brackets[i] == '<' && brackets[i + 1] == '>' && brackets[i\
    \ + 2] == '>' && brackets[i + 3] == '>') {\n            close_brackets++;\n  \
    \      } else if (brackets[i] == '<' && brackets[i + 1] == '>' && brackets[i +\
    \ 2] == '>' && brackets[i + 3] == '>' && brackets[i + 4] == '>') {\n         \
    \   close_brackets++;\n        } else if (brackets[i] == '<' && brackets[i + 1]\
    \ == '>' && brackets[i + 2] == '>' && brackets[i + 3] == '>' && brackets[i + 4]\
    \ == '>' && brackets[i + 5] == '>') {\n            close_brackets++;\n       \
    \ } else if (brackets[i] == '<' && brackets[i + 1] == '>' && brackets[i + 2] ==\
    \ '>' && brackets[i + 3] == '>' && brackets[i + 4] == '>' && brackets[i + 5] ==\
    \ '>' && brackets[i + 6] == '>') {\n            close_brackets++;\n        } else\
    \ if (brackets[i] == '<' && brackets[i + 1] == '>' && brackets[i + 2] == '>' &&\
    \ brackets[i + 3] == '>' && brackets[i + 4] == '>' && brackets[i + 5] == '>' &&\
    \ brackets[i + 6] == '>' && brackets[i + 7] == '>') {\n            close_brackets++;\n\
    \        } else if (brackets[i] == '<' && brackets[i + 1] == '>' && brackets[i\
    \ + 2] == '>' && brackets[i + 3] == '>' && brackets[i + 4] == '>' && brackets[i\
    \ + 5] == '>' && brackets[i + 6] == '>' && brackets[i + 7] == '>' && brackets[i\
    \ + 8] == '>') {\n            close_brackets++;\n        } else if (brackets[i]\
    \ == '<' && brackets[i + 1] == '>' && brackets[i + 2] == '>' && brackets[i + 3]\
    \ == '>' && brackets[i + 4] == '>' && brackets[i + 5] == '>' && brackets[i + 6]\
    \ == '>' && brackets[i + 7] == '>' && brackets[i + 8] == '>' && brackets[i + 9]\
    \ == '>') {\n            close_brackets++;\n        } else if (brackets[i] ==\
    \ '<' && brackets[i + 1] == '>' && bracket", "    size_t open_brackets = brackets.size();\n\
    \    size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets.size(); i++)\
    \ {\n        if (brackets[i] == '<') {\n            open_brackets--;\n       \
    \ } else if (brackets[i] == '>') {\n            close_brackets++;\n        }\n\
    \    }\n    return open_brackets == close_brackets;", "    size_t brackets_size\
    \ = brackets.size();\n    bool result = true;\n    size_t i = 0;\n    size_t j\
    \ = 0;\n    while (i < brackets_size) {\n        if (brackets[i] == '<') {\n \
    \           i++;\n            while (i < brackets_size && brackets[i] != '<')\
    \ {\n                i++;\n            }\n            if (i >= brackets_size)\
    \ {\n                result = false;\n                break;\n            }\n\
    \            while (j < brackets_size && brackets[j] != '>') {\n             \
    \   j++;\n            }\n            if (j >= brackets_size) {\n             \
    \   result = false;\n                break;\n            }\n            i++;\n\
    \            j++;\n        }\n        else if (brackets[i] == '>') {\n       \
    \     i++;\n            while (i < brackets_size && brackets[i] != '<') {\n  \
    \              i++;\n            }\n            if (i >= brackets_size) {\n  \
    \              result = false;\n                break;\n            }\n      \
    \      while (j < brackets_size && brackets[j] != '>') {\n                j++;\n\
    \            }\n            if (j >= brackets_size) {\n                result\
    \ = false;\n                break;\n            }\n            i++;\n        \
    \    j++;\n        }\n        else if (brackets[i] == '<') {\n            i++;\n\
    \            while (i < brackets_size && brackets[i] != '<') {\n             \
    \   i++;\n            }\n            if (i >= brackets_size) {\n             \
    \   result = false;\n                break;\n            }\n            while\
    \ (j < brackets_size && brackets[j] != '>') {\n                j++;\n        \
    \    }\n            if (j >= brackets_size) {\n                result = false;\n\
    \                break;\n            }\n            i++;\n            j++;\n \
    \       }\n        else if (brackets[i] == '>') {\n            i++;\n        \
    \    while (i < brackets_size && brackets[i] != '<') {\n                i++;\n\
    \            }\n            if (i >= brackets_size) {\n                result\
    \ = false;\n                break;\n            }\n            while (j < brackets_size\
    \ && brackets[j] != '>') {\n                j++;\n            }\n            if\
    \ (j >= brackets_size) {\n                result = false;\n                break;\n\
    \            }\n            i++;\n            j++;\n        }\n        else if\
    \ (brackets[i] == '<') {\n            i++;\n            while (i < brackets_size\
    \ && brackets[i] != '<') {\n                i++;\n            }\n            if\
    \ (i >= brackets_size) {\n                result = false;\n                break;\n\
    \            }\n            while (j < brackets_size && brackets[j] != '>') {\n\
    \                j++;\n            }\n            if (j >= brackets_size) {\n\
    \                result = false;\n                break;\n            }\n    \
    \        i++;\n            j++;\n        }\n        else if (brackets[i] == '>')\
    \ {\n            i++;\n            while (i < brackets_size && brackets[i] !=\
    \ '<') {\n                i++;\n            }\n            if (i >= brackets_size)\
    \ {\n                result = false;\n                break;\n            }\n\
    \            while (j < brackets_size && brackets[j] != '>') {\n             \
    \   j", "    size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            ++opening_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            ++closing_brackets;\n        } else {\n            return false;\n\
    \        }\n    }\n    return opening_brackets == closing_brackets;", "    int\
    \ open_brackets = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    if (open_brackets != close_brackets) {\n        return false;\n\
    \    }\n    return true;", "    bool result = true;\n    for (size_t i = 0; i\
    \ < brackets.length(); i++) {\n        if (brackets[i] != '<') {\n           \
    \ result = false;\n            break;\n        }\n    }\n    return result;",
  "    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t brackets_size\
    \ = brackets.size();\n    for (size_t i = 0; i < brackets_size; i++) {\n     \
    \   char c = brackets[i];\n        if (c == '<') {\n            open_brackets++;\n\
    \        } else if (c == '>') {\n            close_brackets++;\n        }\n  \
    \  }\n    if (open_brackets == close_brackets) {\n        return true;\n    }\n\
    \    return false;", "    size_t open_brackets = brackets.size();\n    size_t\
    \ close_brackets = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n  \
    \      if (brackets[i] == '<') {\n            ++open_brackets;\n        } else\
    \ if (brackets[i] == '>') {\n            ++close_brackets;\n        } else {\n\
    \            return false;\n        }\n    }\n    return open_brackets == close_brackets;",
  "    bool result = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n\
    \            if (brackets[brackets.size() - 1] != '>') {\n                result\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ result;", "    bool result = true;\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] != '<') {\n            result = false;\n   \
    \         break;\n        }\n    }\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] != '>') {\n            result = false;\n   \
    \         break;\n        }\n    }\n    return result;", "    bool correct = true;\n\
    \    for (auto c : brackets) {\n        if (c == '<') {\n            correct =\
    \ correct && false;\n        } else if (c == '>') {\n            correct = correct\
    \ && true;\n        } else {\n            correct = correct && false;\n      \
    \  }\n    }\n    return correct;", "    bool result = true;\n    for (auto c :\
    \ brackets) {\n        if (c != '<' && c != '>') {\n            result = false;\n\
    \            break;\n        }\n    }\n    return result;", "    std::string opening_brackets\
    \ = brackets;\n    std::string closing_brackets = \"\";\n    bool result = false;\n\
    \    size_t opening_brackets_size = opening_brackets.size();\n    size_t closing_brackets_size\
    \ = closing_brackets.size();\n    for (size_t i = 0; i < opening_brackets_size;\
    \ i++) {\n        if (opening_brackets[i] == '<') {\n            closing_brackets\
    \ += \"</>\";\n        } else if (opening_brackets[i] == '>') {\n            closing_brackets\
    \ += \"</>\";\n        } else {\n            closing_brackets += \"</>\";\n  \
    \      }\n    }\n    closing_brackets += \"<\";\n    closing_brackets_size = closing_brackets.size();\n\
    \    for (size_t i = 0; i < closing_brackets_size; i++) {\n        if (closing_brackets[i]\
    \ == '<') {\n            closing_brackets += \"</>\";\n        } else if (closing_brackets[i]\
    \ == '>') {\n            closing_brackets += \"</>\";\n        } else {\n    \
    \        closing_brackets += \"</>\";\n        }\n    }\n    result = opening_brackets\
    \ == closing_brackets;\n    return result;", "    std::string opening_brackets\
    \ = \"<\";\n    std::string closing_brackets = \">\";\n    std::string opening_brackets_reversed\
    \ = \">\";\n    std::string closing_brackets_reversed = \"<\";\n    std::string\
    \ opening_brackets_reversed_reversed = \">\";\n    std::string closing_brackets_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed = \"<\"\
    ;\n    std::string closing_brackets_reversed_reversed_reversed = \"<\";\n    std::string\
    \ opening_brackets_reversed_reversed_reversed_reversed = \"<\";\n    std::string\
    \ closing_brackets_reversed_reversed_reversed_reversed = \"<\";\n    std::string\
    \ opening_brackets_reversed_reversed_reversed_reversed_reversed = \"<\";\n   \
    \ std::string closing_brackets_reversed_reversed_reversed_reversed_reversed =\
    \ \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_", "    size_t brackets_size = brackets.size();\n\
    \    bool result = true;\n    for (size_t i = 0; i < brackets_size; ++i) {\n \
    \       if (brackets[i] != '<') {\n            result = false;\n            break;\n\
    \        }\n    }\n    for (size_t i = 0; i < brackets_size; ++i) {\n        if\
    \ (brackets[i] != '>') {\n            result = false;\n            break;\n  \
    \      }\n    }\n    return result;", "    bool result = true;\n    for (auto\
    \ c : brackets) {\n        if (c == '<') {\n            if (brackets[brackets.size()\
    \ - 1] != '>') {\n                result = false;\n            }\n        }\n\
    \    }\n    return result;", "    bool result = true;\n    for (auto c : brackets)\
    \ {\n        if (c == '<') {\n            if (brackets[brackets.size() - 1] !=\
    \ '>') {\n                result = false;\n            }\n        }\n    }\n \
    \   return result;", "    std::string opening_brackets = brackets;\n    std::string\
    \ closing_brackets = brackets;\n    opening_brackets.erase(opening_brackets.begin(),\
    \ opening_brackets.begin() + 1);\n    closing_brackets.erase(closing_brackets.begin(),\
    \ closing_brackets.begin() + 1);\n    bool result = false;\n    for (size_t i\
    \ = 0; i < opening_brackets.size(); i++) {\n        if (opening_brackets[i] ==\
    \ '<') {\n            if (closing_brackets[i] == '>') {\n                result\
    \ = true;\n                break;\n            }\n        }\n    }\n    return\
    \ result;", "    bool result = true;\n    for (auto c : brackets) {\n        if\
    \ (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n    \
    \            result = false;\n            }\n        }\n    }\n    return result;",
  "    bool result = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n\
    \            if (brackets[brackets.size() - 1] != '>') {\n                result\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ result;", "    size_t len = brackets.size();\n    bool ret = true;\n    for\
    \ (size_t i = 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n        \
    \    if (brackets[i + 1] == '>') {\n                ret = false;\n           \
    \     break;\n            }\n        }\n    }\n    return ret;", "    std::string\
    \ opening_brackets = brackets;\n    std::string closing_brackets = brackets;\n\
    \    opening_brackets.erase(std::remove(opening_brackets.begin(), opening_brackets.end(),\
    \ '<'), opening_brackets.end());\n    closing_brackets.erase(std::remove(closing_brackets.begin(),\
    \ closing_brackets.end(), '>'), closing_brackets.end());\n    return opening_brackets\
    \ == closing_brackets;", "    int len = brackets.size();\n    for (int i = 0;\
    \ i < len; ++i) {\n        if (brackets[i] == '<') {\n            if (brackets[i\
    \ + 1] == '>') {\n                return true;\n            }\n        }\n   \
    \ }\n    return false;", "    // Your code here\n    bool correct = true;\n  \
    \  int opening_brackets = 0;\n    int closing_brackets = 0;\n    for(int i = 0;\
    \ i < brackets.length(); i++) {\n        if(brackets[i] == '<') {\n          \
    \  opening_brackets++;\n        }\n        if(brackets[i] == '>') {\n        \
    \    closing_brackets++;\n        }\n    }\n    if(opening_brackets == closing_brackets)\
    \ {\n        correct = false;\n    }\n    return correct;", "    bool result =\
    \ true;\n    for (auto c : brackets) {\n        if (c == '<') {\n            result\
    \ &= (brackets.find('>', brackets.find(c)) == std::string::npos);\n        }\n\
    \    }\n    return result;", "    size_t len = brackets.size();\n    bool res\
    \ = true;\n    for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] !=\
    \ '<') {\n            res = false;\n            break;\n        }\n    }\n   \
    \ for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] != '>') {\n    \
    \        res = false;\n            break;\n        }\n    }\n    return res;",
  "    int open_brackets = brackets.size();\n    int close_brackets = 0;\n    for\
    \ (int i = 0; i < open_brackets; i++) {\n        if (brackets[i] == '<') {\n \
    \           close_brackets++;\n        }\n    }\n    if (close_brackets != open_brackets)\
    \ {\n        return false;\n    }\n    return true;", "    std::string opening_brackets\
    \ = brackets;\n    std::string closing_brackets;\n    size_t opening_brackets_size\
    \ = opening_brackets.size();\n    size_t closing_brackets_size = 0;\n    for (size_t\
    \ i = 0; i < opening_brackets_size; i++) {\n        if (opening_brackets[i] ==\
    \ '<') {\n            closing_brackets += opening_brackets[i];\n            closing_brackets_size++;\n\
    \        }\n    }\n    for (size_t i = 0; i < opening_brackets_size; i++) {\n\
    \        if (opening_brackets[i] == '>') {\n            closing_brackets += opening_brackets[i];\n\
    \            closing_brackets_size++;\n        }\n    }\n    if (closing_brackets_size\
    \ != opening_brackets_size) {\n        return false;\n    }\n    return true;",
  "    size_t brackets_size = brackets.size();\n    size_t open_brackets_size = 0;\n\
    \    size_t close_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i) {\n        if (brackets[i] == '<') {\n            open_brackets_size++;\n\
    \        } else if (brackets[i] == '>') {\n            close_brackets_size++;\n\
    \        }\n    }\n    if (open_brackets_size != close_brackets_size) {\n    \
    \    return false;\n    }\n    return true;", "    size_t open_brackets = 0;\n\
    \    size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets.size(); i++)\
    \ {\n        if (brackets[i] == '<') {\n            open_brackets++;\n       \
    \ } else if (brackets[i] == '>') {\n            close_brackets++;\n        }\n\
    \    }\n    if (open_brackets != close_brackets) {\n        return false;\n  \
    \  }\n    return true;", "    int len = brackets.size();\n    for (int i = 0;\
    \ i < len; ++i) {\n        if (brackets[i] == '<') {\n            if (brackets[i\
    \ + 1] == '>') {\n                return true;\n            }\n        }\n   \
    \ }\n    return false;", "    size_t len = brackets.size();\n    bool result =\
    \ true;\n    for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] != '<')\
    \ result = false;\n    }\n    return result;", "    size_t brackets_size = brackets.size();\n\
    \    bool result = true;\n    for (size_t i = 0; i < brackets_size; ++i) {\n \
    \       if (brackets[i] != brackets[brackets_size - i - 1]) {\n            result\
    \ = false;\n            break;\n        }\n    }\n    return result;", "    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n\
    \        } else if (brackets[i] == '>') {\n            close_brackets++;\n   \
    \     }\n    }\n    return open_brackets == close_brackets;", "    size_t open_brackets\
    \ = brackets.size();\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n\
    \        } else if (brackets[i] == '>') {\n            ++close_brackets;\n   \
    \     } else {\n            return false;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    bool result = true;\n    for (auto it = brackets.begin();\
    \ it != brackets.end(); ++it) {\n        if (*it == '<') {\n            if (brackets.find('>',\
    \ it) != brackets.end()) {\n                result = false;\n                break;\n\
    \            }\n        } else if (*it == '>') {\n            if (brackets.find('<',\
    \ it) != brackets.end()) {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;", "    bool result = true;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] !=\
    \ '<' && brackets[i] != '>') {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;", "    bool correct = false;\n    for (auto\
    \ c : brackets) {\n        if (c == '<') {\n            correct = true;\n    \
    \    }\n    }\n    return correct;", "    size_t open_brackets = 0;\n    size_t\
    \ close_brackets = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n  \
    \      if (brackets[i] == '<') {\n            open_brackets++;\n        } else\
    \ if (brackets[i] == '>') {\n            close_brackets++;\n        }\n    }\n\
    \    return open_brackets == close_brackets;", "    bool result = true;\n    for\
    \ (auto c : brackets) {\n        if (c == '<') {\n            if (brackets[brackets.size()\
    \ - 1] != '>') {\n                result = false;\n            }\n        }\n\
    \    }\n    return result;", "    std::string opening_brackets = brackets;\n \
    \   for (size_t i = 0; i < opening_brackets.size(); ++i) {\n        if (opening_brackets[i]\
    \ == '<') {\n            if (opening_brackets[i + 1] == '>') {\n             \
    \   return true;\n            }\n        }\n    }\n    return false;", "    size_t\
    \ len = brackets.size();\n    bool result = true;\n    for (size_t i = 0; i <\
    \ len; ++i) {\n        if (brackets[i] != \"<\") {\n            result = false;\n\
    \            break;\n        }\n    }\n    for (size_t i = 0; i < len; ++i) {\n\
    \        if (brackets[i] != \">\") {\n            result = false;\n          \
    \  break;\n        }\n    }\n    return result;", "    int len = brackets.size();\n\
    \    for (int i = 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n    \
    \        if (brackets[i + 1] != '<') {\n                return false;\n      \
    \      }\n        } else if (brackets[i] == '>') {\n            if (brackets[i\
    \ + 1] != '>') {\n                return false;\n            }\n        }\n  \
    \  }\n    return true;", "    bool correct = true;\n    for (auto c : brackets)\
    \ {\n        if (c == '<') {\n            correct = false;\n            break;\n\
    \        }\n    }\n    return correct;", "    bool result = true;\n    for (auto\
    \ c : brackets) {\n        if (c != \">\" && c != \"<\" && c != \"<\" && c !=\
    \ \">\") {\n            result = false;\n        }\n    }\n    return result;",
  "    size_t brackets_size = brackets.size();\n    if (brackets_size < 2)\n     \
    \   return false;\n    size_t opening_brackets_size = brackets.find_first_not_of(\"\
    <>\");\n    if (opening_brackets_size == std::string::npos)\n        return false;\n\
    \    size_t closing_brackets_size = brackets.find_last_not_of(\"<>\");\n    if\
    \ (closing_brackets_size == std::string::npos)\n        return false;\n    if\
    \ (opening_brackets_size != closing_brackets_size)\n        return false;\n  \
    \  size_t opening_brackets_end = opening_brackets_size;\n    for (size_t i = opening_brackets_size;\
    \ i < brackets_size; ++i) {\n        char c = brackets[i];\n        if (c == '>')\n\
    \            opening_brackets_end = i;\n    }\n    size_t closing_brackets_start\
    \ = closing_brackets_size;\n    for (size_t i = closing_brackets_size; i < brackets_size;\
    \ ++i) {\n        char c = brackets[i];\n        if (c == '<')\n            closing_brackets_start\
    \ = i;\n    }\n    if (opening_brackets_end != closing_brackets_start)\n     \
    \   return false;\n    return true;", "    bool result = true;\n    for (auto\
    \ c : brackets) {\n        if (c == '<') {\n            if (brackets.find('>',\
    \ brackets.find(c) + 1) != std::string::npos) {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;", "    int len = brackets.size();\n\
    \    for (int i = 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n    \
    \        if (brackets[i + 1] == '>')\n                return true;\n        }\n\
    \    }\n    return false;", "    size_t open_brackets = brackets.size();\n   \
    \ size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets.size(); ++i)\
    \ {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n       \
    \ } else if (brackets[i] == '>') {\n            ++close_brackets;\n        }\n\
    \    }\n    return open_brackets == close_brackets;", "    size_t brackets_size\
    \ = brackets.size();\n    size_t opening_brackets_size = 0;\n    for (size_t i\
    \ = 0; i < brackets_size; ++i) {\n        if (brackets[i] == '<') {\n        \
    \    opening_brackets_size++;\n        }\n    }\n    if (opening_brackets_size\
    \ == 0) {\n        return false;\n    }\n    size_t closing_brackets_size = 0;\n\
    \    for (size_t i = brackets_size - 1; i >= 0; --i) {\n        if (brackets[i]\
    \ == '>') {\n            closing_brackets_size++;\n        }\n    }\n    if (closing_brackets_size\
    \ == 0) {\n        return false;\n    }\n    if (opening_brackets_size != closing_brackets_size)\
    \ {\n        return false;\n    }\n    for (size_t i = 0; i < brackets_size; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] != '>')\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ true;", "    bool result = true;\n    for (size_t i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] != '<') {\n            result = false;\n   \
    \         break;\n        }\n    }\n    return result;", "    bool result = true;\n\
    \    for (auto c : brackets) {\n        if (c == '<') {\n            if (brackets[brackets.size()\
    \ - 1] != '>') {\n                result = false;\n                break;\n  \
    \          }\n        } else if (c == '>') {\n            if (brackets[brackets.size()\
    \ - 2] != '<') {\n                result = false;\n                break;\n  \
    \          }\n        }\n    }\n    return result;", "    size_t len = brackets.size();\n\
    \    bool ret = true;\n    for (size_t i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                ret =\
    \ false;\n                break;\n            }\n        }\n    }\n    return\
    \ ret;", "    bool result = true;\n    for (size_t i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] != '<') {\n            result = false;\n   \
    \         break;\n        }\n    }\n    for (size_t i = brackets.length(); result\
    \ && i < brackets.length(); i++) {\n        if (brackets[i] != '>') {\n      \
    \      result = false;\n            break;\n        }\n    }\n    return result;",
  "    int len = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if\
    \ (brackets[i] == '<') {\n            if (brackets[i + 1] == '>') {\n        \
    \        return true;\n            }\n        }\n    }\n    return false;", " \
    \   bool result = true;\n    for (auto c : brackets) {\n        if (c != \">\"\
    \ && c != \"<\" && c != \"<\" && c != \">\") {\n            result = false;\n\
    \        }\n    }\n    return result;", "    size_t open_brackets = brackets.size();\n\
    \    size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets.size(); i++)\
    \ {\n        if (brackets[i] == '<') {\n            open_brackets--;\n       \
    \ }\n        if (brackets[i] == '>') {\n            close_brackets++;\n      \
    \  }\n    }\n    return open_brackets == close_brackets;", "    bool correct =\
    \ true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ != '<') {\n            correct = false;\n            break;\n        }\n   \
    \ }\n    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ != '>') {\n            correct = false;\n            break;\n        }\n   \
    \ }\n    return correct;", "    size_t open_brackets = 0;\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            open_brackets++;\n        } else if (brackets[i] == '>')\
    \ {\n            close_brackets++;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    int open_brackets = brackets.size() - 1;\n    int\
    \ close_brackets = 0;\n    for (int i = 0; i < brackets.size(); i++) {\n     \
    \   if (brackets[i] == '<') {\n            open_brackets--;\n        } else if\
    \ (brackets[i] == '>') {\n            close_brackets++;\n        }\n    }\n  \
    \  return open_brackets == close_brackets;", "    std::string opening_brackets\
    \ = \"<\";\n    std::string closing_brackets = \">\";\n    std::string opening_brackets_reversed\
    \ = \">\";\n    std::string closing_brackets_reversed = \"<\";\n    std::string\
    \ opening_brackets_reversed_reversed = \">\";\n    std::string closing_brackets_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed = \"<\"\
    ;\n    std::string closing_brackets_reversed_reversed_reversed = \"<\";\n    std::string\
    \ opening_brackets_reversed_reversed_reversed_reversed = \"<\";\n    std::string\
    \ closing_brackets_reversed_reversed_reversed_reversed = \"<\";\n    std::string\
    \ opening_brackets_reversed_reversed_reversed_reversed_reversed = \"<\";\n   \
    \ std::string closing_brackets_reversed_reversed_reversed_reversed_reversed =\
    \ \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"<\";\n    std::string closing_brackets_", "    size_t open_brackets = brackets.size();\n\
    \    size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets.size(); ++i)\
    \ {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n       \
    \ } else if (brackets[i] == '>') {\n            ++close_brackets;\n        }\n\
    \    }\n    return open_brackets == close_brackets;", "    std::string opening_brackets\
    \ = brackets;\n    std::string closing_brackets = brackets;\n    std::string opening_brackets_copy\
    \ = opening_brackets;\n    std::string closing_brackets_copy = closing_brackets;\n\
    \    bool result = true;\n    for (size_t i = 0; i < opening_brackets.size();\
    \ i++) {\n        if (opening_brackets_copy[i] == '<') {\n            opening_brackets_copy.erase(opening_brackets_copy.begin()\
    \ + i);\n            closing_brackets_copy.erase(closing_brackets_copy.begin()\
    \ + i);\n        }\n    }\n    for (size_t i = 0; i < closing_brackets.size();\
    \ i++) {\n        if (closing_brackets_copy[i] == '>') {\n            opening_brackets_copy.erase(opening_brackets_copy.begin()\
    \ + i);\n            closing_brackets_copy.erase(closing_brackets_copy.begin()\
    \ + i);\n        }\n    }\n    if (opening_brackets_copy == closing_brackets_copy)\
    \ {\n        result = false;\n    }\n    return result;", "    bool result = true;\n\
    \    for (auto c : brackets) {\n        if (c == '<') {\n            result &=\
    \ (brackets[brackets.size() - 1] == '>');\n        } else {\n            result\
    \ &= (brackets[brackets.size() - 1] == '<');\n        }\n    }\n    return result;",
  "    bool result = true;\n    for (auto c : brackets) {\n        if (c != '<' &&\
    \ c != '>') {\n            result = false;\n            break;\n        }\n  \
    \  }\n    return result;", "    size_t open_brackets = 0;\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            open_brackets++;\n        } else if (brackets[i] == '>')\
    \ {\n            close_brackets++;\n        }\n    }\n    if (open_brackets !=\
    \ close_brackets) {\n        return false;\n    }\n    return true;", "    int\
    \ len = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;", "    // Your code\
    \ here\n    bool flag = false;\n    for(int i = 0; i < brackets.size() - 1; i++)\
    \ {\n        if(brackets[i] == '<' && brackets[i + 1] == '>') {\n            flag\
    \ = true;\n        }\n    }\n    return flag;", "    bool result = true;\n   \
    \ for (auto c : brackets) {\n        if (c == '<') {\n            if (brackets[brackets.size()\
    \ - 1] != '>') {\n                result = false;\n            }\n        }\n\
    \    }\n    return result;", "    std::string brackets_copy = brackets;\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t open_brackets_size\
    \ = brackets_copy.size();\n    size_t close_brackets_size = brackets_copy.size();\n\
    \    bool found = false;\n    while (!found && open_brackets < open_brackets_size)\
    \ {\n        if (brackets_copy[open_brackets] == '<') {\n            open_brackets++;\n\
    \        } else if (brackets_copy[open_brackets] == '>') {\n            close_brackets++;\n\
    \        } else {\n            found = true;\n        }\n    }\n    if (open_brackets\
    \ == close_brackets) {\n        return true;\n    } else {\n        return false;\n\
    \    }", "    bool result = true;\n    for (auto c : brackets) {\n        if (c\
    \ == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n       \
    \         result = false;\n                break;\n            }\n        } else\
    \ if (c == '>') {\n            if (brackets[brackets.size() - 1] != '<') {\n \
    \               result = false;\n                break;\n            }\n     \
    \   }\n    }\n    return result;", "    std::string opening_brackets = brackets;\n\
    \    std::string closing_brackets = brackets;\n    opening_brackets.erase(std::remove(opening_brackets.begin(),\
    \ opening_brackets.end(), '<'), opening_brackets.end());\n    closing_brackets.erase(std::remove(closing_brackets.begin(),\
    \ closing_brackets.end(), '>'), closing_brackets.end());\n    return opening_brackets\
    \ == closing_brackets;", "    std::string opening_brackets, closing_brackets;\n\
    \    opening_brackets = brackets.substr(0, brackets.size() - 1);\n    closing_brackets\
    \ = brackets.substr(brackets.size() - 1, brackets.size());\n    for (int i = 0;\
    \ i < opening_brackets.size(); i++) {\n        if (opening_brackets[i] == '<'\
    \ && closing_brackets[i] == '>') {\n            return true;\n        }\n    }\n\
    \    return false;", "    size_t open_brackets = 0;\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++open_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            ++close_brackets;\n        } else {\n            return false;\n\
    \        }\n    }\n    return open_brackets == close_brackets;", "    size_t len\
    \ = brackets.size();\n    bool ret = true;\n    for (size_t i = 0; i < len; ++i)\
    \ {\n        if (brackets[i] != '<') {\n            ret = false;\n           \
    \ break;\n        }\n    }\n    return ret;", "    int opening_brackets = 0;\n\
    \    int closing_brackets = 0;\n    for(int i = 0; i < brackets.size(); i++) {\n\
    \        if(brackets[i] == '<') {\n            opening_brackets++;\n        }\n\
    \        if(brackets[i] == '>') {\n            closing_brackets++;\n        }\n\
    \    }\n    return opening_brackets == closing_brackets;", "    int opening_brackets\
    \ = 0;\n    int closing_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            opening_brackets++;\n\
    \        } else if (brackets[i] == '>') {\n            closing_brackets++;\n \
    \       }\n    }\n    return opening_brackets == closing_brackets;", "    size_t\
    \ len = brackets.size();\n    bool result = true;\n    for (size_t i = 0; i <\
    \ len; ++i) {\n        if (brackets[i] != brackets[len - i - 1]) {\n         \
    \   result = false;\n            break;\n        }\n    }\n    return result;",
  "    size_t open_brackets = brackets.size();\n    size_t close_brackets = 0;\n \
    \   for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            ++close_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            --close_brackets;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    bool result = true;\n    for (auto c : brackets) {\n\
    \        if (c == '<') {\n            result &= (brackets.find('>') != brackets.npos);\n\
    \        } else {\n            result &= (brackets.find('<') != brackets.npos);\n\
    \        }\n    }\n    return result;", "    size_t brackets_size = brackets.size();\n\
    \    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    for (size_t i = 0; i < brackets_size; ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            ++opening_brackets_size;\n        } else if (brackets[i]\
    \ == '>') {\n            ++closing_brackets_size;\n        }\n    }\n    if (opening_brackets_size\
    \ != closing_brackets_size) {\n        return false;\n    }\n    for (size_t i\
    \ = 0; i < brackets_size; ++i) {\n        if (brackets[i] == '<') {\n        \
    \    if (opening_brackets_size != closing_brackets_size) {\n                return\
    \ false;\n            }\n        } else if (brackets[i] == '>') {\n          \
    \  if (opening_brackets_size != closing_brackets_size) {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;", "    // initialize\
    \ a stack to store opening brackets.\n    std::stack<char> open_brackets;\n  \
    \  // initialize a stack to store closing brackets.\n    std::stack<char> close_brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.\n    std::stack<char> brackets;\n\
    \    // initialize a stack to store brackets.", "    size_t open_brackets = 0;\n\
    \    size_t close_brackets = 0;\n    for (size_t i = 0; i < brackets.size(); ++i)\
    \ {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n       \
    \ } else if (brackets[i] == '>') {\n            ++close_brackets;\n        }\n\
    \    }\n    return open_brackets == close_brackets;", "    size_t len = brackets.size();\n\
    \    bool result = true;\n    for (size_t i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ != '<') {\n            result = false;\n            break;\n        }\n    }\n\
    \    for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] != '>') {\n \
    \           result = false;\n            break;\n        }\n    }\n    return\
    \ result;", "    int len = brackets.size();\n    for (int i = 0; i < len; i++)\
    \ {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] == '>')\
    \ {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;", "    bool result = true;\n    for (auto c : brackets) {\n        if\
    \ (c != '<' && c != '>') {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;", "    size_t brackets_size = brackets.size();\n\
    \    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    for (size_t i = 0; i < brackets_size; ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            opening_brackets_size++;\n        } else if (brackets[i]\
    \ == '>') {\n            closing_brackets_size++;\n        }\n    }\n    if (opening_brackets_size\
    \ == closing_brackets_size) {\n        return true;\n    }\n    return false;",
  "    size_t brackets_size = brackets.size();\n    if (brackets_size < 2)\n     \
    \   return false;\n    size_t opening_brackets_size = brackets.find_first_of(\"\
    <\");\n    size_t closing_brackets_size = brackets.find_first_of(\">\");\n   \
    \ if (opening_brackets_size == std::string::npos || closing_brackets_size == std::string::npos)\n\
    \        return false;\n    size_t opening_brackets_pos = opening_brackets_size;\n\
    \    size_t closing_brackets_pos = closing_brackets_size;\n    size_t opening_brackets_count\
    \ = opening_brackets_size;\n    size_t closing_brackets_count = closing_brackets_size;\n\
    \    while (opening_brackets_pos != std::string::npos) {\n        opening_brackets_count--;\n\
    \        opening_brackets_pos = brackets.find_first_of(\"<\", opening_brackets_pos\
    \ + 1);\n    }\n    while (closing_brackets_pos != std::string::npos) {\n    \
    \    closing_brackets_count--;\n        closing_brackets_pos = brackets.find_first_of(\"\
    >\", closing_brackets_pos + 1);\n    }\n    if (opening_brackets_count != closing_brackets_count)\n\
    \        return false;\n    size_t opening_brackets_pos = 0;\n    size_t closing_brackets_pos\
    \ = 0;\n    size_t opening_brackets_count = 0;\n    size_t closing_brackets_count\
    \ = 0;\n    while (opening_brackets_pos != std::string::npos && closing_brackets_pos\
    \ != std::string::npos) {\n        opening_brackets_count++;\n        closing_brackets_count++;\n\
    \        opening_brackets_pos = brackets.find_first_of(\"<\", opening_brackets_pos\
    \ + 1);\n        closing_brackets_pos = brackets.find_first_of(\">\", closing_brackets_pos\
    \ + 1);\n    }\n    if (opening_brackets_count != closing_brackets_count)\n  \
    \      return false;\n    size_t opening_brackets_pos = 0;\n    size_t closing_brackets_pos\
    \ = 0;\n    size_t opening_brackets_count = 0;\n    size_t closing_brackets_count\
    \ = 0;\n    while (opening_brackets_pos != std::string::npos && closing_brackets_pos\
    \ != std::string::npos) {\n        opening_brackets_count++;\n        closing_brackets_count++;\n\
    \        opening_brackets_pos = brackets.find_first_of(\"<\", opening_brackets_pos\
    \ + 1);", "    size_t open_brackets = brackets.size();\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++close_brackets;\n        } else if (brackets[i] ==\
    \ '>') {\n            --close_brackets;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    bool result = true;\n    for (auto c : brackets) {\n\
    \        if (c != \">\" && c != \"<\" && c != \"<\" && c != \">\") {\n       \
    \     result = false;\n            break;\n        }\n    }\n    return result;",
  "    int open_brackets = 0;\n    int close_brackets = 0;\n    for (int i = 0; i\
    \ < brackets.length(); ++i) {\n        if (brackets[i] == '<') {\n           \
    \ ++open_brackets;\n        } else if (brackets[i] == '>') {\n            ++close_brackets;\n\
    \        }\n    }\n    return open_brackets == close_brackets;", "    bool result\
    \ = true;\n    for (auto it = brackets.begin(); it != brackets.end(); ++it) {\n\
    \        if (*it == '<') {\n            if (brackets.find('>', it) != brackets.end())\
    \ {\n                result = false;\n                break;\n            }\n\
    \        } else if (*it == '>') {\n            if (brackets.find('<', it) != brackets.end())\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n    }\n    return result;", "    size_t bracket_count = 0;\n    for\
    \ (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] == '<')\
    \ {\n            ++bracket_count;\n        } else if (brackets[i] == '>') {\n\
    \            --bracket_count;\n        }\n    }\n    return bracket_count == 0;",
  "    int len = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if\
    \ (brackets[i] == '<') {\n            if (brackets[i + 1] == '>') {\n        \
    \        return true;\n            }\n        }\n    }\n    return false;", " \
    \   bool result = true;\n    for (auto c : brackets) {\n        if (c != '<' &&\
    \ c != '>') {\n            result = false;\n            break;\n        }\n  \
    \  }\n    return result;", "    size_t open_brackets = brackets.size();\n    size_t\
    \ close_brackets = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n  \
    \      if (brackets[i] == '<') {\n            ++open_brackets;\n        } else\
    \ if (brackets[i] == '>') {\n            ++close_brackets;\n        } else {\n\
    \            return false;\n        }\n    }\n    return open_brackets == close_brackets;",
  "    bool result = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n \
    \       if (brackets[i] != '<') {\n            result = false;\n            break;\n\
    \        }\n    }\n    for (size_t i = 0; i < brackets.size(); i++) {\n      \
    \  if (brackets[i] != '>') {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;", "    size_t brackets_size = brackets.size();\n\
    \    bool result = true;\n    for (size_t i = 0; i < brackets_size; ++i) {\n \
    \       if (brackets[i] != '<') result = false;\n    }\n    return result;", " \
    \   bool result = true;\n    for (auto c : brackets) {\n        if (c == '<')\
    \ {\n            if (brackets[brackets.size() - 1] != '>') {\n               \
    \ result = false;\n            }\n        }\n    }\n    return result;", "   \
    \ size_t len = brackets.size();\n    bool ret = true;\n    for (size_t i = 0;\
    \ i < len; ++i) {\n        if (brackets[i] != '<') {\n            ret = false;\n\
    \            break;\n        }\n    }\n    return ret;", "    size_t len = brackets.size();\n\
    \    bool result = true;\n    for (size_t i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ != '<') result = false;\n    }\n    return result;", "    size_t open_brackets\
    \ = 0;\n    size_t close_brackets = 0;\n    size_t open_brackets_size = brackets.size();\n\
    \    size_t close_brackets_size = open_brackets_size;\n    for (size_t i = 0;\
    \ i < open_brackets_size; i++) {\n        if (brackets[i] == '<') {\n        \
    \    open_brackets++;\n        }\n        if (brackets[i] == '>') {\n        \
    \    close_brackets++;\n        }\n    }\n    if (open_brackets == close_brackets)\
    \ {\n        return true;\n    }\n    return false;", "    size_t len = brackets.size();\n\
    \    bool ans = false;\n    for (size_t i = 0; i < len; ++i) {\n        char c\
    \ = brackets[i];\n        if (c == '<') {\n            if (brackets[i + 1] ==\
    \ '>') {\n                ans = true;\n            }\n        }\n    }\n    return\
    \ ans;", "    // Your code here\n    bool correct = true;\n    for(int i = 0;\
    \ i < brackets.size(); i++) {\n        if(brackets[i] == '<') {\n            if(brackets[i+1]\
    \ == '>') {\n                correct = false;\n            }\n        }\n    }\n\
    \    return correct;", "    size_t open_brackets = brackets.size();\n    size_t\
    \ close_brackets = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n  \
    \      if (brackets[i] == '<') {\n            ++open_brackets;\n        } else\
    \ if (brackets[i] == '>') {\n            ++close_brackets;\n        } else {\n\
    \            return false;\n        }\n    }\n    return open_brackets == close_brackets;",
  "    size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n    for (size_t\
    \ i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n    \
    \        ++opening_brackets;\n        } else if (brackets[i] == '>') {\n     \
    \       ++closing_brackets;\n        } else {\n            return false;\n   \
    \     }\n    }\n    return opening_brackets == closing_brackets;", "    std::string\
    \ opening_brackets = brackets;\n    std::string closing_brackets;\n    for (size_t\
    \ i = 0; i < opening_brackets.size(); i++) {\n        if (opening_brackets[i]\
    \ == '<') {\n            closing_brackets += '<';\n        } else if (opening_brackets[i]\
    \ == '>') {\n            closing_brackets += '>';\n        } else {\n        \
    \    return false;\n        }\n    }\n    return closing_brackets == brackets;",
  "    std::string opening_brackets = brackets;\n    std::string closing_brackets\
    \ = brackets;\n    opening_brackets.erase(opening_brackets.begin(), std::find(opening_brackets.begin(),\
    \ opening_brackets.end(), '<'));\n    closing_brackets.erase(closing_brackets.begin(),\
    \ std::find(closing_brackets.begin(), closing_brackets.end(), '>'));\n    return\
    \ opening_brackets == closing_brackets;", "    bool result = true;\n    for (auto\
    \ c : brackets) {\n        if (c == '<') {\n            if (brackets.find('>',\
    \ c) == std::string::npos) {\n                result = false;\n            }\n\
    \        }\n    }\n    return result;", "    size_t brackets_size = brackets.size();\n\
    \    bool result = true;\n    for (size_t i = 0; i < brackets_size; ++i) {\n \
    \       if (brackets[i] == '<') {\n            if (brackets[i - 1] == '>') {\n\
    \                result = false;\n                break;\n            }\n    \
    \    }\n    }\n    return result;", "    std::string opening_brackets = \"<\"\
    ;\n    std::string closing_brackets = \">\";\n    std::string opening_brackets_reversed\
    \ = \">\";\n    std::string closing_brackets_reversed = \"<\";\n    std::string\
    \ opening_brackets_reversed_2 = \">\";\n    std::string closing_brackets_reversed_2\
    \ = \"<\";\n    std::string opening_brackets_reversed_3 = \"<\";\n    std::string\
    \ closing_brackets_reversed_3 = \">\";\n    std::string opening_brackets_reversed_4\
    \ = \"<\";\n    std::string closing_brackets_reversed_4 = \">\";\n    std::string\
    \ opening_brackets_reversed_5 = \"<\";\n    std::string closing_brackets_reversed_5\
    \ = \">\";\n    std::string opening_brackets_reversed_6 = \"<\";\n    std::string\
    \ closing_brackets_reversed_6 = \">\";\n    std::string opening_brackets_reversed_7\
    \ = \"<\";\n    std::string closing_brackets_reversed_7 = \">\";\n    std::string\
    \ opening_brackets_reversed_8 = \"<\";\n    std::string closing_brackets_reversed_8\
    \ = \">\";\n    std::string opening_brackets_reversed_9 = \"<\";\n    std::string\
    \ closing_brackets_reversed_9 = \">\";\n    std::string opening_brackets_reversed_10\
    \ = \"<\";\n    std::string closing_brackets_reversed_10 = \">\";\n    std::string\
    \ opening_brackets_reversed_11 = \"<\";\n    std::string closing_brackets_reversed_11\
    \ = \">\";\n    std::string opening_brackets_reversed_12 = \"<\";\n    std::string\
    \ closing_brackets_reversed_12 = \">\";\n    std::string opening_brackets_reversed_13\
    \ = \"<\";\n    std::string closing_brackets_reversed_13 = \">\";\n    std::string\
    \ opening_brackets_reversed_14 = \"<\";\n    std::string closing_brackets_reversed_14\
    \ = \">\";\n    std::string opening_brackets_reversed_15 = \"<\";\n    std::string\
    \ closing_brackets_reversed_15 = \">\";\n    std::string opening_brackets_reversed_16\
    \ = \"<\";\n    std::string closing_brackets_reversed_16 = \">\";\n    std::string\
    \ opening_brackets_reversed_17 = \"<\";\n    std::string closing_brackets_reversed_17\
    \ = \">\";\n    std::string opening_brackets_reversed_18 = \"", "    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                result\
    \ = true;\n            } else {\n                result = false;\n           \
    \ }\n        }\n    }\n    return result;", "    bool result = true;\n    for\
    \ (auto c : brackets) {\n        if (c != '<' && c != '>') {\n            result\
    \ = false;\n        }\n    }\n    return result;", "    size_t len = brackets.size();\n\
    \    bool result = true;\n    for (size_t i = 0; i < len; ++i) {\n        char\
    \ c = brackets[i];\n        if (c == '<') {\n            if (i < len - 1 && brackets[i\
    \ + 1] == '>') {\n                result = true;\n            } else {\n     \
    \           result = false;\n            }\n        }\n    }\n    return result;",
  "    bool result = true;\n    size_t brackets_size = brackets.size();\n    for (size_t\
    \ i = 0; i < brackets_size; ++i) {\n        if (brackets[i] == '<') {\n      \
    \      if (brackets[i + 1] == '>') {\n                result = true;\n       \
    \     } else {\n                result = false;\n            }\n        } else\
    \ {\n            result = false;\n        }\n    }\n    return result;", "   \
    \ size_t brackets_size = brackets.size();\n    size_t open_brackets_size = 0;\n\
    \    size_t close_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ i++) {\n        char c = brackets[i];\n        if (c == '<') {\n           \
    \ open_brackets_size++;\n        } else if (c == '>') {\n            close_brackets_size++;\n\
    \        }\n    }\n    if (open_brackets_size != close_brackets_size) {\n    \
    \    return false;\n    }\n    return true;", "    bool result = true;\n    for\
    \ (auto c : brackets) {\n        if (c == '<') {\n            if (brackets[brackets.size()\
    \ - 1] != '>') {\n                result = false;\n                break;\n  \
    \          }\n        } else if (c == '>') {\n            if (brackets[brackets.size()\
    \ - 2] != '<') {\n                result = false;\n                break;\n  \
    \          }\n        }\n    }\n    return result;", "    int len = brackets.size();\n\
    \    for (int i = 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n    \
    \        if (brackets[i - 1] == '>') {\n                return true;\n       \
    \     }\n        }\n    }\n    return false;", "    bool result = true;\n    size_t\
    \ len = brackets.size();\n    for (size_t i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] != '<') {\n                result\
    \ = false;\n                break;\n            }\n        } else if (brackets[i]\
    \ == '>') {\n            if (brackets[i + 1] != '>') {\n                result\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ result;", "    int open_brackets = 0;\n    int close_brackets = 0;\n    std::string\
    \ bracket;\n    std::string brackets;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        bracket = brackets.substr(i, 1);\n        if (bracket == \"\
    <\") {\n            open_brackets++;\n        } else if (bracket == \">\") {\n\
    \            close_brackets++;\n        } else {\n            std::cout << \"\
    wrong bracketing \" << bracket << std::endl;\n            return false;\n    \
    \    }\n    }\n    if (open_brackets != close_brackets) {\n        std::cout <<\
    \ \"wrong bracketing \" << std::endl;\n        return false;\n    }\n    return\
    \ true;", "    int open_brackets = 0;\n    int close_brackets = 0;\n    for (int\
    \ i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n    \
    \        open_brackets++;\n        } else if (brackets[i] == '>') {\n        \
    \    close_brackets++;\n        }\n    }\n    if (open_brackets == close_brackets)\
    \ {\n        return true;\n    } else {\n        return false;\n    }", "    size_t\
    \ len = brackets.size();\n    bool result = true;\n    for (size_t i = 0; i <\
    \ len; ++i) {\n        if (brackets[i] != '>') {\n            result = false;\n\
    \            break;\n        }\n    }\n    return result;", "    size_t brackets_size\
    \ = brackets.size();\n    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size\
    \ = 0;\n    for (size_t i = 0; i < brackets_size; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            opening_brackets_size++;\n        } else if (brackets[i]\
    \ == '>') {\n            closing_brackets_size++;\n        }\n    }\n    if (opening_brackets_size\
    \ == closing_brackets_size) {\n        return true;\n    }\n    return false;",
  "    size_t open_brackets = brackets.size();\n    size_t close_brackets = 0;\n \
    \   for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            ++close_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            --close_brackets;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    bool correct = true;\n    for (auto it = brackets.begin();\
    \ it != brackets.end(); ++it) {\n        if (*it == '<') {\n            correct\
    \ = correct && (*(brackets.begin() + 1) != '<');\n        }\n        if (*it ==\
    \ '>') {\n            correct = correct && (*(brackets.begin() + 1) != '>');\n\
    \        }\n    }\n    return correct;", "    bool result = true;\n    for (auto\
    \ c : brackets) {\n        if (c != \">\" && c != \"<\") {\n            result\
    \ = false;\n            break;\n        }\n    }\n    return result;", "    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n\
    \        } else if (brackets[i] == '>') {\n            ++close_brackets;\n   \
    \     } else {\n            return false;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;", "    size_t len = brackets.size();\n    bool result = true;\n\
    \    for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] != '<') {\n \
    \           result = false;\n            break;\n        }\n    }\n    for (size_t\
    \ i = 0; i < len; ++i) {\n        if (brackets[i] != '>') {\n            result\
    \ = false;\n            break;\n        }\n    }\n    return result;", "    bool\
    \ result = true;\n    size_t brackets_size = brackets.size();\n    for (size_t\
    \ i = 0; i < brackets_size; ++i) {\n        if (brackets[i] == '<') {\n      \
    \      if (i + 1 == brackets_size) {\n                result = false;\n      \
    \          break;\n            }\n            if (brackets[i + 1] != '>') {\n\
    \                result = false;\n                break;\n            }\n    \
    \        i += 2;\n        }\n    }\n    return result;", "    bool correct = true;\n\
    \    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] !=\
    \ '<') {\n            correct = false;\n            break;\n        }\n    }\n\
    \    for (size_t i = brackets.size() - 1; i >= 0; i--) {\n        if (brackets[i]\
    \ != '>') {\n            correct = false;\n            break;\n        }\n   \
    \ }\n    return correct;", "    std::string opening_brackets = brackets;\n   \
    \ std::string closing_brackets = brackets;\n    opening_brackets.erase(std::remove(opening_brackets.begin(),\
    \ opening_brackets.end(), '<'), opening_brackets.end());\n    closing_brackets.erase(std::remove(closing_brackets.begin(),\
    \ closing_brackets.end(), '>'), closing_brackets.end());\n    return opening_brackets\
    \ == closing_brackets;", "    std::string opening_brackets = brackets;\n    std::string\
    \ closing_brackets;\n    size_t opening_brackets_size = opening_brackets.size();\n\
    \    size_t closing_brackets_size = 0;\n    for (size_t i = 0; i < opening_brackets_size;\
    \ ++i) {\n        if (opening_brackets[i] == '<') {\n            closing_brackets\
    \ += '<';\n            closing_brackets_size += 1;\n        } else if (opening_brackets[i]\
    \ == '>') {\n            closing_brackets += '>';\n            closing_brackets_size\
    \ += 1;\n        } else {\n            return false;\n        }\n    }\n    if\
    \ (closing_brackets_size != opening_brackets_size) {\n        return false;\n\
    \    }\n    return opening_brackets == closing_brackets;", "    std::string opening_brackets\
    \ = brackets;\n    std::string closing_brackets = brackets;\n    opening_brackets.erase(opening_brackets.begin(),\
    \ opening_brackets.begin() + 1);\n    closing_brackets.erase(closing_brackets.begin(),\
    \ closing_brackets.begin() + 1);\n    bool result = false;\n    for (auto it =\
    \ opening_brackets.begin(); it != opening_brackets.end(); ++it) {\n        if\
    \ (closing_brackets.find(*it) == closing_brackets.end()) {\n            result\
    \ = true;\n            break;\n        }\n    }\n    return result;", "    size_t\
    \ len = brackets.size();\n    bool result = true;\n    for (size_t i = 0; i <\
    \ len; ++i) {\n        char c = brackets[i];\n        if (c == '<') {\n      \
    \      if (brackets[i + 1] != '<') {\n                result = false;\n      \
    \          break;\n            }\n            i += 2;\n        } else if (c ==\
    \ '>') {\n            if (brackets[i + 1] != '>') {\n                result =\
    \ false;\n                break;\n            }\n            i += 2;\n       \
    \ } else {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;", "    size_t open_brackets = brackets.size();\n    size_t\
    \ close_brackets = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n  \
    \      if (brackets[i] == '<') {\n            ++close_brackets;\n        } else\
    \ if (brackets[i] == '>') {\n            --close_brackets;\n        }\n    }\n\
    \    return open_brackets == close_brackets;", "    std::string opening_brackets\
    \ = brackets;\n    std::string closing_brackets = brackets;\n    opening_brackets.erase(std::remove(opening_brackets.begin(),\
    \ opening_brackets.end(), '<'), opening_brackets.end());\n    closing_brackets.erase(std::remove(closing_brackets.begin(),\
    \ closing_brackets.end(), '>'), closing_brackets.end());\n    bool result = opening_brackets.size()\
    \ == closing_brackets.size();\n    return result;", "    std::string opening_brackets\
    \ = \"<\";\n    std::string closing_brackets = \">\";\n    std::string opening_brackets_reversed\
    \ = \">\";\n    std::string closing_brackets_reversed = \"<\";\n    std::string\
    \ opening_brackets_reversed_2 = \">\";\n    std::string closing_brackets_reversed_2\
    \ = \"<\";\n    std::string opening_brackets_reversed_3 = \">\";\n    std::string\
    \ closing_brackets_reversed_3 = \"<\";\n    std::string opening_brackets_reversed_4\
    \ = \">\";\n    std::string closing_brackets_reversed_4 = \"<\";\n    std::string\
    \ opening_brackets_reversed_5 = \">\";\n    std::string closing_brackets_reversed_5\
    \ = \"<\";\n    std::string opening_brackets_reversed_6 = \">\";\n    std::string\
    \ closing_brackets_reversed_6 = \"<\";\n    std::string opening_brackets_reversed_7\
    \ = \">\";\n    std::string closing_brackets_reversed_7 = \"<\";\n    std::string\
    \ opening_brackets_reversed_8 = \">\";\n    std::string closing_brackets_reversed_8\
    \ = \"<\";\n    std::string opening_brackets_reversed_9 = \">\";\n    std::string\
    \ closing_brackets_reversed_9 = \"<\";\n    std::string opening_brackets_reversed_10\
    \ = \">\";\n    std::string closing_brackets_reversed_10 = \"<\";\n    std::string\
    \ opening_brackets_reversed_11 = \">\";\n    std::string closing_brackets_reversed_11\
    \ = \"<\";\n    std::string opening_brackets_reversed_12 = \">\";\n    std::string\
    \ closing_brackets_reversed_12 = \"<\";\n    std::string opening_brackets_reversed_13\
    \ = \">\";\n    std::string closing_brackets_reversed_13 = \"<\";\n    std::string\
    \ opening_brackets_reversed_14 = \">\";\n    std::string closing_brackets_reversed_14\
    \ = \"<\";\n    std::string opening_brackets_reversed_15 = \">\";\n    std::string\
    \ closing_brackets_reversed_15 = \"<\";\n    std::string opening_brackets_reversed_16\
    \ = \">\";\n    std::string closing_brackets_reversed_16 = \"<\";\n    std::string\
    \ opening_brackets_reversed_17 = \">\";\n    std::string closing_brackets_reversed_17\
    \ = \"<\";\n    std::string opening_brackets_reversed_18 = ", "    size_t len\
    \ = brackets.size();\n    bool result = true;\n    for (size_t i = 0; i < len;\
    \ ++i) {\n        char ch = brackets[i];\n        if (ch == '<') {\n         \
    \   if (i + 1 < len && brackets[i + 1] == '>') {\n                i += 2;\n  \
    \          } else {\n                result = false;\n                break;\n\
    \            }\n        } else if (ch == '>') {\n            if (i + 1 < len &&\
    \ brackets[i + 1] == '<') {\n                i += 2;\n            } else {\n \
    \               result = false;\n                break;\n            }\n     \
    \   }\n    }\n    return result;", "    size_t len = brackets.size();\n    bool\
    \ result = true;\n    for (size_t i = 0; i < len; ++i) {\n        bool found =\
    \ false;\n        for (size_t j = 0; j < len; ++j) {\n            if (brackets[i]\
    \ == brackets[j]) {\n                found = true;\n                break;\n \
    \           }\n        }\n        if (!found) {\n            result = false;\n\
    \            break;\n        }\n    }\n    return result;", "    size_t brackets_size\
    \ = brackets.size();\n    bool result = true;\n    size_t opening_brackets_size\
    \ = 0;\n    for (size_t i = 0; i < brackets_size; i++) {\n        char c = brackets[i];\n\
    \        if (c == '<') {\n            opening_brackets_size++;\n        } else\
    \ if (c == '>') {\n            opening_brackets_size--;\n        } else {\n  \
    \          result = false;\n            break;\n        }\n    }\n    if (opening_brackets_size\
    \ == 0) {\n        result = true;\n    }\n    return result;", "    // Your code\
    \ here\n    bool correct = true;\n    std::string opening_brackets = brackets;\n\
    \    std::string closing_brackets;\n    std::string temp;\n    bool found = false;\n\
    \    for (int i = 0; i < opening_brackets.size(); i++) {\n        if (opening_brackets[i]\
    \ == '<') {\n            closing_brackets = opening_brackets.substr(i + 1);\n\
    \            found = true;\n        }\n    }\n    if (!found) {\n        correct\
    \ = false;\n    }\n    for (int i = 0; i < closing_brackets.size(); i++) {\n \
    \       if (closing_brackets[i] == '>') {\n            temp = opening_brackets.substr(0,\
    \ i);\n            opening_brackets = temp;\n        }\n    }\n    if (opening_brackets\
    \ != closing_brackets) {\n        correct = false;\n    }\n    return correct;",
  "    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t\
    \ i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n    \
    \        ++open_brackets;\n        } else if (brackets[i] == '>') {\n        \
    \    ++close_brackets;\n        } else {\n            return false;\n        }\n\
    \    }\n    return open_brackets == close_brackets;"]
stop_tokens:
- "\n}"
