name: HumanEval_56_correct_bracketing
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"\
  <\" and \">\".\n// return true if every opening bracket has a corresponding closing\
  \ bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
  <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>> correct_bracketing((\"\
  ><<>\"))\n// (false)\nbool correct_bracketing(std::string brackets) {\n"
tests: "}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
  <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
  <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
  )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
  ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
  <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
  <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
  \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
completions: ["    int len = brackets.size();\n    for (int i = 0; i < len; ++i) {\n\
    \        if (brackets[i] == '<') {\n            if (brackets[i + 1] != '>') {\n\
    \                return false;\n            }\n        }\n    }\n    return true;",
  "    bool result = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n\
    \            if (brackets[brackets.size() - 1] != '>') {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;", "    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;", "    size_t len = brackets.size();\n\
    \    bool result = true;\n    size_t i = 0;\n    while (i < len) {\n        if\
    \ (brackets[i] != '<') {\n            result = false;\n            break;\n  \
    \      }\n        i++;\n        if (i >= len) {\n            result = false;\n\
    \            break;\n        }\n        if (brackets[i] != '>') {\n          \
    \  result = false;\n            break;\n        }\n        i++;\n    }\n    return\
    \ result;", "    bool result = true;\n    for (auto c : brackets) {\n        if\
    \ (c == '<') {\n            if (brackets[brackets.size() - 1] != '>') {\n    \
    \            result = false;\n            }\n        }\n    }\n    return result;",
  "    size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n    size_t\
    \ opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n    for (size_t\
    \ i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n    \
    \        ++opening_brackets;\n            ++opening_brackets_size;\n        }\
    \ else if (brackets[i] == '>') {\n            ++closing_brackets;\n          \
    \  ++closing_brackets_size;\n        }\n    }\n    if (opening_brackets_size !=\
    \ closing_brackets_size) {\n        return false;\n    }\n    if (opening_brackets\
    \ != closing_brackets) {\n        return false;\n    }\n    for (size_t i = 0;\
    \ i < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n           \
    \ ++opening_brackets;\n        } else if (brackets[i] == '>') {\n            ++closing_brackets;\n\
    \        }\n    }\n    if (opening_brackets != brackets.size()) {\n        return\
    \ false;\n    }\n    return true;", "    bool result = true;\n    size_t len =\
    \ brackets.size();\n    for (size_t i = 0; i < len; ++i) {\n        char c = brackets[i];\n\
    \        if (c == '<') {\n            if (i + 1 < len && brackets[i + 1] == '>')\
    \ {\n                ++i;\n            } else {\n                result = false;\n\
    \            }\n        } else if (c == '>') {\n            if (i + 1 < len &&\
    \ brackets[i + 1] == '<') {\n                ++i;\n            } else {\n    \
    \            result = false;\n            }\n        }\n    }\n    return result;",
  "    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t open_brackets_index\
    \ = 0;\n    size_t close_brackets_index = 0;\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \          open_brackets_index = i;\n        } else if (brackets[i] == '>') {\n\
    \            close_brackets++;\n            close_brackets_index = i;\n      \
    \  }\n    }\n    if (open_brackets == close_brackets) {\n        return true;\n\
    \    }\n    if (open_brackets > close_brackets) {\n        return false;\n   \
    \ }\n    if (open_brackets_index == close_brackets_index) {\n        return false;\n\
    \    }\n    if (open_brackets_index > close_brackets_index) {\n        std::swap(open_brackets_index,\
    \ close_brackets_index);\n    }\n    std::string open_brackets_str = brackets.substr(0,\
    \ open_brackets_index);\n    std::string close_brackets_str = brackets.substr(close_brackets_index\
    \ + 1);\n    return correct_bracketing(open_brackets_str) && correct_bracketing(close_brackets_str);",
  "    bool result = true;\n    for (auto it = brackets.begin(); it != brackets.end();\
    \ ++it) {\n        if (*it == '<') {\n            result &= (it + 1 != brackets.end())\
    \ && (*it == '>');\n        }\n    }\n    return result;", "    // initialize\
    \ a stack to store opening brackets\n    std::stack<char> brackets_stack;\n  \
    \  // initialize a stack to store closing brackets\n    std::stack<char> brackets_stack_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open;\n\
    \    // initialize a stack to store closing brackets\n    std::stack<char> brackets_stack_open_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_close_close_close_close_close_close;\n\
    \    // initialize a stack to store opening brackets\n    std::stack<char> brackets_stack_open_open_open_close_close_close_close_close_close_",
  "    size_t brackets_size = brackets.size();\n    size_t opening_brackets_size =\
    \ 0;\n    size_t closing_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i) {\n        if (brackets[i] == '<') {\n            opening_brackets_size++;\n\
    \        } else if (brackets[i] == '>') {\n            closing_brackets_size++;\n\
    \        }\n    }\n    if (opening_brackets_size == closing_brackets_size) {\n\
    \        return true;\n    } else {\n        return false;\n    }", "    bool\
    \ result = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n   \
    \         if (brackets[brackets.size() - 1] != '>') {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;", "    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    if (open_brackets != close_brackets) {\n        return false;\n\
    \    }\n    return true;", "    size_t len = brackets.size();\n    bool result\
    \ = true;\n    for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            if (brackets[i + 1] != '>') {\n                result =\
    \ false;\n                break;\n            }\n            i += 2;\n       \
    \ } else {\n            if (brackets[i + 1] != '>') {\n                result\
    \ = false;\n                break;\n            }\n            i += 1;\n     \
    \   }\n    }\n    return result;", "    int len = brackets.size();\n    for (int\
    \ i = 0; i < len; ++i) {\n        if (brackets[i] == '<') {\n            if (brackets[i\
    \ + 1] != '>') {\n                return false;\n            }\n        }\n  \
    \  }\n    return true;", "    size_t len = brackets.size();\n    bool result =\
    \ true;\n    for (size_t i = 0; i < len; ++i) {\n        if (brackets[i] != '<'\
    \ && brackets[i] != '>') {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;", "    bool result = true;\n    for (auto\
    \ c : brackets) {\n        if (c != '<' && c != '>') {\n            result = false;\n\
    \            break;\n        }\n    }\n    return result;", "    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;", "    size_t brackets_size\
    \ = brackets.size();\n    bool result = true;\n    for (size_t i = 0; i < brackets_size;\
    \ i++) {\n        if (brackets[i] != '<') {\n            result = false;\n   \
    \         break;\n        }\n    }\n    for (size_t i = 0; i < brackets_size;\
    \ i++) {\n        if (brackets[i] != '>') {\n            result = false;\n   \
    \         break;\n        }\n    }\n    return result;", "    bool result = true;\n\
    \    for (auto c : brackets) {\n        if (c == '<') {\n            if (brackets[brackets.size()\
    \ - 1] != '>') {\n                result = false;\n                break;\n  \
    \          }\n        } else if (c == '>') {\n            if (brackets[brackets.size()\
    \ - 2] != '<') {\n                result = false;\n                break;\n  \
    \          }\n        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
