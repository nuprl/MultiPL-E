language: cpp
name: HumanEval_61_correct_bracketing
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '(') {\n            open_brackets++;\n        } else if (brackets[i] == ')')\
    \ {\n            close_brackets++;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbm3yq_16.cpp: In function 'int main()':\n/tmp/tmpbm3yq_16.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbm3yq_16.cpp:2:\n/tmp/tmpbm3yq_16.cpp:27:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int opening_brackets = brackets.size();\n    int closing_brackets\
    \ = 0;\n    for (int i = 0; i < opening_brackets; i++) {\n        if (brackets[i]\
    \ == '(') {\n            closing_brackets++;\n        } else {\n            closing_brackets\
    \ = 0;\n        }\n    }\n    return closing_brackets == opening_brackets;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2j36izvk.cpp: In function 'int main()':\n/tmp/tmp2j36izvk.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2j36izvk.cpp:2:\n/tmp/tmp2j36izvk.cpp:27:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = brackets.size();\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '(') {\n            ++open_brackets;\n        } else if (brackets[i] == ')')\
    \ {\n            ++close_brackets;\n        } else {\n            return false;\n\
    \        }\n    }\n    return open_brackets == close_brackets;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk5oja80_.cpp: In function 'int main()':\n/tmp/tmpk5oja80_.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk5oja80_.cpp:2:\n/tmp/tmpk5oja80_.cpp:29:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '(') {\n            result &= (brackets[brackets.size() - 1] == ')');\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu2lq20sl.cpp: In function 'bool correct_bracketing(std::string)':\n\
    /tmp/tmpu2lq20sl.cpp:15:15: error: 'c' does not name a type\n     for (auto c\
    \ : brackets) {\n               ^\n/tmp/tmpu2lq20sl.cpp:20:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpu2lq20sl.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpu2lq20sl.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpu2lq20sl.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpu2lq20sl.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpu2lq20sl.cpp: In function 'int main()':\n/tmp/tmpu2lq20sl.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu2lq20sl.cpp:2:\n/tmp/tmpu2lq20sl.cpp:24:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int opening_brackets = 0;\n    int closing_brackets = 0;\n\
    \    for (char c : brackets) {\n        if (c == '(') {\n            opening_brackets++;\n\
    \        } else if (c == ')') {\n            closing_brackets++;\n        }\n\
    \    }\n    if (opening_brackets != closing_brackets) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp06hio_18.cpp: In function 'bool correct_bracketing(std::string)':\n\
    /tmp/tmp06hio_18.cpp:16:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : brackets) {\n                   ^\n/tmp/tmp06hio_18.cpp:\
    \ In function 'int main()':\n/tmp/tmp06hio_18.cpp:29:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = correct_bracketing;\n          ^\nIn\
    \ file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp06hio_18.cpp:2:\n/tmp/tmp06hio_18.cpp:30:28: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((\"()\")) == (true));\n\
    \                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '(') {\n            ++open_brackets;\n        } else if (brackets[i] == ')')\
    \ {\n            ++close_brackets;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwihrxc3_.cpp: In function 'int main()':\n/tmp/tmpwihrxc3_.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwihrxc3_.cpp:2:\n/tmp/tmpwihrxc3_.cpp:27:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int open_brackets = 0;\n    int close_brackets = 0;\n    for\
    \ (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '(') open_brackets++;\n\
    \        else if (brackets[i] == ')') close_brackets++;\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptax5tyl7.cpp: In function 'int main()':\n/tmp/tmptax5tyl7.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptax5tyl7.cpp:2:\n/tmp/tmptax5tyl7.cpp:24:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string opening_brackets = brackets;\n    std::string closing_brackets\
    \ = brackets;\n    size_t opening_brackets_size = opening_brackets.size();\n \
    \   size_t closing_brackets_size = closing_brackets.size();\n    bool result =\
    \ false;\n    for (size_t i = 0; i < opening_brackets_size; i++) {\n        if\
    \ (opening_brackets[i] == '(') {\n            opening_brackets[i] = '(';\n   \
    \         closing_brackets[i] = ')';\n            opening_brackets_size--;\n \
    \           closing_brackets_size--;\n        } else if (opening_brackets[i] ==\
    \ '[') {\n            opening_brackets[i] = '[';\n            closing_brackets[i]\
    \ = ']';\n            opening_brackets_size--;\n            closing_brackets_size--;\n\
    \        } else if (opening_brackets[i] == '{') {\n            opening_brackets[i]\
    \ = '{';\n            closing_brackets[i] = '}';\n            opening_brackets_size--;\n\
    \            closing_brackets_size--;\n        }\n    }\n    if (opening_brackets_size\
    \ == 0) {\n        result = true;\n    }\n    if (closing_brackets_size == 0)\
    \ {\n        result = true;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe8flch94.cpp: In function 'int main()':\n/tmp/tmpe8flch94.cpp:46:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe8flch94.cpp:2:\n/tmp/tmpe8flch94.cpp:47:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    std::string opening_brackets = brackets;\n    std::string closing_brackets\
    \ = brackets;\n    opening_brackets.erase(std::remove(opening_brackets.begin(),\
    \ opening_brackets.end(), '('), opening_brackets.end());\n    closing_brackets.erase(std::remove(closing_brackets.begin(),\
    \ closing_brackets.end(), ')'), closing_brackets.end());\n    return opening_brackets\
    \ == closing_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpar09uhx4.cpp: In function 'int main()':\n/tmp/tmpar09uhx4.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpar09uhx4.cpp:2:\n/tmp/tmpar09uhx4.cpp:22:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '(') {\n            if (brackets.find('(') != brackets.find(')'))\
    \ {\n                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu1jkz2yw.cpp: In function 'bool correct_bracketing(std::string)':\n\
    /tmp/tmpu1jkz2yw.cpp:15:15: error: 'c' does not name a type\n     for (auto c\
    \ : brackets) {\n               ^\n/tmp/tmpu1jkz2yw.cpp:22:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpu1jkz2yw.cpp:22:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpu1jkz2yw.cpp:22:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpu1jkz2yw.cpp:22:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpu1jkz2yw.cpp:22:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpu1jkz2yw.cpp: In function 'int main()':\n/tmp/tmpu1jkz2yw.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu1jkz2yw.cpp:2:\n/tmp/tmpu1jkz2yw.cpp:26:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int open_brackets = 0;\n    int close_brackets = 0;\n    for(int\
    \ i = 0; i < brackets.length(); i++) {\n        if(brackets[i] == '(') {\n   \
    \         open_brackets++;\n        } else if(brackets[i] == ')') {\n        \
    \    close_brackets++;\n        }\n    }\n    return open_brackets == close_brackets;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1dqm_24q.cpp: In function 'int main()':\n/tmp/tmp1dqm_24q.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1dqm_24q.cpp:2:\n/tmp/tmp1dqm_24q.cpp:27:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '(') {\n            if (brackets.find('(') != brackets.find(')'))\
    \ {\n                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu1jkz2yw.cpp: In function 'bool correct_bracketing(std::string)':\n\
    /tmp/tmpu1jkz2yw.cpp:15:15: error: 'c' does not name a type\n     for (auto c\
    \ : brackets) {\n               ^\n/tmp/tmpu1jkz2yw.cpp:22:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpu1jkz2yw.cpp:22:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpu1jkz2yw.cpp:22:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpu1jkz2yw.cpp:22:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpu1jkz2yw.cpp:22:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpu1jkz2yw.cpp: In function 'int main()':\n/tmp/tmpu1jkz2yw.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu1jkz2yw.cpp:2:\n/tmp/tmpu1jkz2yw.cpp:26:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    size_t brackets_size = brackets.size();\n    for (size_t i = 0; i < brackets_size;\
    \ ++i) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == ')') {\n            close_brackets++;\n     \
    \   }\n    }\n    if (open_brackets != close_brackets) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkqukva5.cpp: In function 'int main()':\n/tmp/tmpbkqukva5.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbkqukva5.cpp:2:\n/tmp/tmpbkqukva5.cpp:31:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t opening_brackets = 0;\n    size_t closing_brackets =\
    \ 0;\n    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '(') {\n            opening_brackets++;\n        } else if (brackets[i] ==\
    \ ')') {\n            closing_brackets++;\n        }\n    }\n    return opening_brackets\
    \ == closing_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmputtpsg6m.cpp: In function 'int main()':\n/tmp/tmputtpsg6m.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmputtpsg6m.cpp:2:\n/tmp/tmputtpsg6m.cpp:27:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int open_brackets = 0;\n    int close_brackets = 0;\n    for\
    \ (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '(') {\n\
    \            open_brackets++;\n        } else if (brackets[i] == ')') {\n    \
    \        close_brackets++;\n        }\n    }\n    return open_brackets == close_brackets;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpheii8mqd.cpp: In function 'int main()':\n/tmp/tmpheii8mqd.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpheii8mqd.cpp:2:\n/tmp/tmpheii8mqd.cpp:27:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    size_t opening_brackets_size = brackets.size();\n\
    \    for (size_t i = 0; i < opening_brackets_size; i++) {\n        if (brackets[i]\
    \ == '(') {\n            bool found = false;\n            for (size_t j = i; j\
    \ < opening_brackets_size; j++) {\n                if (brackets[j] == ')') {\n\
    \                    found = true;\n                    break;\n             \
    \   }\n            }\n            if (!found) {\n                result = false;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplkhv2gla.cpp: In function 'int main()':\n/tmp/tmplkhv2gla.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplkhv2gla.cpp:2:\n/tmp/tmplkhv2gla.cpp:35:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '(') {\n            ++open_brackets;\n        } else if (brackets[i] == ')')\
    \ {\n            ++close_brackets;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwihrxc3_.cpp: In function 'int main()':\n/tmp/tmpwihrxc3_.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwihrxc3_.cpp:2:\n/tmp/tmpwihrxc3_.cpp:27:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t opening_brackets = 0;\n    size_t closing_brackets =\
    \ 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '(') {\n            ++opening_brackets;\n        } else if (brackets[i] ==\
    \ ')') {\n            ++closing_brackets;\n        } else {\n            return\
    \ false;\n        }\n    }\n    if (opening_brackets != closing_brackets) {\n\
    \        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9e_oh547.cpp: In function 'int main()':\n/tmp/tmp9e_oh547.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9e_oh547.cpp:2:\n/tmp/tmp9e_oh547.cpp:32:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '(') {\n            ++open_brackets;\n        } else if (brackets[i] == ')')\
    \ {\n            ++close_brackets;\n        } else {\n            return false;\n\
    \        }\n    }\n    return open_brackets == close_brackets;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\"))\
    \ == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpajo3us_s.cpp: In function 'int main()':\n/tmp/tmpajo3us_s.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpajo3us_s.cpp:2:\n/tmp/tmpajo3us_s.cpp:29:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return true if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t brackets_size = brackets.size();\n    if (brackets_size\
    \ < 2)\n        return false;\n    size_t opening_brackets_size = brackets.find_first_of(\"\
    (\") - 1;\n    size_t closing_brackets_size = brackets.find_first_of(\")\") -\
    \ 1;\n    if (opening_brackets_size < 0 || closing_brackets_size < 0)\n      \
    \  return false;\n    if (opening_brackets_size != closing_brackets_size)\n  \
    \      return false;\n    for (size_t i = 0; i < opening_brackets_size; i++) {\n\
    \        if (brackets[i] != brackets[opening_brackets_size + i])\n           \
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85knanfr.cpp: In function 'int main()':\n/tmp/tmp85knanfr.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp85knanfr.cpp:2:\n/tmp/tmp85knanfr.cpp:31:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
