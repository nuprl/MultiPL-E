language: cpp
name: HumanEval_88_sort_array
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpf1ueb9jm: /tmp/tmpf1ueb9jm.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // write your code here\n    long long sum = 0;\n    for (long\
    \ long i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if\
    \ (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else\
    \ {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp6g5zcntb: /tmp/tmp6g5zcntb.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    long long temp = 0;\n    long long count\
    \ = 0;\n    for (long long i = 0; i < array.size(); i++) {\n        sum += array[i];\n\
    \    }\n    if (sum % 2 == 0) {\n        for (long long i = 0; i < array.size();\
    \ i++) {\n            if (array[i] > temp) {\n                temp = array[i];\n\
    \                count++;\n            }\n        }\n    } else {\n        for\
    \ (long long i = 0; i < array.size(); i++) {\n            if (array[i] < temp)\
    \ {\n                temp = array[i];\n                count++;\n            }\n\
    \        }\n    }\n    std::vector<long> result;\n    for (long long i = 0; i\
    \ < array.size(); i++) {\n        if (count == 1) {\n            result.push_back(array[i]);\n\
    \        } else {\n            if (array[i] > temp) {\n                result.push_back(array[i]);\n\
    \                count--;\n            } else {\n                result.push_back(temp);\n\
    \                result.push_back(array[i]);\n                count--;\n     \
    \       }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpfm0wmtfd: /tmp/tmpfm0wmtfd.cpp:60: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmphq4icai7: /tmp/tmphq4icai7.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long long sum = 0;\n    long long sum1\
    \ = 0;\n    long long sum2 = 0;\n    long long sum3 = 0;\n    long long sum4 =\
    \ 0;\n    long long sum5 = 0;\n    long long sum6 = 0;\n    long long sum7 = 0;\n\
    \    long long sum8 = 0;\n    long long sum9 = 0;\n    long long sum10 = 0;\n\
    \    long long sum11 = 0;\n    long long sum12 = 0;\n    long long sum13 = 0;\n\
    \    long long sum14 = 0;\n    long long sum15 = 0;\n    long long sum16 = 0;\n\
    \    long long sum17 = 0;\n    long long sum18 = 0;\n    long long sum19 = 0;\n\
    \    long long sum20 = 0;\n    long long sum21 = 0;\n    long long sum22 = 0;\n\
    \    long long sum23 = 0;\n    long long sum24 = 0;\n    long long sum25 = 0;\n\
    \    long long sum26 = 0;\n    long long sum27 = 0;\n    long long sum28 = 0;\n\
    \    long long sum29 = 0;\n    long long sum30 = 0;\n    long long sum31 = 0;\n\
    \    long long sum32 = 0;\n    long long sum33 = 0;\n    long long sum34 = 0;\n\
    \    long long sum35 = 0;\n    long long sum36 = 0;\n    long long sum37 = 0;\n\
    \    long long sum38 = 0;\n    long long sum39 = 0;\n    long long sum40 = 0;\n\
    \    long long sum41 = 0;\n    long long sum42 = 0;\n    long long sum43 = 0;\n\
    \    long long sum44 = 0;\n    long long sum45 = 0;\n    long long sum46 = 0;\n\
    \    long long sum47 = 0;\n    long long sum48 = 0;\n    long long sum49 = 0;\n\
    \    long long sum50 = 0;\n    long long sum51 = 0;\n    long long sum52 = 0;\n\
    \    long long sum53 = 0;\n    long long sum54 = 0;\n    long long sum55 = 0;\n\
    \    long long sum56 = 0;\n    long long sum57 = 0;\n    long long sum58 = 0;\n\
    \    long long sum59 = 0;\n    long long sum60 = 0;\n    long long sum61 = 0;\n\
    \    long long sum62 = 0;\n    long long sum63 = 0;\n    long long sum64 = 0;\n\
    \    long long sum65 = 0;\n    long long sum66 = 0;\n    long long sum67 = 0;\n\
    \    long long sum68 = 0;\n    long long sum69 = 0;\n    long long sum70 = 0;\n\
    \    long long sum71 = 0;\n    long long sum72 = 0;\n    long \n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibi3zbkd.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpibi3zbkd.cpp:93:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   93 | }\n      | ^\n/tmp/tmpibi3zbkd.cpp:93:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // write your code here\n    long long sum = 0;\n    for (long\
    \ long i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if\
    \ (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else\
    \ {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp6g5zcntb: /tmp/tmp6g5zcntb.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpdiinwbo0: /tmp/tmpdiinwbo0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpkdxtkfwd: /tmp/tmpkdxtkfwd.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpkdxtkfwd: /tmp/tmpkdxtkfwd.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpf1ueb9jm: /tmp/tmpf1ueb9jm.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpdiinwbo0: /tmp/tmpdiinwbo0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // write your code here\n    long long sum = 0;\n    for (long\
    \ long i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if\
    \ (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n    } else\
    \ {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmplp6pk0i3: /tmp/tmplp6pk0i3.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp_5pkw9w1: /tmp/tmp_5pkw9w1.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end(),\
    \ [](long a, long b) { return a > b; });\n    } else {\n        std::sort(array.begin(),\
    \ array.end(), [](long a, long b) { return a < b; });\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmprut0fyze: /tmp/tmprut0fyze.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // write your code here\n    long long sum = 0;\n    for (long\
    \ long i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if\
    \ (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else\
    \ {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp6g5zcntb: /tmp/tmp6g5zcntb.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (auto i : array) {\n        sum +=\
    \ i;\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end(),\
    \ [](long long a, long long b) {\n            return a < b;\n        });\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend(), [](long long a, long\
    \ long b) {\n            return a > b;\n        });\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpi6lx1fvy: /tmp/tmpi6lx1fvy.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpvb1qvub6: /tmp/tmpvb1qvub6.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // write your code here\n    long long sum = 0;\n    for (long\
    \ long i : array) {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n     \
    \   std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp2puas5el: /tmp/tmp2puas5el.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end(),\
    \ [](long a, long b) { return a > b; });\n    } else {\n        std::sort(array.begin(),\
    \ array.end(), [](long a, long b) { return a < b; });\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmprut0fyze: /tmp/tmprut0fyze.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // write your code here\n    long long sum = 0;\n    for (long\
    \ long i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if\
    \ (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else\
    \ {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp6g5zcntb: /tmp/tmp6g5zcntb.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long long sum = 0;\n    for (long long\
    \ i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum\
    \ % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n\
    \        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp12gp1m2l: /tmp/tmp12gp1m2l.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpkdxtkfwd: /tmp/tmpkdxtkfwd.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpkdxtkfwd: /tmp/tmpkdxtkfwd.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpvb1qvub6: /tmp/tmpvb1qvub6.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpdiinwbo0: /tmp/tmpdiinwbo0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // write your code here\n    long long sum = 0;\n    for (long\
    \ long i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if\
    \ (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else\
    \ {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp6g5zcntb: /tmp/tmp6g5zcntb.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp_dxsj01w: /tmp/tmp_dxsj01w.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpkdxtkfwd: /tmp/tmpkdxtkfwd.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // write your code here\n    long long sum = 0;\n    for (long\
    \ long i : array) {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n     \
    \   std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp2puas5el: /tmp/tmp2puas5el.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n\
    \        return array;\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \        return array;\n    }\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp1yeditv0: /tmp/tmp1yeditv0.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \        return array;\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \        return array;\n    }\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpgexp40_3: /tmp/tmpgexp40_3.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpky9vj1_i: /tmp/tmpky9vj1_i.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \        return array;\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \        return array;\n    }\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpp9sbi5tg: /tmp/tmpp9sbi5tg.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmphq4icai7: /tmp/tmphq4icai7.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    long long sum1 = 0;\n    long long sum2\
    \ = 0;\n    long long sum3 = 0;\n    long long sum4 = 0;\n    long long sum5 =\
    \ 0;\n    long long sum6 = 0;\n    long long sum7 = 0;\n    long long sum8 = 0;\n\
    \    long long sum9 = 0;\n    long long sum10 = 0;\n    long long sum11 = 0;\n\
    \    long long sum12 = 0;\n    long long sum13 = 0;\n    long long sum14 = 0;\n\
    \    long long sum15 = 0;\n    long long sum16 = 0;\n    long long sum17 = 0;\n\
    \    long long sum18 = 0;\n    long long sum19 = 0;\n    long long sum20 = 0;\n\
    \    long long sum21 = 0;\n    long long sum22 = 0;\n    long long sum23 = 0;\n\
    \    long long sum24 = 0;\n    long long sum25 = 0;\n    long long sum26 = 0;\n\
    \    long long sum27 = 0;\n    long long sum28 = 0;\n    long long sum29 = 0;\n\
    \    long long sum30 = 0;\n    long long sum31 = 0;\n    long long sum32 = 0;\n\
    \    long long sum33 = 0;\n    long long sum34 = 0;\n    long long sum35 = 0;\n\
    \    long long sum36 = 0;\n    long long sum37 = 0;\n    long long sum38 = 0;\n\
    \    long long sum39 = 0;\n    long long sum40 = 0;\n    long long sum41 = 0;\n\
    \    long long sum42 = 0;\n    long long sum43 = 0;\n    long long sum44 = 0;\n\
    \    long long sum45 = 0;\n    long long sum46 = 0;\n    long long sum47 = 0;\n\
    \    long long sum48 = 0;\n    long long sum49 = 0;\n    long long sum50 = 0;\n\
    \    long long sum51 = 0;\n    long long sum52 = 0;\n    long long sum53 = 0;\n\
    \    long long sum54 = 0;\n    long long sum55 = 0;\n    long long sum56 = 0;\n\
    \    long long sum57 = 0;\n    long long sum58 = 0;\n    long long sum59 = 0;\n\
    \    long long sum60 = 0;\n    long long sum61 = 0;\n    long long sum62 = 0;\n\
    \    long long sum63 = 0;\n    long long sum64 = 0;\n    long long sum65 = 0;\n\
    \    long long sum66 = 0;\n    long long sum67 = 0;\n    long long sum68 = 0;\n\
    \    long long sum69 = 0;\n    long long sum70 = 0;\n    long long sum71 = 0;\n\
    \    long long sum72 = 0;\n    long long sum73 = 0;\n\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp295z575e: /tmp/tmp295z575e.cpp:96: int main(): Assertion `candidate((std::vector<long>()))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (auto i : array) {\n        sum +=\
    \ i;\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end(),\
    \ [](long long a, long long b) { return a > b; });\n    } else {\n        std::sort(array.begin(),\
    \ array.end(), [](long long a, long long b) { return a < b; });\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp52994aw6: /tmp/tmp52994aw6.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpdiinwbo0: /tmp/tmpdiinwbo0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpky9vj1_i: /tmp/tmpky9vj1_i.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (auto i : array) {\n        sum +=\
    \ i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmped1xuenm: /tmp/tmped1xuenm.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpvb1qvub6: /tmp/tmpvb1qvub6.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpdiinwbo0: /tmp/tmpdiinwbo0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \        return array;\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \        return array;\n    }\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpp9sbi5tg: /tmp/tmpp9sbi5tg.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpf1ueb9jm: /tmp/tmpf1ueb9jm.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (auto i : array) {\n        sum +=\
    \ i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \        return array;\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \        return array;\n    }\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpr6j_uiyh: /tmp/tmpr6j_uiyh.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpdiinwbo0: /tmp/tmpdiinwbo0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpdiinwbo0: /tmp/tmpdiinwbo0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp_dxsj01w: /tmp/tmp_dxsj01w.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpfhgtmd_w: /tmp/tmpfhgtmd_w.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long long sum = 0;\n    for (long long\
    \ i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum\
    \ % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n\
    \        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp12gp1m2l: /tmp/tmp12gp1m2l.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpf1ueb9jm: /tmp/tmpf1ueb9jm.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    long long sum2 = 0;\n    long long sum3\
    \ = 0;\n    long long sum4 = 0;\n    long long sum5 = 0;\n    long long sum6 =\
    \ 0;\n    long long sum7 = 0;\n    long long sum8 = 0;\n    long long sum9 = 0;\n\
    \    long long sum10 = 0;\n    long long sum11 = 0;\n    long long sum12 = 0;\n\
    \    long long sum13 = 0;\n    long long sum14 = 0;\n    long long sum15 = 0;\n\
    \    long long sum16 = 0;\n    long long sum17 = 0;\n    long long sum18 = 0;\n\
    \    long long sum19 = 0;\n    long long sum20 = 0;\n    long long sum21 = 0;\n\
    \    long long sum22 = 0;\n    long long sum23 = 0;\n    long long sum24 = 0;\n\
    \    long long sum25 = 0;\n    long long sum26 = 0;\n    long long sum27 = 0;\n\
    \    long long sum28 = 0;\n    long long sum29 = 0;\n    long long sum30 = 0;\n\
    \    long long sum31 = 0;\n    long long sum32 = 0;\n    long long sum33 = 0;\n\
    \    long long sum34 = 0;\n    long long sum35 = 0;\n    long long sum36 = 0;\n\
    \    long long sum37 = 0;\n    long long sum38 = 0;\n    long long sum39 = 0;\n\
    \    long long sum40 = 0;\n    long long sum41 = 0;\n    long long sum42 = 0;\n\
    \    long long sum43 = 0;\n    long long sum44 = 0;\n    long long sum45 = 0;\n\
    \    long long sum46 = 0;\n    long long sum47 = 0;\n    long long sum48 = 0;\n\
    \    long long sum49 = 0;\n    long long sum50 = 0;\n    long long sum51 = 0;\n\
    \    long long sum52 = 0;\n    long long sum53 = 0;\n    long long sum54 = 0;\n\
    \    long long sum55 = 0;\n    long long sum56 = 0;\n    long long sum57 = 0;\n\
    \    long long sum58 = 0;\n    long long sum59 = 0;\n    long long sum60 = 0;\n\
    \    long long sum61 = 0;\n    long long sum62 = 0;\n    long long sum63 = 0;\n\
    \    long long sum64 = 0;\n    long long sum65 = 0;\n    long long sum66 = 0;\n\
    \    long long sum67 = 0;\n    long long sum68 = 0;\n    long long sum69 = 0;\n\
    \    long long sum70 = 0;\n    long long sum71 = 0;\n    long long sum72 = 0;\n\
    \    long long sum73 = 0;\n    long long sum74 = 0;\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpfd5u3gn9: /tmp/tmpfd5u3gn9.cpp:95: int main(): Assertion `candidate((std::vector<long>()))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpf1ueb9jm: /tmp/tmpf1ueb9jm.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpf1ueb9jm: /tmp/tmpf1ueb9jm.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpf1ueb9jm: /tmp/tmpf1ueb9jm.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpky9vj1_i: /tmp/tmpky9vj1_i.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (auto i : array) {\n        sum +=\
    \ i;\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end(),\
    \ [](long long a, long long b) { return a > b; });\n    } else {\n        std::sort(array.begin(),\
    \ array.end(), [](long long a, long long b) { return a < b; });\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp2oslg58h: /tmp/tmp2oslg58h.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpkdxtkfwd: /tmp/tmpkdxtkfwd.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (auto i : array) {\n        sum +=\
    \ i;\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpang2fb4a: /tmp/tmpang2fb4a.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long long sum = 0;\n    for (long long\
    \ i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum\
    \ % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n\
    \        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp12gp1m2l: /tmp/tmp12gp1m2l.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpkdxtkfwd: /tmp/tmpkdxtkfwd.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // code here\n    long long sum = 0;\n    for (long long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp3rbst4cq: /tmp/tmp3rbst4cq.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long long sum = 0;\n    for (long long\
    \ i : array) {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpa2gansej: /tmp/tmpa2gansej.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpdiinwbo0: /tmp/tmpdiinwbo0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long long sum = 0;\n    for (long long\
    \ i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum\
    \ % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n\
    \        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp12gp1m2l: /tmp/tmp12gp1m2l.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp_5pkw9w1: /tmp/tmp_5pkw9w1.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // write your code here\n    long long sum = 0;\n    for (long\
    \ i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum\
    \ % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n\
    \        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpt0_dru7x: /tmp/tmpt0_dru7x.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // write your code here\n    long long sum = 0;\n    long long\
    \ sum2 = 0;\n    long long sum3 = 0;\n    long long sum4 = 0;\n    long long sum5\
    \ = 0;\n    long long sum6 = 0;\n    long long sum7 = 0;\n    long long sum8 =\
    \ 0;\n    long long sum9 = 0;\n    long long sum10 = 0;\n    long long sum11 =\
    \ 0;\n    long long sum12 = 0;\n    long long sum13 = 0;\n    long long sum14\
    \ = 0;\n    long long sum15 = 0;\n    long long sum16 = 0;\n    long long sum17\
    \ = 0;\n    long long sum18 = 0;\n    long long sum19 = 0;\n    long long sum20\
    \ = 0;\n    long long sum21 = 0;\n    long long sum22 = 0;\n    long long sum23\
    \ = 0;\n    long long sum24 = 0;\n    long long sum25 = 0;\n    long long sum26\
    \ = 0;\n    long long sum27 = 0;\n    long long sum28 = 0;\n    long long sum29\
    \ = 0;\n    long long sum30 = 0;\n    long long sum31 = 0;\n    long long sum32\
    \ = 0;\n    long long sum33 = 0;\n    long long sum34 = 0;\n    long long sum35\
    \ = 0;\n    long long sum36 = 0;\n    long long sum37 = 0;\n    long long sum38\
    \ = 0;\n    long long sum39 = 0;\n    long long sum40 = 0;\n    long long sum41\
    \ = 0;\n    long long sum42 = 0;\n    long long sum43 = 0;\n    long long sum44\
    \ = 0;\n    long long sum45 = 0;\n    long long sum46 = 0;\n    long long sum47\
    \ = 0;\n    long long sum48 = 0;\n    long long sum49 = 0;\n    long long sum50\
    \ = 0;\n    long long sum51 = 0;\n    long long sum52 = 0;\n    long long sum53\
    \ = 0;\n    long long sum54 = 0;\n    long long sum55 = 0;\n    long long sum56\
    \ = 0;\n    long long sum57 = 0;\n    long long sum58 = 0;\n    long long sum59\
    \ = 0;\n    long long sum60 = 0;\n    long long sum61 = 0;\n    long long sum62\
    \ = 0;\n    long long sum63 = 0;\n    long long sum64 = 0;\n    long long sum65\
    \ = 0;\n    long long sum66 = 0;\n    long long sum67 = 0;\n    long long sum68\
    \ = 0;\n    long long sum69 = 0;\n    long long sum70 = 0;\n    long long sum71\
    \ = 0;\n    long long sum72 = 0;\n    long long sum73 = 0;\n    \n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpii61mlfx: /tmp/tmpii61mlfx.cpp:96: int main(): Assertion `candidate((std::vector<long>()))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // write your code here\n    long long sum = 0;\n    for (long\
    \ long i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if\
    \ (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n    } else\
    \ {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpk8bjehyw: /tmp/tmpk8bjehyw.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // write your code here\n    long sum = 0;\n    for (long i :\
    \ array) {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpmggfwb_y: /tmp/tmpmggfwb_y.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long long sum = 0;\n    for (long long\
    \ i : array) {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpa2gansej: /tmp/tmpa2gansej.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long long sum = 0;\n    for (long long\
    \ i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum\
    \ % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n\
    \        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp12gp1m2l: /tmp/tmp12gp1m2l.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpf1ueb9jm: /tmp/tmpf1ueb9jm.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpfhgtmd_w: /tmp/tmpfhgtmd_w.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (auto i : array) {\n        sum +=\
    \ i;\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpang2fb4a: /tmp/tmpang2fb4a.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpdiinwbo0: /tmp/tmpdiinwbo0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long long sum = 0;\n    for (long long\
    \ i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum\
    \ % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n\
    \        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp12gp1m2l: /tmp/tmp12gp1m2l.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long long sum = 0;\n    for (long long\
    \ i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum\
    \ % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n\
    \        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp12gp1m2l: /tmp/tmp12gp1m2l.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpkdxtkfwd: /tmp/tmpkdxtkfwd.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (auto i : array) {\n        sum +=\
    \ i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \        return array;\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \        return array;\n    }\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpr6j_uiyh: /tmp/tmpr6j_uiyh.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 1) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp4pziq52q: /tmp/tmp4pziq52q.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmphq4icai7: /tmp/tmphq4icai7.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (auto i : array) {\n        sum +=\
    \ i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmped1xuenm: /tmp/tmped1xuenm.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (auto i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpxpndg4sp: /tmp/tmpxpndg4sp.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (auto i : array) {\n        sum +=\
    \ i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmped1xuenm: /tmp/tmped1xuenm.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpi8cs4fxf: /tmp/tmpi8cs4fxf.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long long sum = 0;\n    for (long long\
    \ i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum\
    \ % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n\
    \        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp12gp1m2l: /tmp/tmp12gp1m2l.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end(), std::less<long>());\n    }\n    return array;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmppd8jhxdn: /tmp/tmppd8jhxdn.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long long sum = 0;\n    for (long long\
    \ i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum\
    \ % 2 != 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n\
    \        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpw7ktyr4p: /tmp/tmpw7ktyr4p.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // write your code here\n    long sum = 0;\n    for (long i :\
    \ array) {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpmggfwb_y: /tmp/tmpmggfwb_y.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpfhgtmd_w: /tmp/tmpfhgtmd_w.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (auto i : array) {\n        sum +=\
    \ i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \        return array;\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \        return array;\n    }\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpr6j_uiyh: /tmp/tmpr6j_uiyh.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpdiinwbo0: /tmp/tmpdiinwbo0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    long long sum2 = 0;\n    long long sum3\
    \ = 0;\n    long long sum4 = 0;\n    long long sum5 = 0;\n    long long sum6 =\
    \ 0;\n    long long sum7 = 0;\n    long long sum8 = 0;\n    long long sum9 = 0;\n\
    \    long long sum10 = 0;\n    long long sum11 = 0;\n    long long sum12 = 0;\n\
    \    long long sum13 = 0;\n    long long sum14 = 0;\n    long long sum15 = 0;\n\
    \    long long sum16 = 0;\n    long long sum17 = 0;\n    long long sum18 = 0;\n\
    \    long long sum19 = 0;\n    long long sum20 = 0;\n    long long sum21 = 0;\n\
    \    long long sum22 = 0;\n    long long sum23 = 0;\n    long long sum24 = 0;\n\
    \    long long sum25 = 0;\n    long long sum26 = 0;\n    long long sum27 = 0;\n\
    \    long long sum28 = 0;\n    long long sum29 = 0;\n    long long sum30 = 0;\n\
    \    long long sum31 = 0;\n    long long sum32 = 0;\n    long long sum33 = 0;\n\
    \    long long sum34 = 0;\n    long long sum35 = 0;\n    long long sum36 = 0;\n\
    \    long long sum37 = 0;\n    long long sum38 = 0;\n    long long sum39 = 0;\n\
    \    long long sum40 = 0;\n    long long sum41 = 0;\n    long long sum42 = 0;\n\
    \    long long sum43 = 0;\n    long long sum44 = 0;\n    long long sum45 = 0;\n\
    \    long long sum46 = 0;\n    long long sum47 = 0;\n    long long sum48 = 0;\n\
    \    long long sum49 = 0;\n    long long sum50 = 0;\n    long long sum51 = 0;\n\
    \    long long sum52 = 0;\n    long long sum53 = 0;\n    long long sum54 = 0;\n\
    \    long long sum55 = 0;\n    long long sum56 = 0;\n    long long sum57 = 0;\n\
    \    long long sum58 = 0;\n    long long sum59 = 0;\n    long long sum60 = 0;\n\
    \    long long sum61 = 0;\n    long long sum62 = 0;\n    long long sum63 = 0;\n\
    \    long long sum64 = 0;\n    long long sum65 = 0;\n    long long sum66 = 0;\n\
    \    long long sum67 = 0;\n    long long sum68 = 0;\n    long long sum69 = 0;\n\
    \    long long sum70 = 0;\n    long long sum71 = 0;\n    long long sum72 = 0;\n\
    \    long long sum73 = 0;\n    long long sum74 = 0;\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpfd5u3gn9: /tmp/tmpfd5u3gn9.cpp:95: int main(): Assertion `candidate((std::vector<long>()))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpdiinwbo0: /tmp/tmpdiinwbo0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpf1ueb9jm: /tmp/tmpf1ueb9jm.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp8rufjksr: /tmp/tmp8rufjksr.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpdiinwbo0: /tmp/tmpdiinwbo0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp8rufjksr: /tmp/tmp8rufjksr.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpdiinwbo0: /tmp/tmpdiinwbo0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (auto i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp3mabo5mp: /tmp/tmp3mabo5mp.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (auto i : array) {\n        sum +=\
    \ i;\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpang2fb4a: /tmp/tmpang2fb4a.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpdiinwbo0: /tmp/tmpdiinwbo0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpf1ueb9jm: /tmp/tmpf1ueb9jm.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpfhgtmd_w: /tmp/tmpfhgtmd_w.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // write your code here\n    long long sum = 0;\n    for (long\
    \ long i : array) {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n     \
    \   std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp2puas5el: /tmp/tmp2puas5el.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \        return array;\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \        return array;\n    }\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpp9sbi5tg: /tmp/tmpp9sbi5tg.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpfhgtmd_w: /tmp/tmpfhgtmd_w.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp_dxsj01w: /tmp/tmp_dxsj01w.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // write your code here\n    long long sum = 0;\n    for (long\
    \ long i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if\
    \ (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else\
    \ {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp6g5zcntb: /tmp/tmp6g5zcntb.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // write your code here\n    long sum = 0;\n    for (long i :\
    \ array) {\n        sum += i;\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp8u03_enz: /tmp/tmp8u03_enz.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpfhgtmd_w: /tmp/tmpfhgtmd_w.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // write your code here\n    long long sum = 0;\n    for (long\
    \ long i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if\
    \ (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n    } else\
    \ {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpk8bjehyw: /tmp/tmpk8bjehyw.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp_dxsj01w: /tmp/tmp_dxsj01w.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpky9vj1_i: /tmp/tmpky9vj1_i.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpky9vj1_i: /tmp/tmpky9vj1_i.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // write your code here\n    long sum = 0;\n    for (long i :\
    \ array) {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpmggfwb_y: /tmp/tmpmggfwb_y.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpkdxtkfwd: /tmp/tmpkdxtkfwd.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end(), std::less<long>());\n    }\n    return array;\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpdu7zyttm: /tmp/tmpdu7zyttm.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 1) {\n        std::sort(array.begin(), array.end(), [](long a, long b) {\n \
    \           return a > b;\n        });\n    } else {\n        std::sort(array.begin(),\
    \ array.end(), [](long a, long b) {\n            return a < b;\n        });\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpc5ta77py: /tmp/tmpc5ta77py.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmphq4icai7: /tmp/tmphq4icai7.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n        return array;\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n        return array;\n    }\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpc54qhw_q: /tmp/tmpc54qhw_q.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (auto i : array) {\n        sum +=\
    \ i;\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpang2fb4a: /tmp/tmpang2fb4a.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmphq4icai7: /tmp/tmphq4icai7.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpkdxtkfwd: /tmp/tmpkdxtkfwd.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // code here\n    long long sum = 0;\n    for (long long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 !=\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpaz5ajp1o: /tmp/tmpaz5ajp1o.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpdiinwbo0: /tmp/tmpdiinwbo0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpkdxtkfwd: /tmp/tmpkdxtkfwd.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpf1ueb9jm: /tmp/tmpf1ueb9jm.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpvneluh0l: /tmp/tmpvneluh0l.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpfhgtmd_w: /tmp/tmpfhgtmd_w.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // code here\n    long long sum = 0;\n    for (long long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmppldo4x0w: /tmp/tmppldo4x0w.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \        return array;\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \        return array;\n    }\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpgexp40_3: /tmp/tmpgexp40_3.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpfhgtmd_w: /tmp/tmpfhgtmd_w.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (auto i : array) {\n        sum +=\
    \ i;\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp004ipdy_: /tmp/tmp004ipdy_.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp_dxsj01w: /tmp/tmp_dxsj01w.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpf1ueb9jm: /tmp/tmpf1ueb9jm.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    long long temp = 0;\n    long long count\
    \ = 0;\n    for (long long i = 0; i < array.size(); i++) {\n        sum += array[i];\n\
    \    }\n    if (sum % 2 == 0) {\n        for (long long i = 0; i < array.size();\
    \ i++) {\n            temp = array[i];\n            while (temp > 0) {\n     \
    \           array[count] = temp % 10;\n                temp = temp / 10;\n   \
    \             count++;\n            }\n        }\n    } else {\n        for (long\
    \ long i = 0; i < array.size(); i++) {\n            temp = array[i];\n       \
    \     while (temp > 0) {\n                array[count] = temp % 10;\n        \
    \        temp = temp / 10;\n                count++;\n            }\n        }\n\
    \        std::reverse(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp5q9ndr8t: /tmp/tmp5q9ndr8t.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpvb1qvub6: /tmp/tmpvb1qvub6.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 !=\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpob835j7a: /tmp/tmpob835j7a.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // write your code here\n    long long sum = 0;\n    for (long\
    \ long i : array) {\n        sum += i;\n    }\n    if (sum % 2 == 1) {\n     \
    \   std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpm73sf8na: /tmp/tmpm73sf8na.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (auto i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpxpndg4sp: /tmp/tmpxpndg4sp.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpf1ueb9jm: /tmp/tmpf1ueb9jm.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpf1ueb9jm: /tmp/tmpf1ueb9jm.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpfhgtmd_w: /tmp/tmpfhgtmd_w.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpdiinwbo0: /tmp/tmpdiinwbo0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (auto i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp3mabo5mp: /tmp/tmp3mabo5mp.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpdiinwbo0: /tmp/tmpdiinwbo0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long long sum = 0;\n    for (long long\
    \ i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum\
    \ % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n\
    \        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp12gp1m2l: /tmp/tmp12gp1m2l.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (auto i : array) {\n        sum +=\
    \ i;\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end(),\
    \ [](long a, long b) { return a < b; });\n    } else {\n        std::sort(array.begin(),\
    \ array.end(), [](long a, long b) { return a > b; });\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpx7ab7vqx: /tmp/tmpx7ab7vqx.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpb48y8zx9: /tmp/tmpb48y8zx9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long long sum = 0;\n    for (long long\
    \ i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum\
    \ % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n\
    \        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp12gp1m2l: /tmp/tmp12gp1m2l.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end(),\
    \ [](long long a, long long b) { return a > b; });\n    } else {\n        std::sort(array.begin(),\
    \ array.end(), [](long long a, long long b) { return a < b; });\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp_1arzzcp: /tmp/tmp_1arzzcp.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // write your code here\n    long sum = 0;\n    for (long i :\
    \ array) {\n        sum += i;\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp8u03_enz: /tmp/tmp8u03_enz.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // code here\n    long sum = 0;\n    long sum2 = 0;\n    for (long\
    \ i = 0; i < array.size(); i++) {\n        sum += array[i];\n        sum2 += array[i];\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp0fmlek0q: /tmp/tmp0fmlek0q.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // code here\n    long sum = 0;\n    for (long i : array) {\n\
    \        sum += i;\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpx8j8zxm6: /tmp/tmpx8j8zxm6.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp8rufjksr: /tmp/tmp8rufjksr.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpky9vj1_i: /tmp/tmpky9vj1_i.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpky9vj1_i: /tmp/tmpky9vj1_i.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (auto i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpdie0b9xn: /tmp/tmpdie0b9xn.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpdiinwbo0: /tmp/tmpdiinwbo0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (auto i : array) {\n        sum +=\
    \ i;\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp004ipdy_: /tmp/tmp004ipdy_.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp_dxsj01w: /tmp/tmp_dxsj01w.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpkdxtkfwd: /tmp/tmpkdxtkfwd.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpf1ueb9jm: /tmp/tmpf1ueb9jm.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpdiinwbo0: /tmp/tmpdiinwbo0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    long long count = 0;\n    for (long long\
    \ i = 0; i < array.size(); i++) {\n        sum += array[i];\n        count +=\
    \ 1;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp0p_hwx0b: /tmp/tmp0p_hwx0b.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (auto i : array) {\n        sum +=\
    \ i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmped1xuenm: /tmp/tmped1xuenm.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n        return array;\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n        return array;\n    }\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpc54qhw_q: /tmp/tmpc54qhw_q.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \        return array;\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \        return array;\n    }\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpgexp40_3: /tmp/tmpgexp40_3.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp8rufjksr: /tmp/tmp8rufjksr.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,
    (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpdiinwbo0: /tmp/tmpdiinwbo0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (auto i : array) {\n        sum +=\
    \ i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmped1xuenm: /tmp/tmped1xuenm.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpf1ueb9jm: /tmp/tmpf1ueb9jm.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmpdiinwbo0: /tmp/tmpdiinwbo0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long long sum = 0;\n    long long sum1\
    \ = 0;\n    long long sum2 = 0;\n    for (long i = 0; i < array.size(); i++) {\n\
    \        sum += array[i];\n        sum1 += array[i];\n        sum2 += array[i];\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \        return array;\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \        return array;\n    }\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: Exception
  stderr: 'tmp79n_k2kk: /tmp/tmp79n_k2kk.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,
    (long)1, (long)2, (long)3, (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660134978
