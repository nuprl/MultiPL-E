language: cpp
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplhvu46c_.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmplhvu46c_.cpp:19:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : array) {\n                  \
    \      ^\n/tmp/tmplhvu46c_.cpp: In function 'int main()':\n/tmp/tmplhvu46c_.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplhvu46c_.cpp:2:\n/tmp/tmplhvu46c_.cpp:31:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmplhvu46c_.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmplhvu46c_.cpp:32:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmplhvu46c_.cpp:32:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmplhvu46c_.cpp:32:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmplhvu46c_.cpp:32:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp12c77hi3.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp12c77hi3.cpp:19:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : array) {\n                   ^\n/tmp/tmp12c77hi3.cpp:\
    \ In function 'int main()':\n/tmp/tmp12c77hi3.cpp:30:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = sort_array;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp12c77hi3.cpp:2:\n/tmp/tmp12c77hi3.cpp:31:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmp12c77hi3.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmp12c77hi3.cpp:32:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmp12c77hi3.cpp:32:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp12c77hi3.cpp:32:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmp12c77hi3.cpp:32:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // write your code here\n    long long sum = 0;\n    for (long\
    \ long i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if\
    \ (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else\
    \ {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps8guo4i9.cpp: In function 'int main()':\n/tmp/tmps8guo4i9.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps8guo4i9.cpp:2:\n/tmp/tmps8guo4i9.cpp:32:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmps8guo4i9.cpp:33:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmps8guo4i9.cpp:33:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmps8guo4i9.cpp:33:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmps8guo4i9.cpp:33:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmps8guo4i9.cpp:33:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmps8guo4i9.cpp:33:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmps8guo4i9.cpp:34:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    long long temp = 0;\n    long long count\
    \ = 0;\n    for (long long i = 0; i < array.size(); i++) {\n        sum += array[i];\n\
    \    }\n    if (sum % 2 == 0) {\n        for (long long i = 0; i < array.size();\
    \ i++) {\n            if (array[i] > temp) {\n                temp = array[i];\n\
    \                count++;\n            }\n        }\n    } else {\n        for\
    \ (long long i = 0; i < array.size(); i++) {\n            if (array[i] < temp)\
    \ {\n                temp = array[i];\n                count++;\n            }\n\
    \        }\n    }\n    std::vector<long> result;\n    for (long long i = 0; i\
    \ < array.size(); i++) {\n        if (count == 1) {\n            result.push_back(array[i]);\n\
    \        } else {\n            if (array[i] > temp) {\n                result.push_back(array[i]);\n\
    \                count--;\n            } else {\n                result.push_back(temp);\n\
    \                result.push_back(array[i]);\n                count--;\n     \
    \       }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0,\
    \ (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3,\
    \ (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz97r_idg.cpp: In function 'int main()':\n/tmp/tmpz97r_idg.cpp:57:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz97r_idg.cpp:2:\n/tmp/tmpz97r_idg.cpp:58:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpz97r_idg.cpp:59:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpz97r_idg.cpp:59:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpz97r_idg.cpp:59:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpz97r_idg.cpp:59:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpz97r_idg.cpp:59:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpz97r_idg.cpp:59:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpz97r_idg.cpp:60:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ifnxjyl.cpp: In function 'int main()':\n/tmp/tmp6ifnxjyl.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ifnxjyl.cpp:2:\n/tmp/tmp6ifnxjyl.cpp:32:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmp6ifnxjyl.cpp:33:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmp6ifnxjyl.cpp:33:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmp6ifnxjyl.cpp:33:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6ifnxjyl.cpp:33:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmp6ifnxjyl.cpp:33:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmp6ifnxjyl.cpp:33:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp6ifnxjyl.cpp:34:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplhvu46c_.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmplhvu46c_.cpp:19:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : array) {\n                  \
    \      ^\n/tmp/tmplhvu46c_.cpp: In function 'int main()':\n/tmp/tmplhvu46c_.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplhvu46c_.cpp:2:\n/tmp/tmplhvu46c_.cpp:31:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmplhvu46c_.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmplhvu46c_.cpp:32:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmplhvu46c_.cpp:32:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmplhvu46c_.cpp:32:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmplhvu46c_.cpp:32:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long long sum = 0;\n    long long sum1\
    \ = 0;\n    long long sum2 = 0;\n    long long sum3 = 0;\n    long long sum4 =\
    \ 0;\n    long long sum5 = 0;\n    long long sum6 = 0;\n    long long sum7 = 0;\n\
    \    long long sum8 = 0;\n    long long sum9 = 0;\n    long long sum10 = 0;\n\
    \    long long sum11 = 0;\n    long long sum12 = 0;\n    long long sum13 = 0;\n\
    \    long long sum14 = 0;\n    long long sum15 = 0;\n    long long sum16 = 0;\n\
    \    long long sum17 = 0;\n    long long sum18 = 0;\n    long long sum19 = 0;\n\
    \    long long sum20 = 0;\n    long long sum21 = 0;\n    long long sum22 = 0;\n\
    \    long long sum23 = 0;\n    long long sum24 = 0;\n    long long sum25 = 0;\n\
    \    long long sum26 = 0;\n    long long sum27 = 0;\n    long long sum28 = 0;\n\
    \    long long sum29 = 0;\n    long long sum30 = 0;\n    long long sum31 = 0;\n\
    \    long long sum32 = 0;\n    long long sum33 = 0;\n    long long sum34 = 0;\n\
    \    long long sum35 = 0;\n    long long sum36 = 0;\n    long long sum37 = 0;\n\
    \    long long sum38 = 0;\n    long long sum39 = 0;\n    long long sum40 = 0;\n\
    \    long long sum41 = 0;\n    long long sum42 = 0;\n    long long sum43 = 0;\n\
    \    long long sum44 = 0;\n    long long sum45 = 0;\n    long long sum46 = 0;\n\
    \    long long sum47 = 0;\n    long long sum48 = 0;\n    long long sum49 = 0;\n\
    \    long long sum50 = 0;\n    long long sum51 = 0;\n    long long sum52 = 0;\n\
    \    long long sum53 = 0;\n    long long sum54 = 0;\n    long long sum55 = 0;\n\
    \    long long sum56 = 0;\n    long long sum57 = 0;\n    long long sum58 = 0;\n\
    \    long long sum59 = 0;\n    long long sum60 = 0;\n    long long sum61 = 0;\n\
    \    long long sum62 = 0;\n    long long sum63 = 0;\n    long long sum64 = 0;\n\
    \    long long sum65 = 0;\n    long long sum66 = 0;\n    long long sum67 = 0;\n\
    \    long long sum68 = 0;\n    long long sum69 = 0;\n    long long sum70 = 0;\n\
    \    long long sum71 = 0;\n    long long sum72 = 0;\n    long \n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkdc9wo3z.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpkdc9wo3z.cpp:93:1: error: expected unqualified-id before '}'\
    \ token\n }\n ^\n/tmp/tmpkdc9wo3z.cpp: In function 'int main()':\n/tmp/tmpkdc9wo3z.cpp:95:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkdc9wo3z.cpp:2:\n/tmp/tmpkdc9wo3z.cpp:96:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpkdc9wo3z.cpp:97:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpkdc9wo3z.cpp:97:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpkdc9wo3z.cpp:97:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpkdc9wo3z.cpp:97:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpkdc9wo3z.cpp:97:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmpkdc9wo3z.cpp:97:85: warning: extended initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // write your code here\n    long long sum = 0;\n    for (long\
    \ long i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if\
    \ (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else\
    \ {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps8guo4i9.cpp: In function 'int main()':\n/tmp/tmps8guo4i9.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps8guo4i9.cpp:2:\n/tmp/tmps8guo4i9.cpp:32:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmps8guo4i9.cpp:33:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmps8guo4i9.cpp:33:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmps8guo4i9.cpp:33:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmps8guo4i9.cpp:33:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmps8guo4i9.cpp:33:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmps8guo4i9.cpp:33:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmps8guo4i9.cpp:34:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4_8k9jls.cpp: In function 'int main()':\n/tmp/tmp4_8k9jls.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4_8k9jls.cpp:2:\n/tmp/tmp4_8k9jls.cpp:31:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmp4_8k9jls.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmp4_8k9jls.cpp:32:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmp4_8k9jls.cpp:32:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp4_8k9jls.cpp:32:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmp4_8k9jls.cpp:32:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmp4_8k9jls.cpp:32:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp4_8k9jls.cpp:33:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmee7rhp7.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpmee7rhp7.cpp:19:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : array) {\n                   ^\n/tmp/tmpmee7rhp7.cpp:\
    \ In function 'int main()':\n/tmp/tmpmee7rhp7.cpp:30:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = sort_array;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmee7rhp7.cpp:2:\n/tmp/tmpmee7rhp7.cpp:31:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpmee7rhp7.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpmee7rhp7.cpp:32:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpmee7rhp7.cpp:32:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmee7rhp7.cpp:32:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpmee7rhp7.cpp:32:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplhvu46c_.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmplhvu46c_.cpp:19:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : array) {\n                  \
    \      ^\n/tmp/tmplhvu46c_.cpp: In function 'int main()':\n/tmp/tmplhvu46c_.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplhvu46c_.cpp:2:\n/tmp/tmplhvu46c_.cpp:31:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmplhvu46c_.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmplhvu46c_.cpp:32:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmplhvu46c_.cpp:32:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmplhvu46c_.cpp:32:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmplhvu46c_.cpp:32:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmee7rhp7.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpmee7rhp7.cpp:19:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : array) {\n                   ^\n/tmp/tmpmee7rhp7.cpp:\
    \ In function 'int main()':\n/tmp/tmpmee7rhp7.cpp:30:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = sort_array;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmee7rhp7.cpp:2:\n/tmp/tmpmee7rhp7.cpp:31:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpmee7rhp7.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpmee7rhp7.cpp:32:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpmee7rhp7.cpp:32:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmee7rhp7.cpp:32:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpmee7rhp7.cpp:32:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp12c77hi3.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp12c77hi3.cpp:19:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : array) {\n                   ^\n/tmp/tmp12c77hi3.cpp:\
    \ In function 'int main()':\n/tmp/tmp12c77hi3.cpp:30:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = sort_array;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp12c77hi3.cpp:2:\n/tmp/tmp12c77hi3.cpp:31:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmp12c77hi3.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmp12c77hi3.cpp:32:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmp12c77hi3.cpp:32:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp12c77hi3.cpp:32:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmp12c77hi3.cpp:32:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4_8k9jls.cpp: In function 'int main()':\n/tmp/tmp4_8k9jls.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4_8k9jls.cpp:2:\n/tmp/tmp4_8k9jls.cpp:31:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmp4_8k9jls.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmp4_8k9jls.cpp:32:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmp4_8k9jls.cpp:32:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp4_8k9jls.cpp:32:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmp4_8k9jls.cpp:32:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmp4_8k9jls.cpp:32:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp4_8k9jls.cpp:33:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // write your code here\n    long long sum = 0;\n    for (long\
    \ long i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if\
    \ (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n    } else\
    \ {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3l6ntyh2.cpp: In function 'int main()':\n/tmp/tmp3l6ntyh2.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3l6ntyh2.cpp:2:\n/tmp/tmp3l6ntyh2.cpp:32:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmp3l6ntyh2.cpp:33:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmp3l6ntyh2.cpp:33:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmp3l6ntyh2.cpp:33:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3l6ntyh2.cpp:33:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmp3l6ntyh2.cpp:33:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmp3l6ntyh2.cpp:33:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp3l6ntyh2.cpp:34:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // Your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0fd__2s.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpo0fd__2s.cpp:20:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : array) {\n                   ^\n/tmp/tmpo0fd__2s.cpp:\
    \ In function 'int main()':\n/tmp/tmpo0fd__2s.cpp:31:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = sort_array;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo0fd__2s.cpp:2:\n/tmp/tmpo0fd__2s.cpp:32:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmpo0fd__2s.cpp:33:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmpo0fd__2s.cpp:33:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmpo0fd__2s.cpp:33:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpo0fd__2s.cpp:33:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmpo0fd__2s.cpp:33:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end(),\
    \ [](long a, long b) { return a > b; });\n    } else {\n        std::sort(array.begin(),\
    \ array.end(), [](long a, long b) { return a < b; });\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9_yozl4v.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp9_yozl4v.cpp:19:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : array) {\n                   ^\n/tmp/tmp9_yozl4v.cpp:23:82:\
    \ warning: lambda expressions only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n         std::sort(array.begin(), array.end(), [](long a, long\
    \ b) { return a > b; });\n                                                   \
    \                               ^\n/tmp/tmp9_yozl4v.cpp:23:83: error: no matching\
    \ function for call to 'sort(std::vector<long int>::iterator, std::vector<long\
    \ int>::iterator, sort_array(std::vector<long int>)::__lambda0)'\n         std::sort(array.begin(),\
    \ array.end(), [](long a, long b) { return a > b; });\n                      \
    \                                                             ^\n/tmp/tmp9_yozl4v.cpp:23:83:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/algorithm:62:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp9_yozl4v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9_yozl4v.cpp:23:83:\
    \ note:   candidate expects 2 arguments, 3 provided\n         std::sort(array.begin(),\
    \ array.end(), [](long a, long b) { return a > b; });\n                      \
    \                                                             ^\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp9_yozl4v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    // write your code here\n    long long sum = 0;\n    for (long\
    \ long i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if\
    \ (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else\
    \ {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps8guo4i9.cpp: In function 'int main()':\n/tmp/tmps8guo4i9.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps8guo4i9.cpp:2:\n/tmp/tmps8guo4i9.cpp:32:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmps8guo4i9.cpp:33:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmps8guo4i9.cpp:33:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmps8guo4i9.cpp:33:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmps8guo4i9.cpp:33:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmps8guo4i9.cpp:33:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                            \
    \         ^\n/tmp/tmps8guo4i9.cpp:33:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmps8guo4i9.cpp:34:40:\
    \ warning: extended initializer lists only available with -std=c++1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (auto i : array) {\n        sum +=\
    \ i;\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end(),\
    \ [](long long a, long long b) {\n            return a < b;\n        });\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend(), [](long long a, long\
    \ long b) {\n            return a > b;\n        });\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd1bn_g2b.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpd1bn_g2b.cpp:19:15: error: 'i' does not name a type\n     for\
    \ (auto i : array) {\n               ^\n/tmp/tmpd1bn_g2b.cpp:22:5: error: expected\
    \ ';' before 'if'\n     if (sum % 2 == 1) {\n     ^\n/tmp/tmpd1bn_g2b.cpp:22:5:\
    \ error: expected primary-expression before 'if'\n/tmp/tmpd1bn_g2b.cpp:22:5: error:\
    \ expected ';' before 'if'\n/tmp/tmpd1bn_g2b.cpp:22:5: error: expected primary-expression\
    \ before 'if'\n/tmp/tmpd1bn_g2b.cpp:22:5: error: expected ')' before 'if'\n/tmp/tmpd1bn_g2b.cpp:25:9:\
    \ warning: lambda expressions only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n         });\n         ^\n/tmp/tmpd1bn_g2b.cpp:25:10: error: no\
    \ matching function for call to 'sort(std::vector<long int>::iterator, std::vector<long\
    \ int>::iterator, sort_array(std::vector<long int>)::__lambda0)'\n         });\n\
    \          ^\n/tmp/tmpd1bn_g2b.cpp:25:10: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmpd1bn_g2b.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpd1bn_g2b.cpp:25:10:\
    \ note:   candidate expects 2 arguments, 3 provided\n         });\n          ^\n\
    In file included from /usr/include/c++/4.8.2/algorithm:62:0,\n               \
    \  from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n       \
    \          from /tmp/tmpd1bn_g2b.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative\
    \ integers, return a cocpp of the given vector after sorting,\n// you will sort\
    \ the given vector in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given vector.\n\
    // Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n\
    // >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n\
    // >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1,\
    \ (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3,\
    \ (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5,\
    \ (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long>\
    \ array) {\n    long long sum = 0;\n    for (long long i : array) {\n        sum\
    \ += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
    \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
    \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21,\
    \ (long)14, (long)11})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplhvu46c_.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmplhvu46c_.cpp:19:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : array) {\n                  \
    \      ^\n/tmp/tmplhvu46c_.cpp: In function 'int main()':\n/tmp/tmplhvu46c_.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplhvu46c_.cpp:2:\n/tmp/tmplhvu46c_.cpp:31:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n                                           ^\n/tmp/tmplhvu46c_.cpp:32:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \  ^\n/tmp/tmplhvu46c_.cpp:32:50: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \            ^\n/tmp/tmplhvu46c_.cpp:32:50: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmplhvu46c_.cpp:32:75:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (std::vector<long>({(long)5})));\n                                      \
    \                                     ^\n/tmp/tmplhvu46c_.cpp:32:85: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n\
    \                                                                       "
  stdout: ''
