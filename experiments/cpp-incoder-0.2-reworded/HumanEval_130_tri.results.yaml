language: cpp
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    if (n == 0) result.push_back(0);\n    else if (n == 1) result.push_back(1);\n\
    \    else result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    return\
    \ result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt3cgo87f.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmpt3cgo87f.cpp:23:38: error: no match for 'operator+' (operand types are\
    \ 'std::vector<long int>' and 'std::vector<long int>')\n     else result.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                      ^\n\
    /tmp/tmpt3cgo87f.cpp:23:38: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpt3cgo87f.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpt3cgo87f.cpp:23:49: note:   'std::vector<long\
    \ int>' is not derived from 'const std::valarray<_Tp>'\n     else result.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                         \
    \        ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpt3cgo87f.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_ValArray,\
    \ std::_Constant, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const std::valarray<_Tp>&, const _Tp&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpt3cgo87f.cpp:23:49: note:   'std::vector<long\
    \ int>' is not derived from 'const std::valarray<_Tp>'\n     else result.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                         \
    \        ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpt3cgo87f.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    long a = 0;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long temp;\n    long sum = 0;\n    long i = 0;\n    while(i < n) {\n    \
    \    temp = a + b + c + d;\n        sum += temp;\n        i++;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = temp;\n    }\n    result.push_back(sum);\n\
    \    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwssw081u.cpp: In function 'int main()':\n/tmp/tmpwssw081u.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpwssw081u.cpp:2:\n/tmp/tmpwssw081u.cpp:42:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpwssw081u.cpp:42:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpwssw081u.cpp:42:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpwssw081u.cpp:42:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwssw081u.cpp:42:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpwssw081u.cpp:42:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpwssw081u.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ res;\n    if (n == 1) {\n        res.push_back((long)1);\n        res.push_back((long)3);\n\
    \        res.push_back((long)2);\n        res.push_back((long)8);\n        return\
    \ res;\n    }\n    if (n == 2) {\n        res.push_back((long)1);\n        res.push_back((long)3);\n\
    \        res.push_back((long)2);\n        res.push_back((long)8);\n        return\
    \ res;\n    }\n    if (n % 2 == 0) {\n        res.push_back((long)tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1));\n    } else {\n        res.push_back((long)tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1) + tri(n + 2));\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdqvldgzb.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmpdqvldgzb.cpp:36:38: error: invalid cast from type 'std::vector<long int>'\
    \ to type 'long int'\n         res.push_back((long)tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n                                      ^\n/tmp/tmpdqvldgzb.cpp:38:38:\
    \ error: invalid cast from type 'std::vector<long int>' to type 'long int'\n \
    \        res.push_back((long)tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2));\n\
    \                                      ^\n/tmp/tmpdqvldgzb.cpp: In function 'int\
    \ main()':\n/tmp/tmpdqvldgzb.cpp:43:10: error: 'candidate' does not name a type\n\
    \     auto candidate = tri;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdqvldgzb.cpp:2:\n/tmp/tmpdqvldgzb.cpp:44:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpdqvldgzb.cpp:44:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpdqvldgzb.cpp:44:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpdqvldgzb.cpp:44:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpdqvldgzb.cpp:44:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpdqvldgzb.cpp:44:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    long a = 1;\n    long b = 2;\n    long c = 3;\n    long d = 4;\n\
    \    long temp;\n    long sum = 0;\n    long tri_sum = 0;\n    long tri_sum2 =\
    \ 0;\n    long tri_sum3 = 0;\n    long tri_sum4 = 0;\n    long tri_sum5 = 0;\n\
    \    long tri_sum6 = 0;\n    long tri_sum7 = 0;\n    long tri_sum8 = 0;\n    long\
    \ tri_sum9 = 0;\n    long tri_sum10 = 0;\n    long tri_sum11 = 0;\n    long tri_sum12\
    \ = 0;\n    long tri_sum13 = 0;\n    long tri_sum14 = 0;\n    long tri_sum15 =\
    \ 0;\n    long tri_sum16 = 0;\n    long tri_sum17 = 0;\n    long tri_sum18 = 0;\n\
    \    long tri_sum19 = 0;\n    long tri_sum20 = 0;\n    long tri_sum21 = 0;\n \
    \   long tri_sum22 = 0;\n    long tri_sum23 = 0;\n    long tri_sum24 = 0;\n  \
    \  long tri_sum25 = 0;\n    long tri_sum26 = 0;\n    long tri_sum27 = 0;\n   \
    \ long tri_sum28 = 0;\n    long tri_sum29 = 0;\n    long tri_sum30 = 0;\n    long\
    \ tri_sum31 = 0;\n    long tri_sum32 = 0;\n    long tri_sum33 = 0;\n    long tri_sum34\
    \ = 0;\n    long tri_sum35 = 0;\n    long tri_sum36 = 0;\n    long tri_sum37 =\
    \ 0;\n    long tri_sum38 = 0;\n    long tri_sum39 = 0;\n    long tri_sum40 = 0;\n\
    \    long tri_sum41 = 0;\n    long tri_sum42 = 0;\n    long tri_sum43 = 0;\n \
    \   long tri_sum44 = 0;\n    long tri_sum45 = 0;\n    long tri_sum46 = 0;\n  \
    \  long tri_sum47 = 0;\n    long tri_sum48 = 0;\n    long tri_sum49 = 0;\n   \
    \ long tri_sum50 = 0;\n    long tri_sum51 = 0;\n    long tri_sum52 = 0;\n    long\
    \ tri_sum53 = 0;\n    long tri_sum54 = 0;\n    long tri_sum55 = 0;\n    long tri_sum56\
    \ = 0;\n    long tri_sum57 = 0;\n    long tri_sum58 = 0;\n    long tri_sum59 =\
    \ 0;\n    long tri_sum60 = 0;\n    \n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv2ozbfdr.cpp: In function 'int main()':\n/tmp/tmpv2ozbfdr.cpp:90:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpv2ozbfdr.cpp:2:\n/tmp/tmpv2ozbfdr.cpp:91:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpv2ozbfdr.cpp:91:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpv2ozbfdr.cpp:91:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpv2ozbfdr.cpp:91:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpv2ozbfdr.cpp:91:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpv2ozbfdr.cpp:91:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpv2ozbfdr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        result.push_back((long)3);\n\
    \    else\n        result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n \
    \   return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdh6joxoc.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmpdh6joxoc.cpp:26:37: error: no match for 'operator+' (operand types are\
    \ 'std::vector<long int>' and 'std::vector<long int>')\n         result.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                     ^\n/tmp/tmpdh6joxoc.cpp:26:37:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpdh6joxoc.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpdh6joxoc.cpp:26:48: note:   'std::vector<long\
    \ int>' is not derived from 'const std::valarray<_Tp>'\n         result.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                         \
    \       ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpdh6joxoc.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_ValArray,\
    \ std::_Constant, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const std::valarray<_Tp>&, const _Tp&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpdh6joxoc.cpp:26:48: note:   'std::vector<long\
    \ int>' is not derived from 'const std::valarray<_Tp>'\n         result.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                         \
    \       ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpdh6joxoc.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Ex"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    if (n == 0)\n    {\n        result.push_back(0);\n        result.push_back(1);\n\
    \        result.push_back(1);\n    }\n    else if (n == 1)\n    {\n        result.push_back(0);\n\
    \        result.push_back(1);\n        result.push_back(1);\n    }\n    else if\
    \ (n == 2)\n    {\n        result.push_back(0);\n        result.push_back(1);\n\
    \        result.push_back(1);\n    }\n    else\n    {\n        long a = tri(n\
    \ - 1);\n        long b = tri(n - 2);\n        long c = tri(n - 3);\n        result.push_back(a);\n\
    \        result.push_back(b);\n        result.push_back(c);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9ovay6xk.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmp9ovay6xk.cpp:41:27: error: cannot convert 'std::vector<long int>' to 'long\
    \ int' in initialization\n         long a = tri(n - 1);\n                    \
    \       ^\n/tmp/tmp9ovay6xk.cpp:42:27: error: cannot convert 'std::vector<long\
    \ int>' to 'long int' in initialization\n         long b = tri(n - 2);\n     \
    \                      ^\n/tmp/tmp9ovay6xk.cpp:43:27: error: cannot convert 'std::vector<long\
    \ int>' to 'long int' in initialization\n         long c = tri(n - 3);\n     \
    \                      ^\n/tmp/tmp9ovay6xk.cpp: In function 'int main()':\n/tmp/tmp9ovay6xk.cpp:51:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp9ovay6xk.cpp:2:\n/tmp/tmp9ovay6xk.cpp:52:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmp9ovay6xk.cpp:52:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmp9ovay6xk.cpp:52:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmp9ovay6xk.cpp:52:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp9ovay6xk.cpp:52:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp9ovay6xk.cpp:52:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    long a = 1;\n    long b = 2;\n    long c = 1;\n    long d = 1;\n\
    \    long temp;\n    long temp2;\n    long temp3;\n    long temp4;\n    long temp5;\n\
    \    long temp6;\n    long temp7;\n    long temp8;\n    long temp9;\n    long\
    \ temp10;\n    long temp11;\n    long temp12;\n    long temp13;\n    long temp14;\n\
    \    long temp15;\n    long temp16;\n    long temp17;\n    long temp18;\n    long\
    \ temp19;\n    long temp20;\n    long temp21;\n    long temp22;\n    long temp23;\n\
    \    long temp24;\n    long temp25;\n    long temp26;\n    long temp27;\n    long\
    \ temp28;\n    long temp29;\n    long temp30;\n    long temp31;\n    long temp32;\n\
    \    long temp33;\n    long temp34;\n    long temp35;\n    long temp36;\n    long\
    \ temp37;\n    long temp38;\n    long temp39;\n    long temp40;\n    long temp41;\n\
    \    long temp42;\n    long temp43;\n    long temp44;\n    long temp45;\n    long\
    \ temp46;\n    long temp47;\n    long temp48;\n    long temp49;\n    long temp50;\n\
    \    long temp51;\n    long temp52;\n    long temp53;\n    long temp54;\n    long\
    \ temp55;\n    long temp56;\n    long temp57;\n    long temp58;\n    long temp59;\n\
    \    long temp60;\n    long temp61;\n    long temp62;\n    long temp63;\n    long\
    \ temp64;\n    long temp65;\n    long temp66;\n    long temp67;\n    long temp68;\n\
    \    long temp69;\n    long temp70;\n    long temp71;\n    long temp72;\n    long\
    \ temp73;\n    long temp74;\n    long temp75;\n    long temp76;\n    long temp77;\n\
    \    long temp78;\n    long temp79;\n    long temp80;\n    long temp81;\n    long\
    \ temp82;\n    long temp83;\n    long temp84;\n    long \n}\nint main() {\n  \
    \  auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5251ugu0.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmp5251ugu0.cpp:110:1: error: expected unqualified-id before '}' token\n\
    \ }\n ^\n/tmp/tmp5251ugu0.cpp: In function 'int main()':\n/tmp/tmp5251ugu0.cpp:112:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp5251ugu0.cpp:2:\n/tmp/tmp5251ugu0.cpp:113:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmp5251ugu0.cpp:113:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmp5251ugu0.cpp:113:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmp5251ugu0.cpp:113:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp5251ugu0.cpp:113:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp5251ugu0.cpp:113:85: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/vector:64:0,\n                 from\
    \ /usr/include/c++/4.8.2/queue:61,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp5251ugu0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __fi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    long a = 1;\n    long b = 2;\n    long c = 3;\n    long d = a +\
    \ b + c;\n    long e = 0;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 2;\n    long c = 3;\n    long d = a + b + c;\n\
    \    long e = 0;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ a = 1;\n    long b = 2;\n    long c = 3;\n    long d = a + b + c;\n    long\
    \ e = 0;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 2;\n    long c = 3;\n    long d = a + b + c;\n    long e = 0;\n\
    \    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj7k1konc.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmpj7k1konc.cpp:34:10: error: declaration of 'long int n' shadows a parameter\n\
    \     long n = 1;\n          ^\n/tmp/tmpj7k1konc.cpp:47:10: error: redeclaration\
    \ of 'long int a'\n     long a = 1;\n          ^\n/tmp/tmpj7k1konc.cpp:21:10:\
    \ error: 'long int a' previously declared here\n     long a = 1;\n          ^\n\
    /tmp/tmpj7k1konc.cpp:48:10: error: redeclaration of 'long int b'\n     long b\
    \ = 2;\n          ^\n/tmp/tmpj7k1konc.cpp:22:10: error: 'long int b' previously\
    \ declared here\n     long b = 2;\n          ^\n/tmp/tmpj7k1konc.cpp:49:10: error:\
    \ redeclaration of 'long int c'\n     long c = 3;\n          ^\n/tmp/tmpj7k1konc.cpp:23:10:\
    \ error: 'long int c' previously declared here\n     long c = 3;\n          ^\n\
    /tmp/tmpj7k1konc.cpp:50:10: error: redeclaration of 'long int d'\n     long d\
    \ = a + b + c;\n          ^\n/tmp/tmpj7k1konc.cpp:24:10: error: 'long int d' previously\
    \ declared here\n     long d = a + b + c;\n          ^\n/tmp/tmpj7k1konc.cpp:51:10:\
    \ error: redeclaration of 'long int e'\n     long e = 0;\n          ^\n/tmp/tmpj7k1konc.cpp:25:10:\
    \ error: 'long int e' previously declared here\n     long e = 0;\n          ^\n\
    /tmp/tmpj7k1konc.cpp:52:10: error: redeclaration of 'long int f'\n     long f\
    \ = 1;\n          ^\n/tmp/tmpj7k1konc.cpp:26:10: error: 'long int f' previously\
    \ declared here\n     long f = 1;\n          ^\n/tmp/tmpj7k1konc.cpp:53:10: error:\
    \ redeclaration of 'long int g'\n     long g = 1;\n          ^\n/tmp/tmpj7k1konc.cpp:27:10:\
    \ error: 'long int g' previously declared here\n     long g = 1;\n          ^\n\
    /tmp/tmpj7k1konc.cpp:54:10: error: redeclaration of 'long int h'\n     long h\
    \ = 1;\n          ^\n/tmp/tmpj7k1konc.cpp:28:10: error: 'long int h' previously\
    \ declared here\n     long h = 1;\n          ^\n/tmp/tmpj7k1konc.cpp:55:10: error:\
    \ redeclaration of 'long int i'\n     long i = 1;\n          ^\n/tmp/tmpj7k1konc.cpp:29:10:\
    \ error: 'long int i' previously declared here\n     long i = 1;\n          ^\n\
    /tmp/tmpj7k1konc.cpp:56:10: error: redeclaration of 'long int j'\n     long j\
    \ = 1;\n "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    long a = 1;\n    long b = 2;\n    long c = 3;\n    long d = 4;\n\
    \    long temp;\n    long temp2;\n    long temp3;\n    long temp4;\n    long temp5;\n\
    \    long temp6;\n    long temp7;\n    long temp8;\n    long temp9;\n    long\
    \ temp10;\n    long temp11;\n    long temp12;\n    long temp13;\n    long temp14;\n\
    \    long temp15;\n    long temp16;\n    long temp17;\n    long temp18;\n    long\
    \ temp19;\n    long temp20;\n    long temp21;\n    long temp22;\n    long temp23;\n\
    \    long temp24;\n    long temp25;\n    long temp26;\n    long temp27;\n    long\
    \ temp28;\n    long temp29;\n    long temp30;\n    long temp31;\n    long temp32;\n\
    \    long temp33;\n    long temp34;\n    long temp35;\n    long temp36;\n    long\
    \ temp37;\n    long temp38;\n    long temp39;\n    long temp40;\n    long temp41;\n\
    \    long temp42;\n    long temp43;\n    long temp44;\n    long temp45;\n    long\
    \ temp46;\n    long temp47;\n    long temp48;\n    long temp49;\n    long temp50;\n\
    \    long temp51;\n    long temp52;\n    long temp53;\n    long temp54;\n    long\
    \ temp55;\n    long temp56;\n    long temp57;\n    long temp58;\n    long temp59;\n\
    \    long temp60;\n    long temp61;\n    long temp62;\n    long temp63;\n    long\
    \ temp64;\n    long temp65;\n    long temp66;\n    long temp67;\n    long temp68;\n\
    \    long temp69;\n    long temp70;\n    long temp71;\n    long temp72;\n    long\
    \ temp73;\n    long temp74;\n    long temp75;\n    long temp76;\n    long temp77;\n\
    \    long temp78;\n    long temp79;\n    long temp80;\n    long temp81;\n    long\
    \ temp82;\n    long temp83;\n    long temp84;\n    long \n}\nint main() {\n  \
    \  auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjuuwmdh8.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmpjuuwmdh8.cpp:110:1: error: expected unqualified-id before '}' token\n\
    \ }\n ^\n/tmp/tmpjuuwmdh8.cpp: In function 'int main()':\n/tmp/tmpjuuwmdh8.cpp:112:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpjuuwmdh8.cpp:2:\n/tmp/tmpjuuwmdh8.cpp:113:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpjuuwmdh8.cpp:113:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpjuuwmdh8.cpp:113:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpjuuwmdh8.cpp:113:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpjuuwmdh8.cpp:113:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpjuuwmdh8.cpp:113:85: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/vector:64:0,\n                 from\
    \ /usr/include/c++/4.8.2/queue:61,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpjuuwmdh8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __fi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    if (n == 1)\n        result.push_back(1);\n    else if (n % 2 ==\
    \ 0)\n        result.push_back(tri(n - 1) + tri(n - 2));\n    else\n        result.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    return result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt86tufnp.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmpt86tufnp.cpp:24:37: error: no match for 'operator+' (operand types are\
    \ 'std::vector<long int>' and 'std::vector<long int>')\n         result.push_back(tri(n\
    \ - 1) + tri(n - 2));\n                                     ^\n/tmp/tmpt86tufnp.cpp:24:37:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpt86tufnp.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpt86tufnp.cpp:24:48: note:   'std::vector<long\
    \ int>' is not derived from 'const std::valarray<_Tp>'\n         result.push_back(tri(n\
    \ - 1) + tri(n - 2));\n                                                ^\nIn file\
    \ included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpt86tufnp.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_ValArray,\
    \ std::_Constant, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const std::valarray<_Tp>&, const _Tp&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpt86tufnp.cpp:24:48: note:   'std::vector<long\
    \ int>' is not derived from 'const std::valarray<_Tp>'\n         result.push_back(tri(n\
    \ - 1) + tri(n - 2));\n                                                ^\nIn file\
    \ included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpt86tufnp.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_Val"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    long a = 1, b = 2, c = 3;\n    long temp;\n    long tri_sum = 0;\n\
    \    long tri_sum2 = 0;\n    long tri_sum3 = 0;\n    long tri_sum4 = 0;\n    long\
    \ tri_sum5 = 0;\n    long tri_sum6 = 0;\n    long tri_sum7 = 0;\n    long tri_sum8\
    \ = 0;\n    long tri_sum9 = 0;\n    long tri_sum10 = 0;\n    long tri_sum11 =\
    \ 0;\n    long tri_sum12 = 0;\n    long tri_sum13 = 0;\n    long tri_sum14 = 0;\n\
    \    long tri_sum15 = 0;\n    long tri_sum16 = 0;\n    long tri_sum17 = 0;\n \
    \   long tri_sum18 = 0;\n    long tri_sum19 = 0;\n    long tri_sum20 = 0;\n  \
    \  long tri_sum21 = 0;\n    long tri_sum22 = 0;\n    long tri_sum23 = 0;\n   \
    \ long tri_sum24 = 0;\n    long tri_sum25 = 0;\n    long tri_sum26 = 0;\n    long\
    \ tri_sum27 = 0;\n    long tri_sum28 = 0;\n    long tri_sum29 = 0;\n    long tri_sum30\
    \ = 0;\n    long tri_sum31 = 0;\n    long tri_sum32 = 0;\n    long tri_sum33 =\
    \ 0;\n    long tri_sum34 = 0;\n    long tri_sum35 = 0;\n    long tri_sum36 = 0;\n\
    \    long tri_sum37 = 0;\n    long tri_sum38 = 0;\n    long tri_sum39 = 0;\n \
    \   long tri_sum40 = 0;\n    long tri_sum41 = 0;\n    long tri_sum42 = 0;\n  \
    \  long tri_sum43 = 0;\n    long tri_sum44 = 0;\n    long tri_sum45 = 0;\n   \
    \ long tri_sum46 = 0;\n    long tri_sum47 = 0;\n    long tri_sum48 = 0;\n    long\
    \ tri_sum49 = 0;\n    long tri_sum50 = 0;\n    long tri_sum51 = 0;\n    long tri_sum52\
    \ = 0;\n    long tri_sum53 = 0;\n    long tri_sum54 = 0;\n    long tri_sum55 =\
    \ 0;\n    long tri_sum56 = 0;\n    long tri_sum57 = 0;\n    long tri_sum58 = 0;\n\
    \    long tri_sum59 = 0;\n    long tri_sum60 = 0;\n    long tri_sum61 = 0;\n \
    \   long tri_sum62 = 0;\n    \n}\nint main() {\n    auto candidate = tri;\n  \
    \  assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvcpgynmx.cpp: In function 'int main()':\n/tmp/tmpvcpgynmx.cpp:88:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpvcpgynmx.cpp:2:\n/tmp/tmpvcpgynmx.cpp:89:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpvcpgynmx.cpp:89:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpvcpgynmx.cpp:89:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpvcpgynmx.cpp:89:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpvcpgynmx.cpp:89:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpvcpgynmx.cpp:89:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpvcpgynmx.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ res;\n    if (n == 0) return res;\n    if (n == 1) return res;\n    if (n %\
    \ 2 == 0) {\n        res.push_back(n);\n        res.push_back(1 + n / 2);\n  \
    \      res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    } else {\n  \
    \      res.push_back(n);\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n        res.push_back(1 + n / 2);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7p3pxs_.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmpu7p3pxs_.cpp:26:34: error: no match for 'operator+' (operand types are\
    \ 'std::vector<long int>' and 'std::vector<long int>')\n         res.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n/tmp/tmpu7p3pxs_.cpp:26:34:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpu7p3pxs_.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpu7p3pxs_.cpp:26:45: note:   'std::vector<long\
    \ int>' is not derived from 'const std::valarray<_Tp>'\n         res.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                         \
    \    ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpu7p3pxs_.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_ValArray,\
    \ std::_Constant, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const std::valarray<_Tp>&, const _Tp&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpu7p3pxs_.cpp:26:45: note:   'std::vector<long\
    \ int>' is not derived from 'const std::valarray<_Tp>'\n         res.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                         \
    \    ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpu7p3pxs_.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    if (n == 0)\n        return result;\n    if (n == 1)\n        result.push_back((long)3);\n\
    \    if (n == 2)\n        result.push_back((long)3);\n    if (n % 2 == 0)\n  \
    \      result.push_back((long)tri(n - 1) + tri(n - 2) + tri(n + 1));\n    else\n\
    \        result.push_back((long)tri(n - 1) + tri(n - 2) + tri(n - 1));\n    return\
    \ result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpftw5tsj1.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmpftw5tsj1.cpp:28:41: error: invalid cast from type 'std::vector<long int>'\
    \ to type 'long int'\n         result.push_back((long)tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1));\n                                         ^\n/tmp/tmpftw5tsj1.cpp:30:41:\
    \ error: invalid cast from type 'std::vector<long int>' to type 'long int'\n \
    \        result.push_back((long)tri(n - 1) + tri(n - 2) + tri(n - 1));\n     \
    \                                    ^\n/tmp/tmpftw5tsj1.cpp: In function 'int\
    \ main()':\n/tmp/tmpftw5tsj1.cpp:34:10: error: 'candidate' does not name a type\n\
    \     auto candidate = tri;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpftw5tsj1.cpp:2:\n/tmp/tmpftw5tsj1.cpp:35:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpftw5tsj1.cpp:35:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpftw5tsj1.cpp:35:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpftw5tsj1.cpp:35:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpftw5tsj1.cpp:35:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpftw5tsj1.cpp:35:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    long a = 1;\n    long b = 2;\n    long c = 1;\n    long d = 1;\n\
    \    long temp;\n    long temp2;\n    long temp3;\n    long temp4;\n    long temp5;\n\
    \    long temp6;\n    long temp7;\n    long temp8;\n    long temp9;\n    long\
    \ temp10;\n    long temp11;\n    long temp12;\n    long temp13;\n    long temp14;\n\
    \    long temp15;\n    long temp16;\n    long temp17;\n    long temp18;\n    long\
    \ temp19;\n    long temp20;\n    long temp21;\n    long temp22;\n    long temp23;\n\
    \    long temp24;\n    long temp25;\n    long temp26;\n    long temp27;\n    long\
    \ temp28;\n    long temp29;\n    long temp30;\n    long temp31;\n    long temp32;\n\
    \    long temp33;\n    long temp34;\n    long temp35;\n    long temp36;\n    long\
    \ temp37;\n    long temp38;\n    long temp39;\n    long temp40;\n    long temp41;\n\
    \    long temp42;\n    long temp43;\n    long temp44;\n    long temp45;\n    long\
    \ temp46;\n    long temp47;\n    long temp48;\n    long temp49;\n    long temp50;\n\
    \    long temp51;\n    long temp52;\n    long temp53;\n    long temp54;\n    long\
    \ temp55;\n    long temp56;\n    long temp57;\n    long temp58;\n    long temp59;\n\
    \    long temp60;\n    long temp61;\n    long temp62;\n    long temp63;\n    long\
    \ temp64;\n    long temp65;\n    long temp66;\n    long temp67;\n    long temp68;\n\
    \    long temp69;\n    long temp70;\n    long temp71;\n    long temp72;\n    long\
    \ temp73;\n    long temp74;\n    long temp75;\n    long temp76;\n    long temp77;\n\
    \    long temp78;\n    long temp79;\n    long temp80;\n    long temp81;\n    long\
    \ temp82;\n    long temp83;\n    long temp84;\n    long \n}\nint main() {\n  \
    \  auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5251ugu0.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmp5251ugu0.cpp:110:1: error: expected unqualified-id before '}' token\n\
    \ }\n ^\n/tmp/tmp5251ugu0.cpp: In function 'int main()':\n/tmp/tmp5251ugu0.cpp:112:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp5251ugu0.cpp:2:\n/tmp/tmp5251ugu0.cpp:113:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmp5251ugu0.cpp:113:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmp5251ugu0.cpp:113:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmp5251ugu0.cpp:113:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp5251ugu0.cpp:113:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp5251ugu0.cpp:113:85: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/vector:64:0,\n                 from\
    \ /usr/include/c++/4.8.2/queue:61,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp5251ugu0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __fi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ res;\n    if (n == 1) res.push_back(3);\n    else if (n % 2 == 0) res.push_back(1\
    \ + n / 2);\n    else res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n \
    \   return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa14yzunu.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmpa14yzunu.cpp:23:35: error: no match for 'operator+' (operand types are\
    \ 'std::vector<long int>' and 'std::vector<long int>')\n     else res.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                   ^\n/tmp/tmpa14yzunu.cpp:23:35:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpa14yzunu.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpa14yzunu.cpp:23:46: note:   'std::vector<long\
    \ int>' is not derived from 'const std::valarray<_Tp>'\n     else res.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                         \
    \     ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpa14yzunu.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_ValArray,\
    \ std::_Constant, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const std::valarray<_Tp>&, const _Tp&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpa14yzunu.cpp:23:46: note:   'std::vector<long\
    \ int>' is not derived from 'const std::valarray<_Tp>'\n     else res.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n                                         \
    \     ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpa14yzunu.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_Bin"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    if (n == 1)\n        result.push_back(1);\n    else if (n == 2)\n\
    \        result.push_back(3);\n    else\n    {\n        long a = tri(n - 1);\n\
    \        long b = tri(n - 2);\n        long c = tri(n + 1);\n        result.push_back(a);\n\
    \        result.push_back(b);\n        result.push_back(c);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyre27f3d.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmpyre27f3d.cpp:27:27: error: cannot convert 'std::vector<long int>' to 'long\
    \ int' in initialization\n         long a = tri(n - 1);\n                    \
    \       ^\n/tmp/tmpyre27f3d.cpp:28:27: error: cannot convert 'std::vector<long\
    \ int>' to 'long int' in initialization\n         long b = tri(n - 2);\n     \
    \                      ^\n/tmp/tmpyre27f3d.cpp:29:27: error: cannot convert 'std::vector<long\
    \ int>' to 'long int' in initialization\n         long c = tri(n + 1);\n     \
    \                      ^\n/tmp/tmpyre27f3d.cpp: In function 'int main()':\n/tmp/tmpyre27f3d.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpyre27f3d.cpp:2:\n/tmp/tmpyre27f3d.cpp:38:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmpyre27f3d.cpp:38:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmpyre27f3d.cpp:38:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmpyre27f3d.cpp:38:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyre27f3d.cpp:38:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmpyre27f3d.cpp:38:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    long a = 1;\n    long b = 2;\n    long c = 3;\n    long d = a +\
    \ b + c;\n    long temp;\n    if (n % 2 == 0) {\n        temp = a;\n        a\
    \ = b;\n        b = temp + c;\n        c = d;\n    }\n    long temp2 = a + b;\n\
    \    long temp3 = c + d;\n    result.push_back(temp2);\n    result.push_back(temp3);\n\
    \    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphxj5xifh.cpp: In function 'int main()':\n/tmp/tmphxj5xifh.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = tri;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmphxj5xifh.cpp:2:\n/tmp/tmphxj5xifh.cpp:40:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmphxj5xifh.cpp:40:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmphxj5xifh.cpp:40:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmphxj5xifh.cpp:40:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphxj5xifh.cpp:40:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmphxj5xifh.cpp:40:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmphxj5xifh.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    long a = 1;\n    long b = 2;\n    long c = a + b;\n    long d =\
    \ c + b;\n    long e = c + d;\n    long f = e + d;\n    long g = f + e;\n    long\
    \ h = g + f;\n    long i = h + g;\n    long j = i + h;\n    long k = j + i;\n\
    \    long l = k + j;\n    long m = l + k;\n    long n = m + l;\n    long o = n\
    \ + m;\n    long p = o + n;\n    long q = p + o;\n    long r = q + p;\n    long\
    \ s = r + q;\n    long t = s + r;\n    long u = t + s;\n    long v = u + t;\n\
    \    long w = v + u;\n    long x = w + v;\n    long y = x + w;\n    long z = y\
    \ + x;\n    long a = z + y;\n    result.push_back(a);\n    long b = a + a;\n \
    \   result.push_back(b);\n    long c = b + b;\n    result.push_back(c);\n    long\
    \ d = c + c;\n    result.push_back(d);\n    long e = d + d;\n    result.push_back(e);\n\
    \    long f = e + e;\n    result.push_back(f);\n    long g = f + f;\n    result.push_back(g);\n\
    \    long h = g + g;\n    result.push_back(h);\n    long i = h + h;\n    result.push_back(i);\n\
    \    long j = i + i;\n    result.push_back(j);\n    long k = j + j;\n    result.push_back(k);\n\
    \    long l = k + k;\n    result.push_back(l);\n    long m = l + l;\n    result.push_back(m);\n\
    \    long n = m + m;\n    result.push_back(n);\n    long o = n + n;\n    result.push_back(o);\n\
    \    long p = o + o;\n    result.push_back(p);\n    long q = p + p;\n    result.push_back(q);\n\
    \    long r = q + q;\n    result.push_back(r);\n    long s = r + r;\n    result.push_back(s);\n\
    \    long t = s + s;\n    result.push_back(t);\n    long u = t + t;\n    result.push_back(u);\n\
    \    long v = u + u;\n    result.push_back(v);\n    long w = v + v;\n    result.push_back(w);\n\
    \    long x = w + w;\n    result.push_back(x);\n    long y = x + x;\n    result.push_back(y);\n\
    \    long z = y + y;\n    result.push_back(z);\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1lsvm6a5.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmp1lsvm6a5.cpp:34:10: error: declaration of 'long int n' shadows a parameter\n\
    \     long n = m + l;\n          ^\n/tmp/tmp1lsvm6a5.cpp:47:10: error: redeclaration\
    \ of 'long int a'\n     long a = z + y;\n          ^\n/tmp/tmp1lsvm6a5.cpp:21:10:\
    \ error: 'long int a' previously declared here\n     long a = 1;\n          ^\n\
    /tmp/tmp1lsvm6a5.cpp:49:10: error: redeclaration of 'long int b'\n     long b\
    \ = a + a;\n          ^\n/tmp/tmp1lsvm6a5.cpp:22:10: error: 'long int b' previously\
    \ declared here\n     long b = 2;\n          ^\n/tmp/tmp1lsvm6a5.cpp:51:10: error:\
    \ redeclaration of 'long int c'\n     long c = b + b;\n          ^\n/tmp/tmp1lsvm6a5.cpp:23:10:\
    \ error: 'long int c' previously declared here\n     long c = a + b;\n       \
    \   ^\n/tmp/tmp1lsvm6a5.cpp:53:10: error: redeclaration of 'long int d'\n    \
    \ long d = c + c;\n          ^\n/tmp/tmp1lsvm6a5.cpp:24:10: error: 'long int d'\
    \ previously declared here\n     long d = c + b;\n          ^\n/tmp/tmp1lsvm6a5.cpp:55:10:\
    \ error: redeclaration of 'long int e'\n     long e = d + d;\n          ^\n/tmp/tmp1lsvm6a5.cpp:25:10:\
    \ error: 'long int e' previously declared here\n     long e = c + d;\n       \
    \   ^\n/tmp/tmp1lsvm6a5.cpp:57:10: error: redeclaration of 'long int f'\n    \
    \ long f = e + e;\n          ^\n/tmp/tmp1lsvm6a5.cpp:26:10: error: 'long int f'\
    \ previously declared here\n     long f = e + d;\n          ^\n/tmp/tmp1lsvm6a5.cpp:59:10:\
    \ error: redeclaration of 'long int g'\n     long g = f + f;\n          ^\n/tmp/tmp1lsvm6a5.cpp:27:10:\
    \ error: 'long int g' previously declared here\n     long g = f + e;\n       \
    \   ^\n/tmp/tmp1lsvm6a5.cpp:61:10: error: redeclaration of 'long int h'\n    \
    \ long h = g + g;\n          ^\n/tmp/tmp1lsvm6a5.cpp:28:10: error: 'long int h'\
    \ previously declared here\n     long h = g + f;\n          ^\n/tmp/tmp1lsvm6a5.cpp:63:10:\
    \ error: redeclaration of 'long int i'\n     long i = h + h;\n          ^\n/tmp/tmp1lsvm6a5.cpp:29:10:\
    \ error: 'long int i' previously declared here\n     long i = h + g;\n       \
    \   ^\n/tmp/tmp1lsvm6a5.cpp:65:10: err"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ result;\n    if (n <= 1) {\n        result.push_back(n);\n        return result;\n\
    \    }\n    long tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1);\n    long tri_2\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1);\n    result.push_back(tri_1);\n    result.push_back(tri_2);\n\
    \    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6irque6_.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmp6irque6_.cpp:25:29: error: no match for 'operator+' (operand types are\
    \ 'std::vector<long int>' and 'std::vector<long int>')\n     long tri_1 = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1);\n                             ^\n/tmp/tmp6irque6_.cpp:25:29:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmp6irque6_.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp6irque6_.cpp:25:40: note:   'std::vector<long\
    \ int>' is not derived from 'const std::valarray<_Tp>'\n     long tri_1 = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1);\n                                        ^\n\
    In file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmp6irque6_.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_ValArray,\
    \ std::_Constant, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const std::valarray<_Tp>&, const _Tp&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp6irque6_.cpp:25:40: note:   'std::vector<long\
    \ int>' is not derived from 'const std::valarray<_Tp>'\n     long tri_1 = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1);\n                                        ^\n\
    In file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmp6irque6_.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_ValArray,\
    \ std::"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n    std::vector<long>\
    \ res;\n    long a = 0, b = 1, c = 1;\n    long temp;\n    long n = n;\n    long\
    \ i = 0;\n    while(n != 0) {\n        temp = a + b + c;\n        res.push_back(temp);\n\
    \        a = b;\n        b = c;\n        c = temp;\n        i++;\n        n--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp93cj7q7b.cpp: In function 'std::vector<long int> tri(long int)':\n\
    /tmp/tmp93cj7q7b.cpp:23:10: error: declaration of 'long int n' shadows a parameter\n\
    \     long n = n;\n          ^\n/tmp/tmp93cj7q7b.cpp: In function 'int main()':\n\
    /tmp/tmp93cj7q7b.cpp:37:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = tri;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp93cj7q7b.cpp:2:\n/tmp/tmp93cj7q7b.cpp:38:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                         ^\n/tmp/tmp93cj7q7b.cpp:38:48:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n                                           \
    \     ^\n/tmp/tmp93cj7q7b.cpp:38:85: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n           \
    \                                                                          ^\n\
    /tmp/tmp93cj7q7b.cpp:38:85: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp93cj7q7b.cpp:38:85:\
    \ error: no matching function for call to 'std::vector<long int>::vector(<brace-enclosed\
    \ initializer list>)'\n/tmp/tmp93cj7q7b.cpp:38:85: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp93cj7q7b.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vec"
  stdout: ''
