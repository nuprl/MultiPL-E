language: cpp
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings.\n// The vector contains different words. Return\
    \ the word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n//\
    \ >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string\
    \ find_max(std::vector<std::string> words) {\n    // Your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto word : words) {\n        int count\
    \ = 0;\n        for (auto c : word) {\n            count += 1;\n        }\n  \
    \      if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
    footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"})))\
    \ == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
    nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) ==\
    \ (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw1a6a84s.cpp: In function 'std::string find_max(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpw1a6a84s.cpp:17:15: error: 'word' does not name a type\n     for\
    \ (auto word : words) {\n               ^\n/tmp/tmpw1a6a84s.cpp:27:5: error: expected\
    \ ';' before 'return'\n     return max;\n     ^\n/tmp/tmpw1a6a84s.cpp:27:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpw1a6a84s.cpp:27:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpw1a6a84s.cpp:27:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpw1a6a84s.cpp:27:5: error: expected ')' before 'return'\n\
    /tmp/tmpw1a6a84s.cpp: In function 'int main()':\n/tmp/tmpw1a6a84s.cpp:30:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = find_max;\n        \
    \  ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n           \
    \      from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n   \
    \              from /tmp/tmpw1a6a84s.cpp:2:\n/tmp/tmpw1a6a84s.cpp:31:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                              ^\n/tmp/tmpw1a6a84s.cpp:31:111:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                                                            \
    \                                  ^\n/tmp/tmpw1a6a84s.cpp:31:111: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpw1a6a84s.cpp:31:111: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpw1a6a84s.cpp:31:111: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings.\n// The vector contains different words. Return\
    \ the word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n//\
    \ >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string\
    \ find_max(std::vector<std::string> words) {\n    // Write your code here\n  \
    \  std::string max;\n    int maxCount = 0;\n    int maxCountIndex = 0;\n    for(int\
    \ i = 0; i < words.size(); i++){\n        int count = 0;\n        for(int j =\
    \ 0; j < words[i].size(); j++){\n            if(words[i][j] == max){\n       \
    \         count++;\n            }\n        }\n        if(count > maxCount){\n\
    \            maxCount = count;\n            maxCountIndex = i;\n            max\
    \ = words[i][j];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
    footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"})))\
    \ == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
    nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) ==\
    \ (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc2sc82cv.cpp: In function 'std::string find_max(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpc2sc82cv.cpp:21:28: error: no match for 'operator==' (operand\
    \ types are 'char' and 'std::string {aka std::basic_string<char>}')\n        \
    \     if(words[i][j] == max){\n                            ^\n/tmp/tmpc2sc82cv.cpp:21:28:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpc2sc82cv.cpp:2:\n/usr/include/c++/4.8.2/valarray:1179:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__equal_to, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__equal_to, _Tp>::result_type>\
    \ std::operator==(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(==,\
    \ __equal_to)\n ^\n/usr/include/c++/4.8.2/valarray:1179:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpc2sc82cv.cpp:21:31: note:   'std::string\
    \ {aka std::basic_string<char>}' is not derived from 'const std::valarray<_Tp>'\n\
    \             if(words[i][j] == max){\n                               ^\nIn file\
    \ included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpc2sc82cv.cpp:2:\n/usr/include/c++/4.8.2/valarray:1179:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__equal_to, std::_ValArray,\
    \ std::_Constant, _Tp, _Tp>, typename std::__fun<std::__equal_to, _Tp>::result_type>\
    \ std::operator==(const std::valarray<_Tp>&, const _Tp&)\n _DEFINE_BINARY_OPERATOR(==,\
    \ __equal_to)\n ^\n/usr/include/c++/4.8.2/valarray:1179:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpc2sc82cv.cpp:21:31: note:   mismatched\
    \ types 'const std::valarray<_Tp>' and 'char'\n             if(words[i][j] ==\
    \ max){\n                               ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpc2sc82cv.cpp:2:\n/usr/include/c++/4.8.2/valarray:1179:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__equal_to, std::_ValArray,\
    \ std::_ValArray, _"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings.\n// The vector contains different words. Return\
    \ the word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n//\
    \ >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string\
    \ find_max(std::vector<std::string> words) {\n    int max = 0;\n    std::string\
    \ maxWord = \"\";\n    for (auto &word : words) {\n        int count = 0;\n  \
    \      for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > max) {\n            max = count;\n            maxWord = word;\n   \
    \     }\n    }\n    return maxWord;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    of\", (std::string)\"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"enam\", (std::string)\"game\"}))) == (\"enam\"));\n   \
    \ assert(candidate((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"\
    bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
    footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"})))\
    \ == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
    nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) ==\
    \ (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7tljsngg.cpp: In function 'std::string find_max(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp7tljsngg.cpp:16:16: error: ISO C++ forbids declaration of 'word'\
    \ with no type [-fpermissive]\n     for (auto &word : words) {\n             \
    \   ^\n/tmp/tmp7tljsngg.cpp:16:23: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &word : words) {\n                       ^\n/tmp/tmp7tljsngg.cpp:18:20:\
    \ error: ISO C++ forbids declaration of 'c' with no type [-fpermissive]\n    \
    \     for (auto &c : word) {\n                    ^\n/tmp/tmp7tljsngg.cpp:18:24:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n         for (auto\
    \ &c : word) {\n                        ^\n/tmp/tmp7tljsngg.cpp: In function 'int\
    \ main()':\n/tmp/tmp7tljsngg.cpp:29:10: error: 'candidate' does not name a type\n\
    \     auto candidate = find_max;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7tljsngg.cpp:2:\n/tmp/tmp7tljsngg.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                              ^\n/tmp/tmp7tljsngg.cpp:30:111:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                                                            \
    \                                  ^\n/tmp/tmp7tljsngg.cpp:30:111: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp7tljsngg.cpp:30:111: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp7tljsngg.cpp:30:111: note"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings.\n// The vector contains different words. Return\
    \ the word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n//\
    \ >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string\
    \ find_max(std::vector<std::string> words) {\n    // Your code here\n    std::string\
    \ maxWord = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n   \
    \     int count = 0;\n        for (auto &c : word) {\n            count += 1;\n\
    \        }\n        if (count > maxCount) {\n            maxCount = count;\n \
    \           maxWord = word;\n        }\n    }\n    return maxWord;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
    footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"})))\
    \ == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
    nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) ==\
    \ (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpblae8eko.cpp: In function 'std::string find_max(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpblae8eko.cpp:17:16: error: ISO C++ forbids declaration of 'word'\
    \ with no type [-fpermissive]\n     for (auto &word : words) {\n             \
    \   ^\n/tmp/tmpblae8eko.cpp:17:23: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &word : words) {\n                       ^\n/tmp/tmpblae8eko.cpp:19:20:\
    \ error: ISO C++ forbids declaration of 'c' with no type [-fpermissive]\n    \
    \     for (auto &c : word) {\n                    ^\n/tmp/tmpblae8eko.cpp:19:24:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n         for (auto\
    \ &c : word) {\n                        ^\n/tmp/tmpblae8eko.cpp: In function 'int\
    \ main()':\n/tmp/tmpblae8eko.cpp:30:10: error: 'candidate' does not name a type\n\
    \     auto candidate = find_max;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpblae8eko.cpp:2:\n/tmp/tmpblae8eko.cpp:31:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                              ^\n/tmp/tmpblae8eko.cpp:31:111:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                                                            \
    \                                  ^\n/tmp/tmpblae8eko.cpp:31:111: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpblae8eko.cpp:31:111: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpblae8eko.cpp:31:111: note"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings.\n// The vector contains different words. Return\
    \ the word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n//\
    \ >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string\
    \ find_max(std::vector<std::string> words) {\n    // Your code here\n    std::string\
    \ max = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n       \
    \ auto count = std::count(word.begin(), word.end(), 'a');\n        if (count >\
    \ maxCount) {\n            max = word;\n            maxCount = count;\n      \
    \  }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    of\", (std::string)\"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"enam\", (std::string)\"game\"}))) == (\"enam\"));\n   \
    \ assert(candidate((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"\
    bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
    footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"})))\
    \ == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
    nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) ==\
    \ (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaiw_b9zt.cpp: In function 'std::string find_max(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpaiw_b9zt.cpp:17:16: error: ISO C++ forbids declaration of 'word'\
    \ with no type [-fpermissive]\n     for (auto &word : words) {\n             \
    \   ^\n/tmp/tmpaiw_b9zt.cpp:17:23: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &word : words) {\n                       ^\n/tmp/tmpaiw_b9zt.cpp:18:14:\
    \ error: 'count' does not name a type\n         auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n              ^\n/tmp/tmpaiw_b9zt.cpp:19:13: error: 'count'\
    \ was not declared in this scope\n         if (count > maxCount) {\n         \
    \    ^\n/tmp/tmpaiw_b9zt.cpp:19:13: note: suggested alternative:\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmpaiw_b9zt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:4622:5:\
    \ note:   'std::count'\n     count(_InputIterator __first, _InputIterator __last,\
    \ const _Tp& __value)\n     ^\n/tmp/tmpaiw_b9zt.cpp: In function 'int main()':\n\
    /tmp/tmpaiw_b9zt.cpp:27:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = find_max;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaiw_b9zt.cpp:2:\n/tmp/tmpaiw_b9zt.cpp:28:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                              ^\n/tmp/tmpaiw_b9zt.cpp:28:111:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                                              "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings.\n// The vector contains different words. Return\
    \ the word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n//\
    \ >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string\
    \ find_max(std::vector<std::string> words) {\n    int n = words.size();\n    std::string\
    \ max;\n    int maxCount = 0;\n    for (int i = 0; i < n; i++) {\n        int\
    \ count = 0;\n        for (int j = 0; j < n; j++) {\n            if (words[j]\
    \ == words[i]) {\n                count++;\n            }\n        }\n       \
    \ if (count > maxCount) {\n            max = words[i];\n            maxCount =\
    \ count;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
    footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"})))\
    \ == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
    nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) ==\
    \ (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_jwx21la.cpp: In function 'int main()':\n/tmp/tmp_jwx21la.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = find_max;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_jwx21la.cpp:2:\n/tmp/tmp_jwx21la.cpp:33:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                              ^\n/tmp/tmp_jwx21la.cpp:33:111:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                                                            \
    \                                  ^\n/tmp/tmp_jwx21la.cpp:33:111: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp_jwx21la.cpp:33:111: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp_jwx21la.cpp:33:111: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp_jwx21la.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings.\n// The vector contains different words. Return\
    \ the word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n//\
    \ >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string\
    \ find_max(std::vector<std::string> words) {\n    int max_count = 0;\n    std::string\
    \ max_word = \"\";\n    for (auto &word : words) {\n        int count = 0;\n \
    \       for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > max_count) {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
    footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"})))\
    \ == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
    nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) ==\
    \ (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcsglirzr.cpp: In function 'std::string find_max(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpcsglirzr.cpp:16:16: error: ISO C++ forbids declaration of 'word'\
    \ with no type [-fpermissive]\n     for (auto &word : words) {\n             \
    \   ^\n/tmp/tmpcsglirzr.cpp:16:23: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &word : words) {\n                       ^\n/tmp/tmpcsglirzr.cpp:18:20:\
    \ error: ISO C++ forbids declaration of 'c' with no type [-fpermissive]\n    \
    \     for (auto &c : word) {\n                    ^\n/tmp/tmpcsglirzr.cpp:18:24:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n         for (auto\
    \ &c : word) {\n                        ^\n/tmp/tmpcsglirzr.cpp: In function 'int\
    \ main()':\n/tmp/tmpcsglirzr.cpp:29:10: error: 'candidate' does not name a type\n\
    \     auto candidate = find_max;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcsglirzr.cpp:2:\n/tmp/tmpcsglirzr.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                              ^\n/tmp/tmpcsglirzr.cpp:30:111:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                                                            \
    \                                  ^\n/tmp/tmpcsglirzr.cpp:30:111: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpcsglirzr.cpp:30:111: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpcsglirzr.cpp:30:111: note"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings.\n// The vector contains different words. Return\
    \ the word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n//\
    \ >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string\
    \ find_max(std::vector<std::string> words) {\n    std::string max;\n    int max_count\
    \ = 0;\n    for (auto &w : words) {\n        auto count = std::count(w.begin(),\
    \ w.end(), 'a');\n        if (count > max_count) {\n            max_count = count;\n\
    \            max = w;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
    footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"})))\
    \ == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
    nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) ==\
    \ (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb7vi2v3v.cpp: In function 'std::string find_max(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpb7vi2v3v.cpp:16:16: error: ISO C++ forbids declaration of 'w'\
    \ with no type [-fpermissive]\n     for (auto &w : words) {\n                ^\n\
    /tmp/tmpb7vi2v3v.cpp:16:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (auto &w : words) {\n                    ^\n/tmp/tmpb7vi2v3v.cpp:17:14:\
    \ error: 'count' does not name a type\n         auto count = std::count(w.begin(),\
    \ w.end(), 'a');\n              ^\n/tmp/tmpb7vi2v3v.cpp:18:13: error: 'count'\
    \ was not declared in this scope\n         if (count > max_count) {\n        \
    \     ^\n/tmp/tmpb7vi2v3v.cpp:18:13: note: suggested alternative:\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmpb7vi2v3v.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:4622:5:\
    \ note:   'std::count'\n     count(_InputIterator __first, _InputIterator __last,\
    \ const _Tp& __value)\n     ^\n/tmp/tmpb7vi2v3v.cpp: In function 'int main()':\n\
    /tmp/tmpb7vi2v3v.cpp:26:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = find_max;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb7vi2v3v.cpp:2:\n/tmp/tmpb7vi2v3v.cpp:27:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                              ^\n/tmp/tmpb7vi2v3v.cpp:27:111:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                                                            \
    \   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings.\n// The vector contains different words. Return\
    \ the word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n//\
    \ >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string\
    \ find_max(std::vector<std::string> words) {\n    std::string max;\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += std::count(word.begin(), word.end(), c);\n\
    \        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max = word;\n        }\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
    footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"})))\
    \ == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
    nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) ==\
    \ (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpddiz06_h.cpp: In function 'std::string find_max(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpddiz06_h.cpp:16:16: error: ISO C++ forbids declaration of 'word'\
    \ with no type [-fpermissive]\n     for (auto &word : words) {\n             \
    \   ^\n/tmp/tmpddiz06_h.cpp:16:23: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &word : words) {\n                       ^\n/tmp/tmpddiz06_h.cpp:18:20:\
    \ error: ISO C++ forbids declaration of 'c' with no type [-fpermissive]\n    \
    \     for (auto &c : word) {\n                    ^\n/tmp/tmpddiz06_h.cpp:18:24:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n         for (auto\
    \ &c : word) {\n                        ^\n/tmp/tmpddiz06_h.cpp:19:38: error:\
    \ request for member 'begin' in 'word', which is of non-class type 'int'\n   \
    \          count += std::count(word.begin(), word.end(), c);\n               \
    \                       ^\n/tmp/tmpddiz06_h.cpp:19:52: error: request for member\
    \ 'end' in 'word', which is of non-class type 'int'\n             count += std::count(word.begin(),\
    \ word.end(), c);\n                                                    ^\n/tmp/tmpddiz06_h.cpp:\
    \ In function 'int main()':\n/tmp/tmpddiz06_h.cpp:29:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = find_max;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpddiz06_h.cpp:2:\n/tmp/tmpddiz06_h.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                              ^\n/tmp/tmpddiz06_h.cpp:30:111:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings.\n// The vector contains different words. Return\
    \ the word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n//\
    \ >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string\
    \ find_max(std::vector<std::string> words) {\n    std::string max;\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max = word;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
    footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"})))\
    \ == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
    nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) ==\
    \ (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd_01k3ue.cpp: In function 'std::string find_max(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpd_01k3ue.cpp:16:16: error: ISO C++ forbids declaration of 'word'\
    \ with no type [-fpermissive]\n     for (auto &word : words) {\n             \
    \   ^\n/tmp/tmpd_01k3ue.cpp:16:23: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &word : words) {\n                       ^\n/tmp/tmpd_01k3ue.cpp:18:20:\
    \ error: ISO C++ forbids declaration of 'c' with no type [-fpermissive]\n    \
    \     for (auto &c : word) {\n                    ^\n/tmp/tmpd_01k3ue.cpp:18:24:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n         for (auto\
    \ &c : word) {\n                        ^\n/tmp/tmpd_01k3ue.cpp: In function 'int\
    \ main()':\n/tmp/tmpd_01k3ue.cpp:29:10: error: 'candidate' does not name a type\n\
    \     auto candidate = find_max;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpd_01k3ue.cpp:2:\n/tmp/tmpd_01k3ue.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                              ^\n/tmp/tmpd_01k3ue.cpp:30:111:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                                                            \
    \                                  ^\n/tmp/tmpd_01k3ue.cpp:30:111: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpd_01k3ue.cpp:30:111: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpd_01k3ue.cpp:30:111: note"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings.\n// The vector contains different words. Return\
    \ the word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n//\
    \ >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string\
    \ find_max(std::vector<std::string> words) {\n    int max = 0;\n    std::string\
    \ maxWord = \"\";\n    for (auto word : words) {\n        int count = 0;\n   \
    \     for (auto c : word) {\n            count += (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u');\n        }\n        if (count > max) {\n     \
    \       max = count;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
    footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"})))\
    \ == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
    nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) ==\
    \ (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpore7d7jf.cpp: In function 'std::string find_max(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpore7d7jf.cpp:16:15: error: 'word' does not name a type\n     for\
    \ (auto word : words) {\n               ^\n/tmp/tmpore7d7jf.cpp:26:5: error: expected\
    \ ';' before 'return'\n     return maxWord;\n     ^\n/tmp/tmpore7d7jf.cpp:26:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpore7d7jf.cpp:26:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpore7d7jf.cpp:26:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpore7d7jf.cpp:26:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpore7d7jf.cpp: In function 'int main()':\n/tmp/tmpore7d7jf.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = find_max;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpore7d7jf.cpp:2:\n/tmp/tmpore7d7jf.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                              ^\n/tmp/tmpore7d7jf.cpp:30:111:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                                                            \
    \                                  ^\n/tmp/tmpore7d7jf.cpp:30:111: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpore7d7jf.cpp:30:111: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpore7d7jf.cpp:30:111: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings.\n// The vector contains different words. Return\
    \ the word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n//\
    \ >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string\
    \ find_max(std::vector<std::string> words) {\n    std::string max = \"\";\n  \
    \  int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    of\", (std::string)\"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"enam\", (std::string)\"game\"}))) == (\"enam\"));\n   \
    \ assert(candidate((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"\
    bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
    footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"})))\
    \ == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
    nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) ==\
    \ (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmpl9l6gi.cpp: In function 'std::string find_max(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpmpl9l6gi.cpp:16:16: error: ISO C++ forbids declaration of 'word'\
    \ with no type [-fpermissive]\n     for (auto &word : words) {\n             \
    \   ^\n/tmp/tmpmpl9l6gi.cpp:16:23: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &word : words) {\n                       ^\n/tmp/tmpmpl9l6gi.cpp:18:20:\
    \ error: ISO C++ forbids declaration of 'c' with no type [-fpermissive]\n    \
    \     for (auto &c : word) {\n                    ^\n/tmp/tmpmpl9l6gi.cpp:18:24:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n         for (auto\
    \ &c : word) {\n                        ^\n/tmp/tmpmpl9l6gi.cpp: In function 'int\
    \ main()':\n/tmp/tmpmpl9l6gi.cpp:29:10: error: 'candidate' does not name a type\n\
    \     auto candidate = find_max;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmpl9l6gi.cpp:2:\n/tmp/tmpmpl9l6gi.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                              ^\n/tmp/tmpmpl9l6gi.cpp:30:111:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                                                            \
    \                                  ^\n/tmp/tmpmpl9l6gi.cpp:30:111: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpmpl9l6gi.cpp:30:111: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpmpl9l6gi.cpp:30:111: note"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings.\n// The vector contains different words. Return\
    \ the word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n//\
    \ >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string\
    \ find_max(std::vector<std::string> words) {\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto\
    \ c : word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u');\n        }\n        if (count > maxCount) {\n            max\
    \ = word;\n            maxCount = count;\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
    footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"})))\
    \ == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
    nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) ==\
    \ (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5qkvqyx2.cpp: In function 'std::string find_max(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp5qkvqyx2.cpp:16:15: error: 'word' does not name a type\n     for\
    \ (auto word : words) {\n               ^\n/tmp/tmp5qkvqyx2.cpp:26:5: error: expected\
    \ ';' before 'return'\n     return max;\n     ^\n/tmp/tmp5qkvqyx2.cpp:26:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmp5qkvqyx2.cpp:26:5: error:\
    \ expected ';' before 'return'\n/tmp/tmp5qkvqyx2.cpp:26:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp5qkvqyx2.cpp:26:5: error: expected ')' before 'return'\n\
    /tmp/tmp5qkvqyx2.cpp: In function 'int main()':\n/tmp/tmp5qkvqyx2.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = find_max;\n        \
    \  ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n           \
    \      from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n   \
    \              from /tmp/tmp5qkvqyx2.cpp:2:\n/tmp/tmp5qkvqyx2.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                              ^\n/tmp/tmp5qkvqyx2.cpp:30:111:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                                                            \
    \                                  ^\n/tmp/tmp5qkvqyx2.cpp:30:111: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp5qkvqyx2.cpp:30:111: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp5qkvqyx2.cpp:30:111: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings.\n// The vector contains different words. Return\
    \ the word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n//\
    \ >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string\
    \ find_max(std::vector<std::string> words) {\n    // Your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto &word : words) {\n        auto count\
    \ = std::count(word.begin(), word.end(), 'a');\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
    footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"})))\
    \ == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
    nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) ==\
    \ (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpofryapt9.cpp: In function 'std::string find_max(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpofryapt9.cpp:17:16: error: ISO C++ forbids declaration of 'word'\
    \ with no type [-fpermissive]\n     for (auto &word : words) {\n             \
    \   ^\n/tmp/tmpofryapt9.cpp:17:23: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &word : words) {\n                       ^\n/tmp/tmpofryapt9.cpp:18:14:\
    \ error: 'count' does not name a type\n         auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n              ^\n/tmp/tmpofryapt9.cpp:19:13: error: 'count'\
    \ was not declared in this scope\n         if (count > maxCount) {\n         \
    \    ^\n/tmp/tmpofryapt9.cpp:19:13: note: suggested alternative:\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmpofryapt9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:4622:5:\
    \ note:   'std::count'\n     count(_InputIterator __first, _InputIterator __last,\
    \ const _Tp& __value)\n     ^\n/tmp/tmpofryapt9.cpp: In function 'int main()':\n\
    /tmp/tmpofryapt9.cpp:27:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = find_max;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpofryapt9.cpp:2:\n/tmp/tmpofryapt9.cpp:28:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                              ^\n/tmp/tmpofryapt9.cpp:28:111:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                                              "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings.\n// The vector contains different words. Return\
    \ the word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n//\
    \ >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string\
    \ find_max(std::vector<std::string> words) {\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto\
    \ c : word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u');\n        }\n        if (count > maxCount) {\n            max\
    \ = word;\n            maxCount = count;\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
    footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"})))\
    \ == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
    nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) ==\
    \ (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5qkvqyx2.cpp: In function 'std::string find_max(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp5qkvqyx2.cpp:16:15: error: 'word' does not name a type\n     for\
    \ (auto word : words) {\n               ^\n/tmp/tmp5qkvqyx2.cpp:26:5: error: expected\
    \ ';' before 'return'\n     return max;\n     ^\n/tmp/tmp5qkvqyx2.cpp:26:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmp5qkvqyx2.cpp:26:5: error:\
    \ expected ';' before 'return'\n/tmp/tmp5qkvqyx2.cpp:26:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp5qkvqyx2.cpp:26:5: error: expected ')' before 'return'\n\
    /tmp/tmp5qkvqyx2.cpp: In function 'int main()':\n/tmp/tmp5qkvqyx2.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = find_max;\n        \
    \  ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n           \
    \      from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n   \
    \              from /tmp/tmp5qkvqyx2.cpp:2:\n/tmp/tmp5qkvqyx2.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                              ^\n/tmp/tmp5qkvqyx2.cpp:30:111:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                                                            \
    \                                  ^\n/tmp/tmp5qkvqyx2.cpp:30:111: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp5qkvqyx2.cpp:30:111: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp5qkvqyx2.cpp:30:111: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings.\n// The vector contains different words. Return\
    \ the word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n//\
    \ >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string\
    \ find_max(std::vector<std::string> words) {\n    std::string max;\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max = word;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
    footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"})))\
    \ == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
    nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) ==\
    \ (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd_01k3ue.cpp: In function 'std::string find_max(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpd_01k3ue.cpp:16:16: error: ISO C++ forbids declaration of 'word'\
    \ with no type [-fpermissive]\n     for (auto &word : words) {\n             \
    \   ^\n/tmp/tmpd_01k3ue.cpp:16:23: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &word : words) {\n                       ^\n/tmp/tmpd_01k3ue.cpp:18:20:\
    \ error: ISO C++ forbids declaration of 'c' with no type [-fpermissive]\n    \
    \     for (auto &c : word) {\n                    ^\n/tmp/tmpd_01k3ue.cpp:18:24:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n         for (auto\
    \ &c : word) {\n                        ^\n/tmp/tmpd_01k3ue.cpp: In function 'int\
    \ main()':\n/tmp/tmpd_01k3ue.cpp:29:10: error: 'candidate' does not name a type\n\
    \     auto candidate = find_max;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpd_01k3ue.cpp:2:\n/tmp/tmpd_01k3ue.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                              ^\n/tmp/tmpd_01k3ue.cpp:30:111:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                                                            \
    \                                  ^\n/tmp/tmpd_01k3ue.cpp:30:111: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpd_01k3ue.cpp:30:111: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpd_01k3ue.cpp:30:111: note"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings.\n// The vector contains different words. Return\
    \ the word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n//\
    \ >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string\
    \ find_max(std::vector<std::string> words) {\n    // Your code here\n    std::string\
    \ maxWord = \"\";\n    int maxCount = 0;\n    for (auto word : words) {\n    \
    \    int count = 0;\n        for (auto c : word) {\n            count += 1;\n\
    \        }\n        if (count > maxCount) {\n            maxCount = count;\n \
    \           maxWord = word;\n        }\n    }\n    return maxWord;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
    footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"})))\
    \ == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
    nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) ==\
    \ (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyv8tleqi.cpp: In function 'std::string find_max(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpyv8tleqi.cpp:17:15: error: 'word' does not name a type\n     for\
    \ (auto word : words) {\n               ^\n/tmp/tmpyv8tleqi.cpp:27:5: error: expected\
    \ ';' before 'return'\n     return maxWord;\n     ^\n/tmp/tmpyv8tleqi.cpp:27:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpyv8tleqi.cpp:27:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpyv8tleqi.cpp:27:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpyv8tleqi.cpp:27:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpyv8tleqi.cpp: In function 'int main()':\n/tmp/tmpyv8tleqi.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = find_max;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyv8tleqi.cpp:2:\n/tmp/tmpyv8tleqi.cpp:31:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                              ^\n/tmp/tmpyv8tleqi.cpp:31:111:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                                                            \
    \                                  ^\n/tmp/tmpyv8tleqi.cpp:31:111: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpyv8tleqi.cpp:31:111: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpyv8tleqi.cpp:31:111: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings.\n// The vector contains different words. Return\
    \ the word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n//\
    \ >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string\
    \ find_max(std::vector<std::string> words) {\n    int max = 0;\n    int index\
    \ = 0;\n    for (auto &word : words) {\n        auto count = std::count_if(word.begin(),\
    \ word.end(), [&](char c) {\n            return std::tolower(c) == std::tolower(word[index]);\n\
    \        });\n        if (count > max) {\n            max = count;\n         \
    \   index = std::distance(word.begin(), std::find(word.begin(), word.end(), word[index]));\n\
    \        }\n    }\n    return words[index];\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
    footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"})))\
    \ == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
    nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) ==\
    \ (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpre1gfnt2.cpp: In function 'std::string find_max(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpre1gfnt2.cpp:16:16: error: ISO C++ forbids declaration of 'word'\
    \ with no type [-fpermissive]\n     for (auto &word : words) {\n             \
    \   ^\n/tmp/tmpre1gfnt2.cpp:16:23: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &word : words) {\n                       ^\n/tmp/tmpre1gfnt2.cpp:17:14:\
    \ error: 'count' does not name a type\n         auto count = std::count_if(word.begin(),\
    \ word.end(), [&](char c) {\n              ^\n/tmp/tmpre1gfnt2.cpp:19:10: error:\
    \ expected primary-expression before ')' token\n         });\n          ^\n/tmp/tmpre1gfnt2.cpp:19:10:\
    \ error: expected ';' before ')' token\n/tmp/tmpre1gfnt2.cpp:20:13: error: 'count'\
    \ was not declared in this scope\n         if (count > max) {\n             ^\n\
    /tmp/tmpre1gfnt2.cpp:20:13: note: suggested alternative:\nIn file included from\
    \ /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmpre1gfnt2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:4622:5:\
    \ note:   'std::count'\n     count(_InputIterator __first, _InputIterator __last,\
    \ const _Tp& __value)\n     ^\n/tmp/tmpre1gfnt2.cpp:22:40: error: request for\
    \ member 'begin' in 'word', which is of non-class type 'int'\n             index\
    \ = std::distance(word.begin(), std::find(word.begin(), word.end(), word[index]));\n\
    \                                        ^\n/tmp/tmpre1gfnt2.cpp:22:64: error:\
    \ request for member 'begin' in 'word', which is of non-class type 'int'\n   \
    \          index = std::distance(word.begin(), std::find(word.begin(), word.end(),\
    \ word[index]));\n                                                           \
    \     ^\n/tmp/tmpre1gfnt2.cpp:22:78: error: request for member 'end' in 'word',\
    \ which is of non-class type 'int'\n             index = std::distance(word.begin(),\
    \ std::find(word.begin(), word.end(), word[index]));\n                       \
    \                                                       ^\n/tmp/tm"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings.\n// The vector contains different words. Return\
    \ the word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n//\
    \ >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string\
    \ find_max(std::vector<std::string> words) {\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
    footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"})))\
    \ == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
    nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) ==\
    \ (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpebldf3rd.cpp: In function 'std::string find_max(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpebldf3rd.cpp:16:16: error: ISO C++ forbids declaration of 'word'\
    \ with no type [-fpermissive]\n     for (auto &word : words) {\n             \
    \   ^\n/tmp/tmpebldf3rd.cpp:16:23: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &word : words) {\n                       ^\n/tmp/tmpebldf3rd.cpp:18:20:\
    \ error: ISO C++ forbids declaration of 'c' with no type [-fpermissive]\n    \
    \     for (auto &c : word) {\n                    ^\n/tmp/tmpebldf3rd.cpp:18:24:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n         for (auto\
    \ &c : word) {\n                        ^\n/tmp/tmpebldf3rd.cpp: In function 'int\
    \ main()':\n/tmp/tmpebldf3rd.cpp:29:10: error: 'candidate' does not name a type\n\
    \     auto candidate = find_max;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpebldf3rd.cpp:2:\n/tmp/tmpebldf3rd.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                              ^\n/tmp/tmpebldf3rd.cpp:30:111:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                                                            \
    \                                  ^\n/tmp/tmpebldf3rd.cpp:30:111: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpebldf3rd.cpp:30:111: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpebldf3rd.cpp:30:111: note"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a vector of strings.\n// The vector contains different words. Return\
    \ the word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n//\
    \ >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string\
    \ find_max(std::vector<std::string> words) {\n    int max_count = 0;\n    std::string\
    \ max_word = \"\";\n    for (auto &word : words) {\n        int count = 0;\n \
    \       for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > max_count) {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
    enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
    footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"})))\
    \ == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
    nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) ==\
    \ (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcsglirzr.cpp: In function 'std::string find_max(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpcsglirzr.cpp:16:16: error: ISO C++ forbids declaration of 'word'\
    \ with no type [-fpermissive]\n     for (auto &word : words) {\n             \
    \   ^\n/tmp/tmpcsglirzr.cpp:16:23: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &word : words) {\n                       ^\n/tmp/tmpcsglirzr.cpp:18:20:\
    \ error: ISO C++ forbids declaration of 'c' with no type [-fpermissive]\n    \
    \     for (auto &c : word) {\n                    ^\n/tmp/tmpcsglirzr.cpp:18:24:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n         for (auto\
    \ &c : word) {\n                        ^\n/tmp/tmpcsglirzr.cpp: In function 'int\
    \ main()':\n/tmp/tmpcsglirzr.cpp:29:10: error: 'candidate' does not name a type\n\
    \     auto candidate = find_max;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcsglirzr.cpp:2:\n/tmp/tmpcsglirzr.cpp:30:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                              ^\n/tmp/tmpcsglirzr.cpp:30:111:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n \
    \                                                                            \
    \                                  ^\n/tmp/tmpcsglirzr.cpp:30:111: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpcsglirzr.cpp:30:111: error: no matching function for call\
    \ to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpcsglirzr.cpp:30:111: note"
  stdout: ''
