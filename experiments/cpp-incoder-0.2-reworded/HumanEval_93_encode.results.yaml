language: cpp
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     if (std::isalpha(c)) {\n            ans += std::toupper(c);\n        } else\
    \ {\n            ans += c;\n        }\n    }\n    for (auto &c : ans) {\n    \
    \    if (std::isalpha(c)) {\n            ans[ans.find(c)] = std::toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (std::isalpha(c)) {\n\
    \            ans[ans.find(c)] = std::tolower(c);\n        }\n    }\n    for (auto\
    \ &c : ans) {\n        if (std::isalpha(c)) {\n            ans[ans.find(c)] =\
    \ std::toupper(c);\n        }\n    }\n    for (auto &c : ans) {\n        if (std::isalpha(c))\
    \ {\n            ans[ans.find(c)] = std::tolower(c);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyfru55yc.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpyfru55yc.cpp:15:16: error: ISO C++ forbids declaration of 'c' with no\
    \ type [-fpermissive]\n     for (auto &c : message) {\n                ^\n/tmp/tmpyfru55yc.cpp:15:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &c : message) {\n                    ^\n/tmp/tmpyfru55yc.cpp:22:16: error: ISO\
    \ C++ forbids declaration of 'c' with no type [-fpermissive]\n     for (auto &c\
    \ : ans) {\n                ^\n/tmp/tmpyfru55yc.cpp:22:20: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (auto &c : ans) {\n    \
    \                ^\n/tmp/tmpyfru55yc.cpp:27:16: error: ISO C++ forbids declaration\
    \ of 'c' with no type [-fpermissive]\n     for (auto &c : ans) {\n           \
    \     ^\n/tmp/tmpyfru55yc.cpp:27:20: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &c : ans) {\n                    ^\n/tmp/tmpyfru55yc.cpp:32:16:\
    \ error: ISO C++ forbids declaration of 'c' with no type [-fpermissive]\n    \
    \ for (auto &c : ans) {\n                ^\n/tmp/tmpyfru55yc.cpp:32:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &c : ans)\
    \ {\n                    ^\n/tmp/tmpyfru55yc.cpp:37:16: error: ISO C++ forbids\
    \ declaration of 'c' with no type [-fpermissive]\n     for (auto &c : ans) {\n\
    \                ^\n/tmp/tmpyfru55yc.cpp:37:20: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (auto &c : ans) {\n                \
    \    ^\n/tmp/tmpyfru55yc.cpp: In function 'int main()':\n/tmp/tmpyfru55yc.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyfru55yc.cpp:2:\n/tmp/tmpyfru55yc.cpp:46:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (isalpha(c)) ? (toupper(c)) : (tolower(c));\n    }\n    for (auto\
    \ &c : ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            ans[ans.find(c) + 2] = toupper(ans[ans.find(c) + 2]);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) - 2] = tolower(ans[ans.find(c)\
    \ - 2]);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcr2a6qu0.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpcr2a6qu0.cpp:15:16: error: ISO C++ forbids declaration of 'c' with no\
    \ type [-fpermissive]\n     for (auto &c : message) {\n                ^\n/tmp/tmpcr2a6qu0.cpp:15:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &c : message) {\n                    ^\n/tmp/tmpcr2a6qu0.cpp:18:16: error: ISO\
    \ C++ forbids declaration of 'c' with no type [-fpermissive]\n     for (auto &c\
    \ : ans) {\n                ^\n/tmp/tmpcr2a6qu0.cpp:18:20: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (auto &c : ans) {\n    \
    \                ^\n/tmp/tmpcr2a6qu0.cpp:23:16: error: ISO C++ forbids declaration\
    \ of 'c' with no type [-fpermissive]\n     for (auto &c : ans) {\n           \
    \     ^\n/tmp/tmpcr2a6qu0.cpp:23:20: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &c : ans) {\n                    ^\n/tmp/tmpcr2a6qu0.cpp:\
    \ In function 'int main()':\n/tmp/tmpcr2a6qu0.cpp:31:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = encode;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcr2a6qu0.cpp:2:\n/tmp/tmpcr2a6qu0.cpp:32:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     switch (c) {\n            case 'a':\n            case 'e':\n           \
    \ case 'i':\n            case 'o':\n            case 'u':\n                ans\
    \ += 'A';\n                break;\n            case 'b':\n            case 'f':\n\
    \            case 'n':\n            case 'r':\n            case 't':\n       \
    \         ans += 'B';\n                break;\n            case 'c':\n       \
    \     case 'd':\n            case 'g':\n            case 'h':\n            case\
    \ 'j':\n                ans += 'C';\n                break;\n            case\
    \ 'e':\n            case 'f':\n            case 'g':\n            case 'h':\n\
    \            case 'k':\n                ans += 'D';\n                break;\n\
    \            case 'f':\n            case 'g':\n            case 'h':\n       \
    \     case 'j':\n                ans += 'E';\n                break;\n       \
    \     case 'g':\n            case 'h':\n            case 'j':\n              \
    \  ans += 'F';\n                break;\n            case 'h':\n            case\
    \ 'j':\n                ans += 'G';\n                break;\n            case\
    \ 'i':\n            case 'j':\n                ans += 'H';\n                break;\n\
    \            case 'k':\n                ans += 'I';\n                break;\n\
    \            case 'l':\n                ans += 'J';\n                break;\n\
    \            case 'm':\n                ans += 'K';\n                break;\n\
    \            case 'n':\n                ans += 'L';\n                break;\n\
    \            case 'o':\n                ans += 'M';\n                break;\n\
    \            case 'p':\n                ans += 'N';\n                break;\n\
    \            case 'q':\n                ans += 'O';\n                break;\n\
    \            case 'r':\n                ans += 'P';\n                break;\n\
    \            case 's':\n                ans += 'Q';\n                break;\n\
    \            case 't':\n                ans += 'R';\n                break;\n\
    \            case 'u':\n                ans += 'S';\n                break;\n\
    \            case 'v':\n                ans += 'T';\n                break;\n\
    \            case 'w':\n                ans += 'U';\n                break;\n\
    \            case 'x':\n                ans += 'V';\n                break;\n\
    \            case 'y':\n                ans += 'W';\n                break;\n\
    \            case 'z':\n                ans += 'X';\n                break;\n\
    \            default:\n                ans += c;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmjj6pu1a.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpmjj6pu1a.cpp:15:16: error: ISO C++ forbids declaration of 'c' with no\
    \ type [-fpermissive]\n     for (auto &c : message) {\n                ^\n/tmp/tmpmjj6pu1a.cpp:15:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &c : message) {\n                    ^\n/tmp/tmpmjj6pu1a.cpp:38:13: error: duplicate\
    \ case value\n             case 'e':\n             ^\n/tmp/tmpmjj6pu1a.cpp:18:13:\
    \ error: previously used here\n             case 'e':\n             ^\n/tmp/tmpmjj6pu1a.cpp:39:13:\
    \ error: duplicate case value\n             case 'f':\n             ^\n/tmp/tmpmjj6pu1a.cpp:25:13:\
    \ error: previously used here\n             case 'f':\n             ^\n/tmp/tmpmjj6pu1a.cpp:40:13:\
    \ error: duplicate case value\n             case 'g':\n             ^\n/tmp/tmpmjj6pu1a.cpp:33:13:\
    \ error: previously used here\n             case 'g':\n             ^\n/tmp/tmpmjj6pu1a.cpp:41:13:\
    \ error: duplicate case value\n             case 'h':\n             ^\n/tmp/tmpmjj6pu1a.cpp:34:13:\
    \ error: previously used here\n             case 'h':\n             ^\n/tmp/tmpmjj6pu1a.cpp:45:13:\
    \ error: duplicate case value\n             case 'f':\n             ^\n/tmp/tmpmjj6pu1a.cpp:25:13:\
    \ error: previously used here\n             case 'f':\n             ^\n/tmp/tmpmjj6pu1a.cpp:46:13:\
    \ error: duplicate case value\n             case 'g':\n             ^\n/tmp/tmpmjj6pu1a.cpp:33:13:\
    \ error: previously used here\n             case 'g':\n             ^\n/tmp/tmpmjj6pu1a.cpp:47:13:\
    \ error: duplicate case value\n             case 'h':\n             ^\n/tmp/tmpmjj6pu1a.cpp:34:13:\
    \ error: previously used here\n             case 'h':\n             ^\n/tmp/tmpmjj6pu1a.cpp:48:13:\
    \ error: duplicate case value\n             case 'j':\n             ^\n/tmp/tmpmjj6pu1a.cpp:35:13:\
    \ error: previously used here\n             case 'j':\n             ^\n/tmp/tmpmjj6pu1a.cpp:51:13:\
    \ error: duplicate case value\n             case 'g':\n             ^\n/tmp/tmpmjj6pu1a.cpp:33:13:\
    \ error: previously used here\n             case 'g':\n             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n      \
    \      ans += c;\n        } else {\n            ans += tolower(c);\n        }\n\
    \    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 2] = toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) - 2] = tolower(c);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdxpoglac.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpdxpoglac.cpp:15:16: error: ISO C++ forbids declaration of 'c' with no\
    \ type [-fpermissive]\n     for (auto &c : message) {\n                ^\n/tmp/tmpdxpoglac.cpp:15:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &c : message) {\n                    ^\n/tmp/tmpdxpoglac.cpp:22:16: error: ISO\
    \ C++ forbids declaration of 'c' with no type [-fpermissive]\n     for (auto &c\
    \ : ans) {\n                ^\n/tmp/tmpdxpoglac.cpp:22:20: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (auto &c : ans) {\n    \
    \                ^\n/tmp/tmpdxpoglac.cpp:27:16: error: ISO C++ forbids declaration\
    \ of 'c' with no type [-fpermissive]\n     for (auto &c : ans) {\n           \
    \     ^\n/tmp/tmpdxpoglac.cpp:27:20: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &c : ans) {\n                    ^\n/tmp/tmpdxpoglac.cpp:\
    \ In function 'int main()':\n/tmp/tmpdxpoglac.cpp:35:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = encode;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdxpoglac.cpp:2:\n/tmp/tmpdxpoglac.cpp:36:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        } else {\n\
    \            ans += std::toupper(c);\n        }\n    }\n    for (int i = 0; i\
    \ < ans.length(); i++) {\n        char c = ans[i];\n        if (c == 'A' || c\
    \ == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[i] = 'a';\n \
    \       } else {\n            ans[i] = std::tolower(c);\n        }\n    }\n  \
    \  for (int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n      \
    \  if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n         \
    \   ans[i] = 'A';\n        } else {\n            ans[i] = std::toupper(c);\n \
    \       }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char c\
    \ = ans[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U') {\n            ans[i] = 'a';\n        } else {\n            ans[i] = std::tolower(c);\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            ans[i] = 'A';\n        } else {\n            ans[i] = std::toupper(c);\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U') {\n            ans[i] = 'a';\n        } else {\n            ans[i] = std::tolower(c);\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            ans[i] = 'A';\n        } else {\n            ans[i] = std::toupper(c);\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U') {\n            ans[i] = 'a';\n        } else {\n            ans[i] = std::tolower(c);\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            ans[i] = 'A';\n        } else {\n            ans[i] = std::toupper(c);\n\
    \        }\n    }\n    for (int i = 0; i < ans.length\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz35w_qoy.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpz35w_qoy.cpp:87:29: error: invalid use of member function (did you forget\
    \ the '()' ?)\n     for (int i = 0; i < ans.length\n                         \
    \    ^\n/tmp/tmpz35w_qoy.cpp:88:1: error: expected ';' before '}' token\n }\n\
    \ ^\n/tmp/tmpz35w_qoy.cpp:88:1: error: expected primary-expression before '}'\
    \ token\n/tmp/tmpz35w_qoy.cpp:88:1: error: expected ')' before '}' token\n/tmp/tmpz35w_qoy.cpp:88:1:\
    \ error: expected primary-expression before '}' token\n/tmp/tmpz35w_qoy.cpp:88:1:\
    \ error: expected ';' before '}' token\n/tmp/tmpz35w_qoy.cpp: In function 'int\
    \ main()':\n/tmp/tmpz35w_qoy.cpp:90:10: error: 'candidate' does not name a type\n\
    \     auto candidate = encode;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz35w_qoy.cpp:2:\n/tmp/tmpz35w_qoy.cpp:91:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (char c : message) {\n\
    \        if ('A' <= c && c <= 'Z') {\n            encoded += c;\n        } else\
    \ if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n          \
    \  encoded += c + 2;\n        } else {\n            encoded += c;\n        }\n\
    \    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n \
    \   assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpatjn4l24.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpatjn4l24.cpp:15:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : message) {\n                   ^\n/tmp/tmpatjn4l24.cpp:\
    \ In function 'int main()':\n/tmp/tmpatjn4l24.cpp:27:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = encode;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpatjn4l24.cpp:2:\n/tmp/tmpatjn4l24.cpp:28:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (std::toupper(c) - 'A' + 2) % 26 + 'A';\n    }\n    for (auto &c\
    \ : ans) {\n        ans[ans.find(c) - 2] = ans[ans.find(c) - 2].tolower() + \n\
    \            ans[ans.find(c) - 2].toupper();\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu817efrw.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpu817efrw.cpp:15:16: error: ISO C++ forbids declaration of 'c' with no\
    \ type [-fpermissive]\n     for (auto &c : message) {\n                ^\n/tmp/tmpu817efrw.cpp:15:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &c : message) {\n                    ^\n/tmp/tmpu817efrw.cpp:18:16: error: ISO\
    \ C++ forbids declaration of 'c' with no type [-fpermissive]\n     for (auto &c\
    \ : ans) {\n                ^\n/tmp/tmpu817efrw.cpp:18:20: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (auto &c : ans) {\n    \
    \                ^\n/tmp/tmpu817efrw.cpp:19:53: error: request for member 'tolower'\
    \ in 'ans.std::basic_string<_CharT, _Traits, _Alloc>::operator[]<char, std::char_traits<char>,\
    \ std::allocator<char> >((ans.std::basic_string<_CharT, _Traits, _Alloc>::find<char,\
    \ std::char_traits<char>, std::allocator<char> >(((int)((char)c)), 0ul) + 18446744073709551614ul))',\
    \ which is of non-class type 'char'\n         ans[ans.find(c) - 2] = ans[ans.find(c)\
    \ - 2].tolower() + \n                                                     ^\n\
    /tmp/tmpu817efrw.cpp:20:34: error: request for member 'toupper' in 'ans.std::basic_string<_CharT,\
    \ _Traits, _Alloc>::operator[]<char, std::char_traits<char>, std::allocator<char>\
    \ >((ans.std::basic_string<_CharT, _Traits, _Alloc>::find<char, std::char_traits<char>,\
    \ std::allocator<char> >(((int)((char)c)), 0ul) + 18446744073709551614ul))', which\
    \ is of non-class type 'char'\n             ans[ans.find(c) - 2].toupper();\n\
    \                                  ^\n/tmp/tmpu817efrw.cpp: In function 'int main()':\n\
    /tmp/tmpu817efrw.cpp:25:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = encode;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu817efrw.cpp:2:\n/tmp/tmpu817efrw.cpp:26:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\""
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (std::tolower(c) == c) ? std::toupper(c) : c;\n    }\n    for (auto\
    \ &c : ans) {\n        std::map<char, char> vowels;\n        vowels['a'] = 'A';\n\
    \        vowels['e'] = 'E';\n        vowels['i'] = 'I';\n        vowels['o'] =\
    \ 'O';\n        vowels['u'] = 'U';\n        vowels['y'] = 'Y';\n        vowels['A']\
    \ = 'a';\n        vowels['E'] = 'e';\n        vowels['I'] = 'i';\n        vowels['O']\
    \ = 'o';\n        vowels['U'] = 'u';\n        vowels['Y'] = 'y';\n        vowels['a']\
    \ = 'A';\n        vowels['e'] = 'E';\n        vowels['i'] = 'I';\n        vowels['o']\
    \ = 'O';\n        vowels['u'] = 'U';\n        vowels['y'] = 'Y';\n        std::map<char,\
    \ char> vowels2;\n        vowels2['A'] = 'a';\n        vowels2['E'] = 'e';\n \
    \       vowels2['I'] = 'i';\n        vowels2['O'] = 'o';\n        vowels2['U']\
    \ = 'u';\n        vowels2['Y'] = 'y';\n        std::map<char, char> vowels3;\n\
    \        vowels3['A'] = 'A';\n        vowels3['E'] = 'E';\n        vowels3['I']\
    \ = 'I';\n        vowels3['O'] = 'O';\n        vowels3['U'] = 'U';\n        vowels3['Y']\
    \ = 'Y';\n        std::map<char, char> vowels4;\n        vowels4['A'] = 'a';\n\
    \        vowels4['E'] = 'e';\n        vowels4['I'] = 'i';\n        vowels4['O']\
    \ = 'o';\n        vowels4['U'] = 'u';\n        vowels4['Y'] = 'y';\n        std::map<char,\
    \ char> vowels5;\n        vowels5['A'] = 'A';\n        vowels5['E'] = 'E';\n \
    \       vowels5['I'] = 'I';\n        vowels5['O'] = 'O';\n        vowels5['U']\
    \ = 'U';\n        vowels5['Y'] = 'Y';\n        std::map<char, char> vowels6;\n\
    \        vowels6['A'] = 'a';\n        vowels6['E'] = 'e';\n        vowels6['I']\
    \ = 'i';\n        vowels6['O'] = 'o\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_gt6nbm7.cpp:70:24: warning: missing terminating ' character [enabled\
    \ by default]\n         vowels6['O'] = 'o\n                        ^\n/tmp/tmp_gt6nbm7.cpp:70:9:\
    \ error: missing terminating ' character\n         vowels6['O'] = 'o\n       \
    \  ^\n/tmp/tmp_gt6nbm7.cpp: In function 'std::string encode(std::string)':\n/tmp/tmp_gt6nbm7.cpp:15:16:\
    \ error: ISO C++ forbids declaration of 'c' with no type [-fpermissive]\n    \
    \ for (auto &c : message) {\n                ^\n/tmp/tmp_gt6nbm7.cpp:15:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &c : message)\
    \ {\n                    ^\n/tmp/tmp_gt6nbm7.cpp:18:16: error: ISO C++ forbids\
    \ declaration of 'c' with no type [-fpermissive]\n     for (auto &c : ans) {\n\
    \                ^\n/tmp/tmp_gt6nbm7.cpp:18:20: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (auto &c : ans) {\n                \
    \    ^\n/tmp/tmp_gt6nbm7.cpp:71:1: error: expected primary-expression before '}'\
    \ token\n }\n ^\n/tmp/tmp_gt6nbm7.cpp:71:1: error: expected ';' before '}' token\n\
    /tmp/tmp_gt6nbm7.cpp:72:12: error: a function-definition is not allowed here before\
    \ '{' token\n int main() {\n            ^\n/tmp/tmp_gt6nbm7.cpp:79:1: error: expected\
    \ '}' at end of input\n }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n      \
    \      ans += c;\n        } else {\n            ans += std::tolower(c);\n    \
    \    }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n            ans += 'A';\n        } else\
    \ {\n            ans += std::toupper(c);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans += 'A';\n        } else {\n            ans += std::toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans += 'A';\n        } else\
    \ {\n            ans += std::toupper(c);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans += 'A';\n        } else {\n            ans += std::toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans += 'A';\n        } else\
    \ {\n            ans += std::toupper(c);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans += 'A';\n        } else {\n            ans += std::toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans += 'A';\n        } else\
    \ {\n            ans += std::toupper(c);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans += 'A';\n        } else {\n            ans += std::toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans += 'A';\n        } else\
    \ {\n            ans += std::toupper(c);\n        }\n\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkw11wqlz.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpkw11wqlz.cpp:15:16: error: ISO C++ forbids declaration of 'c' with no\
    \ type [-fpermissive]\n     for (auto &c : message) {\n                ^\n/tmp/tmpkw11wqlz.cpp:15:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &c : message) {\n                    ^\n/tmp/tmpkw11wqlz.cpp:22:16: error: ISO\
    \ C++ forbids declaration of 'c' with no type [-fpermissive]\n     for (auto &c\
    \ : ans) {\n                ^\n/tmp/tmpkw11wqlz.cpp:22:20: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (auto &c : ans) {\n    \
    \                ^\n/tmp/tmpkw11wqlz.cpp:29:16: error: ISO C++ forbids declaration\
    \ of 'c' with no type [-fpermissive]\n     for (auto &c : ans) {\n           \
    \     ^\n/tmp/tmpkw11wqlz.cpp:29:20: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &c : ans) {\n                    ^\n/tmp/tmpkw11wqlz.cpp:36:16:\
    \ error: ISO C++ forbids declaration of 'c' with no type [-fpermissive]\n    \
    \ for (auto &c : ans) {\n                ^\n/tmp/tmpkw11wqlz.cpp:36:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &c : ans)\
    \ {\n                    ^\n/tmp/tmpkw11wqlz.cpp:43:16: error: ISO C++ forbids\
    \ declaration of 'c' with no type [-fpermissive]\n     for (auto &c : ans) {\n\
    \                ^\n/tmp/tmpkw11wqlz.cpp:43:20: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (auto &c : ans) {\n                \
    \    ^\n/tmp/tmpkw11wqlz.cpp:50:16: error: ISO C++ forbids declaration of 'c'\
    \ with no type [-fpermissive]\n     for (auto &c : ans) {\n                ^\n\
    /tmp/tmpkw11wqlz.cpp:50:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (auto &c : ans) {\n                    ^\n/tmp/tmpkw11wqlz.cpp:57:16:\
    \ error: ISO C++ forbids declaration of 'c' with no type [-fpermissive]\n    \
    \ for (auto &c : ans) {\n                ^\n/tmp/tmpkw11wqlz.cpp:57:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &c : ans)\
    \ {\n                    ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (char c :\
    \ ans) {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans[ans.find(c)] = tolower(ans[ans.find(c)]);\n        }\n  \
    \  }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c)] = tolower(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c)] = tolower(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkwjrr4kk.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpkwjrr4kk.cpp:15:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : message) {\n                   ^\n/tmp/tmpkwjrr4kk.cpp:18:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (char\
    \ c : ans) {\n                   ^\n/tmp/tmpkwjrr4kk.cpp:23:19: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (char c : ans) {\n     \
    \              ^\n/tmp/tmpkwjrr4kk.cpp:28:19: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (char c : ans) {\n                   ^\n\
    /tmp/tmpkwjrr4kk.cpp:33:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : ans) {\n                   ^\n/tmp/tmpkwjrr4kk.cpp:38:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (char\
    \ c : ans) {\n                   ^\n/tmp/tmpkwjrr4kk.cpp:43:19: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (char c : ans) {\n     \
    \              ^\n/tmp/tmpkwjrr4kk.cpp:48:19: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (char c : ans) {\n                   ^\n\
    /tmp/tmpkwjrr4kk.cpp:53:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : ans) {\n                   ^\n/tmp/tmpkwjrr4kk.cpp:58:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (char\
    \ c : ans) {\n                   ^\n/tmp/tmpkwjrr4kk.cpp:63:19: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (char c : ans) {\n     \
    \              ^\n/tmp/tmpkwjrr4kk.cpp:65:12: error: a function-definition is\
    \ not allowed here before '{' token\n int main() {\n            ^\n/tmp/tmpkwjrr4kk.cpp:72:1:\
    \ error: expected '}' at end of input\n }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            ans\
    \ += message[i];\n        }\n        else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            ans += message[i];\n        }\n        else if (message[i]\
    \ >= '0' && message[i] <= '9') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] == '.' || message[i] == '!' || message[i] == '?')\
    \ {\n            ans += message[i];\n        }\n        else if (message[i] ==\
    \ '!' || message[i] == '?') {\n            ans += message[i];\n        }\n   \
    \     else if (message[i] == '.' || message[i] == '?') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '!' || message[i] == '.') {\n     \
    \       ans += message[i];\n        }\n        else if (message[i] == '?' || message[i]\
    \ == '!') {\n            ans += message[i];\n        }\n        else if (message[i]\
    \ == '.' || message[i] == '?') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] == '?' || message[i] == '.') {\n            ans +=\
    \ message[i];\n        }\n        else if (message[i] == '!' || message[i] ==\
    \ '?') {\n            ans += message[i];\n        }\n        else if (message[i]\
    \ == '.' || message[i] == '!') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] == '!' || message[i] == '.') {\n            ans +=\
    \ message[i];\n        }\n        else if (message[i] == '?' || message[i] ==\
    \ '!') {\n            ans += message[i];\n        }\n        else if (message[i]\
    \ == '.' || message[i] == '?') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] == '!' || message[i] == '?') {\n            ans +=\
    \ message[i];\n        }\n        else if (message[i] == '?' || message[i] ==\
    \ '.') {\n            ans += message[i];\n        }\n        else if (message[i]\
    \ == '!' || message[i] == '.') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] == '.' || message[i] == '?') {\n            ans +=\
    \ message[i];\n        }\n        else if (message[i] == '?' || message[i] ==\
    \ '!') {\n            ans += message[i];\n        }\n        else if (message[i]\
    \ == '!' || message[i] == '?') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] == '.' || message[i] == '!') {\n            ans +=\
    \ message[i];\n        }\n        else if (message[i] == '!' || message[i] ==\
    \ '.') {\n            ans += message[i];\n        }\n        else if (message[i]\
    \ == '?' || message[i] == '!') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] == '.' || message[i]\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwpn8avak.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpwpn8avak.cpp:89:1: error: expected ')' before '}' token\n }\n ^\n/tmp/tmpwpn8avak.cpp:89:1:\
    \ error: expected primary-expression before '}' token\n/tmp/tmpwpn8avak.cpp:89:1:\
    \ error: expected ';' before '}' token\n/tmp/tmpwpn8avak.cpp:90:12: error: a function-definition\
    \ is not allowed here before '{' token\n int main() {\n            ^\n/tmp/tmpwpn8avak.cpp:97:1:\
    \ error: expected '}' at end of input\n }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     if (std::isalpha(c)) {\n            ans += std::toupper(c);\n        }\n\
    \        else if (std::islower(c)) {\n            ans += std::tolower(c);\n  \
    \      }\n        else if (std::isupper(c)) {\n            ans += std::toupper(c);\n\
    \        }\n        else if (std::isspace(c)) {\n            ans += \" \";\n \
    \       }\n        else if (c == '.') {\n            ans += \" \";\n        }\n\
    \        else if (c == '?') {\n            ans += \" \";\n        }\n        else\
    \ if (c == '!') {\n            ans += \" \";\n        }\n        else if (c ==\
    \ '-') {\n            ans += \" \";\n        }\n        else if (c == '_') {\n\
    \            ans += \" \";\n        }\n        else if (c == '/') {\n        \
    \    ans += \" \";\n        }\n        else if (c == '\\\\') {\n            ans\
    \ += \" \";\n        }\n        else if (c == '(') {\n            ans += \" \"\
    ;\n        }\n        else if (c == ')') {\n            ans += \" \";\n      \
    \  }\n        else if (c == '[') {\n            ans += \" \";\n        }\n   \
    \     else if (c == ']') {\n            ans += \" \";\n        }\n        else\
    \ if (c == '{') {\n            ans += \" \";\n        }\n        else if (c ==\
    \ '}') {\n            ans += \" \";\n        }\n        else if (c == '<') {\n\
    \            ans += \" \";\n        }\n        else if (c == '>') {\n        \
    \    ans += \" \";\n        }\n        else if (c == '%') {\n            ans +=\
    \ \" \";\n        }\n        else if (c == '$') {\n            ans += \" \";\n\
    \        }\n        else if (c == '&') {\n            ans += \" \";\n        }\n\
    \        else if (c == '*') {\n            ans += \" \";\n        }\n        else\
    \ if (c == '!') {\n            ans += \" \";\n        }\n        else if (c ==\
    \ '\"') {\n            ans += \" \";\n        }\n        else if (c == '\\'')\
    \ {\n            ans += \" \";\n        }\n        else if (c == '~') {\n    \
    \        ans += \" \";\n        }\n        else if (c == '@') {\n            ans\
    \ += \" \";\n        }\n        else if (c == '^') {\n            ans += \" \"\
    ;\n        }\n        else if (c == '|') {\n            ans += \" \";\n      \
    \  }\n        else if (c == '~') {\n            ans += \" \";\n        }\n   \
    \     else if (c == '>') {\n            ans += \" \";\n        }\n        else\
    \ if (c == '<') {\n            ans += \" \";\n        }\n        else if (c ==\
    \ '=') {\n            ans += \" \";\n        }\n        else if (c == '+') {\n\
    \            ans += \" \";\n        }\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu65ag8v4.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpu65ag8v4.cpp:15:16: error: ISO C++ forbids declaration of 'c' with no\
    \ type [-fpermissive]\n     for (auto &c : message) {\n                ^\n/tmp/tmpu65ag8v4.cpp:15:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &c : message) {\n                    ^\n/tmp/tmpu65ag8v4.cpp:122:12: error:\
    \ a function-definition is not allowed here before '{' token\n int main() {\n\
    \            ^\n/tmp/tmpu65ag8v4.cpp:129:1: error: expected '}' at end of input\n\
    \ }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (char c :\
    \ ans) {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans[ans.find(c) + 1] = tolower(ans[ans.find(c) + 1]);\n     \
    \   }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 1] = toupper(ans[ans.find(c)\
    \ + 1]);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1qwo_3m5.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmp1qwo_3m5.cpp:15:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : message) {\n                   ^\n/tmp/tmp1qwo_3m5.cpp:18:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (char\
    \ c : ans) {\n                   ^\n/tmp/tmp1qwo_3m5.cpp:23:19: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (char c : ans) {\n     \
    \              ^\n/tmp/tmp1qwo_3m5.cpp: In function 'int main()':\n/tmp/tmp1qwo_3m5.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1qwo_3m5.cpp:2:\n/tmp/tmp1qwo_3m5.cpp:32:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     ans += (std::toupper(c) - 'A' + 2) % 26 + 'A';\n    }\n    for (auto &c\
    \ : ans) {\n        ans.replace(ans.find(c), 2, c);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8vuwjfnj.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmp8vuwjfnj.cpp:15:16: error: ISO C++ forbids declaration of 'c' with no\
    \ type [-fpermissive]\n     for (auto &c : message) {\n                ^\n/tmp/tmp8vuwjfnj.cpp:15:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &c : message) {\n                    ^\n/tmp/tmp8vuwjfnj.cpp:18:16: error: ISO\
    \ C++ forbids declaration of 'c' with no type [-fpermissive]\n     for (auto &c\
    \ : ans) {\n                ^\n/tmp/tmp8vuwjfnj.cpp:18:20: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (auto &c : ans) {\n    \
    \                ^\n/tmp/tmp8vuwjfnj.cpp:19:38: error: invalid conversion from\
    \ 'int' to 'const char*' [-fpermissive]\n         ans.replace(ans.find(c), 2,\
    \ c);\n                                      ^\nIn file included from /usr/include/c++/4.8.2/string:52:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp8vuwjfnj.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:1496:7:\
    \ error:   initializing argument 3 of 'std::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::basic_string<_CharT, _Traits, _Alloc>::replace(std::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]' [-fpermissive]\n       replace(size_type __pos, size_type\
    \ __n1, const _CharT* __s)\n       ^\n/tmp/tmp8vuwjfnj.cpp: In function 'int main()':\n\
    /tmp/tmp8vuwjfnj.cpp:24:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = encode;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8vuwjfnj.cpp:2:\n/tmp/tmp8vuwjfnj.cpp:25:30: error:\
    \ 'candidate' was not declared in this scope\n  "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c: message) {\n    \
    \    if (std::tolower(c) == c) ans += c;\n        else ans += std::tolower(std::toupper(c));\n\
    \    }\n    for (auto &c: ans) {\n        if (std::isalpha(c)) ans = ans.replace(c,\
    \ 'A' + std::toupper(c) - 'A');\n    }\n    for (auto &c: ans) {\n        if (std::isupper(c))\
    \ ans = ans.replace(c, 'a' + std::tolower(c) - 'a');\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7no0eubr.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmp7no0eubr.cpp:15:16: error: ISO C++ forbids declaration of 'c' with no\
    \ type [-fpermissive]\n     for (auto &c: message) {\n                ^\n/tmp/tmp7no0eubr.cpp:15:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &c: message) {\n                   ^\n/tmp/tmp7no0eubr.cpp:19:16: error: ISO\
    \ C++ forbids declaration of 'c' with no type [-fpermissive]\n     for (auto &c:\
    \ ans) {\n                ^\n/tmp/tmp7no0eubr.cpp:19:19: error: range-based 'for'\
    \ loops are not allowed in C++98 mode\n     for (auto &c: ans) {\n           \
    \        ^\n/tmp/tmp7no0eubr.cpp:20:78: error: no matching function for call to\
    \ 'std::basic_string<char>::replace(int&, int)'\n         if (std::isalpha(c))\
    \ ans = ans.replace(c, 'A' + std::toupper(c) - 'A');\n                       \
    \                                                       ^\n/tmp/tmp7no0eubr.cpp:20:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/string:52:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp7no0eubr.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:1429:7:\
    \ note: std::basic_string<_CharT, _Traits, _Alloc>& std::basic_string<_CharT,\
    \ _Traits, _Alloc>::replace(std::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ std::basic_string<_CharT, _Traits, _Alloc>::size_type, const std::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\n       replace(size_type __pos, size_type __n, const basic_string&\
    \ __str)\n       ^\n/usr/include/c++/4.8.2/bits/basic_string.h:1429:7: note: \
    \  candidate expects 3 arguments, 2 provided\n/usr/include/c++/4.8.2/bits/basic_string.h:1451:7:\
    \ note: std::basic_string<_CharT, _Traits, _Alloc>& std::basic_string<_CharT,\
    \ _Traits, _Alloc>::replace(std::basic_string<_CharT, _Traits, "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else\
    \ {\n            ans += 'A' + (c - 'a');\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzg7mm9sq.cpp: In function 'int main()':\n/tmp/tmpzg7mm9sq.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzg7mm9sq.cpp:2:\n/tmp/tmpzg7mm9sq.cpp:28:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else\
    \ {\n            ans += 'A' + (c - 'a');\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzg7mm9sq.cpp: In function 'int main()':\n/tmp/tmpzg7mm9sq.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = encode;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzg7mm9sq.cpp:2:\n/tmp/tmpzg7mm9sq.cpp:28:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string encoded = \"\";\n    for (auto &c : message) {\n\
    \        switch (c) {\n            case 'a':\n                encoded += \"A\"\
    ;\n                break;\n            case 'b':\n                encoded += \"\
    B\";\n                break;\n            case 'c':\n                encoded +=\
    \ \"C\";\n                break;\n            case 'd':\n                encoded\
    \ += \"D\";\n                break;\n            case 'e':\n                encoded\
    \ += \"E\";\n                break;\n            case 'f':\n                encoded\
    \ += \"F\";\n                break;\n            case 'g':\n                encoded\
    \ += \"G\";\n                break;\n            case 'h':\n                encoded\
    \ += \"H\";\n                break;\n            case 'i':\n                encoded\
    \ += \"I\";\n                break;\n            case 'j':\n                encoded\
    \ += \"J\";\n                break;\n            case 'k':\n                encoded\
    \ += \"K\";\n                break;\n            case 'l':\n                encoded\
    \ += \"L\";\n                break;\n            case 'm':\n                encoded\
    \ += \"M\";\n                break;\n            case 'n':\n                encoded\
    \ += \"N\";\n                break;\n            case 'o':\n                encoded\
    \ += \"O\";\n                break;\n            case 'p':\n                encoded\
    \ += \"P\";\n                break;\n            case 'q':\n                encoded\
    \ += \"Q\";\n                break;\n            case 'r':\n                encoded\
    \ += \"R\";\n                break;\n            case 's':\n                encoded\
    \ += \"S\";\n                break;\n            case 't':\n                encoded\
    \ += \"T\";\n                break;\n            case 'u':\n                encoded\
    \ += \"U\";\n                break;\n            case 'v':\n                encoded\
    \ += \"V\";\n                break;\n            case 'w':\n                encoded\
    \ += \"W\";\n                break;\n            case 'x':\n                encoded\
    \ += \"X\";\n                break;\n            case 'y':\n                encoded\
    \ += \"Y\";\n                break;\n            case 'z':\n                encoded\
    \ += \"Z\";\n                break;\n            case 'A':\n                encoded\
    \ += \"a\";\n                break;\n            case 'B':\n                encoded\
    \ += \"b\";\n                break;\n            case 'C':\n                encoded\
    \ += \"c\";\n                break;\n            case 'D':\n                encoded\
    \ += \"d\";\n                break;\n            case 'E':\n                encoded\
    \ += \"e\";\n                break;\n            case 'F':\n                encoded\
    \ += \"f\";\n                break;\n            case 'G':\n                encoded\
    \ += \"g\";\n                break;\n            case 'H':\n                encoded\
    \ += \"h\";\n                break;\n            case 'I':\n                encoded\
    \ += \"i\";\n                break;\n            case 'J':\n                encoded\
    \ += \"j\";\n                break;\n            case 'K':\n                encoded\
    \ += \"k\";\n                break;\n            case 'L':\n                encoded\
    \ += \"l\";\n                break;\n            case 'M':\n                encoded\
    \ += \"m\";\n                break;\n            case 'N':\n                encoded\
    \ += \"n\";\n                break;\n            case 'O':\n                encoded\
    \ += \"o\";\n                break;\n            case 'P':\n\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4rsic7xo.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmp4rsic7xo.cpp:15:16: error: ISO C++ forbids declaration of 'c' with no\
    \ type [-fpermissive]\n     for (auto &c : message) {\n                ^\n/tmp/tmp4rsic7xo.cpp:15:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &c : message) {\n                    ^\n/tmp/tmp4rsic7xo.cpp:142:1: error: expected\
    \ primary-expression before '}' token\n }\n ^\n/tmp/tmp4rsic7xo.cpp:142:1: error:\
    \ expected ';' before '}' token\n/tmp/tmp4rsic7xo.cpp:143:12: error: a function-definition\
    \ is not allowed here before '{' token\n int main() {\n            ^\n/tmp/tmp4rsic7xo.cpp:150:1:\
    \ error: expected '}' at end of input\n }\n ^\n/tmp/tmp4rsic7xo.cpp:150:1: error:\
    \ expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     if ('A' <= c && c <= 'Z') {\n            ans += c;\n        } else {\n \
    \           ans += tolower(c);\n        }\n    }\n    for (auto &c : ans) {\n\
    \        if ('a' <= c && c <= 'z') {\n            ans[ans.find(c)] = toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if ('a' <= c && c <= 'z')\
    \ {\n            ans[ans.find(c)] = toupper(c);\n        }\n    }\n    for (auto\
    \ &c : ans) {\n        if ('a' <= c && c <= 'z') {\n            ans[ans.find(c)]\
    \ = toupper(c);\n        }\n    }\n    for (auto &c : ans) {\n        if ('a'\
    \ <= c && c <= 'z') {\n            ans[ans.find(c)] = toupper(c);\n        }\n\
    \    }\n    for (auto &c : ans) {\n        if ('a' <= c && c <= 'z') {\n     \
    \       ans[ans.find(c)] = toupper(c);\n        }\n    }\n    for (auto &c : ans)\
    \ {\n        if ('a' <= c && c <= 'z') {\n            ans[ans.find(c)] = toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if ('a' <= c && c <= 'z')\
    \ {\n            ans[ans.find(c)] = toupper(c);\n        }\n    }\n    for (auto\
    \ &c : ans) {\n        if ('a' <= c && c <= 'z') {\n            ans[ans.find(c)]\
    \ = toupper(c);\n        }\n    }\n    for (auto &c : ans) {\n        if ('a'\
    \ <= c && c <= 'z') {\n            ans[ans.find(c)] = toupper(c);\n        }\n\
    \    }\n    for (auto &c : ans) {\n        if ('a' <= c && c <= 'z') {\n     \
    \       ans[ans.find(c)] = toupper(c);\n        }\n    }\n    for (auto &c : ans)\
    \ {\n        if ('a' <= c && c <= 'z') {\n            ans[ans.find(c)] = toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if ('a' <= c && c <= 'z')\
    \ {\n            ans[ans.find(c)] = toupper(c);\n        }\n    }\n    for (auto\
    \ &c : ans) {\n        if ('a' <= c && c <= 'z') {\n            ans[ans.find(c)]\
    \ = toupper(c);\n        }\n    }\n\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc4zu5mu4.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpc4zu5mu4.cpp:15:16: error: ISO C++ forbids declaration of 'c' with no\
    \ type [-fpermissive]\n     for (auto &c : message) {\n                ^\n/tmp/tmpc4zu5mu4.cpp:15:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &c : message) {\n                    ^\n/tmp/tmpc4zu5mu4.cpp:22:16: error: ISO\
    \ C++ forbids declaration of 'c' with no type [-fpermissive]\n     for (auto &c\
    \ : ans) {\n                ^\n/tmp/tmpc4zu5mu4.cpp:22:20: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (auto &c : ans) {\n    \
    \                ^\n/tmp/tmpc4zu5mu4.cpp:27:16: error: ISO C++ forbids declaration\
    \ of 'c' with no type [-fpermissive]\n     for (auto &c : ans) {\n           \
    \     ^\n/tmp/tmpc4zu5mu4.cpp:27:20: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &c : ans) {\n                    ^\n/tmp/tmpc4zu5mu4.cpp:32:16:\
    \ error: ISO C++ forbids declaration of 'c' with no type [-fpermissive]\n    \
    \ for (auto &c : ans) {\n                ^\n/tmp/tmpc4zu5mu4.cpp:32:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &c : ans)\
    \ {\n                    ^\n/tmp/tmpc4zu5mu4.cpp:37:16: error: ISO C++ forbids\
    \ declaration of 'c' with no type [-fpermissive]\n     for (auto &c : ans) {\n\
    \                ^\n/tmp/tmpc4zu5mu4.cpp:37:20: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (auto &c : ans) {\n                \
    \    ^\n/tmp/tmpc4zu5mu4.cpp:42:16: error: ISO C++ forbids declaration of 'c'\
    \ with no type [-fpermissive]\n     for (auto &c : ans) {\n                ^\n\
    /tmp/tmpc4zu5mu4.cpp:42:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (auto &c : ans) {\n                    ^\n/tmp/tmpc4zu5mu4.cpp:47:16:\
    \ error: ISO C++ forbids declaration of 'c' with no type [-fpermissive]\n    \
    \ for (auto &c : ans) {\n                ^\n/tmp/tmpc4zu5mu4.cpp:47:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &c : ans)\
    \ {\n                    ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"\
    This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string\
    \ message) {\n    std::string ans = \"\";\n    for (char c : message) {\n    \
    \    ans += (std::toupper(c) - 'A' + 2) % 26 + 'A';\n    }\n    for (char c :\
    \ ans) {\n        ans.replace(ans.find(c), 2, c);\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpedz5t2k7.cpp: In function 'std::string encode(std::string)':\n\
    /tmp/tmpedz5t2k7.cpp:15:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : message) {\n                   ^\n/tmp/tmpedz5t2k7.cpp:18:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (char\
    \ c : ans) {\n                   ^\n/tmp/tmpedz5t2k7.cpp:19:38: error: invalid\
    \ conversion from 'char' to 'const char*' [-fpermissive]\n         ans.replace(ans.find(c),\
    \ 2, c);\n                                      ^\nIn file included from /usr/include/c++/4.8.2/string:52:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpedz5t2k7.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:1496:7:\
    \ error:   initializing argument 3 of 'std::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::basic_string<_CharT, _Traits, _Alloc>::replace(std::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]' [-fpermissive]\n       replace(size_type __pos, size_type\
    \ __n1, const _CharT* __s)\n       ^\n/tmp/tmpedz5t2k7.cpp: In function 'int main()':\n\
    /tmp/tmpedz5t2k7.cpp:24:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = encode;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpedz5t2k7.cpp:2:\n/tmp/tmpedz5t2k7.cpp:25:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n                              ^\n"
  stdout: ''
