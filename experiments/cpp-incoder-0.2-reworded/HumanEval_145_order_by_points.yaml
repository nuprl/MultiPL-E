name: HumanEval_145_order_by_points
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which sorts\
  \ the given vector of integers\n// in ascending order according to the sum of their\
  \ digits.\n// Note: if there are several items with similar sum of their digits,\n\
  // order them based on their index in original vector.\n// For example:\n// >>>\
  \ order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11, (long)-12})))\n\
  // (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12, (long)11}))\n//\
  \ >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
  \ order_by_points(std::vector<long> nums) {\n"
tests: "}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
  \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
  \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
  \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
  \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
  \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
  \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
  \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
  \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
  \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
  \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
  \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
completions: ["    std::vector<long> nums2;\n    long sum = 0;\n    for (long num\
    \ : nums) {\n        sum += num;\n        nums2.push_back(sum);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end());\n    return nums2;", "    // Write your code here\n    std::vector<long>\
    \ nums_copy = nums;\n    long sum = 0;\n    for (long num : nums_copy) {\n   \
    \     sum += num;\n    }\n    long max_num = std::numeric_limits<long>::max();\n\
    \    long min_num = std::numeric_limits<long>::min();\n    long max_sum = 0;\n\
    \    for (long num : nums_copy) {\n        max_sum = std::max(max_sum, num);\n\
    \        min_sum = std::min(min_sum, num);\n    }\n    long min_sum = std::numeric_limits<long>::min();\n\
    \    long max_sum = std::numeric_limits<long>::max();\n    for (long num : nums_copy)\
    \ {\n        if (num < min_num) {\n            std::swap(min_num, num);\n    \
    \    }\n        if (num > max_num) {\n            std::swap(max_num, num);\n \
    \       }\n    }\n    long min_num = std::numeric_limits<long>::min();\n    long\
    \ max_num = std::numeric_limits<long>::max();\n    for (long num : nums_copy)\
    \ {\n        if (num < min_num) {\n            std::swap(min_num, num);\n    \
    \    }\n        if (num > max_num) {\n            std::swap(max_num, num);\n \
    \       }\n    }\n    long min_sum = std::numeric_limits<long>::min();\n    long\
    \ max_sum = std::numeric_limits<long>::max();\n    for (long num : nums_copy)\
    \ {\n        if (num < min_sum) {\n            std::swap(min_sum, num);\n    \
    \    }\n        if (num > max_sum) {\n            std::swap(max_sum, num);\n \
    \       }\n    }\n    long min_sum = std::numeric_limits<long>::min();\n    long\
    \ max_sum = std::numeric_limits<long>::max();\n    for (long num : nums_copy)\
    \ {\n        if (num < min_sum) {\n            std::swap(min_sum, num);\n    \
    \    }\n        if (num > max_sum) {\n            std::swap(max_sum, num);\n \
    \       }\n    }\n    long min_sum = std::numeric_limits<long>::min();\n    long\
    \ max_sum = std::numeric_limits<long>::max();\n    for (long num : nums_copy)\
    \ {\n        if (num < min_sum) {\n            std::swap(min_sum, num);\n    \
    \    }\n        if (num > max_sum) {\n            std::swap(max_sum, num);\n \
    \       }\n    }\n    long min_sum = std::numeric_limits<long>::min();\n    long\
    \ max_sum = std::numeric_limits<long>::max();\n    for (long num : nums_copy)\
    \ {\n        if (num < min_sum) {\n", "    // Write your code here\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [](long\
    \ a, long b){\n        return std::abs(a) > std::abs(b);\n    });\n    return\
    \ nums_copy;", "    std::vector<long> nums_copy = nums;\n    sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b) -> bool {\n        return std::abs(a - b)\
    \ < 10;\n    });\n    return nums_copy;", "    // Write your code here\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [](long\
    \ a, long b){\n        return std::accumulate(std::begin(nums_copy), std::end(nums_copy),\
    \ 0) > std::accumulate(std::begin(nums_copy), std::end(nums_copy), 0);\n    });\n\
    \    return nums_copy;", "    // Write your code here\n    std::vector<long> nums2;\n\
    \    long sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) -> bool\
    \ {\n        return sum - a + b < sum - a + b;\n    });\n    return nums2;", " \
    \   // Write your code here.\n    std::vector<long> nums2;\n    long sum = 0;\n\
    \    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n \
    \   }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n  \
    \      return sum - a + b < sum - b + a;\n    });\n    return nums2;", "    //\
    \ Write your code here.\n    long long sum = 0;\n    for(long long i : nums){\n\
    \        sum += i;\n    }\n    long long max = 0;\n    for(long long i : nums){\n\
    \        if(sum > max){\n            max = sum;\n        }\n        sum += i;\n\
    \    }\n    std::vector<long> ans;\n    for(long long i : nums){\n        if(sum\
    \ == max){\n            ans.push_back(i);\n        }\n    }\n    return ans;",
  "    // Write your code here\n    std::vector<long> nums_copy = nums;\n    long\
    \ sum = 0;\n    for (long num : nums_copy) {\n        sum += num;\n    }\n   \
    \ long max_sum = 0;\n    for (long num : nums_copy) {\n        max_sum = std::max(max_sum,\
    \ sum);\n        sum += num;\n    }\n    std::vector<long> result;\n    for (long\
    \ num : nums_copy) {\n        if (sum == max_sum) {\n            result.push_back(num);\n\
    \        }\n    }\n    return result;", "    // Write your code here\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [](long\
    \ a, long b){\n        return std::to_string(a) < std::to_string(b);\n    });\n\
    \    return nums_copy;", "    // Write your code here\n    std::vector<long> nums_sorted\
    \ = nums;\n    std::sort(nums_sorted.begin(), nums_sorted.end(), [](long a, long\
    \ b){\n        return a + b < 0;\n    });\n    return nums_sorted;", "    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [](long\
    \ a, long b){return a+b<0;});\n    return nums_copy;", "    // Write your code\
    \ here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i = 0;\
    \ i < nums.size(); i++) {\n        sum += nums[i];\n        nums2.push_back(nums[i]);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a + b < sum - b + a;\n    });\n    return nums2;", "    //\
    \ Write your code here\n    long sum = 0;\n    std::vector<long> result;\n   \
    \ for (long i : nums) {\n        sum += i;\n        result.push_back(i);\n   \
    \ }\n    std::sort(result.begin(), result.end(), [&sum](int i, int j) {\n    \
    \    return sum - j;\n    });\n    return result;", "    // Write your code here\n\
    \    std::vector<long> nums2;\n    for (long i = 0; i < nums.size(); i++) {\n\
    \        long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n   \
    \         if (i == j) {\n                continue;\n            }\n          \
    \  sum += nums[j];\n        }\n        if (sum > 0) {\n            nums2.push_back(nums[i]);\n\
    \        }\n    }\n    return nums2;", "    // Write your code here\n    std::vector<long>\
    \ nums2;\n    long sum = 0;\n    for (long i : nums) {\n        sum += i;\n  \
    \      nums2.push_back(i);\n    }\n    long max = 0;\n    for (long i : nums2)\
    \ {\n        if (sum == i) {\n            max = i;\n        }\n    }\n    std::vector<long>\
    \ nums3;\n    for (long i : nums2) {\n        if (sum == i) {\n            nums3.push_back(i);\n\
    \        }\n    }\n    for (long i : nums3) {\n        nums2.push_back(i);\n \
    \   }\n    return nums2;", "    // Write your code here\n    std::vector<long>\
    \ nums_copy;\n    for(long num : nums){\n        nums_copy.push_back(num);\n \
    \   }\n    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n\
    \        long sum = 0;\n        while(a){\n            sum += a%10;\n        \
    \    a /= 10;\n        }\n        while(b){\n            sum += b%10;\n      \
    \      b /= 10;\n        }\n        return sum - a - b;\n    });\n    return nums_copy;",
  "    // Write your code here.\n    long sum = 0;\n    long max = 0;\n    long min\
    \ = 0;\n    long index = 0;\n    for (auto &i : nums) {\n        sum += i;\n \
    \       if (sum > max) {\n            max = sum;\n        }\n        if (sum <\
    \ min) {\n            min = sum;\n        }\n    }\n    std::vector<long> result;\n\
    \    for (auto &i : nums) {\n        if (i == 0) {\n            result.push_back(0);\n\
    \            continue;\n        }\n        long sum = 0;\n        for (auto &j\
    \ : nums) {\n            sum += j;\n            if (sum > i) {\n             \
    \   result.push_back(i);\n                break;\n            }\n        }\n \
    \   }\n    for (auto &i : result) {\n        if (i == 0) {\n            result.push_back(0);\n\
    \            continue;\n        }\n        long sum = 0;\n        for (auto &j\
    \ : result) {\n            sum += j;\n            if (sum > i) {\n           \
    \     result.push_back(i);\n                break;\n            }\n        }\n\
    \    }\n    for (auto &i : result) {\n        if (i == 0) {\n            result.push_back(0);\n\
    \            continue;\n        }\n        long sum = 0;\n        for (auto &j\
    \ : result) {\n            sum += j;\n            if (sum < i) {\n           \
    \     result.push_back(i);\n                break;\n            }\n        }\n\
    \    }\n    for (auto &i : result) {\n        if (i == 0) {\n            result.push_back(0);\n\
    \            continue;\n        }\n        long sum = 0;\n        for (auto &j\
    \ : result) {\n            sum += j;\n            if (sum > i) {\n           \
    \     result.push_back(i);\n                break;\n            }\n        }\n\
    \    }\n    for (auto &i : result) {\n        if (i == 0) {\n            result.push_back(0);\n\
    \            continue;\n        }\n        long sum = 0;\n        for (auto &j\
    \ : result) {\n            sum += j;\n            if (sum < i) {\n           \
    \     result.push_back(i);\n                break;\n            }\n        }\n\
    \    }\n    for (auto &i : result) {\n        if (i == 0) {\n            result.push_back(0);\n\
    \            continue;\n        }\n        long sum = 0;\n        for (auto &j\
    \ : result) {\n            sum += j;\n            if (sum > i) {\n           \
    \     result.push_back(i);\n                break;\n            }\n        }\n\
    \    }\n    for (auto &i : result) {\n        if (i == 0) {\n            result.push_back(0);\n\
    \            continue;\n        }\n        long sum = 0;\n        for (auto &j\
    \ : result) {\n            sum += j;\n            if (sum < i) {\n           \
    \     result.push_back(i);\n                break;\n            }\n        }\n\
    \    }\n    for (auto &i : result) {\n        if (i == 0) {\n            result.push_back(0);\n\
    \            continue;\n        }\n        long sum = 0;\n        for (auto &j\
    \ : result) {\n            sum += j;\n            if (sum > i) {\n           \
    \     result.push_back(i);\n                break;\n            }\n        }\n\
    \    }", "    // Write your code here.\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b) {\n    \
    \    return a + b < 0;\n    });\n    return nums_copy;", "    std::vector<long>\
    \ result;\n    long long sum = 0;\n    for (long long i : nums) {\n        sum\
    \ += i;\n        result.push_back(i);\n    }\n    std::sort(result.begin(), result.end(),\
    \ [&sum](int i, int j) {\n        return sum - j;\n    });\n    return result;"]
stop_tokens:
- "\n}"
