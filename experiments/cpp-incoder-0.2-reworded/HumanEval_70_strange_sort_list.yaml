name: HumanEval_70_strange_sort_list
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
  \ return vector in strange order.\n// Strange sorting, is when you start with the\
  \ minimum value,\n// then maximum of the remaining integers, then minimum and so\
  \ on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1, (long)2,\
  \ (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)3}))\n\
  // >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5, (long)5})))\n\
  // (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n// >>> strange_sort_list((std::vector<long>()))\n\
  // (std::vector<long>())\nstd::vector<long> strange_sort_list(std::vector<long>\
  \ lst) {\n"
tests: "}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
  \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
  \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
  \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
  \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
  \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
  \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
  \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
  \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
  \ (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8, (long)2,\
  \ (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
  \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
  \ == (std::vector<long>({(long)111111})));\n}\n"
completions: ["    if (lst.size() == 0) {\n        return lst;\n    }\n    std::vector<long>\
    \ result;\n    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        } else if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    long mid = min + (max - min)\
    \ / 2;\n    long mid2 = mid / 2;\n    long mid3 = mid * 2;\n    long mid4 = mid\
    \ * 3;\n    long mid5 = mid * 4;\n    long mid6 = mid * 5;\n    long mid7 = mid\
    \ * 6;\n    long mid8 = mid * 7;\n    long mid9 = mid * 8;\n    long mid10 = mid\
    \ * 9;\n    long mid11 = mid * 10;\n    long mid12 = mid * 11;\n    long mid13\
    \ = mid * 12;\n    long mid14 = mid * 13;\n    long mid15 = mid * 14;\n    long\
    \ mid16 = mid * 15;\n    long mid17 = mid * 16;\n    long mid18 = mid * 17;\n\
    \    long mid19 = mid * 18;\n    long mid20 = mid * 19;\n    long mid21 = mid\
    \ * 20;\n    long mid22 = mid * 21;\n    long mid23 = mid * 22;\n    long mid24\
    \ = mid * 23;\n    long mid25 = mid * 24;\n    long mid26 = mid * 25;\n    long\
    \ mid27 = mid * 26;\n    long mid28 = mid * 27;\n    long mid29 = mid * 28;\n\
    \    long mid30 = mid * 29;\n    long mid31 = mid * 30;\n    long mid32 = mid\
    \ * 31;\n    long mid33 = mid * 32;\n    long mid34 = mid * 33;\n    long mid35\
    \ = mid * 34;\n    long mid36 = mid * 35;\n    long mid37 = mid * 36;\n    long\
    \ mid38 = mid * 37;\n    long mid39 = mid * 38;\n    long mid40 = mid * 39;\n\
    \    long mid41 = mid * 40;\n    long mid42 = mid * 41;\n    long mid43 = mid\
    \ * 42;\n    long mid44 = mid * 43;\n    long mid45 = mid * 44;\n    long mid46\
    \ = mid * 45;\n    long mid47", "    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    for (auto i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> lst2;\n    long min =\
    \ lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n       \
    \ if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n  \
    \          max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i\
    \ == min) {\n            lst2.push_back(min);\n        } else if (i == max) {\n\
    \            lst2.push_back(max);\n        } else {\n            lst2.push_back(i);\n\
    \        }\n    }\n    return lst2;", "    std::vector<long> lst2;\n    long minval\
    \ = lst[0];\n    long maxval = lst[0];\n    for (long i : lst) {\n        if (i\
    \ < minval) {\n            minval = i;\n        } else if (i > maxval) {\n   \
    \         maxval = i;\n        }\n    }\n    long midval = (minval + maxval) /\
    \ 2;\n    long midpos = 0;\n    for (long i : lst) {\n        if (i == midval)\
    \ {\n            midpos++;\n        } else {\n            lst2.push_back(i);\n\
    \        }\n    }\n    lst2.insert(lst2.begin() + midpos, midval);\n    return\
    \ lst2;", "    std::vector<long> res;\n    if (lst.size() == 0) {\n        return\
    \ res;\n    }\n    long min = lst[0];\n    for (long i = 1, j = lst.size(); i\
    \ < j; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n      \
    \  }\n    }\n    long max = lst[0];\n    for (long i = 1, j = lst.size(); i <\
    \ j; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n\
    \    }\n    for (long i = 1, j = lst.size(); i < j; i++) {\n        if (lst[i]\
    \ < min) {\n            min = lst[i];\n        }\n        if (lst[i] > max) {\n\
    \            max = lst[i];\n        }\n    }\n    for (long i = 1, j = lst.size();\
    \ i < j; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n    \
    \    }\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n  \
    \  }\n    for (long i = 1, j = lst.size(); i < j; i++) {\n        if (lst[i] <\
    \ min) {\n            min = lst[i];\n        }\n        if (lst[i] > max) {\n\
    \            max = lst[i];\n        }\n    }\n    for (long i = 1, j = lst.size();\
    \ i < j; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n    \
    \    }\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n  \
    \  }\n    for (long i = 1, j = lst.size(); i < j; i++) {\n        if (lst[i] <\
    \ min) {\n            min = lst[i];\n        }\n        if (lst[i] > max) {\n\
    \            max = lst[i];\n        }\n    }\n    for (long i = 1, j = lst.size();\
    \ i < j; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n    \
    \    }\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n  \
    \  }\n    for (long i = 1, j = lst.size(); i < j; i++) {\n        if (lst[i] <\
    \ min) {\n            min = lst[i];\n        }\n        if (lst[i] > max) {\n\
    \            max = lst[i];\n        }\n    }\n    for (long i = 1, j = lst.size();\
    \ i < j; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n    \
    \    }\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n  \
    \  }\n    for (long i = 1, j = lst.size(); i < j; i++) {\n        if (lst[i] <\
    \ min) {\n            min = lst[i];\n        }\n        if (lst[i] > max) {\n\
    \            max = lst[i];\n        }\n    }\n    for (long i = 1, j = lst.size();\
    \ i < j; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n    \
    \    }\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n  \
    \  }\n    for (long i = 1, j = l", "    // Your code goes here\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            res.push_back(min);\n            min\
    \ = i;\n        } else if (i > max) {\n            res.push_back(max);\n     \
    \       max = i;\n        } else {\n            res.push_back(i);\n        }\n\
    \    }\n    res.push_back(min);\n    res.push_back(max);\n    return res;", " \
    \   // Your code here\n    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;", "    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            result.push_back(min);\n            min\
    \ = i;\n        }\n        if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        }\n    }\n    if (min != max) {\n        result.push_back(min);\n\
    \        result.push_back(max);\n    }\n    return result;", "    // Your code\
    \ here\n    std::vector<long> result;\n    long min = 0;\n    long max = lst.size()\
    \ - 1;\n    long mid = 0;\n    while (min <= max) {\n        mid = (min + max)\
    \ / 2;\n        if (lst[mid] > lst[max]) {\n            max = mid - 1;\n     \
    \   } else if (lst[mid] < lst[min]) {\n            min = mid + 1;\n        } else\
    \ {\n            result.push_back(lst[mid]);\n            min = mid + 1;\n   \
    \         max = mid - 1;\n        }\n    }\n    return result;", "    // Your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i == min) {\n          \
    \  result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;", "    if (lst.size() == 0) {\n        return lst;\n    }\n    std::vector<long>\
    \ lst2(lst.size());\n    for (long i = 0; i < lst.size(); i++) {\n        long\
    \ j = i;\n        while (j > 0 && lst[j - 1] > lst[j]) {\n            lst2[i]\
    \ = lst[j];\n            j--;\n        }\n        lst2[i] = lst[j];\n    }\n \
    \   return lst2;", "    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            i = min;\n        }\n      \
    \  if (i > max) {\n            i = max;\n        }\n        res.push_back(i);\n\
    \    }\n    return res;", "    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            res.push_back(i);\n        }\n\
    \        if (i > max) {\n            res.push_back(i);\n        }\n    }\n   \
    \ return res;", "    std::vector<long> sorted_lst;\n    sorted_lst.push_back(lst[0]);\n\
    \    sorted_lst.push_back(lst[lst.size()-1]);\n    for(size_t i = 1; i < lst.size()-1;\
    \ i++) {\n        if(lst[i] > lst[i-1]) {\n            sorted_lst.push_back(lst[i]);\n\
    \            sorted_lst.push_back(lst[i-1]);\n        }\n    }\n    return sorted_lst;",
  "    std::vector<long> res;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    } else if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        } else if (i > max) {\n            max = i;\n  \
    \      }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;", "    // Write your code here.\n    std::vector<long> result;\n    long\
    \ min = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i == min) {\n            result.push_back(min);\n        } else if (i ==\
    \ max) {\n            result.push_back(max);\n        } else {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    for (auto i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> result;\n    long min\
    \ = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n     \
    \   if (i < min) {\n            min = i;\n        } else if (i > max) {\n    \
    \        max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i <\
    \ min) {\n            result.push_back(min);\n            min = i;\n        }\
    \ else if (i > max) {\n            result.push_back(max);\n            max = i;\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;", "    // Your code here\n    std::vector<long> res;\n    long min =\
    \ lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n       \
    \ if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n  \
    \          max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i\
    \ == min) {\n            res.push_back(min);\n        } else if (i == max) {\n\
    \            res.push_back(max);\n        } else {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;", "    // Your code here\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;", "    // Your code here\n    std::vector<long> result;\n    long min =\
    \ lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n       \
    \ if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n  \
    \          max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i\
    \ < min) {\n            result.push_back(min);\n            min = i;\n       \
    \ }\n        if (i > max) {\n            result.push_back(max);\n            max\
    \ = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n \
    \           result.push_back(min);\n            min = i;\n        }\n        if\
    \ (i > max) {\n            result.push_back(max);\n            max = i;\n    \
    \    }\n    }\n    for (long i : lst) {\n        if (i < min) {\n            result.push_back(min);\n\
    \            min = i;\n        }\n        if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i < min) {\n            result.push_back(min);\n            min = i;\n    \
    \    }\n        if (i > max) {\n            result.push_back(max);\n         \
    \   max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            result.push_back(min);\n            min = i;\n        }\n   \
    \     if (i > max) {\n            result.push_back(max);\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    result.push_back(min);\n            min = i;\n        }\n        if (i >\
    \ max) {\n            result.push_back(max);\n            max = i;\n        }\n\
    \    }\n    for (long i : lst) {\n        if (i < min) {\n            result.push_back(min);\n\
    \            min = i;\n        }\n        if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i < min) {\n            result.push_back(min);\n            min = i;\n    \
    \    }\n        if (i > max) {\n            result.push_back(max);\n         \
    \   max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            result.push_back(min);\n            min = i;\n        }\n   \
    \     if (i > max) {\n            result.push_back(max);\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    result.push_back(min);\n            min = i;\n        }\n        if (i >\
    \ max) {\n            result.push_back(max);\n            max = i;\n        }\n\
    \    }\n    for (long i : lst) {\n        if (i < min) {\n            result.push_back(min);\n\
    \            min = i;\n        }\n        if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        }\n    }\n    for (long i ", "    // Your code\
    \ here\n    std::vector<long> sorted_lst;\n    long min_val = lst[0];\n    long\
    \ max_val = lst[0];\n    for (long i : lst) {\n        if (i < min_val) {\n  \
    \          min_val = i;\n        }\n        if (i > max_val) {\n            max_val\
    \ = i;\n        }\n    }\n    for (long i : lst) {\n        if (i == min_val)\
    \ {\n            sorted_lst.push_back(i);\n        }\n        if (i == max_val)\
    \ {\n            sorted_lst.push_back(i);\n        }\n    }\n    for (long i :\
    \ sorted_lst) {\n        sorted_lst.push_back(i);\n    }\n    return sorted_lst;",
  "    std::vector<long> sorted_lst;\n    long min_val = *std::min_element(lst.begin(),\
    \ lst.end());\n    long max_val = *std::max_element(lst.begin(), lst.end());\n\
    \    long mid = min_val + max_val / 2;\n    sorted_lst.push_back(min_val);\n \
    \   sorted_lst.push_back(mid);\n    sorted_lst.push_back(max_val);\n    sorted_lst.push_back(max_val);\n\
    \    sorted_lst.push_back(min_val);\n    return sorted_lst;", "    // Your code\
    \ here\n    std::vector<long> res;\n    res.reserve(lst.size());\n    long min\
    \ = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n     \
    \   if (i < min) min = i;\n        if (i > max) max = i;\n    }\n    long mid\
    \ = min + (max - min) / 2;\n    for (long i : lst) {\n        if (i < mid) res.push_back(i);\n\
    \        else if (i > mid) res.push_back(max - i);\n        else res.push_back(min);\n\
    \    }\n    return res;", "    // Your code goes here\n    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i == min) {\n            result.push_back(min);\n        } else if\
    \ (i == max) {\n            result.push_back(max);\n        } else {\n       \
    \     result.push_back(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ sorted_lst;\n    long min_val = std::numeric_limits<long>::min();\n    long\
    \ max_val = std::numeric_limits<long>::max();\n    for (auto val : lst) {\n  \
    \      if (val < min_val) {\n            sorted_lst.push_back(min_val);\n    \
    \        min_val = val;\n        } else if (val > max_val) {\n            sorted_lst.push_back(max_val);\n\
    \            max_val = val;\n        } else {\n            sorted_lst.push_back(val);\n\
    \        }\n    }\n    return sorted_lst;", "    if (lst.size() == 0) {\n    \
    \    return lst;\n    }\n    std::vector<long> sorted_lst;\n    long min_val =\
    \ *std::min_element(lst.begin(), lst.end());\n    long max_val = *std::max_element(lst.begin(),\
    \ lst.end());\n    long mid = min_val + max_val / 2;\n    sorted_lst.push_back(min_val);\n\
    \    sorted_lst.push_back(mid);\n    sorted_lst.push_back(max_val);\n    sorted_lst.push_back(max_val);\n\
    \    sorted_lst.push_back(min_val);\n    return sorted_lst;", "    // Write your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i < min) {\n           \
    \ min = i;\n        }\n        if (i > max) {\n            max = i;\n        }\n\
    \    }\n    for (long i : lst) {\n        if (i < min) {\n            min = i;\n\
    \        }\n        if (i > max) {\n            max = i;\n        }\n    }\n \
    \   for (long i : lst) {\n        if (i < min) {\n            min = i;\n     \
    \   }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n \
    \           max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i\
    \ < min) {\n            min = i;\n        }\n        if (i > max) {\n        \
    \    max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    min = i;\n        }\n        if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    for (long i : lst) {\n        if (i < min) {\n            min\
    \ = i;\n        }\n        if (i > max) {\n            max = i;\n        }\n \
    \   }\n    for (long i : lst) {\n        if (i < min) {\n            min = i;\n\
    \        }\n        if (i > max) {\n            max = i;\n        }\n    }\n \
    \   for (long i : lst) {\n        if (i < min) {\n            min = i;\n     \
    \   }\n        if (i > ", "    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    for (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    if (lst.size() == 0) {\n        return lst;\n\
    \    }\n    std::vector<long> result;\n    long min = lst[0];\n    long max =\
    \ lst[0];\n    for (long i : lst) {\n        if (i < min) {\n            min =\
    \ i;\n        }\n        if (i > max) {\n            max = i;\n        }\n   \
    \ }\n    long mid = min + (max - min) / 2;\n    long left = mid;\n    long right\
    \ = mid;\n    while (left < max) {\n        mid = (left + right) / 2;\n      \
    \  if (mid < min) {\n            right = mid;\n        } else {\n            left\
    \ = mid + 1;\n        }\n    }\n    long temp = left;\n    left = min;\n    right\
    \ = mid;\n    while (right < max) {\n        mid = (left + right) / 2;\n     \
    \   if (mid < min) {\n            right = mid;\n        } else {\n           \
    \ left = mid + 1;\n        }\n    }\n    long temp2 = right;\n    right = max;\n\
    \    left = mid;\n    while (left < max) {\n        mid = (left + right) / 2;\n\
    \        if (mid < min) {\n            right = mid;\n        } else {\n      \
    \      left = mid + 1;\n        }\n    }\n    long temp3 = left;\n    left = min;\n\
    \    right = mid;\n    while (right < max) {\n        mid = (left + right) / 2;\n\
    \        if (mid < min) {\n            right = mid;\n        } else {\n      \
    \      left = mid + 1;\n        }\n    }\n    result.push_back(temp);\n    result.push_back(temp2);\n\
    \    result.push_back(temp3);\n    return result;", "    std::vector<long> res;\n\
    \    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;", "    // Your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i == min) {\n          \
    \  result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> res;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        } else if (i > max) {\n            max = i;\n       \
    \ }\n    }\n    for (long i : lst) {\n        if (i == min) {\n            res.push_back(min);\n\
    \        } else if (i == max) {\n            res.push_back(max);\n        } else\
    \ {\n            res.push_back(i);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;", "    std::vector<long>\
    \ lst2;\n    long min;\n    long max;\n    long temp;\n    for (long i = 0; i\
    \ < lst.size(); i++) {\n        min = lst[i];\n        max = lst[i];\n       \
    \ for (long j = i + 1; j < lst.size(); j++) {\n            if (lst[j] < min) {\n\
    \                min = lst[j];\n            }\n            if (lst[j] > max) {\n\
    \                max = lst[j];\n            }\n        }\n        temp = min;\n\
    \        min = max;\n        max = temp;\n        lst2.push_back(min);\n     \
    \   lst2.push_back(max);\n    }\n    return lst2;", "    std::vector<long> sorted_lst;\n\
    \    long min_val = *std::min_element(lst.begin(), lst.end());\n    long max_val\
    \ = *std::max_element(lst.begin(), lst.end());\n    for (long i = min_val; i <=\
    \ max_val; i++) {\n        sorted_lst.push_back(i);\n    }\n    return sorted_lst;",
  "    // Your code here\n    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;", "    // Write your code here\n   \
    \ std::vector<long> result;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            result.push_back(min);\n\
    \            min = i;\n        } else if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        } else {\n            result.push_back(i);\n  \
    \      }\n    }\n    return result;", "    if (lst.size() == 0) {\n        return\
    \ lst;\n    }\n    std::vector<long> result;\n    long min = lst[0];\n    long\
    \ max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n          \
    \  min = i;\n        }\n        if (i > max) {\n            max = i;\n       \
    \ }\n    }\n    long mid = min + (max - min) / 2;\n    long left = mid;\n    long\
    \ right = mid;\n    while (left < max) {\n        mid = left + (right - left)\
    \ / 2;\n        if (mid > max) {\n            right = mid;\n        } else {\n\
    \            left = mid;\n        }\n    }\n    long temp = left;\n    left =\
    \ min;\n    right = max;\n    while (left < right) {\n        long mid = left\
    \ + (right - left) / 2;\n        if (mid > max) {\n            right = mid;\n\
    \        } else {\n            left = mid;\n        }\n    }\n    result.push_back(temp);\n\
    \    temp = right;\n    left = min;\n    right = max;\n    while (left < right)\
    \ {\n        long mid = left + (right - left) / 2;\n        if (mid < min) {\n\
    \            left = mid;\n        } else {\n            right = mid;\n       \
    \ }\n    }\n    result.push_back(temp);\n    return result;", "    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (auto i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;", "    // Write\
    \ your code here\n    std::vector<long> res;\n    long min = lst.front();\n  \
    \  long max = lst.back();\n    long mid;\n    long temp;\n    for (long i = 0;\
    \ i < lst.size(); i++) {\n        mid = (min + max) / 2;\n        temp = lst[i];\n\
    \        if (temp < mid) {\n            min = mid;\n        } else {\n       \
    \     max = mid;\n        }\n        res.push_back(temp);\n    }\n    return res;",
  "    std::vector<long> res;\n    res.reserve(lst.size());\n    for (long i : lst)\
    \ {\n        res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n\
    \    return res;", "    // Write your code here\n    std::vector<long> lst2;\n\
    \    for(long i=0;i<lst.size();i++){\n        for(long j=i+1;j<lst.size();j++){\n\
    \            if(lst[i]>lst[j]){\n                long temp=lst[i];\n         \
    \       lst[i]=lst[j];\n                lst[j]=temp;\n            }\n        }\n\
    \    }\n    return lst2;", "    // Your code goes here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;", "    if\
    \ (lst.size() == 0)\n        return lst;\n    std::vector<long> sorted_lst;\n\
    \    long min_val = lst[0];\n    long max_val = lst[0];\n    for (long i : lst)\
    \ {\n        if (i < min_val)\n            min_val = i;\n        if (i > max_val)\n\
    \            max_val = i;\n    }\n    long mid = min_val;\n    long left_index\
    \ = 0, right_index = lst.size() - 1;\n    while (left_index < right_index) {\n\
    \        while (left_index < right_index && lst[left_index] <= mid)\n        \
    \    left_index++;\n        while (left_index < right_index && lst[right_index]\
    \ > mid)\n            right_index--;\n        if (left_index < right_index) {\n\
    \            long temp = lst[left_index];\n            lst[left_index] = lst[right_index];\n\
    \            lst[right_index] = temp;\n        }\n    }\n    sorted_lst.insert(sorted_lst.end(),\
    \ lst.begin() + left_index, lst.begin() + right_index);\n    return sorted_lst;",
  "    std::vector<long> result;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i == min) {\n            result.push_back(min);\n\
    \        } else if (i == max) {\n            result.push_back(max);\n        }\
    \ else {\n            result.push_back(i);\n        }\n    }\n    return result;",
  "    std::vector<long> lst2;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    long mid;\n    for (long i = 0; i < lst.size(); i++) {\n        mid = (min\
    \ + max) / 2;\n        if (lst[i] < mid) {\n            min = mid;\n        }\
    \ else {\n            max = mid;\n        }\n    }\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        mid = (min + max) / 2;\n        if (lst[i] < mid) {\n      \
    \      lst2.push_back(mid);\n            lst2.push_back(lst[i]);\n        } else\
    \ {\n            lst2.push_back(lst[i]);\n            lst2.push_back(mid);\n \
    \       }\n    }\n    return lst2;", "    std::vector<long> result;\n    long\
    \ min = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i == min) {\n            result.push_back(min);\n        } else if (i ==\
    \ max) {\n            result.push_back(max);\n        } else {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    for (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> result;\n    long min\
    \ = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n     \
    \   if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i == min) {\n            result.push_back(min);\n        } else if (i == max)\
    \ {\n            result.push_back(max);\n        } else {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    // Your code here\n    std::vector<long>\
    \ result;\n    long minValue = *std::min_element(lst.begin(), lst.end());\n  \
    \  long maxValue = *std::max_element(lst.begin(), lst.end());\n    for (long i\
    \ : lst) {\n        if (i < minValue) {\n            result.push_back(minValue);\n\
    \        } else if (i > maxValue) {\n            result.push_back(maxValue);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;", "    // Your code here\n    std::vector<long> res;\n    long minv\
    \ = std::numeric_limits<long>::min();\n    long maxv = std::numeric_limits<long>::max();\n\
    \    long minn = std::numeric_limits<long>::min();\n    long maxn = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < minv) minv = i;\n        if (i > maxv)\
    \ maxv = i;\n        if (i < minn) minn = i;\n        if (i > maxn) maxn = i;\n\
    \    }\n    long mid = minv + maxv / 2;\n    long midn = minn + maxn / 2;\n  \
    \  long midv = minv + maxv / 2;\n    long midn = minn + maxn / 2;\n    for (long\
    \ i : lst) {\n        if (i < midv) midv = i;\n        if (i > midv) midv = i;\n\
    \        if (i < midn) midn = i;\n        if (i > midn) midn = i;\n    }\n   \
    \ for (long i : lst) {\n        if (i < midv) midv = i;\n        if (i > midv)\
    \ midv = i;\n        if (i < midn) midn = i;\n        if (i > midn) midn = i;\n\
    \    }\n    for (long i : lst) {\n        if (i < midv) midv = i;\n        if\
    \ (i > midv) midv = i;\n        if (i < midn) midn = i;\n        if (i > midn)\
    \ midn = i;\n    }\n    for (long i : lst) {\n        if (i < midv) midv = i;\n\
    \        if (i > midv) midv = i;\n        if (i < midn) midn = i;\n        if\
    \ (i > midn) midn = i;\n    }\n    for (long i : lst) {\n        if (i < midv)\
    \ midv = i;\n        if (i > midv) midv = i;\n        if (i < midn) midn = i;\n\
    \        if (i > midn) midn = i;\n    }\n    for (long i : lst) {\n        if\
    \ (i < midv) midv = i;\n        if (i > midv) midv = i;\n        if (i < midn)\
    \ midn = i;\n        if (i > midn) midn = i;\n    }\n    for (long i : lst) {\n\
    \        if (i < midv) midv = i;\n        if (i > midv) midv = i;\n        if\
    \ (i < midn) midn = i;\n        if (i > midn) midn = i;\n    }\n    for (long\
    \ i : lst) {\n        if (i < midv) midv = i;\n        if (i > midv) midv = i;\n\
    \        if (i < midn) midn = i;\n        if (i > midn) midn = i;\n", "    //\
    \ Your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        } else if (i > max) {\n            max = i;\n       \
    \ }\n    }\n    long mid = min + (max - min) / 2;\n    for (long i : lst) {\n\
    \        if (i < mid) {\n            result.push_back(i);\n        } else if (i\
    \ > mid) {\n            result.push_back(mid);\n            mid = i;\n       \
    \ } else {\n            mid = i;\n        }\n    }\n    result.push_back(mid);\n\
    \    return result;", "    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        } else if (i > max) {\n            max = i;\n \
    \       }\n    }\n    for (long i : lst) {\n        if (i < min) {\n         \
    \   res.push_back(min);\n            min = i;\n        } else if (i > max) {\n\
    \            res.push_back(max);\n            max = i;\n        } else {\n   \
    \         res.push_back(i);\n        }\n    }\n    return res;", "    // Your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        } else if (i > max) {\n            max = i;\n       \
    \ }\n    }\n    for (long i : lst) {\n        if (i == min) {\n            result.push_back(min);\n\
    \        } else if (i == max) {\n            result.push_back(max);\n        }\
    \ else {\n            result.push_back(i);\n        }\n    }\n    return result;",
  "    // Your code here\n    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    res.push_back(min);\n            min = i;\n        } else if (i > max) {\n\
    \            res.push_back(max);\n            max = i;\n        } else {\n   \
    \         res.push_back(i);\n        }\n    }\n    return res;", "    if (lst.size()\
    \ == 0) {\n        return lst;\n    }\n    std::vector<long> sorted_lst;\n   \
    \ long min_val = lst[0];\n    long max_val = lst[0];\n    for (long i : lst) {\n\
    \        if (i < min_val) {\n            min_val = i;\n        }\n        if (i\
    \ > max_val) {\n            max_val = i;\n        }\n    }\n    sorted_lst.push_back(min_val);\n\
    \    sorted_lst.push_back(max_val);\n    for (long i : lst) {\n        if (i <\
    \ min_val) {\n            sorted_lst.push_back(i);\n        }\n        if (i >\
    \ max_val) {\n            sorted_lst.push_back(i);\n        }\n    }\n    return\
    \ sorted_lst;", "    if (lst.size() == 0) {\n        return lst;\n    }\n    std::vector<long>\
    \ sorted_lst;\n    long min_val = *std::min_element(lst.begin(), lst.end());\n\
    \    long max_val = *std::max_element(lst.begin(), lst.end());\n    long mid =\
    \ min_val + max_val / 2;\n    sorted_lst.push_back(min_val);\n    sorted_lst.push_back(mid);\n\
    \    sorted_lst.push_back(max_val);\n    sorted_lst.push_back(max_val);\n    sorted_lst.push_back(min_val);\n\
    \    return sorted_lst;", "    std::vector<long> sorted_lst;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    sorted_lst.push_back(min);\n    sorted_lst.push_back(max);\n\
    \    for (long i : lst) {\n        if (i < min) {\n            sorted_lst.push_back(min);\n\
    \        } else if (i > max) {\n            sorted_lst.push_back(max);\n     \
    \   } else {\n            sorted_lst.push_back(i);\n        }\n    }\n    return\
    \ sorted_lst;", "    // Your code here\n    std::vector<long> res;\n    long min\
    \ = lst.front();\n    long max = lst.back();\n    for(long i : lst) {\n      \
    \  if(i<min) min=i;\n        if(i>max) max=i;\n    }\n    for(long i : lst) {\n\
    \        if(min>i) res.push_back(min);\n        if(max<i) res.push_back(max);\n\
    \        if(min<max) res.push_back(i);\n    }\n    return res;", "    if (lst.size()\
    \ == 0) {\n        return lst;\n    }\n    std::vector<long> lst2 = lst;\n   \
    \ std::sort(lst2.begin(), lst2.end(), [](long a, long b) { return a < b; });\n\
    \    return lst2;", "    if (lst.size() == 0) {\n        return lst;\n    }\n\
    \    std::vector<long> lst2;\n    long min = lst[0];\n    long max = lst[0];\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    long\
    \ mid = min + (max - min) / 2;\n    lst2.push_back(min);\n    lst2.push_back(max);\n\
    \    lst2.push_back(mid);\n    lst2.push_back(min);\n    return strange_sort_list(lst2);",
  "    // Your code here\n    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        } else if (i > max) {\n            max = i;\n \
    \       }\n    }\n    for (long i : lst) {\n        if (i < min) {\n         \
    \   res.push_back(min);\n            min = i;\n        } else if (i > max) {\n\
    \            res.push_back(max);\n            max = i;\n        } else {\n   \
    \         res.push_back(i);\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n\
    \    return res;", "    if (lst.size() == 0)\n        return lst;\n    std::vector<long>\
    \ lst2 = lst;\n    std::sort(lst2.begin(), lst2.end(), [](long a, long b){return\
    \ a<b;});\n    return lst2;", "    // Your code here\n    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i == min) {\n            result.push_back(min);\n        } else if\
    \ (i == max) {\n            result.push_back(max);\n        } else {\n       \
    \     result.push_back(i);\n        }\n    }\n    return result;", "    // Your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i < min) {\n           \
    \ min = i;\n        }\n        if (i > max) {\n            max = i;\n        }\n\
    \    }\n    for (long i : lst) {\n        if (i < min) {\n            min = i;\n\
    \        }\n        if (i > max) {\n            max = i;\n        }\n    }\n \
    \   for (long i : lst) {\n        if (i < min) {\n            min = i;\n     \
    \   }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n \
    \           max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i\
    \ < min) {\n            min = i;\n        }\n        if (i > max) {\n        \
    \    max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    min = i;\n        }\n        if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    for (long i : lst) {\n        if (i < min) {\n            min\
    \ = i;\n        }\n        if (i > max) {\n            max = i;\n        }\n \
    \   }\n    for (long i : lst) {\n        if (i < min) {\n            min = i;\n\
    \        }\n        if (i > max) {\n            max = i;\n        }\n    }\n \
    \   for (long i : lst) {\n        if (i < min) {\n            min = i;\n     \
    \   }\n        if (i > ", "    if (lst.size() == 0)\n        return lst;\n   \
    \ std::vector<long> ret(lst);\n    std::sort(ret.begin(), ret.end());\n    return\
    \ ret;", "    std::vector<long> res;\n    res.reserve(lst.size());\n    for (long\
    \ i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n\
    \    return res;", "    std::vector<long> result;\n    long min = lst[0];\n  \
    \  long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n    \
    \        min = i;\n        }\n        if (i > max) {\n            max = i;\n \
    \       }\n    }\n    for (long i : lst) {\n        if (i == min) {\n        \
    \    result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;", "    // Your code here\n    std::vector<long> result;\n    long min\
    \ = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n     \
    \   if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i < min) {\n            result.push_back(min);\n        } else if (i > max)\
    \ {\n            result.push_back(max);\n        } else {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    // Write your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;", "    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;", "    // Your\
    \ code here\n    std::vector<long> res;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i == min) {\n            res.push_back(i);\n       \
    \ }\n        if (i == max) {\n            res.push_back(i);\n        }\n    }\n\
    \    return res;", "    // Your code here\n    std::vector<long> result;\n   \
    \ long min = lst.front();\n    long max = lst.back();\n    for(long i : lst) {\n\
    \        if(i<min) {\n            min = i;\n        }\n        if(i>max) {\n \
    \           max = i;\n        }\n    }\n    for(long i : lst) {\n        if(i<min)\
    \ {\n            min--;\n        }\n        if(i>max) {\n            max++;\n\
    \        }\n        result.push_back(i);\n    }\n    for(long i = min; i<=max;\
    \ i++) {\n        result.push_back(i);\n    }\n    return result;", "    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;", "    std::vector<long>\
    \ lst2;\n    long min = lst.front();\n    long max = lst.back();\n    long mid;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        mid = (min + max) / 2;\n\
    \        if (lst[i] < mid) {\n            min = mid;\n        } else {\n     \
    \       max = mid;\n        }\n    }\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        lst2.push_back(lst[i]);\n    }\n    lst2.push_back(min);\n    lst2.push_back(max);\n\
    \    return lst2;", "    // Your code here\n    std::vector<long> lst2;\n    for(long\
    \ i=0;i<lst.size();i++){\n        for(long j=i+1;j<lst.size();j++){\n        \
    \    if(lst[i]>lst[j]){\n                long temp = lst[i];\n               \
    \ lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n\
    \    }\n    return lst2;", "    std::vector<long> lst2;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    lst2.push_back(min);\n    lst2.push_back(max);\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            lst2.push_back(i);\n \
    \       }\n        if (i > max) {\n            lst2.push_back(i);\n        }\n\
    \    }\n    return lst2;", "    // Write your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ lst2(lst.size());\n    for (long i = 0; i < lst.size(); i++) {\n        long\
    \ j = i;\n        while (j > 0 && lst[j - 1] > lst[j]) {\n            lst2[j]\
    \ = lst[j - 1];\n            j--;\n        }\n        lst2[j] = lst[j];\n    }\n\
    \    return lst2;", "    std::vector<long> res;\n    if (lst.size() == 0) {\n\
    \        return res;\n    }\n    long min = lst[0];\n    long max = lst[0];\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i == max) {\n\
    \            res.push_back(min);\n        } else if (i == min) {\n           \
    \ res.push_back(max);\n        } else {\n            res.push_back(i);\n     \
    \   }\n    }\n    return res;", "    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    for (auto i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    // Your code here\n    std::vector<long>\
    \ res;\n    long min;\n    long max;\n    long mid;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        min = max = lst[i];\n        mid = lst[i];\n   \
    \     for (long j = i + 1; j < lst.size(); j++) {\n            if (lst[j] < mid)\
    \ {\n                mid = lst[j];\n                min = lst[i];\n          \
    \      max = lst[j];\n            }\n        }\n        res.push_back(min);\n\
    \        res.push_back(max);\n        res.push_back(mid);\n    }\n    return res;",
  "    std::vector<long> result;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    long\
    \ mid = min + (max - min) / 2;\n    for (long i : lst) {\n        if (i < mid)\
    \ {\n            result.push_back(i);\n        } else if (i > mid) {\n       \
    \     result.push_back(max - i);\n        } else {\n            result.push_back(min);\n\
    \        }\n    }\n    return result;", "    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    long mid;\n\
    \    for (long i = lst.size() - 1; i >= 0; i--) {\n        mid = (min + max) /\
    \ 2;\n        if (mid > lst[i]) {\n            max = mid;\n        } else {\n\
    \            min = mid;\n        }\n    }\n    for (long i = lst.size() - 1; i\
    \ >= 0; i--) {\n        mid = (min + max) / 2;\n        if (mid > lst[i]) {\n\
    \            max = mid;\n        } else {\n            min = mid;\n        }\n\
    \    }\n    for (long i = lst.size() - 1; i >= 0; i--) {\n        mid = (min +\
    \ max) / 2;\n        if (mid > lst[i]) {\n            max = mid;\n        } else\
    \ {\n            min = mid;\n        }\n    }\n    for (long i = lst.size() -\
    \ 1; i >= 0; i--) {\n        mid = (min + max) / 2;\n        if (mid > lst[i])\
    \ {\n            max = mid;\n        } else {\n            min = mid;\n      \
    \  }\n    }\n    for (long i = lst.size() - 1; i >= 0; i--) {\n        mid = (min\
    \ + max) / 2;\n        if (mid > lst[i]) {\n            max = mid;\n        }\
    \ else {\n            min = mid;\n        }\n    }\n    for (long i = lst.size()\
    \ - 1; i >= 0; i--) {\n        mid = (min + max) / 2;\n        if (mid > lst[i])\
    \ {\n            max = mid;\n        } else {\n            min = mid;\n      \
    \  }\n    }\n    for (long i = lst.size() - 1; i >= 0; i--) {\n        mid = (min\
    \ + max) / 2;\n        if (mid > lst[i]) {\n            max = mid;\n        }\
    \ else {\n            min = mid;\n        }\n    }\n    for (long i = lst.size()\
    \ - 1; i >= 0; i--) {\n        mid = (min + max) / 2;\n        if (mid > lst[i])\
    \ {\n            max = mid;\n        } else {\n            min = mid;\n      \
    \  }\n    }\n    for (long i = lst.size() - 1; i >= 0; i--) {\n        mid = (min\
    \ + max) / 2;\n        if (mid > lst[i]) {\n            max = mid;\n        }\
    \ else {\n            min = mid;\n        }\n    }\n    for (long i = lst.size()\
    \ - 1; i >= 0; i--) {\n        mid = (min + max) / 2;\n        if (mid > lst[i])\
    \ {\n            max = mid;\n        } else {\n            min = mid;\n      \
    \  }\n    }\n    for (long i = lst.size() - 1; i >= 0; i--) {\n        mid = (min\
    \ + max", "    std::vector<long> res;\n    long min = lst.front();\n    long max\
    \ = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n          \
    \  min = i;\n        }\n        if (i > max) {\n            max = i;\n       \
    \ }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long i\
    \ : lst) {\n        if (i < min) {\n            min = i;\n        }\n        if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;", "    if (lst.size() == 0) {\n    \
    \    return lst;\n    }\n    std::vector<long> res;\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n  \
    \          min = i;\n        } else if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    long mid = min + (max - min) / 2;\n    res.push_back(min);\n\
    \    res.push_back(mid);\n    res.push_back(max);\n    return res;", "    if (lst.size()\
    \ == 0)\n        return lst;\n    std::vector<long> res;\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst)\n        if (i < min)\n      \
    \      min = i;\n        else if (i > max)\n            max = i;\n    long mid\
    \ = min + (max - min) / 2;\n    long left = mid;\n    long right = mid;\n    while\
    \ (left < max) {\n        long tmp = left;\n        left = right;\n        right\
    \ = tmp;\n        long mid = left + (right - left) / 2;\n        if (mid < min)\n\
    \            right = mid;\n        else if (mid > max)\n            left = mid;\n\
    \        else\n            res.push_back(mid);\n    }\n    return res;", "   \
    \ std::vector<long> result;\n    long minval = lst.front();\n    long maxval =\
    \ lst.back();\n    for (long i : lst) {\n        if (i < minval) {\n         \
    \   result.push_back(minval);\n            minval = i;\n        } else if (i >\
    \ maxval) {\n            result.push_back(maxval);\n            maxval = i;\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    if\
    \ (minval != maxval) {\n        result.push_back(minval);\n        result.push_back(maxval);\n\
    \    }\n    return result;", "    if (lst.size() == 0) {\n        return lst;\n\
    \    }\n    std::vector<long> res;\n    long minval = *std::min_element(lst.begin(),\
    \ lst.end());\n    long maxval = *std::max_element(lst.begin(), lst.end());\n\
    \    long midval = minval + maxval / 2;\n    long midval2 = minval + maxval /\
    \ 2;\n    long midval3 = minval + maxval / 2;\n    long midval4 = minval + maxval\
    \ / 2;\n    long midval5 = minval + maxval / 2;\n    long midval6 = minval + maxval\
    \ / 2;\n    long midval7 = minval + maxval / 2;\n    long midval8 = minval + maxval\
    \ / 2;\n    long midval9 = minval + maxval / 2;\n    long midval10 = minval +\
    \ maxval / 2;\n    long midval11 = minval + maxval / 2;\n    long midval12 = minval\
    \ + maxval / 2;\n    long midval13 = minval + maxval / 2;\n    long midval14 =\
    \ minval + maxval / 2;\n    long midval15 = minval + maxval / 2;\n    long midval16\
    \ = minval + maxval / 2;\n    long midval17 = minval + maxval / 2;\n    long midval18\
    \ = minval + maxval / 2;\n    long midval19 = minval + maxval / 2;\n    long midval20\
    \ = minval + maxval / 2;\n    long midval21 = minval + maxval / 2;\n    long midval22\
    \ = minval + maxval / 2;\n    long midval23 = minval + maxval / 2;\n    long midval24\
    \ = minval + maxval / 2;\n    long midval25 = minval + maxval / 2;\n    long midval26\
    \ = minval + maxval / 2;\n    long midval27 = minval + maxval / 2;\n    long midval28\
    \ = minval + maxval / 2;\n    long midval29 = minval + maxval / 2;\n    long midval30\
    \ = minval + maxval / 2;\n    long midval31 = minval + maxval / 2;\n    long midval32\
    \ = minval + maxval / 2;\n    long midval33 = minval + maxval / 2;\n    long midval34\
    \ = minval + max", "    std::vector<long> sorted_lst;\n    long min_val = lst[0];\n\
    \    long max_val = lst[0];\n    for (long i : lst) {\n        if (i < min_val)\
    \ {\n            min_val = i;\n        } else if (i > max_val) {\n           \
    \ max_val = i;\n        }\n    }\n    long mid = (max_val + min_val) / 2;\n  \
    \  sorted_lst.push_back(min_val);\n    sorted_lst.push_back(mid);\n    sorted_lst.push_back(max_val);\n\
    \    return sorted_lst;", "    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     res.push_back(min);\n        } else if (i == max) {\n            res.push_back(max);\n\
    \        } else {\n            res.push_back(i);\n        }\n    }\n    return\
    \ res;", "    // Your code here\n    std::vector<long> lst2;\n    long minval\
    \ = lst[0];\n    long maxval = lst[0];\n    for (long i : lst) {\n        if (i\
    \ < minval) {\n            minval = i;\n        } else if (i > maxval) {\n   \
    \         maxval = i;\n        }\n    }\n    long midval = (minval + maxval) /\
    \ 2;\n    for (long i : lst) {\n        if (i < midval) {\n            lst2.push_back(minval);\n\
    \            lst2.push_back(maxval);\n            lst2.push_back(i);\n       \
    \     lst2.push_back(midval);\n        } else if (i > midval) {\n            lst2.push_back(i);\n\
    \            lst2.push_back(midval);\n            lst2.push_back(maxval);\n  \
    \          lst2.push_back(minval);\n        } else {\n            lst2.push_back(i);\n\
    \        }\n    }\n    return lst2;", "    std::vector<long> result;\n    long\
    \ min = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        } else if (i > max) {\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i < min) {\n            result.push_back(min);\n            min = i;\n    \
    \    } else if (i > max) {\n            result.push_back(max);\n            max\
    \ = i;\n        } else {\n            result.push_back(i);\n        }\n    }\n\
    \    return result;", "    // Write your code here\n    std::vector<long> res;\n\
    \    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;", "    std::vector<long>\
    \ result;\n    long minValue = *std::min_element(lst.begin(), lst.end());\n  \
    \  long maxValue = *std::max_element(lst.begin(), lst.end());\n    for (long i\
    \ = minValue; i <= maxValue; i++) {\n        long index = lst.size();\n      \
    \  while (index > 0) {\n            if (lst[index - 1] > i) {\n              \
    \  long temp = lst[index - 1];\n                lst[index - 1] = i;\n        \
    \        lst[index] = temp;\n                index--;\n            } else {\n\
    \                break;\n            }\n        }\n        result.push_back(i);\n\
    \    }\n    return result;", "    std::vector<long> lst2;\n    long minval = lst[0];\n\
    \    long maxval = lst[0];\n    for (long i : lst) {\n        if (i < minval)\
    \ {\n            minval = i;\n        } else if (i > maxval) {\n            maxval\
    \ = i;\n        }\n    }\n    long midval = minval;\n    while (midval < maxval)\
    \ {\n        long midval2 = midval;\n        long midval3 = midval;\n        while\
    \ (midval2 < maxval) {\n            long midval4 = midval2;\n            long\
    \ midval5 = midval3;\n            while (midval4 < maxval) {\n               \
    \ long midval6 = midval4;\n                long midval7 = midval5;\n         \
    \       while (midval6 < maxval) {\n                    long midval8 = midval6;\n\
    \                    long midval9 = midval7;\n                    while (midval8\
    \ < maxval) {\n                        long midval10 = midval8;\n            \
    \            long midval11 = midval9;\n                        while (midval10\
    \ < maxval) {\n                            long midval12 = midval10;\n       \
    \                     long midval13 = midval11;\n                            while\
    \ (midval12 < maxval) {\n                                long midval14 = midval12;\n\
    \                                long midval15 = midval13;\n                 \
    \               while (midval14 < maxval) {\n                                \
    \    long midval16 = midval14;\n                                    long midval17\
    \ = midval15;\n                                    while (midval16 < maxval) {\n\
    \                                        long midval18 = midval16;\n         \
    \                               long midval19 = midval17;\n                  \
    \                      while (midval18 < maxval) {\n                         \
    \                   long midval20 = midval18;\n                              \
    \              long midval21 = midval19;\n                                   \
    \         while (midval20 < maxval) {\n                                      \
    \          long midval22 = midval20;\n                                       \
    \         long midval23 = midval21;\n                                        \
    \        while (midval22 < maxval) {\n                                       \
    \             long midval24 = midval22;\n                                    \
    \                long midval25 = midval23;\n                                 \
    \                   while (midval24 < maxval) {\n                            \
    \                            long midval26 = midval24;\n                     \
    \                                   long midval27 = midval25;\n              \
    \                                          while (midval26 < maxval) {\n     \
    \                                                       long midval28 = midval26;\n\
    \                                                            long midval29 = midval27;\n\
    \                                                            while (midval28 <\
    \ maxval) {\n                                                                long\
    \ midval30 = midval28;\n                                                     \
    \           long midval31 = midval29;\n                                      \
    \                          while (midval30 < maxval) {\n                     \
    \                                               long midval32 = midval30;\n  \
    \                                                                  long ", " \
    \   std::vector<long> lst2;\n    long min = lst[0];\n    long max = lst[0];\n\
    \    for (long i : lst) {\n        if (i < min) min = i;\n        if (i > max)\
    \ max = i;\n    }\n    lst2.push_back(min);\n    lst2.push_back(max);\n    for\
    \ (long i : lst) {\n        if (i < min || i > max) continue;\n        lst2.push_back(i);\n\
    \    }\n    return lst2;", "    std::vector<long> sorted_lst;\n    long min =\
    \ lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n       \
    \ if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n  \
    \          max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i\
    \ == min) {\n            sorted_lst.push_back(min);\n        } else if (i == max)\
    \ {\n            sorted_lst.push_back(max);\n        } else {\n            sorted_lst.push_back(i);\n\
    \        }\n    }\n    return sorted_lst;", "    std::vector<long> res;\n    long\
    \ min = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        } else if (i > max) {\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i < min) {\n            res.push_back(min);\n            min = i;\n       \
    \ } else if (i > max) {\n            res.push_back(max);\n            max = i;\n\
    \        } else {\n            res.push_back(i);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    long mid = min + (max - min) / 2;\n    long left = mid;\n\
    \    long right = mid;\n    while (left < max) {\n        mid = (left + right)\
    \ / 2;\n        if (mid < min) {\n            right = mid;\n        } else {\n\
    \            left = mid;\n        }\n    }\n    long temp = left;\n    left =\
    \ min;\n    right = mid;\n    while (left < right) {\n        mid = (left + right)\
    \ / 2;\n        if (mid < min) {\n            right = mid;\n        } else {\n\
    \            left = mid;\n        }\n    }\n    while (temp < right) {\n     \
    \   mid = (left + right) / 2;\n        if (mid < min) {\n            right = mid;\n\
    \        } else {\n            temp = mid;\n        }\n    }\n    while (left\
    \ < right) {\n        mid = (left + right) / 2;\n        if (mid < min) {\n  \
    \          right = mid;\n        } else {\n            left = mid;\n        }\n\
    \    }\n    while (left < right) {\n        mid = (left + right) / 2;\n      \
    \  if (mid < min) {\n            right = mid;\n        } else {\n            temp\
    \ = mid;\n        }\n    }\n    while (left < right) {\n        mid = (left +\
    \ right) / 2;\n        if (mid < min) {\n            right = mid;\n        } else\
    \ {\n            left = mid;\n        }\n    }\n    while (left < right) {\n \
    \       mid = (left + right) / 2;\n        if (mid < min) {\n            right\
    \ = mid;\n        } else {\n            temp = mid;\n        }\n    }\n    while\
    \ (left < right) {\n        mid = (left + right) / 2;\n        if (mid < min)\
    \ {\n            right = mid;\n        } else {\n            left = mid;\n   \
    \     }\n    }\n    while (left < right) {\n        mid = (left + right) / 2;\n\
    \        if (mid < min) {\n            right = mid;\n        } else {\n      \
    \      temp = mid;\n        }\n    }\n    while (left < right) {\n        mid\
    \ = (left + right) / 2;\n        if (mid < min) {\n            right = mid;\n\
    \        } else {\n            left = mid;\n        }\n    }\n    while (left\
    \ < right) {\n        mid = (left + right) / 2;\n        if (mid < min) {\n  \
    \          right = mid;\n        } else {\n            temp = mid;\n        }\n\
    \    }\n    while (left < right) {\n        mid = (left + right) / 2;\n", "  \
    \  // Your code here\n    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    for (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> result;\n    long min\
    \ = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n     \
    \   if (i < min) {\n            min = i;\n        } else if (i > max) {\n    \
    \        max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i ==\
    \ min) {\n            result.push_back(min);\n        } else if (i == max) {\n\
    \            result.push_back(max);\n        } else {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            result.push_back(min);\n            min\
    \ = i;\n        }\n        if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        }\n    }\n    if (min != max) {\n        result.push_back(min);\n\
    \        result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i = min;\
    \ i <= max; i++) {\n        result.push_back(i);\n    }\n    return result;",
  "    std::vector<long> res;\n    long minval = std::numeric_limits<long>::min();\n\
    \    long maxval = std::numeric_limits<long>::max();\n    for (auto i : lst) {\n\
    \        if (i < minval) {\n            minval = i;\n        }\n        if (i\
    \ > maxval) {\n            maxval = i;\n        }\n    }\n    for (auto i : lst)\
    \ {\n        if (i < minval) {\n            res.push_back(minval);\n        }\
    \ else if (i > maxval) {\n            res.push_back(maxval);\n        } else {\n\
    \            res.push_back(i);\n        }\n    }\n    return res;", "    if (lst.size()\
    \ == 0)\n        return lst;\n    std::vector<long> result;\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst)\n        if (i < min)\n      \
    \      min = i;\n        else if (i > max)\n            max = i;\n    long mid\
    \ = min + (max - min) / 2;\n    for (long i : lst)\n        if (i < mid)\n   \
    \         result.push_back(i);\n        else if (i > mid)\n            result.push_back(mid);\n\
    \        else\n            result.push_back(mid);\n    result.push_back(max);\n\
    \    result.push_back(mid);\n    result.push_back(min);\n    return result;",
  "    // Your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        } else if (i > max) {\n            max = i;\n \
    \       }\n    }\n    for (long i : lst) {\n        if (i < min) {\n         \
    \   result.push_back(min);\n            min = i;\n        } else if (i > max)\
    \ {\n            result.push_back(max);\n            max = i;\n        } else\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;",
  "    if (lst.empty()) return lst;\n    std::vector<long> res(lst);\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    for (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;", "    // Write your code here\n   \
    \ std::vector<long> result;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    long\
    \ mid = min + (max - min) / 2;\n    for (long i : lst) {\n        if (i < mid)\
    \ {\n            result.push_back(i);\n        } else if (i > mid) {\n       \
    \     result.push_back(max - i);\n        } else {\n            result.push_back(min);\n\
    \        }\n    }\n    return result;", "    std::vector<long> lst2;\n    long\
    \ min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n        if\
    \ (i < min) min = i;\n        if (i > max) max = i;\n    }\n    for (long i :\
    \ lst) {\n        if (i == min) {\n            lst2.push_back(min);\n        }\
    \ else if (i == max) {\n            lst2.push_back(max);\n        } else {\n \
    \           lst2.push_back(i);\n        }\n    }\n    return lst2;", "    // Your\
    \ code here\n    std::vector<long> result;\n    long minval = std::numeric_limits<long>::max();\n\
    \    long maxval = std::numeric_limits<long>::min();\n    for (long i : lst) {\n\
    \        if (i < minval) {\n            minval = i;\n        }\n        if (i\
    \ > maxval) {\n            maxval = i;\n        }\n    }\n    long midval = (minval\
    \ + maxval) / 2;\n    long midval2 = midval - 1;\n    long midval3 = midval +\
    \ 1;\n    long midval4 = midval - 2;\n    long midval5 = midval + 2;\n    long\
    \ midval6 = midval - 3;\n    long midval7 = midval + 3;\n    long midval8 = midval\
    \ - 4;\n    long midval9 = midval + 4;\n    long midval10 = midval - 5;\n    long\
    \ midval11 = midval + 5;\n    long midval12 = midval - 6;\n    long midval13 =\
    \ midval + 6;\n    long midval14 = midval - 7;\n    long midval15 = midval + 7;\n\
    \    long midval16 = midval - 8;\n    long midval17 = midval + 8;\n    long midval18\
    \ = midval - 9;\n    long midval19 = midval + 9;\n    long midval20 = midval -\
    \ 10;\n    long midval21 = midval + 10;\n    long midval22 = midval - 11;\n  \
    \  long midval23 = midval + 11;\n    long midval24 = midval - 12;\n    long midval25\
    \ = midval + 12;\n    long midval26 = midval - 13;\n    long midval27 = midval\
    \ + 13;\n    long midval28 = midval - 14;\n    long midval29 = midval + 14;\n\
    \    long midval30 = midval - 15;\n    long midval31 = midval + 15;\n    long\
    \ midval32 = midval - 16;\n    long midval33 = midval + 16;\n    long midval34\
    \ = midval - 17;\n    long midval35 = midval + 17;\n    long midval36 = midval\
    \ - 18;\n    long midval37 = midval + 18;\n    long midval38 = midval - 19;\n\
    \    long midval39 = midval + 19;\n    long midval40 = midval - 20;\n    long\
    \ midval41 = mid", "    if (lst.size() == 0) {\n        return lst;\n    }\n \
    \   std::vector<long> sorted_lst;\n    long min_val = lst[0];\n    long max_val\
    \ = lst[0];\n    for (long i : lst) {\n        if (i < min_val) {\n          \
    \  min_val = i;\n        }\n        if (i > max_val) {\n            max_val =\
    \ i;\n        }\n    }\n    long mid = (max_val + min_val) / 2;\n    sorted_lst.push_back(min_val);\n\
    \    sorted_lst.push_back(mid);\n    sorted_lst.push_back(max_val);\n    return\
    \ sorted_lst;", "    std::vector<long> res;\n    long min = lst.front();\n   \
    \ long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        } else if (i > max) {\n            max = i;\n  \
    \      }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;", "    if (lst.size() == 0) {\n    \
    \    return lst;\n    }\n    std::vector<long> sorted_lst;\n    long min_val =\
    \ lst[0];\n    long max_val = lst[0];\n    for (long i : lst) {\n        if (i\
    \ < min_val) {\n            min_val = i;\n        }\n        if (i > max_val)\
    \ {\n            max_val = i;\n        }\n    }\n    long mid = min_val;\n   \
    \ long mid_val = max_val;\n    for (long i : lst) {\n        if (i == mid) {\n\
    \            sorted_lst.push_back(mid);\n            mid = mid_val;\n        \
    \    mid_val = i;\n        } else {\n            if (mid_val < i) {\n        \
    \        sorted_lst.push_back(mid);\n                mid = mid_val;\n        \
    \        mid_val = i;\n            } else {\n                sorted_lst.push_back(mid_val);\n\
    \                mid = i;\n                mid_val = i;\n            }\n     \
    \   }\n    }\n    sorted_lst.push_back(mid);\n    return sorted_lst;", "    //\
    \ Your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        } else if (i > max) {\n            max = i;\n \
    \       }\n    }\n    for (long i : lst) {\n        if (i < min) {\n         \
    \   result.push_back(min);\n            min = i;\n        } else if (i > max)\
    \ {\n            result.push_back(max);\n            max = i;\n        } else\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;",
  "    // Your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i < min) {\n           \
    \ result.push_back(min);\n            min = i;\n        } else if (i > max) {\n\
    \            result.push_back(max);\n            max = i;\n        } else {\n\
    \            result.push_back(i);\n        }\n    }\n    return result;", "  \
    \  std::vector<long> res;\n    res.reserve(lst.size());\n    for (long i : lst)\
    \ {\n        res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n\
    \    return res;", "    std::vector<long> lst2;\n    long minval = lst.front();\n\
    \    long maxval = lst.back();\n    for (long i : lst) {\n        if (i < minval)\
    \ {\n            minval = i;\n        }\n        if (i > maxval) {\n         \
    \   maxval = i;\n        }\n    }\n    long midval = minval + maxval / 2;\n  \
    \  long midval2 = minval + maxval / 2;\n    long midval3 = minval + maxval / 2;\n\
    \    long midval4 = minval + maxval / 2;\n    long midval5 = minval + maxval /\
    \ 2;\n    long midval6 = minval + maxval / 2;\n    long midval7 = minval + maxval\
    \ / 2;\n    long midval8 = minval + maxval / 2;\n    long midval9 = minval + maxval\
    \ / 2;\n    long midval10 = minval + maxval / 2;\n    long midval11 = minval +\
    \ maxval / 2;\n    long midval12 = minval + maxval / 2;\n    long midval13 = minval\
    \ + maxval / 2;\n    long midval14 = minval + maxval / 2;\n    long midval15 =\
    \ minval + maxval / 2;\n    long midval16 = minval + maxval / 2;\n    long midval17\
    \ = minval + maxval / 2;\n    long midval18 = minval + maxval / 2;\n    long midval19\
    \ = minval + maxval / 2;\n    long midval20 = minval + maxval / 2;\n    long midval21\
    \ = minval + maxval / 2;\n    long midval22 = minval + maxval / 2;\n    long midval23\
    \ = minval + maxval / 2;\n    long midval24 = minval + maxval / 2;\n    long midval25\
    \ = minval + maxval / 2;\n    long midval26 = minval + maxval / 2;\n    long midval27\
    \ = minval + maxval / 2;\n    long midval28 = minval + maxval / 2;\n    long midval29\
    \ = minval + maxval / 2;\n    long midval30 = minval + maxval / 2;\n    long midval31\
    \ = minval + maxval / 2;\n    long midval32 = minval + maxval / 2;\n    long midval33\
    \ = minval + maxval / 2;\n    long midval34 = ", "    // Your code goes here\n\
    \    std::vector<long> result;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n \
    \           max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i\
    \ < min) {\n            min = i;\n        }\n        if (i > max) {\n        \
    \    max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    min = i;\n        }\n        if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    for (long i : lst) {\n        if (i < min) {\n            min\
    \ = i;\n        }\n        if (i > max) {\n            max = i;\n        }\n \
    \   }\n    for (long i : lst) {\n        if (i < min) {\n            min = i;\n\
    \        }\n        if (i > max) {\n            max = i;\n        }\n    }\n \
    \   for (long i : lst) {\n        if (i < min) {\n            min = i;\n     \
    \   }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (", " \
    \   std::vector<long> res;\n    res.reserve(lst.size());\n    for (long i : lst)\
    \ {\n        res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n\
    \    return res;", "    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    for (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> sorted_lst;\n    long\
    \ min = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i == min) {\n            sorted_lst.push_back(min);\n        } else if\
    \ (i == max) {\n            sorted_lst.push_back(max);\n        } else {\n   \
    \         sorted_lst.push_back(i);\n        }\n    }\n    return sorted_lst;",
  "    std::vector<long> res;\n    res.reserve(lst.size());\n    for (long i : lst)\
    \ {\n        res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n\
    \    return res;", "    std::vector<long> lst2;\n    long min = lst[0];\n    long\
    \ max = lst[0];\n    for (long i : lst) {\n        if (i < min) min = i;\n   \
    \     if (i > max) max = i;\n    }\n    for (long i : lst) {\n        if (i ==\
    \ min) lst2.push_back(min);\n        if (i == max) lst2.push_back(max);\n    \
    \    lst2.push_back(i);\n    }\n    return lst2;", "    std::vector<long> res;\n\
    \    if (lst.size() == 0) {\n        return res;\n    }\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n  \
    \          min = i;\n        } else if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i == min) {\n            res.push_back(i);\n       \
    \ } else if (i == max) {\n            res.push_back(i);\n        } else {\n  \
    \          long j = i;\n            while (j > min && j > max) {\n           \
    \     long temp = j;\n                j = min + (j - max) / 2;\n             \
    \   res.push_back(temp);\n            }\n            res.push_back(j);\n     \
    \   }\n    }\n    return res;", "    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    for (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> sorted_lst;\n    long\
    \ min_val = *std::min_element(lst.begin(), lst.end());\n    long max_val = *std::max_element(lst.begin(),\
    \ lst.end());\n    long min_idx = lst.begin();\n    long max_idx = lst.end();\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] < min_val) {\n\
    \            min_val = lst[i];\n            min_idx = i;\n        }\n        if\
    \ (lst[i] > max_val) {\n            max_val = lst[i];\n            max_idx = i;\n\
    \        }\n    }\n    long mid = min_idx + (max_idx - min_idx) / 2;\n    long\
    \ mid_val = lst[mid];\n    long mid_pos = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] < mid_val) {\n            sorted_lst.push_back(lst[i]);\n\
    \            mid_pos = i;\n        }\n    }\n    sorted_lst.insert(sorted_lst.begin(),\
    \ lst[mid]);\n    for (long i = mid + 1; i < lst.size(); i++) {\n        sorted_lst.push_back(lst[i]);\n\
    \    }\n    return sorted_lst;", "    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        } else if (i > max) {\n            max = i;\n \
    \       }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;", "    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            result.push_back(min);\n            min\
    \ = i;\n        }\n        if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        }\n    }\n    if (min != max) {\n        result.push_back(min);\n\
    \        result.push_back(max);\n    }\n    return result;", "    // Your code\
    \ here\n    std::vector<long> lst2;\n    long min = lst.front();\n    long max\
    \ = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n          \
    \  min = i;\n        }\n        if (i > max) {\n            max = i;\n       \
    \ }\n    }\n    for (long i : lst) {\n        if (i == min) {\n            lst2.push_back(min);\n\
    \        } else if (i == max) {\n            lst2.push_back(max);\n        } else\
    \ {\n            lst2.push_back(i);\n        }\n    }\n    return lst2;", "  \
    \  std::vector<long> res;\n    res.reserve(lst.size());\n    for (long i : lst)\
    \ {\n        res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n\
    \    return res;", "    std::vector<long> sorted_lst;\n    long min_val = std::numeric_limits<long>::max();\n\
    \    long max_val = std::numeric_limits<long>::min();\n    for (auto i : lst)\
    \ {\n        min_val = std::min(min_val, i);\n        max_val = std::max(max_val,\
    \ i);\n    }\n    for (auto i : lst) {\n        sorted_lst.push_back(i);\n   \
    \ }\n    for (auto i = sorted_lst.size() - 1; i >= 0; --i) {\n        long min_val\
    \ = std::numeric_limits<long>::max();\n        long max_val = std::numeric_limits<long>::min();\n\
    \        for (auto j : sorted_lst) {\n            min_val = std::min(min_val,\
    \ j);\n            max_val = std::max(max_val, j);\n        }\n        long temp\
    \ = min_val;\n        min_val = max_val;\n        max_val = temp;\n        for\
    \ (auto j : sorted_lst) {\n            if (j == min_val) {\n                sorted_lst.insert(sorted_lst.begin()\
    \ + i, min_val);\n                break;\n            }\n        }\n    }\n  \
    \  return sorted_lst;", "    // Write your code here\n    std::vector<long> lst2;\n\
    \    for(long i=0;i<lst.size();i++){\n        for(long j=i+1;j<lst.size();j++){\n\
    \            if(lst[i]>lst[j]){\n                long temp = lst[i];\n       \
    \         lst[i] = lst[j];\n                lst[j] = temp;\n            }\n  \
    \      }\n    }\n    return lst2;", "    // Write your code here\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        } else if (i > max) {\n            max = i;\n  \
    \      }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;", "    if (lst.size() == 0) {\n        return lst;\n    }\n    std::vector<long>\
    \ sorted_lst;\n    long min_val = lst[0];\n    long max_val = lst[0];\n    for\
    \ (long val : lst) {\n        if (val < min_val) {\n            min_val = val;\n\
    \        }\n        if (val > max_val) {\n            max_val = val;\n       \
    \ }\n    }\n    long mid = min_val;\n    long left_index = 0, right_index = 0;\n\
    \    long left_index = 0, right_index = 0;\n    for (long val : lst) {\n     \
    \   if (val == mid) {\n            sorted_lst.push_back(val);\n            left_index++;\n\
    \            right_index++;\n        } else if (val < mid) {\n            sorted_lst.push_back(val);\n\
    \            left_index++;\n        } else {\n            sorted_lst.push_back(val);\n\
    \            right_index++;\n        }\n    }\n    sorted_lst.insert(sorted_lst.end(),\
    \ sorted_lst.begin() + left_index, sorted_lst.begin() + right_index);\n    return\
    \ sorted_lst;", "    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;", "    // Your code here\n    std::vector<long> res;\n    long min =\
    \ lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n       \
    \ if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n  \
    \          max = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;", "    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;", "    if\
    \ (lst.size() == 0) {\n        return lst;\n    }\n    std::vector<long> sorted_lst;\n\
    \    long min_val = *std::min_element(lst.begin(), lst.end());\n    long max_val\
    \ = *std::max_element(lst.begin(), lst.end());\n    long min_idx = lst.size()\
    \ - 1;\n    long max_idx = lst.size() - 1;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] < min_val) {\n            min_idx = i;\n        \
    \    min_val = lst[i];\n        }\n        if (lst[i] > max_val) {\n         \
    \   max_idx = i;\n            max_val = lst[i];\n        }\n    }\n    long min_val\
    \ = *std::min_element(lst.begin() + min_idx, lst.begin() + max_idx);\n    long\
    \ max_val = *std::max_element(lst.begin() + min_idx, lst.begin() + max_idx);\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] < min_val) {\n\
    \            sorted_lst.push_back(lst[i]);\n        }\n        if (lst[i] > max_val)\
    \ {\n            sorted_lst.push_back(lst[i]);\n        }\n    }\n    return sorted_lst;",
  "    std::vector<long> result;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    } else if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            result.push_back(min);\n   \
    \         min = i;\n        } else if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        } else {\n            result.push_back(i);\n  \
    \      }\n    }\n    return result;", "    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    for (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> lst2;\n    long min =\
    \ lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        } else if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    lst2.push_back(min);\n            min = i;\n        } else if (i > max) {\n\
    \            lst2.push_back(max);\n            max = i;\n        } else {\n  \
    \          lst2.push_back(i);\n        }\n    }\n    return lst2;", "    std::vector<long>\
    \ lst2;\n    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        } else if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i == min) {\n            lst2.push_back(min);\n        } else if (i ==\
    \ max) {\n            lst2.push_back(max);\n        } else {\n            lst2.push_back(i);\n\
    \        }\n    }\n    return lst2;", "    // Write your code here.\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i = min;\
    \ i <= max; i++) {\n        result.push_back(i);\n    }\n    for (long i = max;\
    \ i >= min; i--) {\n        result.push_back(i);\n    }\n    return result;",
  "    // Your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    result.push_back(min);\n            min = i;\n        }\n        if (i >\
    \ max) {\n            result.push_back(max);\n            max = i;\n        }\n\
    \    }\n    for (long i : lst) {\n        if (i < min) {\n            result.push_back(min);\n\
    \            min = i;\n        }\n        if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i < min) {\n            result.push_back(min);\n            min = i;\n    \
    \    }\n        if (i > max) {\n            result.push_back(max);\n         \
    \   max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            result.push_back(min);\n            min = i;\n        }\n   \
    \     if (i > max) {\n            result.push_back(max);\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    result.push_back(min);\n            min = i;\n        }\n        if (i >\
    \ max) {\n            result.push_back(max);\n            max = i;\n        }\n\
    \    }\n    for (long i : lst) {\n        if (i < min) {\n            result.push_back(min);\n\
    \            min = i;\n        }\n        if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i < min) {\n            result.push_back(min);\n            min = i;\n    \
    \    }\n        if (i > max) {\n            result.push_back(max);\n         \
    \   max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            result.push_back(min);\n            min = i;\n        }\n   \
    \     if (i > max) {\n            result.push_back(max);\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    result.push_back(min);\n            min = i;\n        }\n        if (i >\
    \ max) {\n            result.push_back(max);\n            max = i;\n        }\n\
    \    }\n    for (long i : lst) {\n        if (i < min) {\n            result.push_back(min);\n\
    \            min = i;\n        }\n        if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i < min) {\n            result.push_back(min);\n            min = i;\n    \
    \    }\n        if (i > max) {\n            result.push_back(max);\n         \
    \   max = i;\n        }\n    }\n    for (long i ", "    // Your code here\n  \
    \  std::vector<long> lst2;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    } else if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i == min) {\n            lst2.push_back(min);\n    \
    \    } else if (i == max) {\n            lst2.push_back(max);\n        } else\
    \ {\n            lst2.push_back(i);\n        }\n    }\n    return lst2;", "  \
    \  std::vector<long> result;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            result.push_back(min);\n\
    \            min = i;\n        } else if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        } else {\n            result.push_back(i);\n  \
    \      }\n    }\n    return result;", "    // Your code goes here\n    std::vector<long>\
    \ sorted_lst;\n    long min = lst.front();\n    long max = lst.back();\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            sorted_lst.push_back(min);\n\
    \        } else if (i > max) {\n            sorted_lst.push_back(max);\n     \
    \   } else {\n            sorted_lst.push_back(i);\n        }\n    }\n    return\
    \ sorted_lst;", "    if (lst.size() == 0) {\n        return lst;\n    }\n    std::vector<long>\
    \ sorted_lst;\n    long min_val = *std::min_element(lst.begin(), lst.end());\n\
    \    long max_val = *std::max_element(lst.begin(), lst.end());\n    long mid =\
    \ min_val + max_val / 2;\n    sorted_lst.push_back(min_val);\n    sorted_lst.push_back(mid);\n\
    \    sorted_lst.push_back(max_val);\n    sorted_lst.push_back(max_val);\n    sorted_lst.push_back(min_val);\n\
    \    return sorted_lst;", "    if (lst.size() == 0) {\n        return lst;\n \
    \   }\n    std::vector<long> result;\n    long min = lst[0];\n    long max = lst[0];\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    long\
    \ mid = min + (max - min) / 2;\n    long left = mid;\n    long right = mid;\n\
    \    long mid2 = mid + 1;\n    while (left < max) {\n        while (left < max\
    \ && lst[left] < mid) {\n            left++;\n        }\n        while (right\
    \ > min && lst[right] > mid2) {\n            right--;\n        }\n        if (left\
    \ < right) {\n            std::swap(lst[left], lst[right]);\n        }\n     \
    \   left++;\n        right--;\n    }\n    for (long i : lst) {\n        if (i\
    \ < min) {\n            std::swap(lst[i], lst[min]);\n        }\n        if (i\
    \ > max) {\n            std::swap(lst[i], lst[max]);\n        }\n    }\n    for\
    \ (long i : lst) {\n        result.push_back(i);\n    }\n    return result;",
  "    // Your code here\n    std::vector<long> lst2;\n    for(long i=0;i<lst.size();i++){\n\
    \        for(long j=i+1;j<lst.size();j++){\n            if(lst[i]>lst[j]){\n \
    \               long temp = lst[i];\n                lst[i] = lst[j];\n      \
    \          lst[j] = temp;\n            }\n        }\n    }\n    return lst2;",
  "    std::vector<long> result;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    long\
    \ mid = min + (max - min) / 2;\n    for (long i : lst) {\n        if (i < mid)\
    \ {\n            result.push_back(i);\n        } else if (i > mid) {\n       \
    \     result.push_back(mid);\n        } else {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    if (lst.size() == 0) {\n        return\
    \ lst;\n    }\n    std::vector<long> sorted_lst;\n    long min_val = lst[0];\n\
    \    long max_val = lst[0];\n    for (long i : lst) {\n        if (i < min_val)\
    \ {\n            min_val = i;\n        } else if (i > max_val) {\n           \
    \ max_val = i;\n        }\n    }\n    long mid = min_val;\n    long left_index\
    \ = 0, right_index = 0;\n    while (left_index < lst.size() && right_index < lst.size())\
    \ {\n        if (lst[left_index] <= mid) {\n            sorted_lst.push_back(lst[left_index++]);\n\
    \        } else {\n            sorted_lst.push_back(lst[right_index++]);\n   \
    \     }\n    }\n    while (left_index < lst.size()) {\n        sorted_lst.push_back(lst[left_index++]);\n\
    \    }\n    while (right_index < lst.size()) {\n        sorted_lst.push_back(lst[right_index++]);\n\
    \    }\n    return sorted_lst;", "    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    for (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> lst2;\n    long min =\
    \ lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    long mid = min + (max - min) / 2;\n    for (long\
    \ i : lst) {\n        if (i < mid) {\n            lst2.push_back(i);\n       \
    \ }\n        if (i > mid) {\n            lst2.push_back(i);\n        }\n    }\n\
    \    return lst2;", "    std::vector<long> sorted_lst;\n    long min_val = lst[0];\n\
    \    long max_val = lst[0];\n    for (long i : lst) {\n        if (i < min_val)\
    \ {\n            min_val = i;\n        } else if (i > max_val) {\n           \
    \ max_val = i;\n        }\n    }\n    sorted_lst.push_back(min_val);\n    sorted_lst.push_back(max_val);\n\
    \    for (long i : lst) {\n        if (i < min_val) {\n            sorted_lst.push_back(i);\n\
    \        } else if (i > max_val) {\n            sorted_lst.push_back(max_val);\n\
    \            sorted_lst.push_back(i);\n        }\n    }\n    return sorted_lst;",
  "    std::vector<long> res;\n    long min = lst[0];\n    long max = lst[0];\n  \
    \  for (auto i : lst) {\n        if (i < min) {\n            min = i;\n      \
    \  }\n        if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (auto i : lst) {\n        if (i < min) {\n \
    \           i = min;\n        }\n        if (i > max) {\n            i = max;\n\
    \        }\n        res.push_back(i);\n    }\n    return res;", "    std::vector<long>\
    \ lst2;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            lst2.push_back(min);\n        } else\
    \ if (i == max) {\n            lst2.push_back(max);\n        } else {\n      \
    \      lst2.push_back(i);\n        }\n    }\n    return lst2;", "    // Write\
    \ your code here\n    std::vector<long> temp;\n    long min = lst.front();\n \
    \   long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    temp.push_back(min);\n            min = i;\n        }\n        if (i > max)\
    \ {\n            temp.push_back(max);\n            max = i;\n        }\n    }\n\
    \    temp.push_back(min);\n    temp.push_back(max);\n    return temp;", "    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;", "    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i = min;\
    \ i <= max; i++) {\n        result.push_back(i);\n    }\n    return result;",
  "    // Your code goes here\n    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    for(long i=0;i<lst.size();i++){\n        long min=i;\n        long max=i;\n\
    \        for(long j=i+1;j<lst.size();j++){\n            if(lst[i]<lst[j]){\n \
    \               min=j;\n            }\n            if(lst[i]>lst[j]){\n      \
    \          max=j;\n            }\n        }\n        if(min!=i){\n           \
    \ std::swap(res[min],res[i]);\n        }\n        if(max!=i){\n            std::swap(res[max],res[i]);\n\
    \        }\n    }\n    return res;", "    std::vector<long> res;\n    long min\
    \ = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n     \
    \   if (i < min) min = i;\n        if (i > max) max = i;\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) res.push_back(i);\n\
    \        if (i > max) res.push_back(i);\n    }\n    return res;", "    // Your\
    \ code here\n    std::vector<long> res;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) min = i;\n\
    \        if (i > max) max = i;\n    }\n    res.push_back(min);\n    res.push_back(max);\n\
    \    for (long i : lst) {\n        if (i < min) res.push_back(i);\n        if\
    \ (i > max) res.push_back(i);\n    }\n    return res;", "    // Your code here\n\
    \    std::vector<long> res;\n    res.reserve(lst.size());\n    for (long i : lst)\
    \ {\n        res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n\
    \    return res;", "    std::vector<long> result;\n    long min = std::numeric_limits<long>::max();\n\
    \    long max = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n\
    \        min = std::min(min, i);\n        max = std::max(max, i);\n    }\n   \
    \ for (auto i : lst) {\n        if (i < min) {\n            result.push_back(min);\n\
    \        } else if (i > max) {\n            result.push_back(max);\n        }\
    \ else {\n            result.push_back(i);\n        }\n    }\n    return result;",
  "    std::vector<long> res;\n    long min;\n    long max;\n    for (auto i : lst)\
    \ {\n        if (i == min) {\n            min = i;\n        } else if (i == max)\
    \ {\n            max = i;\n        } else {\n            res.push_back(min);\n\
    \            res.push_back(max);\n            min = i;\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;", "    // Your code here\n    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     res.push_back(min);\n        } else if (i == max) {\n            res.push_back(max);\n\
    \        } else {\n            res.push_back(i);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> lst2;\n    long min = lst.front();\n    long max\
    \ = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n          \
    \  min = i;\n        }\n        if (i > max) {\n            max = i;\n       \
    \ }\n    }\n    for (long i : lst) {\n        if (i < min) {\n            lst2.push_back(min);\n\
    \            min = i;\n        } else if (i > max) {\n            lst2.push_back(max);\n\
    \            max = i;\n        } else {\n            lst2.push_back(i);\n    \
    \    }\n    }\n    return lst2;", "    // Write your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ sorted_lst;\n    sorted_lst.push_back(lst[0]);\n    sorted_lst.push_back(lst[lst.size()-1]);\n\
    \    for (long i = 2; i < lst.size(); i++) {\n        if (lst[i] < sorted_lst[0])\
    \ {\n            sorted_lst.push_back(lst[i]);\n            sorted_lst.push_back(sorted_lst[0]);\n\
    \            sorted_lst.push_back(sorted_lst[lst.size()-1]);\n        }\n    }\n\
    \    return sorted_lst;", "    // Your code here\n    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n \
    \           max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i\
    \ < min) {\n            min = i;\n        }\n        if (i > max) {\n        \
    \    max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    min = i;\n        }\n        if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    for (long i : lst) {\n        if (i < min) {\n            min\
    \ = i;\n        }\n        if (i > max) {\n            max = i;\n        }\n \
    \   }\n    for (long i : lst) {\n        if (i < min) {\n            min = i;\n\
    \        }\n        if (i > max) {\n            max = i;\n        }\n    }\n \
    \   for (long i : lst) {\n        if (i < min) {\n            min = i;\n     \
    \   }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n \
    \           max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i\
    \ < min) {\n            min = i;\n        }\n        if (i > ", "    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            result.push_back(min);\n            min\
    \ = i;\n        }\n        if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        }\n    }\n    if (min != max) {\n        result.push_back(min);\n\
    \        result.push_back(max);\n    }\n    return result;", "    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;", "    // Your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i == min) {\n          \
    \  result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;", "    if (lst.size() == 0) {\n        return lst;\n    }\n    std::vector<long>\
    \ sorted_lst;\n    long min_val = lst[0];\n    long max_val = lst[0];\n    for\
    \ (long i = 0; i < lst.size(); i++) {\n        if (lst[i] < min_val) {\n     \
    \       min_val = lst[i];\n        }\n        if (lst[i] > max_val) {\n      \
    \      max_val = lst[i];\n        }\n    }\n    long mid = (min_val + max_val)\
    \ / 2;\n    sorted_lst.push_back(min_val);\n    sorted_lst.push_back(mid);\n \
    \   sorted_lst.push_back(max_val);\n    return sorted_lst;", "    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;", "    // Your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    long mid;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        mid = (min + max) / 2;\n        if (lst[i] < mid) {\n           \
    \ min = mid;\n        } else {\n            max = mid;\n        }\n    }\n   \
    \ for (long i = 0; i < lst.size(); i++) {\n        mid = (min + max) / 2;\n  \
    \      if (lst[i] < mid) {\n            result.push_back(mid);\n            min\
    \ = mid;\n        } else {\n            result.push_back(mid);\n            max\
    \ = mid;\n        }\n    }\n    for (long i = 0; i < lst.size(); i++) {\n    \
    \    mid = (min + max) / 2;\n        if (lst[i] < mid) {\n            result.push_back(mid);\n\
    \            min = mid;\n        } else {\n            result.push_back(mid);\n\
    \            max = mid;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (auto i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;", "    // Your\
    \ code here\n    std::vector<long> result;\n    long minValue = *std::min_element(lst.begin(),\
    \ lst.end());\n    long maxValue = *std::max_element(lst.begin(), lst.end());\n\
    \    long minIndex = std::distance(std::begin(lst), std::find(std::begin(lst),\
    \ std::end(lst), minValue));\n    long maxIndex = std::distance(std::begin(lst),\
    \ std::find(std::begin(lst), std::end(lst), maxValue));\n    long temp;\n    for\
    \ (long i = minIndex; i <= maxIndex; i++) {\n        temp = lst[i];\n        std::iter_swap(std::begin(lst),\
    \ std::begin(lst) + i);\n        result.push_back(temp);\n    }\n    return result;",
  "    std::vector<long> result;\n    long minValue = *std::min_element(lst.begin(),\
    \ lst.end());\n    long maxValue = *std::max_element(lst.begin(), lst.end());\n\
    \    long midValue = minValue + (maxValue - minValue) / 2;\n    long midValue2\
    \ = midValue + 1;\n    long midValue3 = midValue + 2;\n    long midValue4 = midValue\
    \ + 3;\n    long midValue5 = midValue + 4;\n    long midValue6 = midValue + 5;\n\
    \    long midValue7 = midValue + 6;\n    long midValue8 = midValue + 7;\n    long\
    \ midValue9 = midValue + 8;\n    long midValue10 = midValue + 9;\n    long midValue11\
    \ = midValue + 10;\n    long midValue12 = midValue + 11;\n    long midValue13\
    \ = midValue + 12;\n    long midValue14 = midValue + 13;\n    long midValue15\
    \ = midValue + 14;\n    long midValue16 = midValue + 15;\n    long midValue17\
    \ = midValue + 16;\n    long midValue18 = midValue + 17;\n    long midValue19\
    \ = midValue + 18;\n    long midValue20 = midValue + 19;\n    long midValue21\
    \ = midValue + 20;\n    long midValue22 = midValue + 21;\n    long midValue23\
    \ = midValue + 22;\n    long midValue24 = midValue + 23;\n    long midValue25\
    \ = midValue + 24;\n    long midValue26 = midValue + 25;\n    long midValue27\
    \ = midValue + 26;\n    long midValue28 = midValue + 27;\n    long midValue29\
    \ = midValue + 28;\n    long midValue30 = midValue + 29;\n    long midValue31\
    \ = midValue + 30;\n    long midValue32 = midValue + 31;\n    long midValue33\
    \ = midValue + 32;\n    long midValue34 = midValue + 33;\n    long midValue35\
    \ = midValue + 34;\n    long midValue36 = midValue + 35;\n    long midValue37\
    \ = midValue + 36;\n    long midValue38 = midValue + 37;\n    long midValue39\
    \ = midValue + 38;\n    long midValue40 = midValue + 39;\n    long midValue41\
    \ = midValue + 40;\n    long midValue42 = mid", "    std::vector<long> result;\n\
    \    long min = lst.front();\n    long max = lst.back();\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i < min) {\n            result.push_back(min);\n            min =\
    \ i;\n        }\n        if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        }\n    }\n    if (min != max) {\n        result.push_back(min);\n\
    \        result.push_back(max);\n    }\n    return result;", "    // Write your\
    \ code here\n    std::vector<long> res;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i == min) {\n          \
    \  res.push_back(min);\n        } else if (i == max) {\n            res.push_back(max);\n\
    \        } else {\n            res.push_back(i);\n        }\n    }\n    return\
    \ res;", "    // Your code here\n    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for(long i : lst) {\n        if(i<min) {\n  \
    \          min = i;\n        }\n        if(i>max) {\n            max = i;\n  \
    \      }\n    }\n    for(long i : lst) {\n        if(i<min) {\n            min++;\n\
    \        }\n        if(i>max) {\n            max--;\n        }\n        res.push_back(i);\n\
    \    }\n    res.push_back(min);\n    res.push_back(max);\n    return res;", " \
    \   // Your code here\n    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    for (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> res;\n    long minval\
    \ = *std::min_element(lst.begin(), lst.end());\n    long maxval = *std::max_element(lst.begin(),\
    \ lst.end());\n    long midval = minval + maxval / 2;\n    long midval2 = minval\
    \ + maxval / 2;\n    long midval3 = minval + maxval / 2;\n    long midval4 = minval\
    \ + maxval / 2;\n    long midval5 = minval + maxval / 2;\n    long midval6 = minval\
    \ + maxval / 2;\n    long midval7 = minval + maxval / 2;\n    long midval8 = minval\
    \ + maxval / 2;\n    long midval9 = minval + maxval / 2;\n    long midval10 =\
    \ minval + maxval / 2;\n    long midval11 = minval + maxval / 2;\n    long midval12\
    \ = minval + maxval / 2;\n    long midval13 = minval + maxval / 2;\n    long midval14\
    \ = minval + maxval / 2;\n    long midval15 = minval + maxval / 2;\n    long midval16\
    \ = minval + maxval / 2;\n    long midval17 = minval + maxval / 2;\n    long midval18\
    \ = minval + maxval / 2;\n    long midval19 = minval + maxval / 2;\n    long midval20\
    \ = minval + maxval / 2;\n    long midval21 = minval + maxval / 2;\n    long midval22\
    \ = minval + maxval / 2;\n    long midval23 = minval + maxval / 2;\n    long midval24\
    \ = minval + maxval / 2;\n    long midval25 = minval + maxval / 2;\n    long midval26\
    \ = minval + maxval / 2;\n    long midval27 = minval + maxval / 2;\n    long midval28\
    \ = minval + maxval / 2;\n    long midval29 = minval + maxval / 2;\n    long midval30\
    \ = minval + maxval / 2;\n    long midval31 = minval + maxval / 2;\n    long midval32\
    \ = minval + maxval / 2;\n    long midval33 = minval + maxval / 2;\n    long midval34\
    \ = minval + maxval / 2;\n    long midval35 = minval + ", "    if (lst.size()\
    \ == 0) {\n        return lst;\n    }\n    std::vector<long> lst2(lst.size());\n\
    \    long minval = lst[0];\n    long maxval = lst[0];\n    for (long i = 0; i\
    \ < lst.size(); i++) {\n        if (lst[i] < minval) {\n            minval = lst[i];\n\
    \        }\n        if (lst[i] > maxval) {\n            maxval = lst[i];\n   \
    \     }\n    }\n    long midval = minval;\n    long midval2 = maxval;\n    long\
    \ midval3 = minval;\n    long midval4 = maxval;\n    long midval5 = minval;\n\
    \    long midval6 = maxval;\n    long midval7 = minval;\n    long midval8 = maxval;\n\
    \    long midval9 = minval;\n    long midval10 = maxval;\n    long midval11 =\
    \ minval;\n    long midval12 = maxval;\n    long midval13 = minval;\n    long\
    \ midval14 = maxval;\n    long midval15 = minval;\n    long midval16 = maxval;\n\
    \    long midval17 = minval;\n    long midval18 = maxval;\n    long midval19 =\
    \ minval;\n    long midval20 = maxval;\n    long midval21 = minval;\n    long\
    \ midval22 = maxval;\n    long midval23 = minval;\n    long midval24 = maxval;\n\
    \    long midval25 = minval;\n    long midval26 = maxval;\n    long midval27 =\
    \ minval;\n    long midval28 = maxval;\n    long midval29 = minval;\n    long\
    \ midval30 = maxval;\n    long midval31 = minval;\n    long midval32 = maxval;\n\
    \    long midval33 = minval;\n    long midval34 = maxval;\n    long midval35 =\
    \ minval;\n    long midval36 = maxval;\n    long midval37 = minval;\n    long\
    \ midval38 = maxval;\n    long midval39 = minval;\n    long midval40 = maxval;\n\
    \    long midval41 = minval;\n    long midval42 = maxval;\n    long midval43 =\
    \ minval;\n    long midval44 = maxval;\n    long midval45 = minval;\n    long\
    \ midval46 = maxval;\n    long midval47 = minval;\n    long midval48 = maxval;\n\
    \    long midval49 = minval;\n    long midval50 = max", "    if (lst.size() ==\
    \ 0) {\n        return lst;\n    }\n    std::vector<long> res(lst);\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    for (auto i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    // Write your code here\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           i = min;\n        }\n        if (i > max) {\n            i = max;\n\
    \        }\n        res.push_back(i);\n    }\n    return res;", "    std::vector<long>\
    \ lst2;\n    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i == min) {\n            lst2.push_back(min);\n        } else if (i\
    \ == max) {\n            lst2.push_back(max);\n        } else {\n            lst2.push_back(i);\n\
    \        }\n    }\n    return lst2;", "    std::vector<long> sorted_lst;\n   \
    \ long min_val = lst[0];\n    long max_val = lst[0];\n    for (long i : lst) {\n\
    \        if (i < min_val) {\n            min_val = i;\n        }\n        if (i\
    \ > max_val) {\n            max_val = i;\n        }\n    }\n    for (long i =\
    \ min_val; i <= max_val; i++) {\n        sorted_lst.push_back(i);\n    }\n   \
    \ return sorted_lst;"]
stop_tokens:
- "\n}"
