name: HumanEval_70_strange_sort_list
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers,\
  \ return vector in strange order.\n// Strange sorting, is when you start with the\
  \ minimum value,\n// then maximum of the remaining integers, then minimum and so\
  \ on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1, (long)2,\
  \ (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)3}))\n\
  // >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5, (long)5})))\n\
  // (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n// >>> strange_sort_list((std::vector<long>()))\n\
  // (std::vector<long>())\nstd::vector<long> strange_sort_list(std::vector<long>\
  \ lst) {\n"
tests: "}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
  \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
  \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
  \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
  \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
  \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
  \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
  \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
  \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
  \ (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8, (long)2,\
  \ (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
  \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
  \ == (std::vector<long>({(long)111111})));\n}\n"
completions: ["    if (lst.size() == 0) {\n        return lst;\n    }\n    std::vector<long>\
    \ result;\n    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        } else if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    long mid = min + (max - min)\
    \ / 2;\n    long mid2 = mid / 2;\n    long mid3 = mid * 2;\n    long mid4 = mid\
    \ * 3;\n    long mid5 = mid * 4;\n    long mid6 = mid * 5;\n    long mid7 = mid\
    \ * 6;\n    long mid8 = mid * 7;\n    long mid9 = mid * 8;\n    long mid10 = mid\
    \ * 9;\n    long mid11 = mid * 10;\n    long mid12 = mid * 11;\n    long mid13\
    \ = mid * 12;\n    long mid14 = mid * 13;\n    long mid15 = mid * 14;\n    long\
    \ mid16 = mid * 15;\n    long mid17 = mid * 16;\n    long mid18 = mid * 17;\n\
    \    long mid19 = mid * 18;\n    long mid20 = mid * 19;\n    long mid21 = mid\
    \ * 20;\n    long mid22 = mid * 21;\n    long mid23 = mid * 22;\n    long mid24\
    \ = mid * 23;\n    long mid25 = mid * 24;\n    long mid26 = mid * 25;\n    long\
    \ mid27 = mid * 26;\n    long mid28 = mid * 27;\n    long mid29 = mid * 28;\n\
    \    long mid30 = mid * 29;\n    long mid31 = mid * 30;\n    long mid32 = mid\
    \ * 31;\n    long mid33 = mid * 32;\n    long mid34 = mid * 33;\n    long mid35\
    \ = mid * 34;\n    long mid36 = mid * 35;\n    long mid37 = mid * 36;\n    long\
    \ mid38 = mid * 37;\n    long mid39 = mid * 38;\n    long mid40 = mid * 39;\n\
    \    long mid41 = mid * 40;\n    long mid42 = mid * 41;\n    long mid43 = mid\
    \ * 42;\n    long mid44 = mid * 43;\n    long mid45 = mid * 44;\n    long mid46\
    \ = mid * 45;\n    long mid47", "    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    for (auto i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> lst2;\n    long min =\
    \ lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n       \
    \ if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n  \
    \          max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i\
    \ == min) {\n            lst2.push_back(min);\n        } else if (i == max) {\n\
    \            lst2.push_back(max);\n        } else {\n            lst2.push_back(i);\n\
    \        }\n    }\n    return lst2;", "    std::vector<long> lst2;\n    long minval\
    \ = lst[0];\n    long maxval = lst[0];\n    for (long i : lst) {\n        if (i\
    \ < minval) {\n            minval = i;\n        } else if (i > maxval) {\n   \
    \         maxval = i;\n        }\n    }\n    long midval = (minval + maxval) /\
    \ 2;\n    long midpos = 0;\n    for (long i : lst) {\n        if (i == midval)\
    \ {\n            midpos++;\n        } else {\n            lst2.push_back(i);\n\
    \        }\n    }\n    lst2.insert(lst2.begin() + midpos, midval);\n    return\
    \ lst2;", "    std::vector<long> res;\n    if (lst.size() == 0) {\n        return\
    \ res;\n    }\n    long min = lst[0];\n    for (long i = 1, j = lst.size(); i\
    \ < j; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n      \
    \  }\n    }\n    long max = lst[0];\n    for (long i = 1, j = lst.size(); i <\
    \ j; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n\
    \    }\n    for (long i = 1, j = lst.size(); i < j; i++) {\n        if (lst[i]\
    \ < min) {\n            min = lst[i];\n        }\n        if (lst[i] > max) {\n\
    \            max = lst[i];\n        }\n    }\n    for (long i = 1, j = lst.size();\
    \ i < j; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n    \
    \    }\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n  \
    \  }\n    for (long i = 1, j = lst.size(); i < j; i++) {\n        if (lst[i] <\
    \ min) {\n            min = lst[i];\n        }\n        if (lst[i] > max) {\n\
    \            max = lst[i];\n        }\n    }\n    for (long i = 1, j = lst.size();\
    \ i < j; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n    \
    \    }\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n  \
    \  }\n    for (long i = 1, j = lst.size(); i < j; i++) {\n        if (lst[i] <\
    \ min) {\n            min = lst[i];\n        }\n        if (lst[i] > max) {\n\
    \            max = lst[i];\n        }\n    }\n    for (long i = 1, j = lst.size();\
    \ i < j; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n    \
    \    }\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n  \
    \  }\n    for (long i = 1, j = lst.size(); i < j; i++) {\n        if (lst[i] <\
    \ min) {\n            min = lst[i];\n        }\n        if (lst[i] > max) {\n\
    \            max = lst[i];\n        }\n    }\n    for (long i = 1, j = lst.size();\
    \ i < j; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n    \
    \    }\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n  \
    \  }\n    for (long i = 1, j = lst.size(); i < j; i++) {\n        if (lst[i] <\
    \ min) {\n            min = lst[i];\n        }\n        if (lst[i] > max) {\n\
    \            max = lst[i];\n        }\n    }\n    for (long i = 1, j = lst.size();\
    \ i < j; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n    \
    \    }\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n  \
    \  }\n    for (long i = 1, j = l", "    // Your code goes here\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            res.push_back(min);\n            min\
    \ = i;\n        } else if (i > max) {\n            res.push_back(max);\n     \
    \       max = i;\n        } else {\n            res.push_back(i);\n        }\n\
    \    }\n    res.push_back(min);\n    res.push_back(max);\n    return res;", " \
    \   // Your code here\n    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;", "    // Your code here\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            result.push_back(min);\n            min\
    \ = i;\n        }\n        if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        }\n    }\n    if (min != max) {\n        result.push_back(min);\n\
    \        result.push_back(max);\n    }\n    return result;", "    // Your code\
    \ here\n    std::vector<long> result;\n    long min = 0;\n    long max = lst.size()\
    \ - 1;\n    long mid = 0;\n    while (min <= max) {\n        mid = (min + max)\
    \ / 2;\n        if (lst[mid] > lst[max]) {\n            max = mid - 1;\n     \
    \   } else if (lst[mid] < lst[min]) {\n            min = mid + 1;\n        } else\
    \ {\n            result.push_back(lst[mid]);\n            min = mid + 1;\n   \
    \         max = mid - 1;\n        }\n    }\n    return result;", "    // Your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i == min) {\n          \
    \  result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;", "    if (lst.size() == 0) {\n        return lst;\n    }\n    std::vector<long>\
    \ lst2(lst.size());\n    for (long i = 0; i < lst.size(); i++) {\n        long\
    \ j = i;\n        while (j > 0 && lst[j - 1] > lst[j]) {\n            lst2[i]\
    \ = lst[j];\n            j--;\n        }\n        lst2[i] = lst[j];\n    }\n \
    \   return lst2;", "    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            i = min;\n        }\n      \
    \  if (i > max) {\n            i = max;\n        }\n        res.push_back(i);\n\
    \    }\n    return res;", "    std::vector<long> res;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            res.push_back(i);\n        }\n\
    \        if (i > max) {\n            res.push_back(i);\n        }\n    }\n   \
    \ return res;", "    std::vector<long> sorted_lst;\n    sorted_lst.push_back(lst[0]);\n\
    \    sorted_lst.push_back(lst[lst.size()-1]);\n    for(size_t i = 1; i < lst.size()-1;\
    \ i++) {\n        if(lst[i] > lst[i-1]) {\n            sorted_lst.push_back(lst[i]);\n\
    \            sorted_lst.push_back(lst[i-1]);\n        }\n    }\n    return sorted_lst;",
  "    std::vector<long> res;\n    long min = lst.front();\n    long max = lst.back();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    } else if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        } else if (i > max) {\n            max = i;\n  \
    \      }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;", "    // Write your code here.\n    std::vector<long> result;\n    long\
    \ min = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i == min) {\n            result.push_back(min);\n        } else if (i ==\
    \ max) {\n            result.push_back(max);\n        } else {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    for (auto i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<long> result;\n    long min\
    \ = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n     \
    \   if (i < min) {\n            min = i;\n        } else if (i > max) {\n    \
    \        max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i <\
    \ min) {\n            result.push_back(min);\n            min = i;\n        }\
    \ else if (i > max) {\n            result.push_back(max);\n            max = i;\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;", "    // Your code here\n    std::vector<long> res;\n    long min =\
    \ lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n       \
    \ if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n  \
    \          max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i\
    \ == min) {\n            res.push_back(min);\n        } else if (i == max) {\n\
    \            res.push_back(max);\n        } else {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;", "    // Your code here\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;"]
stop_tokens:
- "\n}"
