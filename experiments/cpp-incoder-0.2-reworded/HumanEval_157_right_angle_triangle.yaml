name: HumanEval_157_right_angle_triangle
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
  \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
  \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
  \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
  \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
  bool right_angle_triangle(long a, long b, long c) {\n"
tests: "}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
  \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
  \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
  \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n \
  \   assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15), (8),\
  \ (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
  \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n}\n"
completions: ["    long d = b * b - 4 * a * c;\n    if (d < 0) {\n        return false;\n\
    \    }\n    long sq = sqrt(d);\n    long t1 = (-b + sq) / (2 * a);\n    long t2\
    \ = (-b - sq) / (2 * a);\n    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n\
    \        return true;\n    }\n    return false;", "    long d = b * b - 4 * a\
    \ * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long s = (-b + root) / (2 * a);\n    long t = (-b - root) / (2\
    \ * a);\n    if (s < 0 || t < 0) {\n        return false;\n    }\n    if (s ==\
    \ 0 && t == 0) {\n        return true;\n    }\n    if (s == 0 && t > 0) {\n  \
    \      return true;\n    }\n    if (s == 0 && t < 0) {\n        return false;\n\
    \    }\n    if (s > 0 && t > 0) {\n        return true;\n    }\n    if (s < 0\
    \ && t < 0) {\n        return false;\n    }\n    return false;", "    if (a ==\
    \ 0 || b == 0 || c == 0)\n        return false;\n    long d = b * b - 4 * a *\
    \ c;\n    if (d < 0)\n        return false;\n    long x = (-b + sqrt(d)) / (2\
    \ * a);\n    long y = (-b - sqrt(d)) / (2 * a);\n    return (x > 0) && (y > 0);",
  "    // Write your code here\n    long long int sum = a+b+c;\n    long long int\
    \ sum1 = a*a+b*b+c*c;\n    long long int sum2 = a*a+b*b-c*c;\n    long long int\
    \ sum3 = a*a-b*b-c*c;\n    long long int sum4 = a*a-b*b+c*c;\n    long long int\
    \ sum5 = a*a+b*b+c*c-a*a;\n    long long int sum6 = a*a+b*b-c*c-a*a;\n    long\
    \ long int sum7 = a*a-b*b-c*c-a*a;\n    long long int sum8 = a*a-b*b+c*c-a*a;\n\
    \    long long int sum9 = a*a+b*b+c*c+a*a;\n    long long int sum10 = a*a+b*b-c*c+a*a;\n\
    \    long long int sum11 = a*a-b*b-c*c+a*a;\n    long long int sum12 = a*a-b*b+c*c+a*a;\n\
    \    long long int sum13 = a*a+b*b+c*c-a*a+a*a;\n    long long int sum14 = a*a+b*b-c*c-a*a+a*a;\n\
    \    long long int sum15 = a*a-b*b-c*c-a*a+a*a;\n    long long int sum16 = a*a-b*b+c*c-a*a-a*a;\n\
    \    long long int sum17 = a*a+b*b+c*c+a*a+a*a;\n    long long int sum18 = a*a+b*b-c*c+a*a+a*a;\n\
    \    long long int sum19 = a*a-b*b-c*c+a*a+a*a;\n    long long int sum20 = a*a-b*b+c*c-a*a-a*a;\n\
    \    long long int sum21 = a*a+b*b+c*c+a*a+a*a-a*a;\n    long long int sum22 =\
    \ a*a+b*b-c*c-a*a-a*a;\n    long long int sum23 = a*a-b*b-c*c-a*a-a*a;\n    long\
    \ long int sum24 = a*a-b*b+c*c-a*a-a*a;\n    long long int sum25 = a*a+b*b+c*c+a*a+a*a-a*a;\n\
    \    long long int sum26 = a*a+b*b-c*c-a*a-a*a;\n    long long int sum27 = a*a-b*b-c*c-a*",
  "    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ s = (-b + sqrt(d)) / (2 * a);\n    long t = (-b - sqrt(d)) / (2 * a);\n    return\
    \ (s == t);", "    if (a == 0 || b == 0 || c == 0)\n        return false;\n  \
    \  long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ root = (long) sqrt(d);\n    long s = (-b + root) / (2 * a);\n    long t = (-b\
    \ - root) / (2 * a);\n    if (s == t)\n        return true;\n    return false;",
  "    // Write your code here\n    if(a==b){\n        if(a==c){\n            return\
    \ true;\n        }\n    }\n    else if(a==c){\n        return true;\n    }\n \
    \   else if(b==c){\n        return false;\n    }\n    else if(a>b){\n        if(a>c){\n\
    \            return false;\n        }\n    }\n    else if(b>c){\n        return\
    \ false;\n    }\n    else if(a>c){\n        return true;\n    }", "    long d\
    \ = b * b - 4 * a * c;\n    if (d < 0) {\n        return false;\n    }\n    long\
    \ root = d*d / 2;\n    long x = -b + root;\n    long y = -a - root;\n    long\
    \ d = x * x + y * y;\n    return d == 0;", "    long ab = abs(b - a);\n    long\
    \ ac = abs(c - a);\n    long bc = abs(b - c);\n    long acb = abs(ac - bc);\n\
    \    long abc = abs(ab - bc);\n    long acbc = abs(ac - bc);\n    long abcb =\
    \ abs(ab - bc);\n    long acbca = abs(ac - ca);\n    long abca = abs(ab - ca);\n\
    \    long accab = abs(ac - ca);\n    long abcca = abs(ab - ca);\n    long acbcab\
    \ = abs(ac - cab);\n    long abccab = abs(ab - cab);\n    long acbcabc = abs(ac\
    \ - cab);\n    long abccabc = abs(ab - cab);\n    long acbcabcd = abs(ac - cab);\n\
    \    long abccabcd = abs(ab - cab);\n    long acbcabcde = abs(ac - cab);\n   \
    \ long abccabcde = abs(ab - cab);\n    long acbcabcdef = abs(ac - cab);\n    long\
    \ abccabcdef = abs(ab - cab);\n    long acbcabcdefg = abs(ac - cab);\n    long\
    \ abccabcdefg = abs(ab - cab);\n    long acbcabcdefgh = abs(ac - cab);\n    long\
    \ abccabcdefgh = abs(ab - cab);\n    long acbcabcdefghi = abs(ac - cab);\n   \
    \ long abccabcdefghi = abs(ab - cab);\n    long acbcabcdefghij = abs(ac - cab);\n\
    \    long abccabcdefghij = abs(ab - cab);\n    long acbcabcdefghijk = abs(ac -\
    \ cab);\n    long abccabcdefghijk = abs(ab - cab);\n    long acbcabcdefghijkl\
    \ = abs(ac - cab);\n    long abccabcdefghijkl = abs(ab - cab);\n    long acbcabcdefghijklm\
    \ = abs(ac - cab);\n    long abccabcdefghijklm = abs(ab - cab);\n    long acbcabcdefghijklmn\
    \ = abs(ac - cab);\n    long abccabcdefghijklmn = abs(ab - cab);\n    long acbcabcdefghijklmno\
    \ = abs(ac - cab);\n    long abccabcdefghijkl", "    long ab = abs(b - a);\n \
    \   long ac = abs(c - a);\n    long bc = abs(b - c);\n    long cb = abs(c - b);\n\
    \    long abc = ab + ac;\n    long bcb = bc + cb;\n    long abbc = abb + bcc;\n\
    \    long abcc = abc + cbb;\n    long abbb = abbc + cbb;\n    long abbba = abbb\
    \ + cba;\n    long abbca = abbc + cab;\n    long abccb = abcc + cbc;\n    long\
    \ abccc = abcc + cbb;\n    long abbbc = abbb + cbc;\n    long abbbac = abbb +\
    \ cba;\n    long abbcaa = abbc + cab;\n    long abcccb = abccc + cbc;\n    long\
    \ abcccb = abccc + cbb;\n    long abbbcb = abbbc + cbc;\n    long abbbacb = abbbc\
    \ + cba;\n    long abbcaab = abbc + cab;\n    long abcccbc = abccc + cbc;\n  \
    \  long abcccbc = abccc + cbb;\n    long abbbcbb = abbbc + cbc;\n    long abbbacbb\
    \ = abbbc + cba;\n    long abbcaabb = abbc + cab;\n    long abcccbcb = abccc +\
    \ cbc;\n    long abcccbcb = abccc + cbb;\n    long abbbcbbb = abbbc + cbc;\n \
    \   long abbbacbbb = abbbc + cba;\n    long abbcaabbc = abbc + cab;\n    long\
    \ abcccbcc = abccc + cbc;\n    long abcccbcc = abccc + cbb;\n    long abbbcbbc\
    \ = abbbc + cbc;\n    long abbbacbbc = abbbc + cba;\n    long abbcaabbcc = abbc\
    \ + cab;\n    long abcccbccb = abccc + cbc;\n    long abcccbccb = abccc + cbb;\n\
    \    long abbbcbbcc = abbbc + cbc;\n    long abbbacbbcc = abbbc + cba;\n    long\
    \ abbcaabbccc = abbc + cab;\n    ", "    long long ans = (a * b) - (c * a);\n\
    \    if (ans < 0) {\n        return false;\n    }\n    return true;", "    long\
    \ d = b * b - 4 * a * c;\n    if (d < 0) {\n        return false;\n    }\n   \
    \ long root = (long) sqrt(d);\n    long s = (-b + root) / (2 * a);\n    long t\
    \ = (-b - root) / (2 * a);\n    return (s == 0 && t == 0) || (s > 0 && t > 0);",
  "    // Write your code here\n    if(a==b){\n        if(a==c){\n            return\
    \ true;\n        }\n    }\n    if(a==c){\n        return true;\n    }\n    if(b==c){\n\
    \        return true;\n    }\n    return false;", "    // Write your code here.\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n     \
    \   return false;\n    }\n    if(a==c){\n        return false;\n    }\n    if(b==c){\n\
    \        return false;\n    }\n    if(a>b){\n        if(a>c){\n            return\
    \ true;\n        }\n        return false;\n    }\n    if(b>c){\n        return\
    \ false;\n    }\n    if(a>c){\n        if(b>c){\n            return true;\n  \
    \      }\n        return false;\n    }\n    return false;", "    // Write your\
    \ code here\n    if(a==b){\n        if(a==c){\n            return true;\n    \
    \    }\n    }\n    if(a==c){\n        if(b==c){\n            return true;\n  \
    \      }\n    }\n    if(b==c){\n        if(a==c){\n            return true;\n\
    \        }\n    }\n    return false;", "    // Write your code here.\n    long\
    \ a1 = abs(a - b), a2 = abs(a - c), b1 = abs(b - c), b2 = abs(b - a);\n    long\
    \ c = a * b + b * c;\n    long d = a1 * b2 + b1 * c2;\n    long e = a2 * b1 +\
    \ b2 * c1;\n    long f = a1 * c2 + b1 * a2;\n    long g = a2 * c1 + b2 * a1;\n\
    \    long h = a1 * b2 - b1 * a2;\n    long i = a2 * b1 - b2 * a1;\n    long j\
    \ = a1 * c2 - b1 * a2;\n    long k = a2 * c1 - b2 * a1;\n    long l = a1 * b2\
    \ + b1 * c2;\n    long m = a2 * b1 - b2 * a1;\n    long n = a1 * c2 - b1 * a2;\n\
    \    long o = a2 * c1 - b2 * a1;\n    long p = a1 * b1 - b1 * a2;\n    long q\
    \ = a2 * b2 + b2 * c1;\n    long r = a1 * c1 + b1 * a2;\n    long s = a2 * c2\
    \ - b2 * a1;\n    long t = a1 * b2 - b1 * a2;\n    long u = a2 * b1 + b2 * c1;\n\
    \    long v = a1 * c2 - b1 * a2;\n    long w = a2 * c1 + b2 * a1;\n    long x\
    \ = a1 * b1 + b1 * c2;\n    long y = a2 * b2 - b2 * a1;\n    long z = a1 * c1\
    \ + b1 * a2;\n    long a = a1 * b2 - b1 * a2;\n    long b = a2 * b1 - b2 * a1;\n\
    \    long c = a1 * c2 - b1 * a2;\n    long d = a2 * c1 - b2 * a1;\n    long e\
    \ = a1 * b1 + b1 * c2;\n    long f = a2 * b2 - b2 * a1;\n    long g = a1 * c1\
    \ + b1 * a2;\n    long h = a2 * c2 - b2 * a1;\n    long i = a1 * b2 + b1 * c2;\n\
    \    long j = a2 * b1 - b2 * a1;\n    long k = a1 * c2 + b1 * a2;\n    long l\
    \ = a2 * c1 - b2 * a1;\n    long m = a1 * b1 - b1 * a2;\n    long n = a2 * b2\
    \ + b2 * c1;\n    long o = a1 * c1 - b1 * a2;\n    long p = a2 * c2 + b2 * a1;\n\
    \    ", "    long ab = abs(b - c);\n    long ac = abs(a - c);\n    long bc = abs(b\
    \ - c);\n    long abc = ab + bc;\n    long acb = ac + bc;\n    long abac = ab\
    \ + ac;\n    long acab = ac + ab;\n    long abcab = ab + bc;\n    long acbca =\
    \ ac + bc;\n    long abcabc = ab + ac;\n    long acbcab = ac + ab;\n    long abcabcb\
    \ = ab + bc;\n    long acbcabd = ac + ab;\n    long abcabcd = ab + ac;\n    long\
    \ acbcabed = ac + ab;\n    long abcabcde = ab + ac;\n    long acbcabfd = ac +\
    \ ab;\n    long abcabcdef = ab + ac;\n    long acbcabdef = ac + ab;\n    long\
    \ abcabcdefg = ab + ac;\n    long acbcabdefg = ac + ab;\n    long abcabcdefgh\
    \ = ab + ac;\n    long acbcabdefgh = ac + ab;\n    long abcabcdefghi = ab + ac;\n\
    \    long acbcabdefghi = ac + ab;\n    long abcabcdefghij = ab + ac;\n    long\
    \ acbcabdefghij = ac + ab;\n    long abcabcdefghijk = ab + ac;\n    long acbcabdefghijk\
    \ = ac + ab;\n    long abcabcdefghijkl = ab + ac;\n    long acbcabdefghijkl =\
    \ ac + ab;\n    long abcabcdefghijkm = ab + ac;\n    long acbcabdefghijkm = ac\
    \ + ab;\n    long abcabcdefghijkn = ab + ac;\n    long acbcabdefghijkn = ac +\
    \ ab;\n    long abcabcdefghijkno = ab + ac;\n    long acbcabdefghijkno = ac +\
    \ ab;\n    long abcabcdefghijknop = ab + ac;\n    long acbcabdefghijknop = ac\
    \ + ab;\n    long abcabcdefghijknopq = ab + ac;\n    long acbcabdefghijknop",
  "    long d = b * b - 4 * a * c;\n    if (d < 0) {\n        return false;\n    }\n\
    \    long x = (b + c) / 2;\n    long y = (-b - c) / 2;\n    long root = (long)\
    \ sqrt(d);\n    long xp = ((b * x) + (c * y)) / root;\n    long yp = ((-b * x)\
    \ + (a * y)) / root;\n    return (xp == yp);", "    // Write your code here\n\
    \    long l1 = abs(a) + abs(b) + abs(c);\n    long l2 = abs(a) + abs(b) + abs(c);\n\
    \    long l3 = abs(a) + abs(b) + abs(c);\n    long l4 = abs(a) + abs(b) + abs(c);\n\
    \    long l5 = abs(a) + abs(b) + abs(c);\n    long l6 = abs(a) + abs(b) + abs(c);\n\
    \    long l7 = abs(a) + abs(b) + abs(c);\n    long l8 = abs(a) + abs(b) + abs(c);\n\
    \    long l9 = abs(a) + abs(b) + abs(c);\n    long l10 = abs(a) + abs(b) + abs(c);\n\
    \    long l11 = abs(a) + abs(b) + abs(c);\n    long l12 = abs(a) + abs(b) + abs(c);\n\
    \    long l13 = abs(a) + abs(b) + abs(c);\n    long l14 = abs(a) + abs(b) + abs(c);\n\
    \    long l15 = abs(a) + abs(b) + abs(c);\n    long l16 = abs(a) + abs(b) + abs(c);\n\
    \    long l17 = abs(a) + abs(b) + abs(c);\n    long l18 = abs(a) + abs(b) + abs(c);\n\
    \    long l19 = abs(a) + abs(b) + abs(c);\n    long l20 = abs(a) + abs(b) + abs(c);\n\
    \    long l21 = abs(a) + abs(b) + abs(c);\n    long l22 = abs(a) + abs(b) + abs(c);\n\
    \    long l23 = abs(a) + abs(b) + abs(c);\n    long l24 = abs(a) + abs(b) + abs(c);\n\
    \    long l25 = abs(a) + abs(b) + abs(c);\n    long l26 = abs(a) + abs(b) + abs(c);\n\
    \    long l27 = abs(a) + abs(b) + abs(c);\n    long l28 = abs(a) + abs(b) + abs(c);\n\
    \    long l29 = abs(a) + abs(b) + abs(c);\n    long l30 = abs(a) + abs(b) + abs(c);\n\
    \    long l31 = abs(a) + abs(b) + abs(c);\n    long l32 = abs(a) + abs(b) + abs(c);\n\
    \    long l33 = abs(a) + abs(b) + abs(c);\n    long l34 = abs(a) + abs(b) + abs(c);\n\
    \    long l35 = abs(a) + abs(b) + abs(c);\n    long l36 = abs(a) + abs(b) + abs(c);\n\
    \    long l37 = abs(a) + abs(b) + abs(c);\n    long ", "    long d = b * b - 4\
    \ * a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long t1 = (-b + root) / (2 * a);\n    long t2 = (-b - root) /\
    \ (2 * a);\n    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n        return\
    \ true;\n    }\n    return false;"]
stop_tokens:
- "\n}"
