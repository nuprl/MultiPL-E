language: cpp
name: HumanEval_58_common
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::vector<long> temp;\n    for (auto\
    \ i : l1) {\n        if (std::find(l2.begin(), l2.end(), i) != l2.end()) {\n \
    \           result.push_back(i);\n        }\n    }\n    for (auto i : l2) {\n\
    \        if (std::find(l1.begin(), l1.end(), i) != l1.end()) {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2eis76gt: /tmp/tmp2eis76gt.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common > 0) {\n            if (l1[i] == common) {\n             \
    \   result.push_back(l1[i]);\n            }\n        }\n    }\n    for (long long\
    \ i = 0; i < l2.size(); i++) {\n        if (common > 0) {\n            if (l2[i]\
    \ == common) {\n                result.push_back(l2[i]);\n            }\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpghwbpwng: /tmp/tmpghwbpwng.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n   \
    \         common++;\n        } else {\n            if (common > 0) {\n       \
    \         result.push_back(common);\n                common = 0;\n           \
    \ }\n            result.push_back(l1.at(i));\n        }\n    }\n    if (common\
    \ > 0) {\n        result.push_back(common);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpb6qxnswz: /tmp/tmpb6qxnswz.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    result.push_back(l2[0]);\n\
    \    long long max1 = l1[0], max2 = l2[0];\n    for (long long i = 1; i < l1.size();\
    \ i++) {\n        if (l1[i] > max1) {\n            result.push_back(l1[i]);\n\
    \            max1 = l1[i];\n        }\n        if (l2[i] > max2) {\n         \
    \   result.push_back(l2[i]);\n            max2 = l2[i];\n        }\n    }\n  \
    \  if (max1 < max2) {\n        result.push_back(l1[l1.size() - 1]);\n    }\n \
    \   if (max2 < max1) {\n        result.push_back(l2[l2.size() - 1]);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpyavx1nob: /tmp/tmpyavx1nob.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    while (i + j < l1.size() && j + k < l2.size())\
    \ {\n        if (l1[i] == l2[j]) {\n            common++;\n            i++;\n\
    \            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n   \
    \     } else {\n            j++;\n        }\n    }\n    if (i == l1.size()) {\n\
    \        result.push_back(l1[k]);\n    } else if (j == l2.size()) {\n        result.push_back(l2[k]);\n\
    \    } else {\n        result.push_back(l1[k]);\n        result.push_back(l2[k]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpw3juup37: /tmp/tmpw3juup37.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long commonCount = 0;\n    long\
    \ long commonIndex = 0;\n    long long l1Index = 0;\n    long long l2Index = 0;\n\
    \    while (l1Index < l1.size() && l2Index < l2.size()) {\n        if (l1[l1Index]\
    \ == l2[l2Index]) {\n            commonCount++;\n            l1Index++;\n    \
    \        l2Index++;\n        } else if (l1[l1Index] < l2[l2Index]) {\n       \
    \     commonCount++;\n            l1Index++;\n        } else {\n            commonCount++;\n\
    \            l2Index++;\n        }\n    }\n    while (commonCount > 0) {\n   \
    \     if (commonIndex < result.size()) {\n            result[commonIndex] = l1[l1Index];\n\
    \            commonIndex++;\n            l1Index++;\n        } else {\n      \
    \      result.push_back(l1[l1Index]);\n            commonIndex++;\n          \
    \  l1Index++;\n        }\n        commonCount--;\n    }\n    while (l2Index <\
    \ l2.size()) {\n        result.push_back(l2[l2Index]);\n        l2Index++;\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = common;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpxv0velhn: /tmp/tmpxv0velhn.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    while (i<l1.size() && j<l2.size()) {\n\
    \        if (l1[i]==l2[j]) {\n            common++;\n            i++;\n      \
    \      j++;\n        } else if (l1[i]<l2[j]) {\n            i++;\n        } else\
    \ {\n            j++;\n        }\n    }\n    while (i < l1.size()) {\n       \
    \ result.push_back(l1[i]);\n        i++;\n    }\n    while (j < l2.size()) {\n\
    \        result.push_back(l2[j]);\n        j++;\n    }\n    while (i < l1.size()\
    \ && j < l2.size()) {\n        if (l1[i]==l2[j]) {\n            common++;\n  \
    \          i++;\n            j++;\n        } else if (l1[i]<l2[j]) {\n       \
    \     i++;\n        } else {\n            j++;\n        }\n    }\n    while (i\
    \ < l1.size()) {\n        result.push_back(l1[i]);\n        i++;\n    }\n    while\
    \ (j < l2.size()) {\n        result.push_back(l2[j]);\n        j++;\n    }\n \
    \   while (i < l1.size() && j < l2.size()) {\n        if (l1[i]==l2[j]) {\n  \
    \          common++;\n            i++;\n            j++;\n        } else if (l1[i]<l2[j])\
    \ {\n            i++;\n        } else {\n            j++;\n        }\n    }\n\
    \    while (i < l1.size()) {\n        result.push_back(l1[i]);\n        i++;\n\
    \    }\n    while (j < l2.size()) {\n        result.push_back(l2[j]);\n      \
    \  j++;\n    }\n    while (i < l1.size() && j < l2.size()) {\n        if (l1[i]==l2[j])\
    \ {\n            common++;\n            i++;\n            j++;\n        } else\
    \ if (l1[i]<l2[j]) {\n            i++;\n        } else {\n            j++;\n \
    \       }\n    }\n    while (i < l1.size()) {\n        result.push_back(l1[i]);\n\
    \        i++;\n    }\n    while (j < l2.size()) {\n        result.push_back(l2[j]);\n\
    \        j++;\n    }\n    while (i < l1.size() && j < l2.size()) {\n        if\
    \ (l1[i]==l2[j]) {\n            common++;\n            i++;\n            j++;\n\
    \        } else if (l1[i]<l2[j]) {\n            i++;\n        } else {\n     \
    \       j++;\n        }\n    }\n    while (i < l1.size()) {\n        result.push_back(l1[i]);\n\
    \        i++;\n    }\n    while (j < l2.size()) {\n        result.push_back(l2[j]);\n\
    \        j++;\n    }\n    while (i < l1.size() && j < l2.size()) {\n        if\
    \ (l1[i]==l2[j]) {\n            common++;\n            i++;\n            j++;\n\
    \        } else if (l1[i]<\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprm28fdzr.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmprm28fdzr.cpp:115:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n  115 | }\n      | ^\n/tmp/tmprm28fdzr.cpp:114:26:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  114 |         }\
    \ else if (l1[i]<\n      |                   ~      ^\n      |               \
    \           )\n  115 | }\n      | ~                         \n/tmp/tmprm28fdzr.cpp:115:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  115 | }\n \
    \     | ^\n/tmp/tmprm28fdzr.cpp:116:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n  116 | int main() {\n      |            ^\n\
    /tmp/tmprm28fdzr.cpp:122:1: error: expected \u2018}\u2019 at end of input\n  122\
    \ | }\n      | ^\n/tmp/tmprm28fdzr.cpp:8:70: note: to match this \u2018{\u2019\
    \n    8 | std::vector<long> common(std::vector<long> l1, std::vector<long> l2)\
    \ {\n      |                                                                 \
    \     ^\n/tmp/tmprm28fdzr.cpp:122:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n  122 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    long common = 0;\n    for (long i = 0;\
    \ i < l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n    \
    \        if (l1[i] == l2[j]) {\n                common++;\n            }\n   \
    \     }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (common\
    \ != 0) {\n            if (l1[i] != common) {\n                res.push_back(l1[i]);\n\
    \            }\n        } else {\n            res.push_back(l1[i]);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpgqv2spox: /tmp/tmpgqv2spox.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n   \
    \         common++;\n        } else {\n            if (common > 0) {\n       \
    \         result.push_back(common);\n                common = 0;\n           \
    \ }\n            result.push_back(l1.at(i));\n        }\n    }\n    if (common\
    \ > 0) {\n        result.push_back(common);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpb6qxnswz: /tmp/tmpb6qxnswz.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    result.push_back(l2[0]);\n\
    \    for(size_t i = 1; i < l1.size(); i++) {\n        if(l1[i] != l2[i]) {\n \
    \           result.push_back(l1[i]);\n            result.push_back(l2[i]);\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmphsmk516t: /tmp/tmphsmk516t.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common > 0) {\n            if (l1[i] != common) {\n             \
    \   res.push_back(l1[i]);\n                common--;\n            }\n        }\
    \ else {\n            res.push_back(l1[i]);\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpaher0w8f: /tmp/tmpaher0w8f.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common > result.size()) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long long i = 0; i < l2.size(); i++) {\n        if\
    \ (common > result.size()) {\n            result.push_back(l2[i]);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4li2464y: /tmp/tmp4li2464y.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common > 0) {\n            if (l1[i] != common) {\n             \
    \   result.push_back(l1[i]);\n                common--;\n            }\n     \
    \   } else {\n            result.push_back(l1[i]);\n        }\n    }\n    for\
    \ (long long i = 0; i < l2.size(); i++) {\n        if (common > 0) {\n       \
    \     if (l2[i] != common) {\n                result.push_back(l2[i]);\n     \
    \           common--;\n            }\n        } else {\n            result.push_back(l2[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp44fpgxpe: /tmp/tmp44fpgxpe.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i=1;i<l1.size();i++) {\n        for(long j=1;j<l2.size();j++) {\n          \
    \  if(l1[i]==l2[j]) {\n                result.push_back(l1[i]);\n            \
    \    break;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp61y7jqah: /tmp/tmp61y7jqah.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common > 0) {\n            if (l1[i] != common) {\n             \
    \   result.push_back(l1[i]);\n            }\n        } else {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long long i = 0; i < l2.size(); i++) {\n        if\
    \ (common > 0) {\n            if (l2[i] != common) {\n                result.push_back(l2[i]);\n\
    \            }\n        } else {\n            result.push_back(l2[i]);\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpx4elvj9x: /tmp/tmpx4elvj9x.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::vector<long>::iterator it;\n\
    \    for (it = std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ std::back_inserter(result)).begin(); it != result.end(); ++it)\n        result.erase(*it);\n\
    \    return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_xu91hpk.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp_xu91hpk.cpp:11:109: error: \u2018\
    class std::back_insert_iterator<std::vector<long int> >\u2019 has no member named\
    \ \u2018begin\u2019\n   11 |     for (it = std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(result)).begin(); it != result.end();\
    \ ++it)\n      |                                                             \
    \                                                ^~~~~\n/tmp/tmp_xu91hpk.cpp:12:25:\
    \ error: no matching function for call to \u2018std::vector<long int>::erase(long\
    \ int&)\u2019\n   12 |         result.erase(*it);\n      |                   \
    \      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp_xu91hpk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1427:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::erase(std::vector<_Tp,\
    \ _Alloc>::const_iterator) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; typename __gnu_cxx::__alloc_traits<typename\
    \ std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const long\
    \ int*]\u2019\n 1427 |       erase(const_iterator __position)\n      |       ^~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1427:28:\
    \ note:   no known conversion for argument 1 from \u2018long int\u2019 to \u2018\
    std::vector<long int>::const_iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >\u2019}\n 1427 |       erase(const_iterator\
    \ __posit"
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    res.push_back(common);\n    return res;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpgk8aihbh: /tmp/tmpgk8aihbh.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ i = 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n        \
    \    common++;\n        } else {\n            if (common > 0) {\n            \
    \    result.push_back(common);\n                common = 0;\n            }\n \
    \           result.push_back(l1.at(i));\n        }\n    }\n    if (common > 0)\
    \ {\n        result.push_back(common);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbxzf0n63: /tmp/tmpbxzf0n63.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(size_t\
    \ i = 1; i < l1.size(); i++) {\n        for(size_t j = 0; j < l2.size(); j++)\
    \ {\n            if(l1[i] == l2[j]) {\n                result.push_back(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbwedcier: /tmp/tmpbwedcier.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    long long common = 0;\n    long long\
    \ l = 0;\n    long long r = 0;\n    for (long long i = 0; i < l1.size(); i++)\
    \ {\n        common = common * 10 + l1[i];\n    }\n    for (long long i = 0; i\
    \ < l2.size(); i++) {\n        common = common * 10 + l2[i];\n    }\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        l = l * 10 + l1[i];\n    }\n    for\
    \ (long long i = 0; i < l2.size(); i++) {\n        r = r * 10 + l2[i];\n    }\n\
    \    if (common > r) {\n        res.push_back(l);\n        res.push_back(r);\n\
    \    }\n    if (common < l) {\n        res.push_back(r);\n        res.push_back(l);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpzzc3rzcx: /tmp/tmpzzc3rzcx.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::vector<long>::iterator it;\n\
    \    for (it = std::begin(l1); it != std::end(l1); ++it) {\n        bool found\
    \ = false;\n        for (it = std::begin(l2); it != std::end(l2); ++it) {\n  \
    \          if (*it == *it) {\n                found = true;\n                break;\n\
    \            }\n        }\n        if (!found) {\n            result.push_back(*it);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i=1;i<l1.size();i++) {\n        for(long j=0;j<l2.size();j++) {\n          \
    \  if(l1[i]==l2[j]) {\n                result.push_back(l1[i]);\n            \
    \    break;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvhbjy378: /tmp/tmpvhbjy378.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(res));\n    return res;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3nr7bhz6: /tmp/tmp3nr7bhz6.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::vector<long>::iterator it;\n\
    \    it = std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(result));\n\
    \    result.erase(std::unique(result.begin(), result.end()), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxhrh4v90.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpxhrh4v90.cpp:11:102: error: no\
    \ match for \u2018operator=\u2019 (operand types are \u2018std::vector<long int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    } and \u2018std::back_insert_iterator<std::vector<long int> >\u2019)\n   11 |\
    \     it = std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(result));\n\
    \      |                                                                     \
    \                                 ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpxhrh4v90.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:787:11:\
    \ note: candidate: \u2018constexpr __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >& __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator=(const\
    \ __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >&)\u2019\n  787\
    \ |     class __normal_iterator\n      |           ^~~~~~~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:787:11:\
    \ note:   no known conversion for argument 1 from \u2018std::back_insert_iterator<std::vector<long\
    \ int> >\u2019 to \u2018const __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >&\u2019\n/shared/centos7/gcc/9.2.0-skylake/include"
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for(long\
    \ long i = 0; i < l1.size(); i++) {\n        for(long long j = 0; j < l2.size();\
    \ j++) {\n            if(l1[i] == l2[j]) {\n                common++;\n      \
    \      }\n        }\n    }\n    for(long long i = 0; i < l1.size(); i++) {\n \
    \       if(common != 0) {\n            if(l1[i] != common) {\n               \
    \ result.push_back(l1[i]);\n            }\n        } else {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp254zdl1j: /tmp/tmp254zdl1j.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(size_t\
    \ i = 1; i < l1.size(); i++) {\n        for(size_t j = 0; j < l2.size(); j++)\
    \ {\n            if(l1[i] == l2[j]) {\n                result.push_back(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbwedcier: /tmp/tmpbwedcier.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    long long\
    \ min1 = std::numeric_limits<long long>::min();\n    long long min2 = std::numeric_limits<long\
    \ long>::min();\n    for (long long i = 0; i < l1.size(); i++) {\n        if (l1[i]\
    \ < min1) {\n            min1 = l1[i];\n        }\n        if (l2[i] < min2) {\n\
    \            min2 = l2[i];\n        }\n    }\n    for (long long i = 0; i < l1.size();\
    \ i++) {\n        if (l1[i] == min1) {\n            for (long long j = 0; j <\
    \ l2.size(); j++) {\n                if (l2[j] == min2) {\n                  \
    \  common++;\n                    result.push_back(l1[i]);\n                 \
    \   result.push_back(l2[j]);\n                    break;\n                }\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp1mp8hg8i: /tmp/tmp1mp8hg8i.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i=1;i<l1.size();i++) {\n        if(l1[i]==l2[0]) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for(long i=1;i<l2.size();i++) {\n        if(l2[i]==l1[0])\
    \ {\n            result.push_back(l2[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpuwn4kfiu: /tmp/tmpuwn4kfiu.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    for (long i\
    \ = 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n          \
    \  common++;\n        } else {\n            if (common > 0) {\n              \
    \  result.push_back(common);\n                common = 0;\n            }\n   \
    \         result.push_back(l1.at(i));\n        }\n    }\n    if (common > 0) {\n\
    \        result.push_back(common);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4ixk3zow: /tmp/tmp4ixk3zow.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(size_t\
    \ i = 1; i < l1.size(); i++) {\n        if(l1[i] == l2[0]) {\n            result.push_back(l1[i]);\n\
    \        }\n        else if(l1[i] < l2[0]) {\n            result.push_back(l1[i]);\n\
    \        }\n        else if(l1[i] > l2[0]) {\n            result.push_back(l2[0]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpp5hg8xty: /tmp/tmpp5hg8xty.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l1[2]);\n    result.push_back(l1[3]);\n    result.push_back(l1[4]);\n\
    \    result.push_back(l1[5]);\n    result.push_back(l1[6]);\n    result.push_back(l1[7]);\n\
    \    result.push_back(l1[8]);\n    result.push_back(l1[9]);\n    result.push_back(l1[10]);\n\
    \    result.push_back(l1[11]);\n    result.push_back(l1[12]);\n    result.push_back(l1[13]);\n\
    \    result.push_back(l1[14]);\n    result.push_back(l1[15]);\n    result.push_back(l1[16]);\n\
    \    result.push_back(l1[17]);\n    result.push_back(l1[18]);\n    result.push_back(l1[19]);\n\
    \    result.push_back(l1[20]);\n    result.push_back(l1[21]);\n    result.push_back(l1[22]);\n\
    \    result.push_back(l1[23]);\n    result.push_back(l1[24]);\n    result.push_back(l1[25]);\n\
    \    result.push_back(l1[26]);\n    result.push_back(l1[27]);\n    result.push_back(l1[28]);\n\
    \    result.push_back(l1[29]);\n    result.push_back(l1[30]);\n    result.push_back(l1[31]);\n\
    \    result.push_back(l1[32]);\n    result.push_back(l1[33]);\n    result.push_back(l1[34]);\n\
    \    result.push_back(l1[35]);\n    result.push_back(l1[36]);\n    result.push_back(l1[37]);\n\
    \    result.push_back(l1[38]);\n    result.push_back(l1[39]);\n    result.push_back(l1[40]);\n\
    \    result.push_back(l1[41]);\n    result.push_back(l1[42]);\n    result.push_back(l1[43]);\n\
    \    result.push_back(l1[44]);\n    result.push_back(l1[45]);\n    result.push_back(l1[46]);\n\
    \    result.push_back(l1[47]);\n    result.push_back(l1[48]);\n    result.push_back(l1[49]);\n\
    \    result.push_back(l1[50]);\n    result.push_back(l1[51]);\n    result.push_back(l1[52]);\n\
    \    result.push_back(l1[53]);\n    result.push_back(l1[54]);\n    result.push_back(l1[55]);\n\
    \    result.push_back(l1[56]);\n    result.push_back(l1[57]);\n    result.push_back(l1[58]);\n\
    \    result.push_back(l1[59]);\n    result.push_back(l1[60]);\n    result.push_back(l1[61]);\n\
    \    \n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppo73n0o1: /tmp/tmppo73n0o1.cpp:76: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    long long\
    \ min1 = l1[0], min2 = l2[0];\n    for (long long i = 1; i < l1.size(); i++) {\n\
    \        if (l1[i] == min1) {\n            min1 = l1[i];\n        } else if (l1[i]\
    \ < min1) {\n            min1 = l1[i];\n        }\n    }\n    for (long long i\
    \ = 1; i < l2.size(); i++) {\n        if (l2[i] == min2) {\n            min2 =\
    \ l2[i];\n        } else if (l2[i] < min2) {\n            min2 = l2[i];\n    \
    \    }\n    }\n    for (long long i = 1; i < l1.size(); i++) {\n        for (long\
    \ long j = 1; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n     \
    \           common++;\n            }\n        }\n    }\n    if (common > 0) {\n\
    \        result.push_back(min1);\n        result.push_back(min2);\n        result.push_back(common);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvkekth0p: /tmp/tmpvkekth0p.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long max1 = 0, max2 = 0;\n  \
    \  for (long long i = 0; i < (long long)l1.size(); i++) {\n        if (l1[i] >\
    \ max1) {\n            max1 = l1[i];\n        }\n    }\n    for (long long i =\
    \ 0; i < (long long)l2.size(); i++) {\n        if (l2[i] > max2) {\n         \
    \   max2 = l2[i];\n        }\n    }\n    for (long long i = 0; i < (long long)l1.size();\
    \ i++) {\n        for (long long j = 0; j < (long long)l2.size(); j++) {\n   \
    \         if (l1[i] == l2[j]) {\n                result.push_back(l1[i]);\n  \
    \          }\n        }\n    }\n    for (long long i = 0; i < (long long)l2.size();\
    \ i++) {\n        for (long long j = 0; j < (long long)l1.size(); j++) {\n   \
    \         if (l2[i] == l1[j]) {\n                result.push_back(l2[i]);\n  \
    \          }\n        }\n    }\n    for (long long i = 0; i < (long long)result.size();\
    \ i++) {\n        if (max1 < max2) {\n            result.push_back(l1[i]);\n \
    \       } else {\n            result.push_back(l2[i]);\n        }\n    }\n   \
    \ std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    long min = 0;\n\
    \    long max = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        if (l1.at(i)\
    \ == l2.at(i)) {\n            common++;\n            if (min == 0) {\n       \
    \         min = i;\n            }\n            if (max == 0) {\n             \
    \   max = i;\n            }\n        }\n    }\n    if (common == 0) {\n      \
    \  result.push_back(l1.at(min));\n        result.push_back(l2.at(min));\n    }\n\
    \    else {\n        result.push_back(l1.at(min));\n        result.push_back(l2.at(max));\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9ls2nuc4: /tmp/tmp9ls2nuc4.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    for (long i\
    \ = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n\
    \            if (l1[i] == l2[j]) {\n                common++;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (common\
    \ != 0) {\n            if (l1[i] != common) {\n                result.push_back(l1[i]);\n\
    \            }\n        }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n\
    \        if (common != 0) {\n            if (l2[i] != common) {\n            \
    \    result.push_back(l2[i]);\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2f5d93w5: /tmp/tmp2f5d93w5.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long max1 = 0, max2 = 0;\n  \
    \  for (long long i : l1) {\n        if (max1 < i) {\n            max1 = i;\n\
    \        }\n    }\n    for (long long i : l2) {\n        if (max2 < i) {\n   \
    \         max2 = i;\n        }\n    }\n    if (max1 == max2) {\n        for (long\
    \ long i : l1) {\n            if (l1.find(i) != l1.end()) {\n                result.push_back(i);\n\
    \            }\n        }\n        for (long long i : l2) {\n            if (l2.find(i)\
    \ != l2.end()) {\n                result.push_back(i);\n            }\n      \
    \  }\n    } else {\n        for (long long i : l1) {\n            if (l1.find(i)\
    \ != l1.end()) {\n                result.push_back(i);\n            }\n      \
    \  }\n        for (long long i : l2) {\n            if (l2.find(i) != l2.end())\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo8ny_ia8.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpo8ny_ia8.cpp:23:20: error: \u2018\
    class std::vector<long int>\u2019 has no member named \u2018find\u2019\n   23\
    \ |             if (l1.find(i) != l1.end()) {\n      |                    ^~~~\n\
    /tmp/tmpo8ny_ia8.cpp:28:20: error: \u2018class std::vector<long int>\u2019 has\
    \ no member named \u2018find\u2019\n   28 |             if (l2.find(i) != l2.end())\
    \ {\n      |                    ^~~~\n/tmp/tmpo8ny_ia8.cpp:34:20: error: \u2018\
    class std::vector<long int>\u2019 has no member named \u2018find\u2019\n   34\
    \ |             if (l1.find(i) != l1.end()) {\n      |                    ^~~~\n\
    /tmp/tmpo8ny_ia8.cpp:39:20: error: \u2018class std::vector<long int>\u2019 has\
    \ no member named \u2018find\u2019\n   39 |             if (l2.find(i) != l2.end())\
    \ {\n      |                    ^~~~\n"
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(size_t\
    \ i = 1; i < l1.size(); i++) {\n        for(size_t j = 0; j < l2.size(); j++)\
    \ {\n            if(l1[i] == l2[j]) {\n                result.push_back(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbwedcier: /tmp/tmpbwedcier.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    long minl =\
    \ std::min(l1.size(), l2.size());\n    for (long i = 0; i < minl; i++) {\n   \
    \     if (l1[i] == l2[i]) {\n            common++;\n        } else {\n       \
    \     result.push_back(std::min(l1[i], l2[i]));\n        }\n    }\n    if (common\
    \ > 0) {\n        result.push_back(common);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbxga71r3: /tmp/tmpbxga71r3.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    for (long i\
    \ = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n\
    \            if (l1[i] == l2[j]) {\n                common++;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (common\
    \ == 0) {\n            result.push_back(l1[i]);\n        }\n    }\n    for (long\
    \ i = 0; i < l2.size(); i++) {\n        if (common == 0) {\n            result.push_back(l2[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpc4q0i3b6: /tmp/tmpc4q0i3b6.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n   \
    \         common++;\n        } else {\n            if (common > 0) {\n       \
    \         result.push_back(common);\n                common = 0;\n           \
    \ }\n            result.push_back(l1.at(i));\n        }\n    }\n    if (common\
    \ > 0) {\n        result.push_back(common);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpb6qxnswz: /tmp/tmpb6qxnswz.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    for(long i =\
    \ 0; i < l1.size(); i++) {\n        for(long j = 0; j < l2.size(); j++) {\n  \
    \          if(l1[i] == l2[j]) {\n                common++;\n            }\n  \
    \      }\n    }\n    for(long i = 0; i < l1.size(); i++) {\n        if(common\
    \ != 0) {\n            if(l1[i] != common) {\n                result.push_back(l1[i]);\n\
    \                common = 0;\n            }\n        } else {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpwz566tk7: /tmp/tmpwz566tk7.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(res));\n    return res;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3nr7bhz6: /tmp/tmp3nr7bhz6.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    long long\
    \ min1 = l1[0], min2 = l2[0];\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (l1[i] < min1) {\n            min1 = l1[i];\n        }\n        if\
    \ (l2[i] < min2) {\n            min2 = l2[i];\n        }\n    }\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        if (l1[i] == min1) {\n          \
    \  common += min2;\n        } else if (l2[i] == min2) {\n            common +=\
    \ min1;\n        } else {\n            common += l1[i];\n        }\n        result.push_back(common);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3h653cn5: /tmp/tmp3h653cn5.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long minVal = l1[0], maxVal = l1[0],\
    \ minVal2 = l2[0], maxVal2 = l2[0];\n    for (long i : l1) {\n        if (i <\
    \ minVal) minVal = i;\n        if (i > maxVal) maxVal = i;\n    }\n    for (long\
    \ i : l2) {\n        if (i < minVal2) minVal2 = i;\n        if (i > maxVal2) maxVal2\
    \ = i;\n    }\n    if (minVal == maxVal) result.push_back(minVal);\n    if (minVal2\
    \ == maxVal2) result.push_back(minVal2);\n    return result;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpgh5q97pc: /tmp/tmpgh5q97pc.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    for (long i\
    \ = 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n          \
    \  common++;\n        } else {\n            if (common > 0) {\n              \
    \  result.push_back(common);\n                common = 0;\n            }\n   \
    \         result.push_back(l1.at(i));\n        }\n    }\n    if (common > 0) {\n\
    \        result.push_back(common);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4ixk3zow: /tmp/tmp4ixk3zow.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    for (long i\
    \ = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n\
    \            if (l1[i] == l2[j]) {\n                common++;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (common\
    \ > 0) {\n            if (l1[i] != common) {\n                result.push_back(l1[i]);\n\
    \                common = 0;\n            }\n        } else {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (common\
    \ > 0) {\n            if (l2[i] != common) {\n                result.push_back(l2[i]);\n\
    \                common = 0;\n            }\n        } else {\n            result.push_back(l2[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4k859wq7: /tmp/tmp4k859wq7.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    for (long i\
    \ = 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n          \
    \  common++;\n        } else {\n            if (common > 0) {\n              \
    \  result.push_back(common);\n                common = 0;\n            }\n   \
    \         result.push_back(l1.at(i));\n        }\n    }\n    if (common > 0) {\n\
    \        result.push_back(common);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4ixk3zow: /tmp/tmp4ixk3zow.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::vector<long>::iterator it;\n\
    \    for (it = std::begin(l1); it != std::end(l1); ++it) {\n        auto it2 =\
    \ std::find(std::begin(l2), std::end(l2), *it);\n        if (it2 != std::end(l2))\
    \ {\n            result.push_back(*it);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp765wr9l8: /tmp/tmp765wr9l8.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    result.push_back(l2[0]);\n\
    \    for(long i=1;i<l1.size();i++) {\n        if(l1[i]==l2[i]) {\n           \
    \ result.push_back(l1[i]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpcw0jowfv: /tmp/tmpcw0jowfv.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long max = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        if (l1.at(i) > l2.at(i)) {\n    \
    \        max = l1.at(i);\n        } else {\n            max = l2.at(i);\n    \
    \    }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n        if (l1.at(i)\
    \ == max) {\n            result.push_back(l1.at(i));\n        }\n    }\n    for\
    \ (long long i = 0; i < l2.size(); i++) {\n        if (l2.at(i) == max) {\n  \
    \          result.push_back(l2.at(i));\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpci2598zj: /tmp/tmpci2598zj.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(res));\n    return res;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3nr7bhz6: /tmp/tmp3nr7bhz6.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    long long\
    \ i = 0;\n    long long j = 0;\n    long long k = 0;\n    long long l = 0;\n \
    \   long long m = 0;\n    long long n = 0;\n    long long x = 0;\n    long long\
    \ y = 0;\n    long long z = 0;\n    long long count = 0;\n    long long sum =\
    \ 0;\n    long long sum2 = 0;\n    long long sum3 = 0;\n    long long sum4 = 0;\n\
    \    long long sum5 = 0;\n    long long sum6 = 0;\n    long long sum7 = 0;\n \
    \   long long sum8 = 0;\n    long long sum9 = 0;\n    long long sum10 = 0;\n \
    \   long long sum11 = 0;\n    long long sum12 = 0;\n    long long sum13 = 0;\n\
    \    long long sum14 = 0;\n    long long sum15 = 0;\n    long long sum16 = 0;\n\
    \    long long sum17 = 0;\n    long long sum18 = 0;\n    long long sum19 = 0;\n\
    \    long long sum20 = 0;\n    long long sum21 = 0;\n    long long sum22 = 0;\n\
    \    long long sum23 = 0;\n    long long sum24 = 0;\n    long long sum25 = 0;\n\
    \    long long sum26 = 0;\n    long long sum27 = 0;\n    long long sum28 = 0;\n\
    \    long long sum29 = 0;\n    long long sum30 = 0;\n    long long sum31 = 0;\n\
    \    long long sum32 = 0;\n    long long sum33 = 0;\n    long long sum34 = 0;\n\
    \    long long sum35 = 0;\n    long long sum36 = 0;\n    long long sum37 = 0;\n\
    \    long long sum38 = 0;\n    long long sum39 = 0;\n    long long sum40 = 0;\n\
    \    long long sum41 = 0;\n    long long sum42 = 0;\n    long long sum43 = 0;\n\
    \    long long sum44 = 0;\n    long long sum45 = 0;\n    long long sum46 = 0;\n\
    \    long long sum47 = 0;\n    long long sum48 = 0;\n    long long sum49 = 0;\n\
    \    long long sum50 = 0;\n    long long sum51 = 0;\n    long long sum52 = 0;\n\
    \    long long sum53 = 0;\n    long long sum54 = 0;\n    long long sum55 = 0;\n\
    \    long long sum56 = 0;\n    long long sum57 = 0;\n    long long sum58 = 0;\n\
    \    long long sum59 = 0;\n    long long sum60 = 0;\n    long long sum61 = 0;\n\
    \    long long sum62 = 0;\n    long long sum63 = 0;\n    long long sum64 = 0;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpngyuh50t: /tmp/tmpngyuh50t.cpp:88: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(res));\n    return res;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3nr7bhz6: /tmp/tmp3nr7bhz6.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common != 0) {\n            if (l1[i] != common) {\n            \
    \    result.push_back(l1[i]);\n            }\n        } else {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmphxvm0ilv: /tmp/tmphxvm0ilv.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    long long\
    \ min = 0;\n    long long max = 0;\n    long long min1 = 0, max1 = 0;\n    long\
    \ long min2 = 0, max2 = 0;\n    for (long i = 0; i < l1.size(); i++) {\n     \
    \   if (l1.at(i) == l2.at(i)) {\n            common++;\n            if (min >\
    \ l1.at(i)) {\n                min = l1.at(i);\n                min1 = i;\n  \
    \          }\n            if (max < l1.at(i)) {\n                max = l1.at(i);\n\
    \                max1 = i;\n            }\n            if (min1 > l2.at(i)) {\n\
    \                min2 = l2.at(i);\n                min2 = i;\n            }\n\
    \            if (max2 > l2.at(i)) {\n                max2 = l2.at(i);\n      \
    \          max2 = i;\n            }\n        }\n    }\n    if (common > 0) {\n\
    \        result.push_back(min);\n        result.push_back(max);\n        result.push_back(min1);\n\
    \        result.push_back(max1);\n        result.push_back(min2);\n        result.push_back(max2);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpsk3p04c3: /tmp/tmpsk3p04c3.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062092
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::vector<long>::iterator it;\n\
    \    for (it = std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ std::back_inserter(result)).begin(); it != result.end(); ++it) {\n        result.erase(it);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwjfhvo7o.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpwjfhvo7o.cpp:11:109: error: \u2018\
    class std::back_insert_iterator<std::vector<long int> >\u2019 has no member named\
    \ \u2018begin\u2019\n   11 |     for (it = std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(result)).begin(); it != result.end();\
    \ ++it) {\n      |                                                           \
    \                                                  ^~~~~\n"
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common > result.size()) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long long i = 0; i < l2.size(); i++) {\n        if\
    \ (common > result.size()) {\n            result.push_back(l2[i]);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4li2464y: /tmp/tmp4li2464y.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i=1;i<l1.size();i++) {\n        for(long j=0;j<l2.size();j++) {\n          \
    \  if(l1[i]==l2[j]) {\n                result.push_back(l1[i]);\n            \
    \    break;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvhbjy378: /tmp/tmpvhbjy378.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i=1;i<l1.size();i++) {\n        for(long j=1;j<l2.size();j++) {\n          \
    \  if(l1[i]==l2[j]) {\n                result.push_back(l1[i]);\n            \
    \    break;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp61y7jqah: /tmp/tmp61y7jqah.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    long long\
    \ max = 0;\n    long long min = 0;\n    for (long long i = 0; i < l1.size(); i++)\
    \ {\n        common = std::min(common, std::min(l1[i], l2[i]));\n        max =\
    \ std::max(max, std::max(l1[i], l2[i]));\n        min = std::min(min, std::min(l1[i],\
    \ l2[i]));\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n        if\
    \ (l1[i] == l2[i]) {\n            result.push_back(l1[i]);\n        }\n    }\n\
    \    for (long long i = 0; i < l2.size(); i++) {\n        if (l1[i] == l2[i])\
    \ {\n            result.push_back(l2[i]);\n        }\n    }\n    for (long long\
    \ i = 0; i < result.size(); i++) {\n        if (result[i] == common) {\n     \
    \       result.erase(result.begin() + i);\n        }\n    }\n    for (long long\
    \ i = 0; i < result.size(); i++) {\n        if (result[i] == common) {\n     \
    \       result.erase(result.begin() + i);\n        }\n    }\n    for (long long\
    \ i = 0; i < result.size(); i++) {\n        if (result[i] == common) {\n     \
    \       result.erase(result.begin() + i);\n        }\n    }\n    for (long long\
    \ i = 0; i < result.size(); i++) {\n        if (result[i] == common) {\n     \
    \       result.erase(result.begin() + i);\n        }\n    }\n    for (long long\
    \ i = 0; i < result.size(); i++) {\n        if (result[i] == common) {\n     \
    \       result.erase(result.begin() + i);\n        }\n    }\n    for (long long\
    \ i = 0; i < result.size(); i++) {\n        if (result[i] == common) {\n     \
    \       result.erase(result.begin() + i);\n        }\n    }\n    for (long long\
    \ i = 0; i < result.size(); i++) {\n        if (result[i] == common) {\n     \
    \       result.erase(result.begin() + i);\n        }\n    }\n    for (long long\
    \ i = 0; i < result.size(); i++) {\n        if (result[i] == common) {\n     \
    \       result.erase(result.begin() + i);\n        }\n    }\n    for (long long\
    \ i = 0; i < result.size(); i++) {\n        if (result[i] == common) {\n     \
    \       result.erase(result.begin() + i);\n        }\n    }\n    for (long long\
    \ i = 0; i < result.size(); i++) {\n        if (result[i] == common) {\n     \
    \       result.erase(result.begin() + i);\n        }\n    }\n    for (long long\
    \ i = 0; i < result.size(); i++) {\n        if (result[i] == common) {\n     \
    \       result.erase(result.begin() + i);\n        }\n    }\n    for (long long\
    \ i = 0; i < result.size(); i++) {\n        if (result[i] == common) {\n     \
    \       result.erase(result.begin() + i);\n        }\n    }\n    for (long long\
    \ i = 0; i < result.size(); i++) {\n        if (result[i] == common) {\n     \
    \       result.erase(result.begin() + i);\n        }\n    }\n    for (long long\
    \ i = 0; i < result.size(); i++) {\n        if (result[i] == common) {\n     \
    \       result.erase(result.begin() + i);\n        }\n    }\n    for (long long\
    \ i = 0; i < result.size(); i++) {\n        if (result[i] == common) {\n     \
    \       result.erase(result.begin() + i);\n        }\n    }\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptq_skc6g.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmptq_skc6g.cpp:14:57: error: no matching\
    \ function for call to \u2018min(long long int&, const long int&)\u2019\n   14\
    \ |         common = std::min(common, std::min(l1[i], l2[i]));\n      |      \
    \                                                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmptq_skc6g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmptq_skc6g.cpp:14:57:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018long int\u2019)\n   14 |         common = std::min(common,\
    \ std::min(l1[i], l2[i]));\n      |                                          \
    \               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7"
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    long long\
    \ common2 = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for (long\
    \ j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n          \
    \      common++;\n            }\n            if (l1[i] < l2[j]) {\n          \
    \      common2++;\n            }\n        }\n    }\n    if (common > common2)\
    \ {\n        result.push_back(l1[0]);\n    }\n    if (common < common2) {\n  \
    \      result.push_back(l2[0]);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2lbkng4m: /tmp/tmp2lbkng4m.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long commonCount = 0;\n    long\
    \ long commonElement = 0;\n    for (long long i = 0; i < l1.size(); i++) {\n \
    \       for (long long j = 0; j < l2.size(); j++) {\n            if (l1[i] ==\
    \ l2[j]) {\n                commonCount++;\n                commonElement = l1[i];\n\
    \            }\n        }\n    }\n    if (commonCount == 0) {\n        return\
    \ result;\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n        if\
    \ (l1[i] == commonElement) {\n            result.push_back(commonElement);\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpsag562a4: /tmp/tmpsag562a4.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    long long max = 0;\n    for (long long\
    \ i = 0; i < l1.size(); i++) {\n        if (l1.at(i) > l2.at(i)) {\n         \
    \   max = l1.at(i);\n        } else {\n            max = l2.at(i);\n        }\n\
    \    }\n    for (long long i = 0; i < l1.size(); i++) {\n        if (l1.at(i)\
    \ == max) {\n            res.push_back(l1.at(i));\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmptv8nckp9: /tmp/tmptv8nckp9.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    long long common = 0;\n    long long\
    \ min1 = l1[0], min2 = l2[0];\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (l1[i] < min1) min1 = l1[i];\n        if (l2[i] < min2) min2 = l2[i];\n\
    \    }\n    for (long long i = 0; i < l1.size(); i++) {\n        if (l1[i] ==\
    \ min1 && l2[i] == min2) common++;\n    }\n    for (long long i = 0; i < l2.size();\
    \ i++) {\n        if (l1[i] == min2 && l2[i] == min1) common++;\n    }\n    res.push_back(common);\n\
    \    return res;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5oqsgj2c: /tmp/tmp5oqsgj2c.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    long long\
    \ common2 = 0;\n    long long common3 = 0;\n    long long common4 = 0;\n    long\
    \ long common5 = 0;\n    long long common6 = 0;\n    long long common7 = 0;\n\
    \    long long common8 = 0;\n    long long common9 = 0;\n    long long common10\
    \ = 0;\n    long long common11 = 0;\n    long long common12 = 0;\n    long long\
    \ common13 = 0;\n    long long common14 = 0;\n    long long common15 = 0;\n  \
    \  long long common16 = 0;\n    long long common17 = 0;\n    long long common18\
    \ = 0;\n    long long common19 = 0;\n    long long common20 = 0;\n    long long\
    \ common21 = 0;\n    long long common22 = 0;\n    long long common23 = 0;\n  \
    \  long long common24 = 0;\n    long long common25 = 0;\n    long long common26\
    \ = 0;\n    long long common27 = 0;\n    long long common28 = 0;\n    long long\
    \ common29 = 0;\n    long long common30 = 0;\n    long long common31 = 0;\n  \
    \  long long common32 = 0;\n    long long common33 = 0;\n    long long common34\
    \ = 0;\n    long long common35 = 0;\n    long long common36 = 0;\n    long long\
    \ common37 = 0;\n    long long common38 = 0;\n    long long common39 = 0;\n  \
    \  long long common40 = 0;\n    long long common41 = 0;\n    long long common42\
    \ = 0;\n    long long common43 = 0;\n    long long common44 = 0;\n    long long\
    \ common45 = 0;\n    long long common46 = 0;\n    long long common47 = 0;\n  \
    \  long long common48 = 0;\n    long long common49 = 0;\n    long long common50\
    \ = 0;\n    long long common51 = 0;\n    long long common52 = 0;\n    long long\
    \ common53 = 0;\n    long long common54 = 0;\n    long long common55 = 0;\n  \
    \  long long common56 = 0;\n    long long common57 = 0;\n    long long common58\
    \ = 0;\n    long long common59 = 0;\n    long long common60 = 0;\n    long long\
    \ common61 = 0;\n    long long common62 = 0;\n    long long common63 = 0;\n  \
    \  long long common64 = 0;\n    long long common65 = 0;\n    long long common66\
    \ = 0;\n    long long common67 = 0;\n    long long common68 = 0;\n    long long\
    \ common69 = 0;\n    long long common70 = 0;\n    long long common71 = 0;\n  \
    \  long long common72 = 0;\n    long long common73 = 0;\n\n}\nint main() {\n \
    \   auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpluil6rap: /tmp/tmpluil6rap.cpp:87: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (auto\
    \ i : l1) {\n        for (auto j : l2) {\n            if (i == j) {\n        \
    \        common++;\n            }\n        }\n    }\n    for (auto i : l2) {\n\
    \        for (auto j : l1) {\n            if (i == j) {\n                common++;\n\
    \            }\n        }\n    }\n    for (auto i : l1) {\n        for (auto j\
    \ : l2) {\n            if (i == j) {\n                common++;\n            }\n\
    \        }\n    }\n    for (auto i : l2) {\n        for (auto j : l1) {\n    \
    \        if (i == j) {\n                common++;\n            }\n        }\n\
    \    }\n    for (auto i : l1) {\n        for (auto j : l2) {\n            if (i\
    \ == j) {\n                common++;\n            }\n        }\n    }\n    for\
    \ (auto i : l2) {\n        for (auto j : l1) {\n            if (i == j) {\n  \
    \              common++;\n            }\n        }\n    }\n    for (auto i : l1)\
    \ {\n        for (auto j : l2) {\n            if (i == j) {\n                common++;\n\
    \            }\n        }\n    }\n    for (auto i : l2) {\n        for (auto j\
    \ : l1) {\n            if (i == j) {\n                common++;\n            }\n\
    \        }\n    }\n    for (auto i : l1) {\n        for (auto j : l2) {\n    \
    \        if (i == j) {\n                common++;\n            }\n        }\n\
    \    }\n    for (auto i : l2) {\n        for (auto j : l1) {\n            if (i\
    \ == j) {\n                common++;\n            }\n        }\n    }\n    for\
    \ (auto i : l1) {\n        for (auto j : l2) {\n            if (i == j) {\n  \
    \              common++;\n            }\n        }\n    }\n    for (auto i : l2)\
    \ {\n        for (auto j : l1) {\n            if (i == j) {\n                common++;\n\
    \            }\n        }\n    }\n    for (auto i : l1) {\n        for (auto j\
    \ : l2) {\n            if (i == j) {\n                common++;\n            }\n\
    \        }\n    }\n    for (auto i : l2) {\n        for (auto j : l1) {\n    \
    \        if (i == j) {\n                common++;\n            }\n        }\n\
    \    }\n    for (auto i : l1) {\n        for (auto j : l2) {\n            if (i\
    \ == j) {\n                common++;\n            }\n        }\n    }\n    for\
    \ (auto i : l2) {\n        for (auto j : l1) {\n            if (i == j) {\n  \
    \              common++;\n            }\n        }\n    }\n    for (auto i : l1)\
    \ {\n        for (auto j : l2) {\n            if (i == j) {\n                common++;\n\
    \            }\n        }\n    }\n    for (auto i : l2) {\n        for (auto j\
    \ : l1) {\n            if (i == j) {\n                common++;\n            }\n\
    \n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzh25yyrk.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpzh25yyrk.cpp:137:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  137 | int main() {\n     \
    \ |            ^\n/tmp/tmpzh25yyrk.cpp:143:1: error: expected \u2018}\u2019 at\
    \ end of input\n  143 | }\n      | ^\n/tmp/tmpzh25yyrk.cpp:130:23: note: to match\
    \ this \u2018{\u2019\n  130 |     for (auto i : l2) {\n      |               \
    \        ^\n/tmp/tmpzh25yyrk.cpp:143:1: error: expected \u2018}\u2019 at end of\
    \ input\n  143 | }\n      | ^\n/tmp/tmpzh25yyrk.cpp:8:70: note: to match this\
    \ \u2018{\u2019\n    8 | std::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n      |                                                             \
    \         ^\n/tmp/tmpzh25yyrk.cpp:143:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n  143 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i=1;i<l1.size();i++) {\n        for(long j=1;j<l2.size();j++) {\n          \
    \  if(l1[i]==l2[j]) {\n                result.push_back(l1[i]);\n            \
    \    break;\n            }\n        }\n    }\n    sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpu66vh7h5: /tmp/tmpu66vh7h5.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long max = 0;\n    for (auto\
    \ i : l1) {\n        if (l2.find(i) != l2.end()) {\n            max = std::max(max,\
    \ i);\n        }\n    }\n    for (auto i : l2) {\n        if (l1.find(i) != l1.end())\
    \ {\n            max = std::max(max, i);\n        }\n    }\n    for (auto i :\
    \ l1) {\n        if (l2.find(i) != l2.end()) {\n            max = std::max(max,\
    \ i);\n        }\n    }\n    for (auto i : l2) {\n        if (l1.find(i) != l1.end())\
    \ {\n            max = std::max(max, i);\n        }\n    }\n    for (auto i :\
    \ l1) {\n        if (l2.find(i) != l2.end()) {\n            max = std::max(max,\
    \ i);\n        }\n    }\n    for (auto i : l2) {\n        if (l1.find(i) != l1.end())\
    \ {\n            max = std::max(max, i);\n        }\n    }\n    for (auto i :\
    \ l1) {\n        if (l2.find(i) != l2.end()) {\n            max = std::max(max,\
    \ i);\n        }\n    }\n    for (auto i : l2) {\n        if (l1.find(i) != l1.end())\
    \ {\n            max = std::max(max, i);\n        }\n    }\n    for (auto i :\
    \ l1) {\n        if (l2.find(i) != l2.end()) {\n            max = std::max(max,\
    \ i);\n        }\n    }\n    for (auto i : l2) {\n        if (l1.find(i) != l1.end())\
    \ {\n            max = std::max(max, i);\n        }\n    }\n    for (auto i :\
    \ l1) {\n        if (l2.find(i) != l2.end()) {\n            max = std::max(max,\
    \ i);\n        }\n    }\n    for (auto i : l2) {\n        if (l1.find(i) != l1.end())\
    \ {\n            max = std::max(max, i);\n        }\n    }\n    for (auto i :\
    \ l1) {\n        if (l2.find(i) != l2.end()) {\n            max = std::max(max,\
    \ i);\n        }\n    }\n    for (auto i : l2) {\n        if (l1.find(i) != l1.end())\
    \ {\n            max = std::max(max, i);\n        }\n    }\n    for (auto i :\
    \ l1) {\n        if (l2.find(i) != l2.end()) {\n            max = std::max(max,\
    \ i);\n        }\n    }\n    for (auto i : l2) {\n        if (l1.find(i) != l1.end())\
    \ {\n            max = std::max(max, i);\n        }\n    }\n    for (auto i :\
    \ l1) {\n        if (l2.find(i) != l2.end()) {\n            max = std::max(max,\
    \ i);\n        }\n    }\n    for (auto i : l2) {\n\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5a3yua6x.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp5a3yua6x.cpp:12:16: error: \u2018\
    class std::vector<long int>\u2019 has no member named \u2018find\u2019\n   12\
    \ |         if (l2.find(i) != l2.end()) {\n      |                ^~~~\n/tmp/tmp5a3yua6x.cpp:13:34:\
    \ error: no matching function for call to \u2018max(long long int&, long int&)\u2019\
    \n   13 |             max = std::max(max, i);\n      |                       \
    \           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp5a3yua6x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp5a3yua6x.cpp:13:34:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018long int\u2019)\n   13 |             max = std::max(max,\
    \ i);\n      |                                  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake"
  stdout: ''
  timestamp: 1660062093
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    long long\
    \ max = 0;\n    long long min = 0;\n    for (long long i = 0; i < l1.size(); i++)\
    \ {\n        if (l1.at(i) == l2.at(i)) {\n            common += l1.at(i);\n  \
    \      } else {\n            if (common > max) {\n                max = common;\n\
    \            }\n            if (common < min) {\n                min = common;\n\
    \            }\n            common = 0;\n        }\n    }\n    if (common > max)\
    \ {\n        max = common;\n    }\n    if (common < min) {\n        min = common;\n\
    \    }\n    for (long long i = 0; i < l1.size(); i++) {\n        if (l1.at(i)\
    \ == l2.at(i)) {\n            result.push_back(l1.at(i));\n        } else {\n\
    \            if (common > max) {\n                max = common;\n            }\n\
    \            if (common < min) {\n                min = common;\n            }\n\
    \            common = 0;\n        }\n    }\n    if (common > max) {\n        max\
    \ = common;\n    }\n    if (common < min) {\n        min = common;\n    }\n  \
    \  for (long long i = 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i))\
    \ {\n            result.push_back(l1.at(i));\n        } else {\n            if\
    \ (common > max) {\n                max = common;\n            }\n           \
    \ if (common < min) {\n                min = common;\n            }\n        \
    \    common = 0;\n        }\n    }\n    if (common > max) {\n        max = common;\n\
    \    }\n    if (common < min) {\n        min = common;\n    }\n    for (long long\
    \ i = 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n        \
    \    result.push_back(l1.at(i));\n        } else {\n            if (common > max)\
    \ {\n                max = common;\n            }\n            if (common < min)\
    \ {\n                min = common;\n            }\n            common = 0;\n \
    \       }\n    }\n    if (common > max) {\n        max = common;\n    }\n    if\
    \ (common < min) {\n        min = common;\n    }\n    for (long long i = 0; i\
    \ < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n            result.push_back(l1.at(i));\n\
    \        } else {\n            if (common > max) {\n                max = common;\n\
    \            }\n            if (common < min) {\n                min = common;\n\
    \            }\n            common = 0;\n        }\n    }\n    if (common > max)\
    \ {\n        max = common;\n    }\n    if (common < min) {\n        min = common;\n\
    \    }\n    for (long long i = 0; i < l1.size(); i++) {\n        if (l1.at(i)\
    \ == l2.at(i)) {\n            result.push_back(l1.at(i));\n        } else {\n\
    \            if (common \n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5h1h7pnp.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp5h1h7pnp.cpp:112:23: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n  112 |             if (common\n \
    \     |                ~      ^\n      |                       )\n  113 | }\n\
    \      | ~                      \n/tmp/tmp5h1h7pnp.cpp:113:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n  113 | }\n      | ^\n/tmp/tmp5h1h7pnp.cpp:114:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  114 | int main() {\n      |            ^\n/tmp/tmp5h1h7pnp.cpp:120:1: error:\
    \ expected \u2018}\u2019 at end of input\n  120 | }\n      | ^\n/tmp/tmp5h1h7pnp.cpp:108:47:\
    \ note: to match this \u2018{\u2019\n  108 |     for (long long i = 0; i < l1.size();\
    \ i++) {\n      |                                               ^\n/tmp/tmp5h1h7pnp.cpp:120:1:\
    \ error: expected \u2018}\u2019 at end of input\n  120 | }\n      | ^\n/tmp/tmp5h1h7pnp.cpp:8:70:\
    \ note: to match this \u2018{\u2019\n    8 | std::vector<long> common(std::vector<long>\
    \ l1, std::vector<long> l2) {\n      |                                       \
    \                               ^\n/tmp/tmp5h1h7pnp.cpp:120:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n  120 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(size_t\
    \ i = 1; i < l1.size(); i++) {\n        if(l1[i] == l2[0]) {\n            result.push_back(l1[i]);\n\
    \        }\n        else if(l1[i] > l2[0]) {\n            result.push_back(l1[i]);\n\
    \        }\n        else {\n            result.push_back(l2[0]);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp8rnn3k8t: /tmp/tmp8rnn3k8t.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    for (long i\
    \ = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n\
    \            if (l1[i] == l2[j]) {\n                common++;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (l1.size()\
    \ - common > result.size()) {\n            result.push_back(l1[i]);\n        }\
    \ else if (l1.size() - common < result.size()) {\n            result.insert(result.end(),\
    \ l1.size() - common, l1[i]);\n        }\n    }\n    for (long i = 0; i < l2.size();\
    \ i++) {\n        if (l2.size() - common > result.size()) {\n            result.push_back(l2[i]);\n\
    \        } else if (l2.size() - common < result.size()) {\n            result.insert(result.end(),\
    \ l2.size() - common, l2[i]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpsgnsfos5: /tmp/tmpsgnsfos5.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common > res.size()) {\n            res.push_back(l1[i]);\n     \
    \   }\n    }\n    return res;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp55o4znr4: /tmp/tmp55o4znr4.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common != 0) {\n            if (l1[i] != common) {\n            \
    \    result.push_back(l1[i]);\n            }\n        } else {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmphxvm0ilv: /tmp/tmphxvm0ilv.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::vector<long>::iterator it;\n\
    \    for (it = std::begin(l1); it != std::end(l1); ++it) {\n        bool found\
    \ = false;\n        for (it = std::begin(l2); it != std::end(l2); ++it) {\n  \
    \          if (*it == *it) {\n                found = true;\n                break;\n\
    \            }\n        }\n        if (!found) {\n            result.push_back(*it);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n   \
    \         common++;\n        } else {\n            if (common > 0) {\n       \
    \         result.push_back(common);\n                common = 0;\n           \
    \ }\n            result.push_back(l1.at(i));\n        }\n    }\n    if (common\
    \ > 0) {\n        result.push_back(common);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpb6qxnswz: /tmp/tmpb6qxnswz.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    for (long i\
    \ = 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n          \
    \  common++;\n        } else {\n            if (common > 0) {\n              \
    \  result.push_back(common);\n                common = 0;\n            }\n   \
    \         result.push_back(l1.at(i));\n        }\n    }\n    if (common > 0) {\n\
    \        result.push_back(common);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4ixk3zow: /tmp/tmp4ixk3zow.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(size_t\
    \ i = 1; i < l1.size(); i++) {\n        if(l1[i] == l2[i]) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpwp734it4: /tmp/tmpwp734it4.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(size_t\
    \ i = 1; i < l1.size(); i++) {\n        for(size_t j = 0; j < l2.size(); j++)\
    \ {\n            if(l1[i] == l2[j]) {\n                result.push_back(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbwedcier: /tmp/tmpbwedcier.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    long long common = 0;\n    for(long long\
    \ i = 0; i < l1.size(); i++) {\n        for(long long j = 0; j < l2.size(); j++)\
    \ {\n            if(l1[i] == l2[j]) {\n                common++;\n           \
    \ }\n        }\n    }\n    if(common > 0) {\n        res.push_back(l1[0]);\n \
    \       for(long long i = 1; i < l1.size(); i++) {\n            if(common == l1.size())\
    \ {\n                break;\n            }\n            for(long long j = 0; j\
    \ < l2.size(); j++) {\n                if(l1[i] == l2[j]) {\n                \
    \    common++;\n                }\n            }\n            if(common > l1.size())\
    \ {\n                res.push_back(l1[i]);\n                common = 0;\n    \
    \        }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpcrmylnop: /tmp/tmpcrmylnop.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i=1;i<l1.size();i++) {\n        if(l1[i]==l2[0]) {\n            result.push_back(l1[i]);\n\
    \        }\n        else if(l1[i]<l2[0]) {\n            result.push_back(l1[i]);\n\
    \        }\n        else {\n            result.push_back(l2[0]);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpi_zu6m1k: /tmp/tmpi_zu6m1k.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    long long\
    \ min1 = std::numeric_limits<long long>::min();\n    long long min2 = std::numeric_limits<long\
    \ long>::min();\n    long long max1 = std::numeric_limits<long long>::max();\n\
    \    long long max2 = std::numeric_limits<long long>::max();\n    for (long long\
    \ i = 0; i < l1.size(); i++) {\n        if (l1[i] < min1) min1 = l1[i];\n    \
    \    if (l1[i] > max1) max1 = l1[i];\n        if (l2[i] < min2) min2 = l2[i];\n\
    \        if (l2[i] > max2) max2 = l2[i];\n    }\n    for (long long i = 0; i <\
    \ l2.size(); i++) {\n        if (l2[i] < min1) min2 = l2[i];\n        if (l2[i]\
    \ > max1) max2 = l2[i];\n    }\n    for (long long i = 0; i < l1.size(); i++)\
    \ {\n        for (long long j = 0; j < l2.size(); j++) {\n            if (l1[i]\
    \ == l2[j]) {\n                common++;\n            }\n        }\n    }\n  \
    \  for (long long i = 0; i < result.size(); i++) {\n        result[i] = common;\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvhseohfx: /tmp/tmpvhseohfx.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    long long\
    \ max = 0;\n    long long min = 0;\n    long long count = 0;\n    for (long long\
    \ i = 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n        \
    \    common++;\n            if (common > max) {\n                max = common;\n\
    \            }\n            if (common < min) {\n                min = common;\n\
    \            }\n        } else {\n            common = 0;\n        }\n    }\n\
    \    for (long long i = 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i))\
    \ {\n            count++;\n        }\n    }\n    if (count == 0) {\n        result.push_back(l1.at(0));\n\
    \    } else {\n        result.push_back(l1.at(0));\n        result.push_back(l2.at(0));\n\
    \    }\n    if (count == 1) {\n        result.push_back(l1.at(0));\n    }\n  \
    \  if (count == 2) {\n        result.push_back(l2.at(0));\n    }\n    if (min\
    \ == max) {\n        result.push_back(l1.at(0));\n        result.push_back(l2.at(0));\n\
    \    }\n    if (min > max) {\n        result.push_back(l1.at(0));\n        result.push_back(l2.at(0));\n\
    \    }\n    if (min < max) {\n        result.push_back(l1.at(0));\n        result.push_back(l2.at(0));\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3g8yxury: /tmp/tmp3g8yxury.cpp:60: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common > 0) {\n            if (l1[i] != common) {\n             \
    \   result.push_back(l1[i]);\n                common--;\n            }\n     \
    \   }\n    }\n    for (long long i = 0; i < l2.size(); i++) {\n        if (common\
    \ > 0) {\n            if (l2[i] != common) {\n                result.push_back(l2[i]);\n\
    \                common--;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3gxhwg3q: /tmp/tmp3gxhwg3q.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i = 1, j = 1; i < l1.size(); i++, j++) {\n        if(l1[i] == l2[j]) {\n   \
    \         result.push_back(l1[i]);\n            i++;\n            j++;\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpd2het7_o: /tmp/tmpd2het7_o.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common != 0) {\n            if (l1[i] != common) {\n            \
    \    result.push_back(l1[i]);\n            }\n        } else {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long long i = 0; i < l2.size(); i++) {\n        if\
    \ (common != 0) {\n            if (l2[i] != common) {\n                result.push_back(l2[i]);\n\
    \            }\n        } else {\n            result.push_back(l2[i]);\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp6qg6prrz: /tmp/tmp6qg6prrz.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    for (long i\
    \ = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n\
    \            if (l1[i] == l2[j]) {\n                common++;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (common\
    \ != 0) {\n            if (l1[i] != common) {\n                result.push_back(l1[i]);\n\
    \            }\n        } else {\n            result.push_back(l1[i]);\n     \
    \   }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (common !=\
    \ 0) {\n            if (l2[i] != common) {\n                result.push_back(l2[i]);\n\
    \            }\n        } else {\n            result.push_back(l2[i]);\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbo6rpgcc: /tmp/tmpbo6rpgcc.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    for (long i\
    \ = 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n          \
    \  common++;\n        } else {\n            if (common > 0) {\n              \
    \  result.push_back(common);\n                common = 0;\n            }\n   \
    \         result.push_back(l1.at(i));\n        }\n    }\n    if (common > 0) {\n\
    \        result.push_back(common);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4ixk3zow: /tmp/tmp4ixk3zow.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i = 1, j = 0; i < l1.size(); i++) {\n        if(l1[i] == l2[j]) {\n        \
    \    result.push_back(l1[i]);\n            i++;\n            j++;\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp6q08_csb: /tmp/tmp6q08_csb.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062095
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    long long\
    \ min1 = l1[0], min2 = l2[0];\n    for (long long i = 1; i < l1.size(); i++) {\n\
    \        if (l1[i] == min1) {\n            min1 = l1[i];\n        } else if (l1[i]\
    \ < min1) {\n            min1 = l1[i];\n        }\n    }\n    for (long long i\
    \ = 1; i < l2.size(); i++) {\n        if (l2[i] == min2) {\n            min2 =\
    \ l2[i];\n        } else if (l2[i] < min2) {\n            min2 = l2[i];\n    \
    \    }\n    }\n    for (long long i = 1; i < l1.size(); i++) {\n        for (long\
    \ long j = 1; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n     \
    \           common++;\n            }\n        }\n    }\n    for (long long i =\
    \ 1; i < l2.size(); i++) {\n        for (long long j = 1; j < l1.size(); j++)\
    \ {\n            if (l2[i] == l1[j]) {\n                common++;\n          \
    \  }\n        }\n    }\n    for (long long i = 1; i < l1.size(); i++) {\n    \
    \    for (long long j = 1; j < l2.size(); j++) {\n            if (l1[i] == l2[j])\
    \ {\n                common++;\n            }\n        }\n    }\n    for (long\
    \ long i = 1; i < l2.size(); i++) {\n        for (long long j = 1; j < l1.size();\
    \ j++) {\n            if (l2[i] == l1[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 1; i < l1.size(); i++) {\n\
    \        for (long long j = 1; j < l2.size(); j++) {\n            if (l1[i] ==\
    \ l2[j]) {\n                common++;\n            }\n        }\n    }\n    for\
    \ (long long i = 1; i < l2.size(); i++) {\n        for (long long j = 1; j < l1.size();\
    \ j++) {\n            if (l2[i] == l1[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 1; i < l1.size(); i++) {\n\
    \        for (long long j = 1; j < l2.size(); j++) {\n            if (l1[i] ==\
    \ l2[j]) {\n                common++;\n            }\n        }\n    }\n    for\
    \ (long long i = 1; i < l2.size(); i++) {\n        for (long long j = 1; j < l1.size();\
    \ j++) {\n            if (l2[i] == l1[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 1; i < l1.size(); i++) {\n\
    \        for (long long j = 1; j < l2.size(); j++) {\n            if (l1[i] ==\
    \ l2[j]) {\n                common++;\n            }\n        }\n    }\n    for\
    \ (long long i = 1; i < l2.size(); i++) {\n        for (long long j = 1; j < l1.size();\
    \ j++) {\n            if (l2[i] == l1[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 1; i < l1.size(); i++) {\n\
    \        for (long long j = 1; j < l\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6qmaq5xh.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp6qmaq5xh.cpp:97:35: error: \u2018\
    l\u2019 was not declared in this scope\n   97 |         for (long long j = 1;\
    \ j < l\n      |                                   ^\n/tmp/tmp6qmaq5xh.cpp:97:36:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n   97 |         for\
    \ (long long j = 1; j < l\n      |                                    ^\n    \
    \  |                                    ;\n   98 | }\n      | ~              \
    \                     \n/tmp/tmp6qmaq5xh.cpp:98:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   98 | }\n      | ^\n/tmp/tmp6qmaq5xh.cpp:97:36:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   97 |         for\
    \ (long long j = 1; j < l\n      |             ~                      ^\n    \
    \  |                                    )\n   98 | }\n      | ~              \
    \                     \n/tmp/tmp6qmaq5xh.cpp:98:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   98 | }\n      | ^\n/tmp/tmp6qmaq5xh.cpp:99:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   99 | int main() {\n      |            ^\n/tmp/tmp6qmaq5xh.cpp:105:1: error:\
    \ expected \u2018}\u2019 at end of input\n  105 | }\n      | ^\n/tmp/tmp6qmaq5xh.cpp:8:70:\
    \ note: to match this \u2018{\u2019\n    8 | std::vector<long> common(std::vector<long>\
    \ l1, std::vector<long> l2) {\n      |                                       \
    \                               ^\n/tmp/tmp6qmaq5xh.cpp:105:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n  105 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660062095
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n\
    \    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n\
    \    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n\
    \    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n\
    \    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n\
    \    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n\
    \    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n\
    \    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n\
    \    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n\
    \    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n\
    \    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n\
    \    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n\
    \    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3w6wxk19.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp3w6wxk19.cpp:83:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   83 | }\n      | ^\n/tmp/tmp3w6wxk19.cpp:83:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660062095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for(long\
    \ long i = 0; i < (long long)l1.size(); i++) {\n        for(long long j = 0; j\
    \ < (long long)l2.size(); j++) {\n            if(l1[i] == l2[j]) {\n         \
    \       common++;\n            }\n        }\n    }\n    for(long long i = 0; i\
    \ < (long long)l1.size(); i++) {\n        if(common > 0) {\n            if(l1[i]\
    \ == common) {\n                result.push_back(l1[i]);\n            }\n    \
    \    }\n    }\n    for(long long i = 0; i < (long long)l2.size(); i++) {\n   \
    \     if(common > 0) {\n            if(l2[i] == common) {\n                result.push_back(l2[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpt690xxpv: /tmp/tmpt690xxpv.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i = 1, j = 1; i < l1.size(); i++, j++) {\n        if(l1[i] == l2[j]) {\n   \
    \         result.push_back(l1[i]);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp1v70299_: /tmp/tmp1v70299_.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(size_t\
    \ i = 1; i < l1.size(); i++) {\n        for(size_t j = 0; j < l2.size(); j++)\
    \ {\n            if(l1[i] == l2[j]) {\n                result.push_back(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbwedcier: /tmp/tmpbwedcier.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    long long\
    \ min1 = l1[0], min2 = l2[0];\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (l1[i] == min1) {\n            common++;\n        }\n        if (l2[i]\
    \ == min2) {\n            common++;\n        }\n    }\n    if (common > 1) {\n\
    \        result.push_back(min1);\n        result.push_back(min2);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3vn6lut9: /tmp/tmp3vn6lut9.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common != 0) {\n            if (l1[i] != common) {\n            \
    \    result.push_back(l1[i]);\n            }\n        } else {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long long i = 0; i < l2.size(); i++) {\n        if\
    \ (common != 0) {\n            if (l2[i] != common) {\n                result.push_back(l2[i]);\n\
    \            }\n        } else {\n            result.push_back(l2[i]);\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp6qg6prrz: /tmp/tmp6qg6prrz.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i=1;i<l1.size();i++) {\n        for(long j=1;j<l2.size();j++) {\n          \
    \  if(l1[i]==l2[j]) {\n                result.push_back(l1[i]);\n            \
    \    break;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp61y7jqah: /tmp/tmp61y7jqah.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i=1;i<l1.size();i++) {\n        if(l1[i]==l2[0]) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for(long i=1;i<l2.size();i++) {\n        if(l2[i]==l1[0])\
    \ {\n            result.push_back(l2[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpuwn4kfiu: /tmp/tmpuwn4kfiu.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    long long\
    \ max = 0;\n    long long min = 0;\n    for (auto i : l1) {\n        if (l2.find(i)\
    \ != l2.end()) {\n            common += i;\n            max = std::max(max, i);\n\
    \            min = std::min(min, i);\n        }\n    }\n    for (auto i : l2)\
    \ {\n        if (l1.find(i) != l1.end()) {\n            common += i;\n       \
    \     max = std::max(max, i);\n            min = std::min(min, i);\n        }\n\
    \    }\n    if (common > max) {\n        result.push_back(min);\n    } else if\
    \ (common < min) {\n        result.push_back(max);\n    } else {\n        result.push_back(common);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyzi6n799.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpyzi6n799.cpp:14:16: error: \u2018\
    class std::vector<long int>\u2019 has no member named \u2018find\u2019\n   14\
    \ |         if (l2.find(i) != l2.end()) {\n      |                ^~~~\n/tmp/tmpyzi6n799.cpp:16:34:\
    \ error: no matching function for call to \u2018max(long long int&, long int&)\u2019\
    \n   16 |             max = std::max(max, i);\n      |                       \
    \           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpyzi6n799.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyzi6n799.cpp:16:34:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018long int\u2019)\n   16 |             max = std::max(max,\
    \ i);\n      |                                  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake"
  stdout: ''
  timestamp: 1660062095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common > 0) {\n            if (l1[i] != common) {\n             \
    \   result.push_back(l1[i]);\n            }\n        }\n    }\n    for (long long\
    \ i = 0; i < l2.size(); i++) {\n        if (common > 0) {\n            if (l2[i]\
    \ != common) {\n                result.push_back(l2[i]);\n            }\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpyiqp1hzv: /tmp/tmpyiqp1hzv.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062096
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long minLen = min(l1.size(), l2.size());\n\
    \    for (long i = 0; i < minLen; i++) {\n        if (l1[i] == l2[i]) {\n    \
    \        result.push_back(l1[i]);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpctl50ige.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpctl50ige.cpp:10:19: error: \u2018\
    min\u2019 was not declared in this scope; did you mean \u2018std::min\u2019?\n\
    \   10 |     long minLen = min(l1.size(), l2.size());\n      |               \
    \    ^~~\n      |                   std::min\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpctl50ige.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660062095
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long commonCount = 0;\n    for\
    \ (long long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                commonCount++;\n\
    \            }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++)\
    \ {\n        if (commonCount == 0) {\n            result.push_back(l1[i]);\n \
    \       }\n    }\n    for (long long i = 0; i < l2.size(); i++) {\n        if\
    \ (commonCount == 0) {\n            result.push_back(l2[i]);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpmhku38kk: /tmp/tmpmhku38kk.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    result.push_back(l2[0]);\n\
    \    for(size_t i = 1; i < l1.size(); i++) {\n        if(l1[i] == l2[i]) {\n \
    \           result.push_back(l1[i]);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvpy5iamb: /tmp/tmpvpy5iamb.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    result.push_back(l2[0]);\n\
    \    for(size_t i = 1; i < l1.size(); i++) {\n        if(l1[i] == l2[i]) {\n \
    \           result.push_back(l1[i]);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvpy5iamb: /tmp/tmpvpy5iamb.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common != 0) {\n            if (l1[i] != common) {\n            \
    \    result.push_back(l1[i]);\n            }\n        } else {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmphxvm0ilv: /tmp/tmphxvm0ilv.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i=1;i<l1.size();i++) {\n        for(long j=1;j<l2.size();j++) {\n          \
    \  if(l1[i]==l2[j]) {\n                result.push_back(l1[i]);\n            \
    \    break;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp61y7jqah: /tmp/tmp61y7jqah.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long minVal = l1[0], maxVal = l1[0];\n\
    \    for (long i : l1) {\n        if (i < minVal) minVal = i;\n        if (i >\
    \ maxVal) maxVal = i;\n    }\n    for (long i : l2) {\n        if (i < minVal)\
    \ minVal = i;\n        if (i > maxVal) maxVal = i;\n    }\n    if (minVal == maxVal)\
    \ return result;\n    for (long i = minVal; i <= maxVal; i++) {\n        if (l1.find(i)\
    \ != l1.end()) result.push_back(i);\n        if (l2.find(i) != l2.end()) result.push_back(i);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu90uyqoi.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpu90uyqoi.cpp:21:16: error: \u2018\
    class std::vector<long int>\u2019 has no member named \u2018find\u2019\n   21\
    \ |         if (l1.find(i) != l1.end()) result.push_back(i);\n      |        \
    \        ^~~~\n/tmp/tmpu90uyqoi.cpp:22:16: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018find\u2019\n   22 |         if (l2.find(i)\
    \ != l2.end()) result.push_back(i);\n      |                ^~~~\n"
  stdout: ''
  timestamp: 1660062096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    long long\
    \ min1 = l1[0], min2 = l2[0];\n    for (long long i = 1; i < l1.size(); i++) {\n\
    \        if (l1[i] < min1) {\n            min1 = l1[i];\n        }\n        if\
    \ (l2[i] < min2) {\n            min2 = l2[i];\n        }\n    }\n    if (min1\
    \ < min2) {\n        result.push_back(min1);\n        result.push_back(min2);\n\
    \    } else {\n        result.push_back(min2);\n        result.push_back(min1);\n\
    \    }\n    for (long long i = 0; i < l1.size(); i++) {\n        if (l1[i] ==\
    \ min1) {\n            common += 1;\n        } else if (l2[i] == min2) {\n   \
    \         common += 1;\n        }\n    }\n    for (long long i = 0; i < l2.size();\
    \ i++) {\n        if (l2[i] == min2) {\n            common += 1;\n        } else\
    \ if (l1[i] == min1) {\n            common += 1;\n        }\n    }\n    if (common\
    \ > 0) {\n        result.push_back(common);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpexy4_0_d: /tmp/tmpexy4_0_d.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    result.push_back(l2[0]);\n\
    \    long long common = l1[0];\n    for (long long i = 1; i < l1.size(); i++)\
    \ {\n        if (l1[i] == l2[i]) {\n            common = l1[i];\n        } else\
    \ {\n            result.push_back(common);\n            common = l1[i];\n    \
    \    }\n    }\n    result.push_back(common);\n    return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpytmiyva2: /tmp/tmpytmiyva2.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(res));\n    return res;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3nr7bhz6: /tmp/tmp3nr7bhz6.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i = 1, j = 0; i < l1.size(); i++, j++) {\n        if(l1[i] == l2[j]) {\n   \
    \         result.push_back(l1[i]);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpgafnontp: /tmp/tmpgafnontp.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    long long common = 0;\n    long long\
    \ min;\n    long long max;\n    long long mid;\n    for (long long i = 0; i <\
    \ l1.size(); i++) {\n        min = l1[i];\n        max = l2[i];\n        mid =\
    \ (min + max) / 2;\n        if (min > max) {\n            common = min;\n    \
    \    } else {\n            common = max;\n        }\n        if (common > mid)\
    \ {\n            common = mid;\n        }\n        if (common < min) {\n     \
    \       common = min;\n        }\n        if (common > max) {\n            common\
    \ = max;\n        }\n        res.push_back(common);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpp__xo0sq: /tmp/tmpp__xo0sq.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    for (long i\
    \ = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n\
    \            if (l1[i] == l2[j]) {\n                common++;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (common\
    \ > 0) {\n            result.push_back(l1[i]);\n            common -= 1;\n   \
    \     }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (common\
    \ > 0) {\n            result.push_back(l2[i]);\n            common -= 1;\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpy96zyyic: /tmp/tmpy96zyyic.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common > 0) {\n            if (l1[i] != common) {\n             \
    \   result.push_back(l1[i]);\n            }\n        } else {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long long i = 0; i < l2.size(); i++) {\n        if\
    \ (common > 0) {\n            if (l2[i] != common) {\n                result.push_back(l2[i]);\n\
    \            }\n        } else {\n            result.push_back(l2[i]);\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpx4elvj9x: /tmp/tmpx4elvj9x.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ i = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n\
    \            if (l1[i] == l2[j]) {\n                common++;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (common\
    \ != 0) {\n            if (l1[i] != common) {\n                result.push_back(l1[i]);\n\
    \            }\n        }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n\
    \        if (common != 0) {\n            if (l2[i] != common) {\n            \
    \    result.push_back(l2[i]);\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpe5p7stpr: /tmp/tmpe5p7stpr.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i=1;i<l1.size();i++) {\n        for(long j=1;j<l2.size();j++) {\n          \
    \  if(l1[i]==l2[j]) {\n                result.push_back(l1[i]);\n            \
    \    break;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp61y7jqah: /tmp/tmp61y7jqah.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::vector<long>::iterator it;\n\
    \    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    for (it = l1.begin(); it != l1.end(); ++it) {\n        auto it2 = l2.find(*it);\n\
    \        if (it2 != l2.end()) {\n            result.push_back(*it);\n        \
    \    l2.erase(it2);\n        }\n    }\n    for (it = l2.begin(); it != l2.end();\
    \ ++it) {\n        auto it1 = l1.find(*it);\n        if (it1 != l1.end()) {\n\
    \            result.push_back(*it);\n            l1.erase(it1);\n        }\n \
    \   }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpouboxdby.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpouboxdby.cpp:14:23: error: \u2018\
    class std::vector<long int>\u2019 has no member named \u2018find\u2019\n   14\
    \ |         auto it2 = l2.find(*it);\n      |                       ^~~~\n/tmp/tmpouboxdby.cpp:21:23:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018find\u2019\
    \n   21 |         auto it1 = l1.find(*it);\n      |                       ^~~~\n"
  stdout: ''
  timestamp: 1660062096
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    std::vector<long>::iterator it;\n   \
    \ for (it = std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ std::back_inserter(res)).begin(); it != std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(res)).end(); ++it)\n    {\n       \
    \ res.push_back(*it);\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuk5n1j8l.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpuk5n1j8l.cpp:11:106: error: \u2018\
    class std::back_insert_iterator<std::vector<long int> >\u2019 has no member named\
    \ \u2018begin\u2019\n   11 |     for (it = std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(res)).begin(); it != std::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(), std::back_inserter(res)).end(); ++it)\n    \
    \  |                                                                         \
    \                                 ^~~~~\n/tmp/tmpuk5n1j8l.cpp:11:212: error: \u2018\
    class std::back_insert_iterator<std::vector<long int> >\u2019 has no member named\
    \ \u2018end\u2019\n   11 |     for (it = std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(res)).begin(); it != std::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(), std::back_inserter(res)).end(); ++it)\n    \
    \  |                                                                         \
    \                                                                            \
    \                                                               ^~~\n"
  stdout: ''
  timestamp: 1660062096
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    long long\
    \ l = 0;\n    long long r = 0;\n    long long i = 0;\n    long long j = 0;\n \
    \   long long k = 0;\n    long long l1 = l1.size();\n    long long l2 = l2.size();\n\
    \    long long mid = l1 + l2;\n    while (i < l1 && j < l2) {\n        if (l1[i]\
    \ == l2[j]) {\n            common++;\n            i++;\n            j++;\n   \
    \     } else if (l1[i] < l2[j]) {\n            common++;\n            i++;\n \
    \       } else {\n            common++;\n            j++;\n        }\n    }\n\
    \    while (i < l1) {\n        common++;\n        i++;\n    }\n    while (j <\
    \ l2) {\n        common++;\n        j++;\n    }\n    while (common > 0) {\n  \
    \      if (common % 2 == 0) {\n            l = l1;\n            r = l2;\n    \
    \    } else {\n            l = l2;\n            r = l1;\n        }\n        mid\
    \ = l + r;\n        k = mid / 2;\n        while (k >= 0) {\n            if (l[k]\
    \ == r[k]) {\n                common--;\n                l[k] = 0;\n         \
    \       r[k] = 0;\n            } else {\n                if (l[k] < r[k]) {\n\
    \                    common--;\n                    l[k] = 0;\n              \
    \  } else {\n                    common--;\n                    r[k] = 0;\n  \
    \              }\n            }\n            k--;\n        }\n    }\n    while\
    \ (common < 0) {\n        if (common % 2 == 0) {\n            l = l1;\n      \
    \      r = l2;\n        } else {\n            l = l2;\n            r = l1;\n \
    \       }\n        mid = l + r;\n        k = mid / 2;\n        while (k >= 0)\
    \ {\n            if (l[k] == r[k]) {\n                common++;\n            \
    \    l[k] = 0;\n                r[k] = 0;\n            } else {\n            \
    \    if (l[k] < r[k]) {\n                    common++;\n                    l[k]\
    \ = 0;\n                } else {\n                    common++;\n            \
    \        r[k] = 0;\n                }\n            }\n            k--;\n     \
    \   }\n    }\n    while (common > 0) {\n        result.push_back(l1[l - 1]);\n\
    \        common--;\n        l--;\n    }\n    while (common < 0) {\n        result.push_back(l2[r\
    \ + 1]);\n        common++;\n        r++;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeuiu72pp.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpeuiu72pp.cpp:16:15: error: declaration\
    \ of \u2018long long int l1\u2019 shadows a parameter\n   16 |     long long l1\
    \ = l1.size();\n      |               ^~\n/tmp/tmpeuiu72pp.cpp:16:23: error: request\
    \ for member \u2018size\u2019 in \u2018l1\u2019, which is of non-class type \u2018\
    long long int\u2019\n   16 |     long long l1 = l1.size();\n      |          \
    \             ^~~~\n/tmp/tmpeuiu72pp.cpp:17:15: error: declaration of \u2018long\
    \ long int l2\u2019 shadows a parameter\n   17 |     long long l2 = l2.size();\n\
    \      |               ^~\n/tmp/tmpeuiu72pp.cpp:17:23: error: request for member\
    \ \u2018size\u2019 in \u2018l2\u2019, which is of non-class type \u2018long long\
    \ int\u2019\n   17 |     long long l2 = l2.size();\n      |                  \
    \     ^~~~\n/tmp/tmpeuiu72pp.cpp:20:17: error: invalid types \u2018long long int[long\
    \ long int]\u2019 for array subscript\n   20 |         if (l1[i] == l2[j]) {\n\
    \      |                 ^\n/tmp/tmpeuiu72pp.cpp:20:26: error: invalid types \u2018\
    long long int[long long int]\u2019 for array subscript\n   20 |         if (l1[i]\
    \ == l2[j]) {\n      |                          ^\n/tmp/tmpeuiu72pp.cpp:24:24:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   24 |         } else if (l1[i] < l2[j]) {\n      |                        ^\n\
    /tmp/tmpeuiu72pp.cpp:24:32: error: invalid types \u2018long long int[long long\
    \ int]\u2019 for array subscript\n   24 |         } else if (l1[i] < l2[j]) {\n\
    \      |                                ^\n/tmp/tmpeuiu72pp.cpp:51:20: error:\
    \ invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   51 |             if (l[k] == r[k]) {\n      |                    ^\n/tmp/tmpeuiu72pp.cpp:51:28:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   51 |             if (l[k] == r[k]) {\n      |                            ^\n\
    /tmp/tmpeuiu72pp.cpp:53:20: error: invalid types \u2018long long int[long long\
    \ int]\u2019 for array subscript\n   53 |                 l[k] = 0;\n      | \
    \                   ^\n/tmp/tmpeuiu72pp.cpp:54:20: error: invalid types \u2018\
    lo"
  stdout: ''
  timestamp: 1660062096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i = 1, j = 1; i < l1.size(); i++, j++) {\n        if(l1[i] == l2[j]) {\n   \
    \         result.push_back(l1[i]);\n            i++;\n            j++;\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpd2het7_o: /tmp/tmpd2het7_o.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for(long\
    \ long i = 0; i < l1.size(); i++) {\n        for(long long j = 0; j < l2.size();\
    \ j++) {\n            if(l1[i] == l2[j]) {\n                common++;\n      \
    \      }\n        }\n    }\n    for(long long i = 0; i < l1.size(); i++) {\n \
    \       if(common > result.size()) {\n            result.push_back(l1[i]);\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp7rgw56ml: /tmp/tmp7rgw56ml.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062097
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    long long common = 0;\n    for(long long\
    \ i = 0; i < l1.size(); i++) {\n        for(long long j = 0; j < l2.size(); j++)\
    \ {\n            if(l1[i] == l2[j]) {\n                common++;\n           \
    \ }\n        }\n    }\n    for(long long i = 0; i < l1.size(); i++) {\n      \
    \  if(common != 0) {\n            if(common % l1[i] == 0) {\n                res.push_back(l1[i]);\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4xl1cwii: /tmp/tmp4xl1cwii.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062097
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::vector<long>::iterator it;\n\
    \    for (it = std::begin(l1); it != std::end(l1); ++it) {\n        auto it =\
    \ std::find(std::begin(l2), std::end(l2), *it);\n        if (it != std::end(l2))\
    \ {\n            result.push_back(*it);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4cy_c9le.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp4cy_c9le.cpp:12:60: error: use\
    \ of \u2018it\u2019 before deduction of \u2018auto\u2019\n   12 |         auto\
    \ it = std::find(std::begin(l2), std::end(l2), *it);\n      |                \
    \                                            ^~\n"
  stdout: ''
  timestamp: 1660062097
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for(long\
    \ long i = 0; i < (l1.size() + l2.size()); i++) {\n        if(l1[i] == l2[i])\
    \ {\n            common++;\n        } else {\n            if(common > 0) {\n \
    \               result.push_back(common);\n                common = 0;\n     \
    \       }\n            result.push_back(l1[i]);\n        }\n    }\n    if(common\
    \ > 0) {\n        result.push_back(common);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpxlm26vnx: /tmp/tmpxlm26vnx.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062097
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    for (long i\
    \ = 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n          \
    \  common++;\n        } else {\n            result.push_back(common);\n      \
    \      common = 0;\n        }\n    }\n    if (common != 0) {\n        result.push_back(common);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpfo9m6eq6: /tmp/tmpfo9m6eq6.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062098
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common > 0) {\n            if (l1[i] != common) {\n             \
    \   result.push_back(l1[i]);\n            }\n        } else {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpf6hfpr2c: /tmp/tmpf6hfpr2c.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062098
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common != 0) {\n            if (l1[i] != common) {\n            \
    \    result.push_back(l1[i]);\n            }\n        }\n    }\n    for (long\
    \ long i = 0; i < l2.size(); i++) {\n        if (common != 0) {\n            if\
    \ (l2[i] != common) {\n                result.push_back(l2[i]);\n            }\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpd67e2m4a: /tmp/tmpd67e2m4a.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062098
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    long long\
    \ max = 0;\n    long long min = 0;\n    for (auto i : l1) {\n        if (l2.find(i)\
    \ != l2.end()) {\n            common += i;\n            max = i;\n           \
    \ min = i;\n        }\n    }\n    for (auto i : l2) {\n        if (l1.find(i)\
    \ != l1.end()) {\n            common += i;\n            max = i;\n           \
    \ min = i;\n        }\n    }\n    if (common > max) {\n        max = common;\n\
    \    }\n    if (common < min) {\n        min = common;\n    }\n    for (auto i\
    \ : l1) {\n        if (l2.find(i) != l2.end()) {\n            common -= i;\n \
    \       }\n    }\n    for (auto i : l2) {\n        if (l1.find(i) != l1.end())\
    \ {\n            common -= i;\n        }\n    }\n    if (common > 0) {\n     \
    \   result.push_back(min);\n    }\n    if (common < 0) {\n        result.push_back(max);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3xxggbwn.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp3xxggbwn.cpp:14:16: error: \u2018\
    class std::vector<long int>\u2019 has no member named \u2018find\u2019\n   14\
    \ |         if (l2.find(i) != l2.end()) {\n      |                ^~~~\n/tmp/tmp3xxggbwn.cpp:21:16:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018find\u2019\
    \n   21 |         if (l1.find(i) != l1.end()) {\n      |                ^~~~\n\
    /tmp/tmp3xxggbwn.cpp:34:16: error: \u2018class std::vector<long int>\u2019 has\
    \ no member named \u2018find\u2019\n   34 |         if (l2.find(i) != l2.end())\
    \ {\n      |                ^~~~\n/tmp/tmp3xxggbwn.cpp:39:16: error: \u2018class\
    \ std::vector<long int>\u2019 has no member named \u2018find\u2019\n   39 |  \
    \       if (l1.find(i) != l1.end()) {\n      |                ^~~~\n"
  stdout: ''
  timestamp: 1660062098
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    long long\
    \ size1 = l1.size();\n    long long size2 = l2.size();\n    long long i = 0;\n\
    \    long long j = 0;\n    while (i < size1 && j < size2) {\n        if (l1[i]\
    \ == l2[j]) {\n            common++;\n            i++;\n            j++;\n   \
    \     } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n      \
    \      j++;\n        }\n    }\n    if (i == size1) {\n        result.push_back(l1[i]);\n\
    \    }\n    if (j == size2) {\n        result.push_back(l2[j]);\n    }\n    if\
    \ (common > 0) {\n        result.push_back(common);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9q22c4dl: /tmp/tmp9q22c4dl.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062098
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i=1;i<l1.size();i++) {\n        for(long j=0;j<l2.size();j++) {\n          \
    \  if(l1[i]==l2[j]) {\n                result.push_back(l1[i]);\n            \
    \    break;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvhbjy378: /tmp/tmpvhbjy378.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ i = 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n        \
    \    common++;\n        } else {\n            if (common > 0) {\n            \
    \    result.push_back(common);\n                common = 0;\n            }\n \
    \           result.push_back(l1.at(i));\n        }\n    }\n    if (common > 0)\
    \ {\n        result.push_back(common);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbxzf0n63: /tmp/tmpbxzf0n63.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common > 0) {\n            if (l1[i] != common) {\n             \
    \   result.push_back(l1[i]);\n            }\n        } else {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long long i = 0; i < l2.size(); i++) {\n        if\
    \ (common > 0) {\n            if (l2[i] != common) {\n                result.push_back(l2[i]);\n\
    \            }\n        } else {\n            result.push_back(l2[i]);\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpx4elvj9x: /tmp/tmpx4elvj9x.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    result.push_back(l2[0]);\n\
    \    for(long i=1;i<l1.size();i++) {\n        if(l1[i]==l2[i]) {\n           \
    \ result.push_back(l1[i]);\n        }\n    }\n    for(long i=1;i<l2.size();i++)\
    \ {\n        if(l1[0]==l2[i]) {\n            result.push_back(l2[i]);\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppf8emjdv: /tmp/tmppf8emjdv.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062098
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i=1;i<l1.size();i++) {\n        if(l1[i]==l2[0]) {\n            result.push_back(l1[i]);\n\
    \        }\n        else if(l1[i]<l2[0]) {\n            result.push_back(l1[i]);\n\
    \        }\n        else if(l1[i]>l2[0]) {\n            result.push_back(l2[0]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2yiups57: /tmp/tmp2yiups57.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062098
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    for (long i\
    \ = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n\
    \            if (l1[i] == l2[j]) {\n                common++;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (common\
    \ != 0) {\n            if (l1[i] != common) {\n                result.push_back(l1[i]);\n\
    \            }\n        }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n\
    \        if (common != 0) {\n            if (l2[i] != common) {\n            \
    \    result.push_back(l2[i]);\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2f5d93w5: /tmp/tmp2f5d93w5.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    long long\
    \ temp = 0;\n    for (long long i = 0; i < l1.size(); i++) {\n        temp = l1.at(i);\n\
    \        for (long long j = 0; j < l2.size(); j++) {\n            if (temp ==\
    \ l2.at(j)) {\n                common++;\n            }\n        }\n        result.push_back(temp);\n\
    \    }\n    for (long long i = 0; i < result.size(); i++) {\n        if (result[i]\
    \ != common) {\n            result.erase(result.begin() + i);\n            i--;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp0sulqw8f: /tmp/tmp0sulqw8f.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062098
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i=1;i<l1.size();i++) {\n        for(long j=1;j<l2.size();j++) {\n          \
    \  if(l1[i]==l2[j]) {\n                result.push_back(l1[i]);\n            \
    \    break;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp61y7jqah: /tmp/tmp61y7jqah.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    long minl = std::min(l1.size(), l2.size());\n\
    \    for (long i = 0; i < minl; i++) {\n        if (l1[i] == l2[i]) {\n      \
    \      res.push_back(l1[i]);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpqgdfu5nu: /tmp/tmpqgdfu5nu.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062098
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i = 1; i < l1.size(); i++) {\n        if(l1[i] == l2[i]) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp35bip_f6: /tmp/tmp35bip_f6.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062098
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for(long\
    \ long i = 0; i < l1.size(); i++) {\n        for(long long j = 0; j < l2.size();\
    \ j++) {\n            if(l1[i] == l2[j]) {\n                common++;\n      \
    \      }\n        }\n    }\n    for(long long i = 0; i < l1.size(); i++) {\n \
    \       if(common != 0) {\n            if(l1[i] != common) {\n               \
    \ result.push_back(l1[i]);\n            }\n        } else {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp254zdl1j: /tmp/tmp254zdl1j.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common > 0) {\n            result.push_back(l1[i]);\n           \
    \ common -= 1;\n        }\n    }\n    for (long long i = 0; i < l2.size(); i++)\
    \ {\n        if (common > 0) {\n            result.push_back(l2[i]);\n       \
    \     common -= 1;\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdv9rag7b: /tmp/tmpdv9rag7b.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062098
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i = 1, j = 1; i < l1.size() && j < l2.size(); i++, j++) {\n        if(l1[i]\
    \ == l2[j]) {\n            result.push_back(l1[i]);\n            i++;\n      \
    \      j++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpniqa95dd: /tmp/tmpniqa95dd.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062098
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for(long\
    \ long i = 0; i < (long long)l1.size(); i++) {\n        for(long long j = 0; j\
    \ < (long long)l2.size(); j++) {\n            if(l1[i] == l2[j]) {\n         \
    \       common++;\n            }\n        }\n    }\n    for(long long i = 0; i\
    \ < (long long)l1.size(); i++) {\n        if(common != 0) {\n            if(l1[i]\
    \ != common) {\n                result.push_back(l1[i]);\n            }\n    \
    \    } else {\n            result.push_back(l1[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpxy4i9x2k: /tmp/tmpxy4i9x2k.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062098
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n   \
    \         common++;\n        } else {\n            if (common > 0) {\n       \
    \         result.push_back(common);\n                common = 0;\n           \
    \ }\n            result.push_back(l1.at(i));\n        }\n    }\n    if (common\
    \ > 0) {\n        result.push_back(common);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpb6qxnswz: /tmp/tmpb6qxnswz.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    result.push_back(l2[0]);\n\
    \    long long max = 0;\n    for(long long i = 1;i < l1.size();i++) {\n      \
    \  if(l1[i] > max) {\n            max = l1[i];\n        }\n    }\n    for(long\
    \ long i = 1;i < l2.size();i++) {\n        if(l2[i] > max) {\n            max\
    \ = l2[i];\n        }\n    }\n    for(long long i = 1;i < l1.size();i++) {\n \
    \       if(l1[i] == max) {\n            result.push_back(l1[i]);\n        }\n\
    \    }\n    for(long long i = 1;i < l2.size();i++) {\n        if(l2[i] == max)\
    \ {\n            result.push_back(l2[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpr4bf6emd: /tmp/tmpr4bf6emd.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062098
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(size_t\
    \ i = 1; i < l1.size(); i++) {\n        if(l1[i] == l2[0]) {\n            result.push_back(l1[i]);\n\
    \        }\n        else if(l1[i] < l2[0]) {\n            result.push_back(l1[i]);\n\
    \        }\n        else {\n            result.push_back(l2[0]);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp7k4ykbo3: /tmp/tmp7k4ykbo3.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062098
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i=1;i<l1.size();i++) {\n        for(long j=0;j<l2.size();j++) {\n          \
    \  if(l1[i]==l2[j]) {\n                result.push_back(l1[i]);\n            \
    \    break;\n            }\n        }\n    }\n    result.push_back(l1[l1.size()-1]);\n\
    \    return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9xb_g9v4: /tmp/tmp9xb_g9v4.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062098
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    for (long i\
    \ = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n\
    \            if (l1[i] == l2[j]) {\n                common++;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (common\
    \ != 0) {\n            for (long j = 0; j < l2.size(); j++) {\n              \
    \  if (l1[i] == l2[j]) {\n                    common--;\n                }\n \
    \           }\n        }\n        if (common != 0) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp6rngmx0n: /tmp/tmp6rngmx0n.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062098
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(res));\n    return res;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3nr7bhz6: /tmp/tmp3nr7bhz6.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (auto\
    \ i : l1) {\n        if (l2.find(i) != l2.end()) {\n            common += i;\n\
    \            result.push_back(i);\n        }\n    }\n    for (auto i : l2) {\n\
    \        if (l1.find(i) != l1.end()) {\n            common += i;\n           \
    \ result.push_back(i);\n        }\n    }\n    if (common > 0) {\n        result.push_back(common);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwy0xg_up.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpwy0xg_up.cpp:12:16: error: \u2018\
    class std::vector<long int>\u2019 has no member named \u2018find\u2019\n   12\
    \ |         if (l2.find(i) != l2.end()) {\n      |                ^~~~\n/tmp/tmpwy0xg_up.cpp:18:16:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018find\u2019\
    \n   18 |         if (l1.find(i) != l1.end()) {\n      |                ^~~~\n"
  stdout: ''
  timestamp: 1660062098
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common > 0) {\n            if (l1[i] != common) {\n             \
    \   result.push_back(l1[i]);\n                common = 0;\n            }\n   \
    \     } else {\n            result.push_back(l1[i]);\n        }\n    }\n    for\
    \ (long long i = 0; i < l2.size(); i++) {\n        if (common > 0) {\n       \
    \     if (l2[i] != common) {\n                result.push_back(l2[i]);\n     \
    \           common = 0;\n            }\n        } else {\n            result.push_back(l2[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp09y__eic: /tmp/tmp09y__eic.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062099
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    for (long i\
    \ = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n\
    \            if (l1[i] == l2[j]) {\n                common++;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (common\
    \ > 0) {\n            if (l1[i] != common) {\n                result.push_back(l1[i]);\n\
    \                common--;\n            }\n        }\n    }\n    for (long i =\
    \ 0; i < l2.size(); i++) {\n        if (common > 0) {\n            if (l2[i] !=\
    \ common) {\n                result.push_back(l2[i]);\n                common--;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpc5mt31c1: /tmp/tmpc5mt31c1.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062099
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long max1 = 0, max2 = 0;\n  \
    \  for (long long i = 0; i < l1.size(); i++) {\n        if (l1[i] > max1) {\n\
    \            max1 = l1[i];\n        }\n    }\n    for (long long i = 0; i < l2.size();\
    \ i++) {\n        if (l2[i] > max2) {\n            max2 = l2[i];\n        }\n\
    \    }\n    if (max1 < max2) {\n        for (long long i = 0; i < l1.size(); i++)\
    \ {\n            if (l1[i] == max1) {\n                result.push_back(l1[i]);\n\
    \            }\n        }\n    } else {\n        for (long long i = 0; i < l2.size();\
    \ i++) {\n            if (l2[i] == max2) {\n                result.push_back(l2[i]);\n\
    \            }\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3s2o6_qv: /tmp/tmp3s2o6_qv.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062099
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common > 0) {\n            result.push_back(l1[i]);\n           \
    \ common -= 1;\n        }\n    }\n    for (long long i = 0; i < l2.size(); i++)\
    \ {\n        if (common > 0) {\n            result.push_back(l2[i]);\n       \
    \     common -= 1;\n        }\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp13pcg_kx: /tmp/tmp13pcg_kx.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062099
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    long l = 0;\n\
    \    long r = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long\
    \ count = 0;\n    while (l1 != l2 && l1 != l2 && l2 != l1) {\n        if (l1[l]\
    \ == l2[l]) {\n            common++;\n            l++;\n            l1++;\n  \
    \          l2++;\n        } else if (l1[l] < l2[l]) {\n            common++;\n\
    \            l++;\n            l1++;\n        } else {\n            common++;\n\
    \            r++;\n            l2++;\n        }\n    }\n    while (l != r) {\n\
    \        if (l1[l] == l2[l]) {\n            common++;\n            l++;\n    \
    \        l1++;\n            l2++;\n        } else if (l1[l] < l2[l]) {\n     \
    \       common++;\n            l++;\n            l1++;\n        } else {\n   \
    \         common++;\n            r++;\n            l2++;\n        }\n    }\n \
    \   while (l != r) {\n        if (l1[l] == l2[l]) {\n            common++;\n \
    \           l++;\n            l1++;\n            l2++;\n        } else if (l1[l]\
    \ < l2[l]) {\n            common++;\n            l++;\n            l1++;\n   \
    \     } else {\n            common++;\n            r++;\n            l2++;\n \
    \       }\n    }\n    while (l != r) {\n        if (l1[l] == l2[l]) {\n      \
    \      common++;\n            l++;\n            l1++;\n            l2++;\n   \
    \     } else if (l1[l] < l2[l]) {\n            common++;\n            l++;\n \
    \           l1++;\n        } else {\n            common++;\n            r++;\n\
    \            l2++;\n        }\n    }\n    while (l != r) {\n        if (l1[l]\
    \ == l2[l]) {\n            common++;\n            l++;\n            l1++;\n  \
    \          l2++;\n        } else if (l1[l] < l2[l]) {\n            common++;\n\
    \            l++;\n            l1++;\n        } else {\n            common++;\n\
    \            r++;\n            l2++;\n        }\n    }\n    while (l != r) {\n\
    \        if (l1[l] == l2[l]) {\n            common++;\n            l++;\n    \
    \        l1++;\n            l2++;\n        } else if (l1[l] < l2[l]) {\n     \
    \       common++;\n            l++;\n            l1++;\n        } else {\n   \
    \         common++;\n            r++;\n            l2++;\n        }\n    }\n \
    \   while (l != r) {\n        if (l1[l] == l2[l]) {\n            common++;\n \
    \           l++;\n            l1++;\n            l2++;\n        } else if (l1[l]\
    \ < l2[l]) {\n            common++;\n            l++;\n            l1++;\n   \
    \     } else {\n            common\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpylksk11s.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpylksk11s.cpp:21:15: error: no \u2018\
    operator++(int)\u2019 declared for postfix \u2018++\u2019 [-fpermissive]\n   21\
    \ |             l1++;\n      |             ~~^~\n/tmp/tmpylksk11s.cpp:22:15: error:\
    \ no \u2018operator++(int)\u2019 declared for postfix \u2018++\u2019 [-fpermissive]\n\
    \   22 |             l2++;\n      |             ~~^~\n/tmp/tmpylksk11s.cpp:26:15:\
    \ error: no \u2018operator++(int)\u2019 declared for postfix \u2018++\u2019 [-fpermissive]\n\
    \   26 |             l1++;\n      |             ~~^~\n/tmp/tmpylksk11s.cpp:30:15:\
    \ error: no \u2018operator++(int)\u2019 declared for postfix \u2018++\u2019 [-fpermissive]\n\
    \   30 |             l2++;\n      |             ~~^~\n/tmp/tmpylksk11s.cpp:37:15:\
    \ error: no \u2018operator++(int)\u2019 declared for postfix \u2018++\u2019 [-fpermissive]\n\
    \   37 |             l1++;\n      |             ~~^~\n/tmp/tmpylksk11s.cpp:38:15:\
    \ error: no \u2018operator++(int)\u2019 declared for postfix \u2018++\u2019 [-fpermissive]\n\
    \   38 |             l2++;\n      |             ~~^~\n/tmp/tmpylksk11s.cpp:42:15:\
    \ error: no \u2018operator++(int)\u2019 declared for postfix \u2018++\u2019 [-fpermissive]\n\
    \   42 |             l1++;\n      |             ~~^~\n/tmp/tmpylksk11s.cpp:46:15:\
    \ error: no \u2018operator++(int)\u2019 declared for postfix \u2018++\u2019 [-fpermissive]\n\
    \   46 |             l2++;\n      |             ~~^~\n/tmp/tmpylksk11s.cpp:53:15:\
    \ error: no \u2018operator++(int)\u2019 declared for postfix \u2018++\u2019 [-fpermissive]\n\
    \   53 |             l1++;\n      |             ~~^~\n/tmp/tmpylksk11s.cpp:54:15:\
    \ error: no \u2018operator++(int)\u2019 declared for postfix \u2018++\u2019 [-fpermissive]\n\
    \   54 |             l2++;\n      |             ~~^~\n/tmp/tmpylksk11s.cpp:58:15:\
    \ error: no \u2018operator++(int)\u2019 declared for postfix \u2018++\u2019 [-fpermissive]\n\
    \   58 |             l1++;\n      |             ~~^~\n/tmp/tmpylksk11s.cpp:62:15:\
    \ error: no \u2018operator++(int)\u2019 declared for postfix \u2018++\u2019 [-fpermissive]\n\
    \   62 |             l2++;\n      |             ~~^~\n/tmp/tmpylksk11s.cpp:69:15:\
    \ error: no \u2018operator++(int)\u2019 declared for postfix \u2018++\u2019 [-fpermissive]\n\
    \   69 |             l1++;\n      |             ~~^~\n/tmp/tmpylks"
  stdout: ''
  timestamp: 1660062099
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    result.push_back(l2[0]);\n\
    \    for(size_t i = 1; i < l1.size(); i++) {\n        if(l1[i] == l2[i]) {\n \
    \           result.push_back(l1[i]);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvpy5iamb: /tmp/tmpvpy5iamb.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062096
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    long l = 0;\n\
    \    long r = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long\
    \ l1 = 0;\n    long l2 = 0;\n    long l3 = 0;\n    long l4 = 0;\n    long l5 =\
    \ 0;\n    long l6 = 0;\n    long l7 = 0;\n    long l8 = 0;\n    long l9 = 0;\n\
    \    long l10 = 0;\n    long l11 = 0;\n    long l12 = 0;\n    long l13 = 0;\n\
    \    long l14 = 0;\n    long l15 = 0;\n    long l16 = 0;\n    long l17 = 0;\n\
    \    long l18 = 0;\n    long l19 = 0;\n    long l20 = 0;\n    long l21 = 0;\n\
    \    long l22 = 0;\n    long l23 = 0;\n    long l24 = 0;\n    long l25 = 0;\n\
    \    long l26 = 0;\n    long l27 = 0;\n    long l28 = 0;\n    long l29 = 0;\n\
    \    long l30 = 0;\n    long l31 = 0;\n    long l32 = 0;\n    long l33 = 0;\n\
    \    long l34 = 0;\n    long l35 = 0;\n    long l36 = 0;\n    long l37 = 0;\n\
    \    long l38 = 0;\n    long l39 = 0;\n    long l40 = 0;\n    long l41 = 0;\n\
    \    long l42 = 0;\n    long l43 = 0;\n    long l44 = 0;\n    long l45 = 0;\n\
    \    long l46 = 0;\n    long l47 = 0;\n    long l48 = 0;\n    long l49 = 0;\n\
    \    long l50 = 0;\n    long l51 = 0;\n    long l52 = 0;\n    long l53 = 0;\n\
    \    long l54 = 0;\n    long l55 = 0;\n    long l56 = 0;\n    long l57 = 0;\n\
    \    long l58 = 0;\n    long l59 = 0;\n    long l60 = 0;\n    long l61 = 0;\n\
    \    long l62 = 0;\n    long l63 = 0;\n    long l64 = 0;\n    long l65 = 0;\n\
    \    long l66 = 0;\n    long l67 = 0;\n    long l68 = 0;\n    long l69 = 0;\n\
    \    long l70 = 0;\n    long l71 = 0;\n    long l72 = 0;\n    long l73 = 0;\n\
    \    long l74 = 0;\n    long l75 = 0;\n    long l76 = 0;\n    long l77 = 0;\n\
    \    long l78 = 0;\n    long l79 = 0;\n    long l80 = 0;\n    long \n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2y6poefd.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp2y6poefd.cpp:16:10: error: declaration\
    \ of \u2018long int l1\u2019 shadows a parameter\n   16 |     long l1 = 0;\n \
    \     |          ^~\n/tmp/tmp2y6poefd.cpp:17:10: error: declaration of \u2018\
    long int l2\u2019 shadows a parameter\n   17 |     long l2 = 0;\n      |     \
    \     ^~\n/tmp/tmp2y6poefd.cpp:97:1: error: expected unqualified-id before \u2018\
    }\u2019 token\n   97 | }\n      | ^\n/tmp/tmp2y6poefd.cpp:97:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660062100
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i=1;i<l1.size();i++) {\n        if(l1[i]==l2[0]) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for(long i=1;i<l2.size();i++) {\n        if(l2[i]==l1[0])\
    \ {\n            result.push_back(l2[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpuwn4kfiu: /tmp/tmpuwn4kfiu.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long max = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        if (l1.at(i) > l2.at(i)) {\n    \
    \        max = l1.at(i);\n        } else {\n            max = l2.at(i);\n    \
    \    }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n        if (l1.at(i)\
    \ == max) {\n            result.push_back(l1.at(i));\n        }\n    }\n    for\
    \ (long long i = 0; i < l2.size(); i++) {\n        if (l2.at(i) == max) {\n  \
    \          result.push_back(l2.at(i));\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpci2598zj: /tmp/tmpci2598zj.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l1[2]);\n    result.push_back(l1[3]);\n    result.push_back(l1[4]);\n\
    \    result.push_back(l1[5]);\n    result.push_back(l1[6]);\n    result.push_back(l1[7]);\n\
    \    result.push_back(l1[8]);\n    result.push_back(l1[9]);\n    result.push_back(l1[10]);\n\
    \    result.push_back(l1[11]);\n    result.push_back(l1[12]);\n    result.push_back(l1[13]);\n\
    \    result.push_back(l1[14]);\n    result.push_back(l1[15]);\n    result.push_back(l1[16]);\n\
    \    result.push_back(l1[17]);\n    result.push_back(l1[18]);\n    result.push_back(l1[19]);\n\
    \    result.push_back(l1[20]);\n    result.push_back(l1[21]);\n    result.push_back(l1[22]);\n\
    \    result.push_back(l1[23]);\n    result.push_back(l1[24]);\n    result.push_back(l1[25]);\n\
    \    result.push_back(l1[26]);\n    result.push_back(l1[27]);\n    result.push_back(l1[28]);\n\
    \    result.push_back(l1[29]);\n    result.push_back(l1[30]);\n    result.push_back(l1[31]);\n\
    \    result.push_back(l1[32]);\n    result.push_back(l1[33]);\n    result.push_back(l1[34]);\n\
    \    result.push_back(l1[35]);\n    result.push_back(l1[36]);\n    result.push_back(l1[37]);\n\
    \    result.push_back(l1[38]);\n    result.push_back(l1[39]);\n    result.push_back(l1[40]);\n\
    \    result.push_back(l1[41]);\n    result.push_back(l1[42]);\n    result.push_back(l1[43]);\n\
    \    result.push_back(l1[44]);\n    result.push_back(l1[45]);\n    result.push_back(l1[46]);\n\
    \    result.push_back(l1[47]);\n    result.push_back(l1[48]);\n    result.push_back(l1[49]);\n\
    \    result.push_back(l1[50]);\n    result.push_back(l1[51]);\n    result.push_back(l1[52]);\n\
    \    result.push_back(l1[53]);\n    result.push_back(l1[54]);\n    result.push_back(l1[55]);\n\
    \    result.push_back(l1[56]);\n    result.push_back(l1[57]);\n    result.push_back(l1[58]);\n\
    \    result.push_back(l1[59]);\n    result.push_back(l1[60]);\n    result.push_back(l1[61]);\n\
    \    \n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppo73n0o1: /tmp/tmppo73n0o1.cpp:76: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i=1;i<l1.size();i++) {\n        for(long j=1;j<l2.size();j++) {\n          \
    \  if(l1[i]==l2[j]) {\n                result.push_back(l1[i]);\n            \
    \    break;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp61y7jqah: /tmp/tmp61y7jqah.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    for (long i\
    \ = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n\
    \            if (l1[i] == l2[j]) {\n                common++;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (common\
    \ > 0) {\n            result.push_back(l1[i]);\n            common -= 1;\n   \
    \     }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (common\
    \ > 0) {\n            result.push_back(l2[i]);\n            common -= 1;\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpy96zyyic: /tmp/tmpy96zyyic.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062096
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    long long\
    \ l = 0;\n    long long r = 0;\n    long long i = 0;\n    long long j = 0;\n \
    \   long long k = 0;\n    long long count = 0;\n    long long temp = 0;\n    long\
    \ long temp2 = 0;\n    long long temp3 = 0;\n    long long temp4 = 0;\n    long\
    \ long temp5 = 0;\n    long long temp6 = 0;\n    long long temp7 = 0;\n    long\
    \ long temp8 = 0;\n    long long temp9 = 0;\n    long long temp10 = 0;\n    long\
    \ long temp11 = 0;\n    long long temp12 = 0;\n    long long temp13 = 0;\n   \
    \ long long temp14 = 0;\n    long long temp15 = 0;\n    long long temp16 = 0;\n\
    \    long long temp17 = 0;\n    long long temp18 = 0;\n    long long temp19 =\
    \ 0;\n    long long temp20 = 0;\n    long long temp21 = 0;\n    long long temp22\
    \ = 0;\n    long long temp23 = 0;\n    long long temp24 = 0;\n    long long temp25\
    \ = 0;\n    long long temp26 = 0;\n    long long temp27 = 0;\n    long long temp28\
    \ = 0;\n    long long temp29 = 0;\n    long long temp30 = 0;\n    long long temp31\
    \ = 0;\n    long long temp32 = 0;\n    long long temp33 = 0;\n    long long temp34\
    \ = 0;\n    long long temp35 = 0;\n    long long temp36 = 0;\n    long long temp37\
    \ = 0;\n    long long temp38 = 0;\n    long long temp39 = 0;\n    long long temp40\
    \ = 0;\n    long long temp41 = 0;\n    long long temp42 = 0;\n    long long temp43\
    \ = 0;\n    long long temp44 = 0;\n    long long temp45 = 0;\n    long long temp46\
    \ = 0;\n    long long temp47 = 0;\n    long long temp48 = 0;\n    long long temp49\
    \ = 0;\n    long long temp50 = 0;\n    long long temp51 = 0;\n    long long temp52\
    \ = 0;\n    long long temp53 = 0;\n    long long temp54 = 0;\n    long long temp55\
    \ = 0;\n    long long temp56 = 0;\n    long long temp57 = 0;\n    long long temp58\
    \ = 0;\n    long long temp59 = 0;\n    long long temp60 = 0;\n    long long temp61\
    \ = 0;\n    long long temp62 = 0;\n    long long temp63 = 0;\n    long long temp64\
    \ = 0;\n    long long temp65 = 0;\n    long long temp66 = 0;\n    long long temp67\
    \ = 0;\n    long \n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdfh0dyj1.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpdfh0dyj1.cpp:85:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   85 | }\n      | ^\n/tmp/tmpdfh0dyj1.cpp:85:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660062100
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(res));\n    return res;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3nr7bhz6: /tmp/tmp3nr7bhz6.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n\
    \    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n\
    \    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n\
    \    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n\
    \    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n\
    \    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n\
    \    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n\
    \    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n\
    \    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n\
    \    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n\
    \    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n\
    \    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n\
    \    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3w6wxk19.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp3w6wxk19.cpp:83:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   83 | }\n      | ^\n/tmp/tmp3w6wxk19.cpp:83:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660062095
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    long minLen\
    \ = min(l1.size(), l2.size());\n    for (long i = 0; i < minLen; i++) {\n    \
    \    if (l1[i] == l2[i]) {\n            common++;\n        } else {\n        \
    \    result.push_back(std::min(l1[i], l2[i]));\n        }\n    }\n    if (common\
    \ > 0) {\n        result.push_back(common);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaec7spc1.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpaec7spc1.cpp:11:19: error: \u2018\
    min\u2019 was not declared in this scope; did you mean \u2018std::min\u2019?\n\
    \   11 |     long minLen = min(l1.size(), l2.size());\n      |               \
    \    ^~~\n      |                   std::min\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpaec7spc1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660062100
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    long i = 0;\n\
    \    long j = 0;\n    while (i + j < l1.size() && l1.at(i + j) == l2.at(j)) {\n\
    \        common++;\n        i++;\n        j++;\n    }\n    if (i == l1.size())\
    \ {\n        result.push_back(l2.at(j));\n    } else {\n        result.push_back(l1.at(i));\n\
    \    }\n    while (i < l1.size()) {\n        result.push_back(l1.at(i));\n   \
    \     i++;\n    }\n    while (j < l2.size()) {\n        result.push_back(l2.at(j));\n\
    \        j++;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpm22759p4: /tmp/tmpm22759p4.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062100
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long max1 = 0, max2 = 0;\n  \
    \  for (long long i = 0; i < l1.size(); i++) {\n        if (l1[i] > max1) {\n\
    \            max1 = l1[i];\n        }\n        if (l2[i] > max2) {\n         \
    \   max2 = l2[i];\n        }\n    }\n    for (long long i = 0; i < l1.size();\
    \ i++) {\n        if (l1[i] == max1 && l2[i] != max2) {\n            result.push_back(l1[i]);\n\
    \        }\n        if (l1[i] != max1 && l2[i] == max2) {\n            result.push_back(l2[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpzk7m2npo: /tmp/tmpzk7m2npo.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062100
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i=1;i<l1.size();i++) {\n        if(l1[i]==l2[0]) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for(long i=1;i<l2.size();i++) {\n        if(l2[i]==l1[0])\
    \ {\n            result.push_back(l2[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpuwn4kfiu: /tmp/tmpuwn4kfiu.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062090
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for(long\
    \ long i = 0; i < l1.size(); i++) {\n        for(long long j = 0; j < l2.size();\
    \ j++) {\n            if(l1[i] == l2[j]) {\n                common++;\n      \
    \      }\n        }\n    }\n    result.push_back(common);\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdnujx0wz: /tmp/tmpdnujx0wz.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062101
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n   \
    \         common++;\n        } else {\n            if (common > 0) {\n       \
    \         result.push_back(common);\n                common = 0;\n           \
    \ }\n            result.push_back(l1.at(i));\n        }\n    }\n    if (common\
    \ > 0) {\n        result.push_back(common);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpb6qxnswz: /tmp/tmpb6qxnswz.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l1[2]);\n    result.push_back(l1[3]);\n    result.push_back(l1[4]);\n\
    \    result.push_back(l1[5]);\n    result.push_back(l1[6]);\n    result.push_back(l1[7]);\n\
    \    result.push_back(l1[8]);\n    result.push_back(l1[9]);\n    result.push_back(l1[10]);\n\
    \    result.push_back(l1[11]);\n    result.push_back(l1[12]);\n    result.push_back(l1[13]);\n\
    \    result.push_back(l1[14]);\n    result.push_back(l1[15]);\n    result.push_back(l1[16]);\n\
    \    result.push_back(l1[17]);\n    result.push_back(l1[18]);\n    result.push_back(l1[19]);\n\
    \    result.push_back(l1[20]);\n    result.push_back(l1[21]);\n    result.push_back(l1[22]);\n\
    \    result.push_back(l1[23]);\n    result.push_back(l1[24]);\n    result.push_back(l1[25]);\n\
    \    result.push_back(l1[26]);\n    result.push_back(l1[27]);\n    result.push_back(l1[28]);\n\
    \    result.push_back(l1[29]);\n    result.push_back(l1[30]);\n    result.push_back(l1[31]);\n\
    \    result.push_back(l1[32]);\n    result.push_back(l1[33]);\n    result.push_back(l1[34]);\n\
    \    result.push_back(l1[35]);\n    result.push_back(l1[36]);\n    result.push_back(l1[37]);\n\
    \    result.push_back(l1[38]);\n    result.push_back(l1[39]);\n    result.push_back(l1[40]);\n\
    \    result.push_back(l1[41]);\n    result.push_back(l1[42]);\n    result.push_back(l1[43]);\n\
    \    result.push_back(l1[44]);\n    result.push_back(l1[45]);\n    result.push_back(l1[46]);\n\
    \    result.push_back(l1[47]);\n    result.push_back(l1[48]);\n    result.push_back(l1[49]);\n\
    \    result.push_back(l1[50]);\n    result.push_back(l1[51]);\n    result.push_back(l1[52]);\n\
    \    result.push_back(l1[53]);\n    result.push_back(l1[54]);\n    result.push_back(l1[55]);\n\
    \    result.push_back(l1[56]);\n    result.push_back(l1[57]);\n    result.push_back(l1[58]);\n\
    \    result.push_back(l1[59]);\n    result.push_back(l1[60]);\n    result.push_back(l1[61]);\n\
    \    \n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppo73n0o1: /tmp/tmppo73n0o1.cpp:76: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062091
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i = 1, j = 1; i < l1.size() && j < l2.size(); i++, j++) {\n        if(l1[i]\
    \ == l2[j]) {\n            result.push_back(l1[i]);\n        }\n    }\n    for(long\
    \ i = 1, j = 1; i < l1.size() && j < l2.size(); i++, j++) {\n        if(l1[i]\
    \ != l2[j]) {\n            result.push_back(l1[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpcydgn284: /tmp/tmpcydgn284.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062101
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for(long\
    \ long i = 0; i < l1.size(); i++) {\n        for(long long j = 0; j < l2.size();\
    \ j++) {\n            if(l1[i] == l2[j]) {\n                common++;\n      \
    \      }\n        }\n    }\n    result.push_back(common);\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdnujx0wz: /tmp/tmpdnujx0wz.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062101
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common > result.size()) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long long i = 0; i < l2.size(); i++) {\n        if\
    \ (common > result.size()) {\n            result.push_back(l2[i]);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4li2464y: /tmp/tmp4li2464y.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    std::vector<long>::iterator it;\n   \
    \ for (it = std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ std::back_inserter(res));\n         it != l1.end() && *it == *res.begin();\n\
    \         ++it) {\n        res.push_back(*it);\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp04w7af9e.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp04w7af9e.cpp:11:104: error: no\
    \ match for \u2018operator=\u2019 (operand types are \u2018std::vector<long int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    } and \u2018std::back_insert_iterator<std::vector<long int> >\u2019)\n   11 |\
    \     for (it = std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ std::back_inserter(res));\n      |                                         \
    \                                                               ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp04w7af9e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:787:11:\
    \ note: candidate: \u2018constexpr __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >& __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator=(const\
    \ __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >&)\u2019\n  787\
    \ |     class __normal_iterator\n      |           ^~~~~~~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:787:11:\
    \ note:   no known conversion for argument 1 from \u2018std::back_insert_iterator<std::vector<long\
    \ int> >\u2019 to \u2018const __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >&\u2019\n/shared/centos7/gcc/9.2.0-skylake/inc"
  stdout: ''
  timestamp: 1660062101
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i = 1, j = 1; i < l1.size() && j < l2.size(); i++, j++) {\n        if(l1[i]\
    \ == l2[j]) {\n            result.push_back(l1[i]);\n            i++;\n      \
    \      j++;\n        }\n    }\n    for(long i = l1.size(); i < l2.size(); i++,\
    \ j++) {\n        result.push_back(l2[j]);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7b6id00z.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp7b6id00z.cpp:18:49: error: \u2018\
    j\u2019 was not declared in this scope\n   18 |     for(long i = l1.size(); i\
    \ < l2.size(); i++, j++) {\n      |                                          \
    \       ^\n"
  stdout: ''
  timestamp: 1660062100
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long min1 = *std::min_element(l1.begin(),\
    \ l1.end());\n    long min2 = *std::min_element(l2.begin(), l2.end());\n    long\
    \ max1 = *std::max_element(l1.begin(), l1.end());\n    long max2 = *std::max_element(l2.begin(),\
    \ l2.end());\n    long mid1 = (max1 + min1) / 2;\n    long mid2 = (max2 + min2)\
    \ / 2;\n    long mid = mid1;\n    while (true) {\n        if (l1[mid] == l2[mid])\
    \ {\n            result.push_back(l1[mid]);\n            mid++;\n        } else\
    \ if (l1[mid] < l2[mid]) {\n            mid++;\n        } else {\n           \
    \ mid--;\n        }\n        if (mid == min1 || mid == min2) {\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660062106
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i=1;i<l1.size();i++) {\n        for(long j=1;j<l2.size();j++) {\n          \
    \  if(l1[i]==l2[j]) {\n                result.push_back(l1[i]);\n            \
    \    break;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp61y7jqah: /tmp/tmp61y7jqah.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    long long\
    \ min1 = l1[0], min2 = l2[0];\n    for (long long i = 1; i < l1.size(); i++) {\n\
    \        if (l1[i] == min1) {\n            min1 = l1[i];\n        }\n        if\
    \ (l2[i] == min2) {\n            min2 = l2[i];\n        }\n    }\n    for (long\
    \ long i = 1; i < l1.size(); i++) {\n        if (l1[i] == min1) {\n          \
    \  common++;\n        }\n        if (l2[i] == min2) {\n            common++;\n\
    \        }\n    }\n    if (common > 1) {\n        for (long long i = 0; i < l1.size();\
    \ i++) {\n            if (l1[i] == min1) {\n                common--;\n      \
    \      }\n            if (l2[i] == min2) {\n                common--;\n      \
    \      }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (l1[i] == min1) {\n            result.push_back(l1[i]);\n        }\n\
    \        if (l2[i] == min2) {\n            result.push_back(l2[i]);\n        }\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpx1xo0b81: /tmp/tmpx1xo0b81.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062101
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    long minLen\
    \ = min(l1.size(), l2.size());\n    for (long i = 0; i < minLen; i++) {\n    \
    \    if (l1[i] == l2[i]) {\n            common++;\n        } else {\n        \
    \    if (common > 0) {\n                result.push_back(common);\n          \
    \      common = 0;\n            }\n            result.push_back(l1[i]);\n    \
    \    }\n    }\n    if (common > 0) {\n        result.push_back(common);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8lrnl3rr.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp8lrnl3rr.cpp:11:19: error: \u2018\
    min\u2019 was not declared in this scope; did you mean \u2018std::min\u2019?\n\
    \   11 |     long minLen = min(l1.size(), l2.size());\n      |               \
    \    ^~~\n      |                   std::min\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8lrnl3rr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660062100
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long max1 = 0, max2 = 0;\n  \
    \  for (long long i = 0; i < l1.size(); i++) {\n        if (l1[i] > max1) {\n\
    \            max1 = l1[i];\n        }\n        if (l2[i] > max2) {\n         \
    \   max2 = l2[i];\n        }\n    }\n    if (max1 > max2) {\n        for (long\
    \ long i = 0; i < l1.size(); i++) {\n            if (l1[i] == max1) {\n      \
    \          result.push_back(l1[i]);\n            }\n        }\n    } else {\n\
    \        for (long long i = 0; i < l2.size(); i++) {\n            if (l2[i] ==\
    \ max2) {\n                result.push_back(l2[i]);\n            }\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp95eyrsu4: /tmp/tmp95eyrsu4.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062101
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common > 0) {\n            if (l1[i] == common) {\n             \
    \   result.push_back(l1[i]);\n                common--;\n            }\n     \
    \   }\n    }\n    for (long long i = 0; i < l2.size(); i++) {\n        if (common\
    \ > 0) {\n            if (l2[i] == common) {\n                result.push_back(l2[i]);\n\
    \                common--;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpin088o1w: /tmp/tmpin088o1w.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062101
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    std::vector<long>::iterator it;\n   \
    \ for (it = std::begin(l1); it != std::end(l1); ++it) {\n        auto it = std::find(std::begin(l2),\
    \ std::end(l2), *it);\n        if (it != std::end(l2)) {\n            res.push_back(*it);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv5l358w3.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpv5l358w3.cpp:12:60: error: use\
    \ of \u2018it\u2019 before deduction of \u2018auto\u2019\n   12 |         auto\
    \ it = std::find(std::begin(l2), std::end(l2), *it);\n      |                \
    \                                            ^~\n"
  stdout: ''
  timestamp: 1660062101
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n   \
    \         common++;\n        } else {\n            if (common > 0) {\n       \
    \         result.push_back(common);\n                common = 0;\n           \
    \ }\n            result.push_back(l1.at(i));\n        }\n    }\n    if (common\
    \ > 0) {\n        result.push_back(common);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpb6qxnswz: /tmp/tmpb6qxnswz.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n   \
    \         common++;\n        } else {\n            if (common > 0) {\n       \
    \         res.push_back(common);\n                common = 0;\n            }\n\
    \            res.push_back(l1.at(i));\n        }\n    }\n    if (common > 0) {\n\
    \        res.push_back(common);\n    }\n    return res;\n}\nint main() {\n   \
    \ auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppt8q_gz2: /tmp/tmppt8q_gz2.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062101
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    long long\
    \ i = 0;\n    long long j = 0;\n    long long k = 0;\n    long long l = 0;\n \
    \   long long m = 0;\n    long long n = 0;\n    long long x = 0;\n    long long\
    \ y = 0;\n    long long z = 0;\n    long long w = 0;\n    long long u = 0;\n \
    \   long long v = 0;\n    long long w1 = 0;\n    long long w2 = 0;\n    long long\
    \ w3 = 0;\n    long long w4 = 0;\n    long long w5 = 0;\n    long long w6 = 0;\n\
    \    long long w7 = 0;\n    long long w8 = 0;\n    long long w9 = 0;\n    long\
    \ long w10 = 0;\n    long long w11 = 0;\n    long long w12 = 0;\n    long long\
    \ w13 = 0;\n    long long w14 = 0;\n    long long w15 = 0;\n    long long w16\
    \ = 0;\n    long long w17 = 0;\n    long long w18 = 0;\n    long long w19 = 0;\n\
    \    long long w20 = 0;\n    long long w21 = 0;\n    long long w22 = 0;\n    long\
    \ long w23 = 0;\n    long long w24 = 0;\n    long long w25 = 0;\n    long long\
    \ w26 = 0;\n    long long w27 = 0;\n    long long w28 = 0;\n    long long w29\
    \ = 0;\n    long long w30 = 0;\n    long long w31 = 0;\n    long long w32 = 0;\n\
    \    long long w33 = 0;\n    long long w34 = 0;\n    long long w35 = 0;\n    long\
    \ long w36 = 0;\n    long long w37 = 0;\n    long long w38 = 0;\n    long long\
    \ w39 = 0;\n    long long w40 = 0;\n    long long w41 = 0;\n    long long w42\
    \ = 0;\n    long long w43 = 0;\n    long long w44 = 0;\n    long long w45 = 0;\n\
    \    long long w46 = 0;\n    long long w47 = 0;\n    long long w48 = 0;\n    long\
    \ long w49 = 0;\n    long long w50 = 0;\n    long long w51 = 0;\n    long long\
    \ w52 = 0;\n    long long w53 = 0;\n    long long w54 = 0;\n    long long w55\
    \ = 0;\n    long long w56 = 0;\n    long long w57 = 0;\n    long long w58 = 0;\n\
    \    long long w59 = 0;\n    long long w60 = 0;\n    long long w61 = 0;\n    long\
    \ long w62 = 0;\n\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp53dommro: /tmp/tmp53dommro.cpp:89: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062101
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n   \
    \         common++;\n        } else {\n            if (common > 0) {\n       \
    \         result.push_back(common);\n                common = 0;\n           \
    \ }\n            result.push_back(l1.at(i));\n        }\n    }\n    if (common\
    \ > 0) {\n        result.push_back(common);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpb6qxnswz: /tmp/tmpb6qxnswz.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for(long\
    \ long i = 0; i < l1.size(); i++) {\n        for(long long j = 0; j < l2.size();\
    \ j++) {\n            if(l1[i] == l2[j]) {\n                common++;\n      \
    \      }\n        }\n    }\n    for(long long i = 0; i < l1.size(); i++) {\n \
    \       if(common != 0) {\n            if(l1[i] != common) {\n               \
    \ result.push_back(l1[i]);\n            }\n        }\n    }\n    for(long long\
    \ i = 0; i < l2.size(); i++) {\n        if(common != 0) {\n            if(l2[i]\
    \ != common) {\n                result.push_back(l2[i]);\n            }\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpv538f1up: /tmp/tmpv538f1up.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062101
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ i = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n\
    \            if (l1[i] == l2[j]) {\n                common++;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (common\
    \ != 0) {\n            if (l1[i] != common) {\n                result.push_back(l1[i]);\n\
    \            }\n        } else {\n            result.push_back(l1[i]);\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp7ez7d2cu: /tmp/tmp7ez7d2cu.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062101
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::vector<long>::iterator it;\n\
    \    for (it = std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ std::back_inserter(result)).begin(); it != result.end(); ++it) {\n        result.erase(it);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwjfhvo7o.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpwjfhvo7o.cpp:11:109: error: \u2018\
    class std::back_insert_iterator<std::vector<long int> >\u2019 has no member named\
    \ \u2018begin\u2019\n   11 |     for (it = std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(result)).begin(); it != result.end();\
    \ ++it) {\n      |                                                           \
    \                                                  ^~~~~\n"
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i=1;i<l1.size();i++) {\n        for(long j=0;j<l2.size();j++) {\n          \
    \  if(l1[i]==l2[j]) {\n                result.push_back(l1[i]);\n            \
    \    break;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvhbjy378: /tmp/tmpvhbjy378.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    long long max = 0;\n    for (long long\
    \ i = 0; i < l1.size(); i++) {\n        if (l1.at(i) > l2.at(i)) {\n         \
    \   max = l1.at(i);\n        } else {\n            max = l2.at(i);\n        }\n\
    \    }\n    for (long long i = 0; i < l1.size(); i++) {\n        if (l1.at(i)\
    \ == max) {\n            res.push_back(l1.at(i));\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmptv8nckp9: /tmp/tmptv8nckp9.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062093
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(size_t\
    \ i = 1; i < l1.size(); i++) {\n        for(size_t j = 0; j < l2.size(); j++)\
    \ {\n            if(l1[i] == l2[j]) {\n                result.push_back(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbwedcier: /tmp/tmpbwedcier.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common > 0) {\n            if (l1[i] != common) {\n             \
    \   result.push_back(l1[i]);\n            }\n        }\n    }\n    for (long long\
    \ i = 0; i < l2.size(); i++) {\n        if (common > 0) {\n            if (l2[i]\
    \ != common) {\n                result.push_back(l2[i]);\n            }\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpyiqp1hzv: /tmp/tmpyiqp1hzv.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpj2yorqwp: /tmp/tmpj2yorqwp.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062101
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ i = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n\
    \            if (l1[i] == l2[j]) {\n                common++;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (common\
    \ != 0) {\n            if (l1[i] != common) {\n                result.push_back(l1[i]);\n\
    \            }\n        } else {\n            result.push_back(l1[i]);\n     \
    \   }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (common !=\
    \ 0) {\n            if (l2[i] != common) {\n                result.push_back(l2[i]);\n\
    \            }\n        } else {\n            result.push_back(l2[i]);\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpefllg50_: /tmp/tmpefllg50_.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062102
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    long long\
    \ max = 0;\n    long long min = 0;\n    for (auto i : l1) {\n        if (l2.find(i)\
    \ != l2.end()) {\n            common += i;\n            max = std::max(max, i);\n\
    \            min = std::min(min, i);\n        }\n    }\n    for (auto i : l2)\
    \ {\n        if (l1.find(i) != l1.end()) {\n            common += i;\n       \
    \     max = std::max(max, i);\n            min = std::min(min, i);\n        }\n\
    \    }\n    if (common == 0) {\n        return result;\n    }\n    for (auto i\
    \ : l1) {\n        if (l2.find(i) != l2.end()) {\n            common -= i;\n \
    \           max = std::max(max, i);\n            min = std::min(min, i);\n   \
    \     }\n    }\n    for (auto i : l2) {\n        if (l1.find(i) != l1.end()) {\n\
    \            common -= i;\n            max = std::max(max, i);\n            min\
    \ = std::min(min, i);\n        }\n    }\n    if (common < 0) {\n        common\
    \ = 0;\n    }\n    if (common > 0) {\n        common = 0;\n    }\n    for (auto\
    \ i : l1) {\n        if (l2.find(i) != l2.end()) {\n            common += i;\n\
    \            max = std::max(max, i);\n            min = std::min(min, i);\n  \
    \      }\n    }\n    for (auto i : l2) {\n        if (l1.find(i) != l1.end())\
    \ {\n            common += i;\n            max = std::max(max, i);\n         \
    \   min = std::min(min, i);\n        }\n    }\n    if (common == 0) {\n      \
    \  return result;\n    }\n    for (auto i : l1) {\n        if (l2.find(i) != l2.end())\
    \ {\n            common -= i;\n            max = std::max(max, i);\n         \
    \   min = std::min(min, i);\n        }\n    }\n    for (auto i : l2) {\n     \
    \   if (l1.find(i) != l1.end()) {\n            common -= i;\n            max =\
    \ std::max(max, i);\n            min = std::min(min, i);\n        }\n    }\n \
    \   if (common < 0) {\n        common = 0;\n    }\n    if (common > 0) {\n   \
    \     common = 0;\n    }\n    for (auto i : l1) {\n        if (l2.find(i) != l2.end())\
    \ {\n            common += i;\n            max = std::max(max, i);\n         \
    \   min = std::min(min, i);\n        }\n    }\n    for (auto i : l2) {\n     \
    \   if (l1.find(i) != l1.end()) {\n            common += i;\n            max =\
    \ std::max(max, i);\n            min = std::min(min, i);\n        }\n    }\n \
    \   if (common == 0) {\n        return result;\n    }\n    for (auto i : l1) {\n\
    \        if (l2.find(\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyfyksm2c.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpyfyksm2c.cpp:14:16: error: \u2018\
    class std::vector<long int>\u2019 has no member named \u2018find\u2019\n   14\
    \ |         if (l2.find(i) != l2.end()) {\n      |                ^~~~\n/tmp/tmpyfyksm2c.cpp:16:34:\
    \ error: no matching function for call to \u2018max(long long int&, long int&)\u2019\
    \n   16 |             max = std::max(max, i);\n      |                       \
    \           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpyfyksm2c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyfyksm2c.cpp:16:34:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018long int\u2019)\n   16 |             max = std::max(max,\
    \ i);\n      |                                  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake"
  stdout: ''
  timestamp: 1660062101
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (auto\
    \ i : l1) {\n        if (l2.find(i) != l2.end()) {\n            common += i;\n\
    \            result.push_back(i);\n        }\n    }\n    for (auto i : l2) {\n\
    \        if (l1.find(i) != l1.end()) {\n            common += i;\n           \
    \ result.push_back(i);\n        }\n    }\n    if (common != 0) {\n        for\
    \ (auto i : result) {\n            i = common - i;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7p15edd0.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp7p15edd0.cpp:12:16: error: \u2018\
    class std::vector<long int>\u2019 has no member named \u2018find\u2019\n   12\
    \ |         if (l2.find(i) != l2.end()) {\n      |                ^~~~\n/tmp/tmp7p15edd0.cpp:18:16:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018find\u2019\
    \n   18 |         if (l1.find(i) != l1.end()) {\n      |                ^~~~\n"
  stdout: ''
  timestamp: 1660062101
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    while (i<l1.size() && j<l2.size()) {\n\
    \        if (l1[i]==l2[j]) {\n            common++;\n            i++;\n      \
    \      j++;\n        } else if (l1[i]<l2[j]) {\n            i++;\n        } else\
    \ {\n            j++;\n        }\n    }\n    while (i < l1.size()) {\n       \
    \ result.push_back(l1[i]);\n        i++;\n    }\n    while (j < l2.size()) {\n\
    \        result.push_back(l2[j]);\n        j++;\n    }\n    while (i < l1.size()\
    \ && j < l2.size()) {\n        if (l1[i]<l2[j]) {\n            result.push_back(l1[i]);\n\
    \            i++;\n        } else {\n            result.push_back(l2[j]);\n  \
    \          j++;\n        }\n    }\n    while (i < l1.size()) {\n        result.push_back(l1[i]);\n\
    \        i++;\n    }\n    while (j < l2.size()) {\n        result.push_back(l2[j]);\n\
    \        j++;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp8jcknl7j: /tmp/tmp8jcknl7j.cpp:54: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,
    (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,
    (long)5, (long)653}))'' failed.

    '
  stdout: ''
  timestamp: 1660062102
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    long long\
    \ i = 0;\n    long long j = 0;\n    long long k = 0;\n    long long l = 0;\n \
    \   long long count = 0;\n    long long max = 0;\n    long long min = 0;\n   \
    \ long long sum = 0;\n    long long sum1 = 0;\n    long long sum2 = 0;\n    long\
    \ long sum3 = 0;\n    long long sum4 = 0;\n    long long sum5 = 0;\n    long long\
    \ sum6 = 0;\n    long long sum7 = 0;\n    long long sum8 = 0;\n    long long sum9\
    \ = 0;\n    long long sum10 = 0;\n    long long sum11 = 0;\n    long long sum12\
    \ = 0;\n    long long sum13 = 0;\n    long long sum14 = 0;\n    long long sum15\
    \ = 0;\n    long long sum16 = 0;\n    long long sum17 = 0;\n    long long sum18\
    \ = 0;\n    long long sum19 = 0;\n    long long sum20 = 0;\n    long long sum21\
    \ = 0;\n    long long sum22 = 0;\n    long long sum23 = 0;\n    long long sum24\
    \ = 0;\n    long long sum25 = 0;\n    long long sum26 = 0;\n    long long sum27\
    \ = 0;\n    long long sum28 = 0;\n    long long sum29 = 0;\n    long long sum30\
    \ = 0;\n    long long sum31 = 0;\n    long long sum32 = 0;\n    long long sum33\
    \ = 0;\n    long long sum34 = 0;\n    long long sum35 = 0;\n    long long sum36\
    \ = 0;\n    long long sum37 = 0;\n    long long sum38 = 0;\n    long long sum39\
    \ = 0;\n    long long sum40 = 0;\n    long long sum41 = 0;\n    long long sum42\
    \ = 0;\n    long long sum43 = 0;\n    long long sum44 = 0;\n    long long sum45\
    \ = 0;\n    long long sum46 = 0;\n    long long sum47 = 0;\n    long long sum48\
    \ = 0;\n    long long sum49 = 0;\n    long long sum50 = 0;\n    long long sum51\
    \ = 0;\n    long long sum52 = 0;\n    long long sum53 = 0;\n    long long sum54\
    \ = 0;\n    long long sum55 = 0;\n    long long sum56 = 0;\n    long long sum57\
    \ = 0;\n    long long sum58 = 0;\n    long long sum59 = 0;\n    long long sum60\
    \ = 0;\n    long long sum61 = 0;\n    long long sum62 = 0;\n    long long sum63\
    \ = 0;\n    long long sum64 = 0;\n    long long sum65 = 0;\n    long long sum\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp87hdod7m.cpp: In function \u2018std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp87hdod7m.cpp:85:1: error: expected\
    \ initializer before \u2018}\u2019 token\n   85 | }\n      | ^\n/tmp/tmp87hdod7m.cpp:85:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660062102
