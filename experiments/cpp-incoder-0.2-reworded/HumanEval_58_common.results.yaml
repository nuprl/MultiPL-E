language: cpp
name: HumanEval_58_common
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::vector<long> temp;\n    for (auto\
    \ i : l1) {\n        if (std::find(l2.begin(), l2.end(), i) != l2.end()) {\n \
    \           result.push_back(i);\n        }\n    }\n    for (auto i : l2) {\n\
    \        if (std::find(l1.begin(), l1.end(), i) != l1.end()) {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_woygwiw.cpp: In function 'std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)':\n/tmp/tmp_woygwiw.cpp:11:15: error: 'i' does\
    \ not name a type\n     for (auto i : l1) {\n               ^\n/tmp/tmp_woygwiw.cpp:16:5:\
    \ error: expected ';' before 'for'\n     for (auto i : l2) {\n     ^\n/tmp/tmp_woygwiw.cpp:16:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmp_woygwiw.cpp:16:5:\
    \ error: expected ';' before 'for'\n/tmp/tmp_woygwiw.cpp:16:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmp_woygwiw.cpp:16:5: error: expected\
    \ ')' before 'for'\n/tmp/tmp_woygwiw.cpp:16:15: error: 'i' does not name a type\n\
    \     for (auto i : l2) {\n               ^\n/tmp/tmp_woygwiw.cpp:21:5: error:\
    \ expected ';' before 'return'\n     return result;\n     ^\n/tmp/tmp_woygwiw.cpp:21:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp_woygwiw.cpp:21:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp_woygwiw.cpp:21:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp_woygwiw.cpp:21:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp_woygwiw.cpp: In function 'int main()':\n/tmp/tmp_woygwiw.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = common;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_woygwiw.cpp:2:\n/tmp/tmp_woygwiw.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                        ^\n/tmp/tmp_woygwiw.cpp:25:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common > 0) {\n            if (l1[i] == common) {\n             \
    \   result.push_back(l1[i]);\n            }\n        }\n    }\n    for (long long\
    \ i = 0; i < l2.size(); i++) {\n        if (common > 0) {\n            if (l2[i]\
    \ == common) {\n                result.push_back(l2[i]);\n            }\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8a4gsizo.cpp: In function 'int main()':\n/tmp/tmp8a4gsizo.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = common;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8a4gsizo.cpp:2:\n/tmp/tmp8a4gsizo.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                        ^\n/tmp/tmp8a4gsizo.cpp:36:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                                  \
    \                                                         ^\n/tmp/tmp8a4gsizo.cpp:36:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8a4gsizo.cpp:36:107: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8a4gsizo.cpp:36:107: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp8a4gsizo.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __firs"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n   \
    \         common++;\n        } else {\n            if (common > 0) {\n       \
    \         result.push_back(common);\n                common = 0;\n           \
    \ }\n            result.push_back(l1.at(i));\n        }\n    }\n    if (common\
    \ > 0) {\n        result.push_back(common);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdf2jvpnj.cpp: In function 'int main()':\n/tmp/tmpdf2jvpnj.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = common;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdf2jvpnj.cpp:2:\n/tmp/tmpdf2jvpnj.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                        ^\n/tmp/tmpdf2jvpnj.cpp:29:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                                  \
    \                                                         ^\n/tmp/tmpdf2jvpnj.cpp:29:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdf2jvpnj.cpp:29:107: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdf2jvpnj.cpp:29:107: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdf2jvpnj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __firs"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    result.push_back(l2[0]);\n\
    \    long long max1 = l1[0], max2 = l2[0];\n    for (long long i = 1; i < l1.size();\
    \ i++) {\n        if (l1[i] > max1) {\n            result.push_back(l1[i]);\n\
    \            max1 = l1[i];\n        }\n        if (l2[i] > max2) {\n         \
    \   result.push_back(l2[i]);\n            max2 = l2[i];\n        }\n    }\n  \
    \  if (max1 < max2) {\n        result.push_back(l1[l1.size() - 1]);\n    }\n \
    \   if (max2 < max1) {\n        result.push_back(l2[l2.size() - 1]);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9ol8of5.cpp: In function 'int main()':\n/tmp/tmpf9ol8of5.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = common;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf9ol8of5.cpp:2:\n/tmp/tmpf9ol8of5.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                        ^\n/tmp/tmpf9ol8of5.cpp:33:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                                  \
    \                                                         ^\n/tmp/tmpf9ol8of5.cpp:33:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpf9ol8of5.cpp:33:107: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpf9ol8of5.cpp:33:107: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpf9ol8of5.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __firs"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    while (i + j < l1.size() && j + k < l2.size())\
    \ {\n        if (l1[i] == l2[j]) {\n            common++;\n            i++;\n\
    \            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n   \
    \     } else {\n            j++;\n        }\n    }\n    if (i == l1.size()) {\n\
    \        result.push_back(l1[k]);\n    } else if (j == l2.size()) {\n        result.push_back(l2[k]);\n\
    \    } else {\n        result.push_back(l1[k]);\n        result.push_back(l2[k]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9pnhm59e.cpp: In function 'int main()':\n/tmp/tmp9pnhm59e.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = common;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9pnhm59e.cpp:2:\n/tmp/tmp9pnhm59e.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                        ^\n/tmp/tmp9pnhm59e.cpp:37:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                                  \
    \                                                         ^\n/tmp/tmp9pnhm59e.cpp:37:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp9pnhm59e.cpp:37:107: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp9pnhm59e.cpp:37:107: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9pnhm59e.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __firs"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long commonCount = 0;\n    long\
    \ long commonIndex = 0;\n    long long l1Index = 0;\n    long long l2Index = 0;\n\
    \    while (l1Index < l1.size() && l2Index < l2.size()) {\n        if (l1[l1Index]\
    \ == l2[l2Index]) {\n            commonCount++;\n            l1Index++;\n    \
    \        l2Index++;\n        } else if (l1[l1Index] < l2[l2Index]) {\n       \
    \     commonCount++;\n            l1Index++;\n        } else {\n            commonCount++;\n\
    \            l2Index++;\n        }\n    }\n    while (commonCount > 0) {\n   \
    \     if (commonIndex < result.size()) {\n            result[commonIndex] = l1[l1Index];\n\
    \            commonIndex++;\n            l1Index++;\n        } else {\n      \
    \      result.push_back(l1[l1Index]);\n            commonIndex++;\n          \
    \  l1Index++;\n        }\n        commonCount--;\n    }\n    while (l2Index <\
    \ l2.size()) {\n        result.push_back(l2[l2Index]);\n        l2Index++;\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = common;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe9fobh7q.cpp: In function 'int main()':\n/tmp/tmpe9fobh7q.cpp:46:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = common;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe9fobh7q.cpp:2:\n/tmp/tmpe9fobh7q.cpp:47:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                        ^\n/tmp/tmpe9fobh7q.cpp:47:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                                  \
    \                                                         ^\n/tmp/tmpe9fobh7q.cpp:47:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpe9fobh7q.cpp:47:107: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpe9fobh7q.cpp:47:107: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpe9fobh7q.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __firs"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long common = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    while (i<l1.size() && j<l2.size()) {\n\
    \        if (l1[i]==l2[j]) {\n            common++;\n            i++;\n      \
    \      j++;\n        } else if (l1[i]<l2[j]) {\n            i++;\n        } else\
    \ {\n            j++;\n        }\n    }\n    while (i < l1.size()) {\n       \
    \ result.push_back(l1[i]);\n        i++;\n    }\n    while (j < l2.size()) {\n\
    \        result.push_back(l2[j]);\n        j++;\n    }\n    while (i < l1.size()\
    \ && j < l2.size()) {\n        if (l1[i]==l2[j]) {\n            common++;\n  \
    \          i++;\n            j++;\n        } else if (l1[i]<l2[j]) {\n       \
    \     i++;\n        } else {\n            j++;\n        }\n    }\n    while (i\
    \ < l1.size()) {\n        result.push_back(l1[i]);\n        i++;\n    }\n    while\
    \ (j < l2.size()) {\n        result.push_back(l2[j]);\n        j++;\n    }\n \
    \   while (i < l1.size() && j < l2.size()) {\n        if (l1[i]==l2[j]) {\n  \
    \          common++;\n            i++;\n            j++;\n        } else if (l1[i]<l2[j])\
    \ {\n            i++;\n        } else {\n            j++;\n        }\n    }\n\
    \    while (i < l1.size()) {\n        result.push_back(l1[i]);\n        i++;\n\
    \    }\n    while (j < l2.size()) {\n        result.push_back(l2[j]);\n      \
    \  j++;\n    }\n    while (i < l1.size() && j < l2.size()) {\n        if (l1[i]==l2[j])\
    \ {\n            common++;\n            i++;\n            j++;\n        } else\
    \ if (l1[i]<l2[j]) {\n            i++;\n        } else {\n            j++;\n \
    \       }\n    }\n    while (i < l1.size()) {\n        result.push_back(l1[i]);\n\
    \        i++;\n    }\n    while (j < l2.size()) {\n        result.push_back(l2[j]);\n\
    \        j++;\n    }\n    while (i < l1.size() && j < l2.size()) {\n        if\
    \ (l1[i]==l2[j]) {\n            common++;\n            i++;\n            j++;\n\
    \        } else if (l1[i]<l2[j]) {\n            i++;\n        } else {\n     \
    \       j++;\n        }\n    }\n    while (i < l1.size()) {\n        result.push_back(l1[i]);\n\
    \        i++;\n    }\n    while (j < l2.size()) {\n        result.push_back(l2[j]);\n\
    \        j++;\n    }\n    while (i < l1.size() && j < l2.size()) {\n        if\
    \ (l1[i]==l2[j]) {\n            common++;\n            i++;\n            j++;\n\
    \        } else if (l1[i]<\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf3jfovj7.cpp: In function 'std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)':\n/tmp/tmpf3jfovj7.cpp:115:1: error: expected\
    \ primary-expression before '}' token\n }\n ^\n/tmp/tmpf3jfovj7.cpp:115:1: error:\
    \ expected ')' before '}' token\n/tmp/tmpf3jfovj7.cpp:115:1: error: expected primary-expression\
    \ before '}' token\n/tmp/tmpf3jfovj7.cpp:115:1: error: expected ';' before '}'\
    \ token\n/tmp/tmpf3jfovj7.cpp:116:12: error: a function-definition is not allowed\
    \ here before '{' token\n int main() {\n            ^\n/tmp/tmpf3jfovj7.cpp:122:1:\
    \ error: expected '}' at end of input\n }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    long common = 0;\n    for (long i = 0;\
    \ i < l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n    \
    \        if (l1[i] == l2[j]) {\n                common++;\n            }\n   \
    \     }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (common\
    \ != 0) {\n            if (l1[i] != common) {\n                res.push_back(l1[i]);\n\
    \            }\n        } else {\n            res.push_back(l1[i]);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2sv72ln5.cpp: In function 'int main()':\n/tmp/tmp2sv72ln5.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = common;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2sv72ln5.cpp:2:\n/tmp/tmp2sv72ln5.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                        ^\n/tmp/tmp2sv72ln5.cpp:31:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                                  \
    \                                                         ^\n/tmp/tmp2sv72ln5.cpp:31:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2sv72ln5.cpp:31:107: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2sv72ln5.cpp:31:107: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2sv72ln5.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __firs"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n   \
    \         common++;\n        } else {\n            if (common > 0) {\n       \
    \         result.push_back(common);\n                common = 0;\n           \
    \ }\n            result.push_back(l1.at(i));\n        }\n    }\n    if (common\
    \ > 0) {\n        result.push_back(common);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdf2jvpnj.cpp: In function 'int main()':\n/tmp/tmpdf2jvpnj.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = common;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdf2jvpnj.cpp:2:\n/tmp/tmpdf2jvpnj.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                        ^\n/tmp/tmpdf2jvpnj.cpp:29:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                                  \
    \                                                         ^\n/tmp/tmpdf2jvpnj.cpp:29:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdf2jvpnj.cpp:29:107: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdf2jvpnj.cpp:29:107: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdf2jvpnj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __firs"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    result.push_back(l2[0]);\n\
    \    for(size_t i = 1; i < l1.size(); i++) {\n        if(l1[i] != l2[i]) {\n \
    \           result.push_back(l1[i]);\n            result.push_back(l2[i]);\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprvdfppyr.cpp: In function 'int main()':\n/tmp/tmprvdfppyr.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = common;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprvdfppyr.cpp:2:\n/tmp/tmprvdfppyr.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                        ^\n/tmp/tmprvdfppyr.cpp:22:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                                  \
    \                                                         ^\n/tmp/tmprvdfppyr.cpp:22:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprvdfppyr.cpp:22:107: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprvdfppyr.cpp:22:107: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprvdfppyr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __firs"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common > 0) {\n            if (l1[i] != common) {\n             \
    \   res.push_back(l1[i]);\n                common--;\n            }\n        }\
    \ else {\n            res.push_back(l1[i]);\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5egp6wlb.cpp: In function 'int main()':\n/tmp/tmp5egp6wlb.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = common;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5egp6wlb.cpp:2:\n/tmp/tmp5egp6wlb.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                        ^\n/tmp/tmp5egp6wlb.cpp:32:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                                  \
    \                                                         ^\n/tmp/tmp5egp6wlb.cpp:32:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5egp6wlb.cpp:32:107: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp5egp6wlb.cpp:32:107: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp5egp6wlb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __firs"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common > result.size()) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long long i = 0; i < l2.size(); i++) {\n        if\
    \ (common > result.size()) {\n            result.push_back(l2[i]);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653,\
    \ (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5,\
    \ (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})),\
    \ (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnobdpbch.cpp: In function 'int main()':\n/tmp/tmpnobdpbch.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = common;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnobdpbch.cpp:2:\n/tmp/tmpnobdpbch.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                        ^\n/tmp/tmpnobdpbch.cpp:32:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                                  \
    \                                                         ^\n/tmp/tmpnobdpbch.cpp:32:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpnobdpbch.cpp:32:107: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpnobdpbch.cpp:32:107: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpnobdpbch.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __firs"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common > 0) {\n            if (l1[i] != common) {\n             \
    \   result.push_back(l1[i]);\n                common--;\n            }\n     \
    \   } else {\n            result.push_back(l1[i]);\n        }\n    }\n    for\
    \ (long long i = 0; i < l2.size(); i++) {\n        if (common > 0) {\n       \
    \     if (l2[i] != common) {\n                result.push_back(l2[i]);\n     \
    \           common--;\n            }\n        } else {\n            result.push_back(l2[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0mi3d7ok.cpp: In function 'int main()':\n/tmp/tmp0mi3d7ok.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = common;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0mi3d7ok.cpp:2:\n/tmp/tmp0mi3d7ok.cpp:42:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                        ^\n/tmp/tmp0mi3d7ok.cpp:42:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                                  \
    \                                                         ^\n/tmp/tmp0mi3d7ok.cpp:42:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0mi3d7ok.cpp:42:107: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp0mi3d7ok.cpp:42:107: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp0mi3d7ok.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __firs"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long\
    \ i=1;i<l1.size();i++) {\n        for(long j=1;j<l2.size();j++) {\n          \
    \  if(l1[i]==l2[j]) {\n                result.push_back(l1[i]);\n            \
    \    break;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9zc1dazi.cpp: In function 'int main()':\n/tmp/tmp9zc1dazi.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = common;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9zc1dazi.cpp:2:\n/tmp/tmp9zc1dazi.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                        ^\n/tmp/tmp9zc1dazi.cpp:23:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                                  \
    \                                                         ^\n/tmp/tmp9zc1dazi.cpp:23:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp9zc1dazi.cpp:23:107: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp9zc1dazi.cpp:23:107: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9zc1dazi.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __firs"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (common > 0) {\n            if (l1[i] != common) {\n             \
    \   result.push_back(l1[i]);\n            }\n        } else {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long long i = 0; i < l2.size(); i++) {\n        if\
    \ (common > 0) {\n            if (l2[i] != common) {\n                result.push_back(l2[i]);\n\
    \            }\n        } else {\n            result.push_back(l2[i]);\n     \
    \   }\n    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34,\
    \ (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1,\
    \ (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkf5ri2i_.cpp: In function 'int main()':\n/tmp/tmpkf5ri2i_.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = common;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkf5ri2i_.cpp:2:\n/tmp/tmpkf5ri2i_.cpp:40:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                        ^\n/tmp/tmpkf5ri2i_.cpp:40:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                                  \
    \                                                         ^\n/tmp/tmpkf5ri2i_.cpp:40:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpkf5ri2i_.cpp:40:107: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpkf5ri2i_.cpp:40:107: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpkf5ri2i_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __firs"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    std::vector<long>::iterator it;\n\
    \    for (it = std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ std::back_inserter(result)).begin(); it != result.end(); ++it)\n        result.erase(*it);\n\
    \    return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgpn2dya9.cpp: In function 'std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>)':\n/tmp/tmpgpn2dya9.cpp:11:109: error: 'class std::back_insert_iterator<std::vector<long\
    \ int> >' has no member named 'begin'\n     for (it = std::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(), std::back_inserter(result)).begin(); it != result.end();\
    \ ++it)\n                                                                    \
    \                                         ^\n/tmp/tmpgpn2dya9.cpp:12:25: error:\
    \ no matching function for call to 'std::vector<long int>::erase(long int&)'\n\
    \         result.erase(*it);\n                         ^\n/tmp/tmpgpn2dya9.cpp:12:25:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:69:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpgpn2dya9.cpp:2:\n/usr/include/c++/4.8.2/bits/vector.tcc:134:5:\
    \ note: std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::erase(std::vector<_Tp,\
    \ _Alloc>::iterator) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer =\
    \ long int*]\n     vector<_Tp, _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/vector.tcc:134:5:\
    \ note:   no known conversion for argument 1 from 'long int' to 'std::vector<long\
    \ int>::iterator {aka __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >}'\n/usr/include/c++/4.8.2/bits/vector.tcc:146:5: note: std::vector<_Tp,\
    \ _Alloc>::iterator std::vector<_Tp, _Alloc>::erase(std::vector<_Tp, _Alloc>::iterator,\
    \ std::vector<_Tp, _Alloc>::iterator) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*]\n     vector<_Tp, _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    long long common = 0;\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    res.push_back(common);\n    return res;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_cszxm9g.cpp: In function 'int main()':\n/tmp/tmp_cszxm9g.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = common;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_cszxm9g.cpp:2:\n/tmp/tmp_cszxm9g.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                        ^\n/tmp/tmp_cszxm9g.cpp:23:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                                  \
    \                                                         ^\n/tmp/tmp_cszxm9g.cpp:23:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_cszxm9g.cpp:23:107: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp_cszxm9g.cpp:23:107: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_cszxm9g.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __firs"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ i = 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n        \
    \    common++;\n        } else {\n            if (common > 0) {\n            \
    \    result.push_back(common);\n                common = 0;\n            }\n \
    \           result.push_back(l1.at(i));\n        }\n    }\n    if (common > 0)\
    \ {\n        result.push_back(common);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp24rlrqzi.cpp: In function 'int main()':\n/tmp/tmp24rlrqzi.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = common;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp24rlrqzi.cpp:2:\n/tmp/tmp24rlrqzi.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                        ^\n/tmp/tmp24rlrqzi.cpp:29:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                                  \
    \                                                         ^\n/tmp/tmp24rlrqzi.cpp:29:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp24rlrqzi.cpp:29:107: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp24rlrqzi.cpp:29:107: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp24rlrqzi.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __firs"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(size_t\
    \ i = 1; i < l1.size(); i++) {\n        for(size_t j = 0; j < l2.size(); j++)\
    \ {\n            if(l1[i] == l2[j]) {\n                result.push_back(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj1ff81of.cpp: In function 'int main()':\n/tmp/tmpj1ff81of.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = common;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj1ff81of.cpp:2:\n/tmp/tmpj1ff81of.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                        ^\n/tmp/tmpj1ff81of.cpp:23:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                                  \
    \                                                         ^\n/tmp/tmpj1ff81of.cpp:23:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpj1ff81of.cpp:23:107: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpj1ff81of.cpp:23:107: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpj1ff81of.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __firs"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
    \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
    \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long>\
    \ l2) {\n    std::vector<long> res;\n    long long common = 0;\n    long long\
    \ l = 0;\n    long long r = 0;\n    for (long long i = 0; i < l1.size(); i++)\
    \ {\n        common = common * 10 + l1[i];\n    }\n    for (long long i = 0; i\
    \ < l2.size(); i++) {\n        common = common * 10 + l2[i];\n    }\n    for (long\
    \ long i = 0; i < l1.size(); i++) {\n        l = l * 10 + l1[i];\n    }\n    for\
    \ (long long i = 0; i < l2.size(); i++) {\n        r = r * 10 + l2[i];\n    }\n\
    \    if (common > r) {\n        res.push_back(l);\n        res.push_back(r);\n\
    \    }\n    if (common < l) {\n        res.push_back(r);\n        res.push_back(l);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
    \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl3t0gh9w.cpp: In function 'int main()':\n/tmp/tmpl3t0gh9w.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = common;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl3t0gh9w.cpp:2:\n/tmp/tmpl3t0gh9w.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4, (long)3,\
    \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
    \ (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                        ^\n/tmp/tmpl3t0gh9w.cpp:37:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)4,\
    \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
    \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
    \ (long)5, (long)653})));\n                                                  \
    \                                                         ^\n/tmp/tmpl3t0gh9w.cpp:37:107:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl3t0gh9w.cpp:37:107: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl3t0gh9w.cpp:37:107: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpl3t0gh9w.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __firs"
  stdout: ''
