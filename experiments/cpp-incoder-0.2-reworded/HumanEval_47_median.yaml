name: HumanEval_47_median
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
  \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
  \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
  \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
  \ l) {\n"
tests: "}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
  \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
  \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
  \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
  \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
completions: ["    long long n = l.size();\n    if (n < 2) return 0;\n    long long\
    \ mid = n / 2;\n    long long l1 = 0, l2 = mid;\n    long long m1 = 0, m2 = mid;\n\
    \    float midVal = l[mid];\n    while (true) {\n        if (l1 < mid) m1 = l1;\n\
    \        if (l2 < mid) m2 = l2;\n        if (m1 < m2 && m1 < midVal) l1 = m1 +\
    \ 1;\n        if (m2 < mid) l2 = m2;\n        if (l1 > l2) break;\n        midVal\
    \ = l[mid];\n    }\n    return midVal;", "  long long n = l.size();\n  assert(n\
    \ != 0);\n  long long mid = n / 2;\n  if (n % 2 == 0) {\n    return l[mid];\n\
    \  } else {\n    return (l[mid] + l[mid]) / 2.0;\n  }", "    long long n = l.size();\n\
    \    if (n % 2 == 0) {\n        return l[n/2-1] + (l[n/2] - l[n/2-1])/2.0;\n \
    \   } else {\n        return l[n/2];\n    }", "    long long n = l.size();\n \
    \   if (n % 2 == 0) {\n        return l[n/2];\n    } else {\n        return (l[n/2]\
    \ + l[n/2-1])/2.0;\n    }", "    long n = l.size();\n    if (n % 2 == 0) {\n \
    \       return l[n/2];\n    } else {\n        return (l[n/2] + l[n/2-1])/2.0;\n\
    \    }", "    long long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    float median = (float)sum / l.size();\n    return median;", "    long\
    \ long n = l.size();\n    assert(n >= 1);\n    long long mid = n / 2;\n    long\
    \ long m1 = mid;\n    long long m2 = mid + 1;\n    long long m3 = mid + 2;\n \
    \   long long m4 = mid + 3;\n    long long m5 = mid + 4;\n    long long m6 = mid\
    \ + 5;\n    long long m7 = mid + 6;\n    long long m8 = mid + 7;\n    long long\
    \ m9 = mid + 8;\n    long long m10 = mid + 9;\n    long long m11 = mid + 10;\n\
    \    long long m12 = mid + 11;\n    long long m13 = mid + 12;\n    long long m14\
    \ = mid + 13;\n    long long m15 = mid + 14;\n    long long m16 = mid + 15;\n\
    \    long long m17 = mid + 16;\n    long long m18 = mid + 17;\n    long long m19\
    \ = mid + 18;\n    long long m20 = mid + 19;\n    long long m21 = mid + 20;\n\
    \    long long m22 = mid + 21;\n    long long m23 = mid + 22;\n    long long m24\
    \ = mid + 23;\n    long long m25 = mid + 24;\n    long long m26 = mid + 25;\n\
    \    long long m27 = mid + 26;\n    long long m28 = mid + 27;\n    long long m29\
    \ = mid + 28;\n    long long m30 = mid + 29;\n    long long m31 = mid + 30;\n\
    \    long long m32 = mid + 31;\n    long long m33 = mid + 32;\n    long long m34\
    \ = mid + 33;\n    long long m35 = mid + 34;\n    long long m36 = mid + 35;\n\
    \    long long m37 = mid + 36;\n    long long m38 = mid + 37;\n    long long m39\
    \ = mid + 38;\n    long long m40 = mid + 39;\n    long long m41 = mid + 40;\n\
    \    long long m42 = mid + 41;\n    long long m43 = mid + 42;\n    long long m44\
    \ = mid + 43;\n    long long m45 = mid + 44;\n    long long m46 = mid + 45;\n\
    \    long long m47 = mid + 46;\n    long long m48 = mid + 47;\n    long long m49\
    \ = mid + 48;\n    long long m50 = mid + 49;\n    long long m51 = m", "    assert(l.size()\
    \ > 0);\n    long long mid = l[0] + (l.size() / 2);\n    float midval = mid;\n\
    \    float leftval = l[0];\n    float rightval = l[l.size() - 1];\n    float leftmedian\
    \ = midval;\n    float rightmedian = midval;\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (l[i] < midval) {\n            leftval = l[i];\n        \
    \    leftmedian = midval;\n        } else if (l[i] > midval) {\n            rightval\
    \ = l[i];\n            rightmedian = midval;\n        } else {\n            midval\
    \ = l[i];\n        }\n    }\n    return (leftmedian + rightmedian) / 2;", "  \
    \  long long n = l.size();\n    assert(n >= 1);\n    long long mid = n / 2;\n\
    \    long long left = 0, right = mid;\n    long long midVal = l[mid];\n    while\
    \ (left < right) {\n        long long midValLeft = l[left];\n        long long\
    \ midValRight = l[right];\n        if (midValLeft < midValRight) {\n         \
    \   left++;\n        } else if (midValLeft > midValRight) {\n            right--;\n\
    \        } else {\n            return midVal;\n        }\n    }\n    return l[left];",
  "    long long ll = l.size();\n    if (ll % 2 == 1) {\n        return l[ll / 2 -\
    \ 1] + (l[ll / 2] + l[ll / 2 - 1]) / 2.0;\n    }\n    return l[ll / 2];", "  \
    \  long long n = l.size();\n    if (n <= 1) return l[0];\n    long long mid =\
    \ n / 2;\n    float a = l[mid];\n    float b = l[n - 1];\n    return (b - a) /\
    \ 2.0;", "    long long n = l.size();\n    if (n < 2) return l[0];\n    long long\
    \ mid = n / 2;\n    float a = l[mid];\n    float b = l[n - 1];\n    float c =\
    \ l[mid];\n    float d = l[n - 1];\n    if (a > b) std::swap(a, b);\n    if (b\
    \ > c) std::swap(b, c);\n    if (a > b) std::swap(a, b);\n    if (b > c) std::swap(b,\
    \ c);\n    if (a > b) std::swap(a, b);\n    if (b > c) std::swap(b, c);\n    if\
    \ (a > b) std::swap(a, b);\n    if (b > c) std::swap(b, c);\n    if (a > b) std::swap(a,\
    \ b);\n    if (b > c) std::swap(b, c);\n    if (a > b) std::swap(a, b);\n    if\
    \ (b > c) std::swap(b, c);\n    if (a > b) std::swap(a, b);\n    if (b > c) std::swap(b,\
    \ c);\n    if (a > b) std::swap(a, b);\n    if (b > c) std::swap(b, c);\n    if\
    \ (a > b) std::swap(a, b);\n    if (b > c) std::swap(b, c);\n    if (a > b) std::swap(a,\
    \ b);\n    if (b > c) std::swap(b, c);\n    if (a > b) std::swap(a, b);\n    if\
    \ (b > c) std::swap(b, c);\n    if (a > b) std::swap(a, b);\n    if (b > c) std::swap(b,\
    \ c);\n    if (a > b) std::swap(a, b);\n    if (b > c) std::swap(b, c);\n    if\
    \ (a > b) std::swap(a, b);\n    if (b > c) std::swap(b, c);\n    if (a > b) std::swap(a,\
    \ b);\n    if (b > c) std::swap(b, c);\n    if (a > b) std::swap(a, b);\n    if\
    \ (b > c) std::swap(b, c);\n    if (a > b) std::swap(a, b);\n    if (b > c) std::swap(b,\
    \ c);\n    if (a > b) std::swap(a, b);\n    if (b > c) std::swap(b, c);\n    if\
    \ (a > b) std::swap(a, b);\n    if (b > c) std::swap(b, c);\n    if (a > b) std::swap(a,\
    \ b);\n    if (b > c) std::swap(b, c);\n    if (a > b) std::swap(a, b);\n    if\
    \ (b > c) std::swap(b, c);\n    if (a > b) std::swap(a, b);\n    if (b > c) ",
  "    long long mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval\
    \ = l[mid-1];\n    float rightval = l[mid+1];\n    if (leftval > rightval) {\n\
    \        return midval;\n    }\n    return rightval;", "    long long size = l.size();\n\
    \    if (size % 2 == 1) {\n        return l[size / 2];\n    }\n    float mid =\
    \ size / 2;\n    float a = l[mid];\n    float b = l[size / 2 - 1];\n    return\
    \ a + (b - a) * ((size / 2) - 1);", "    long long n = l.size();\n    if (n %\
    \ 2 == 0) {\n        return l[n/2];\n    } else {\n        return (l[n/2] + l[n/2-1])/2.0;\n\
    \    }", "    long long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    float median = (float)sum / l.size();\n    return median;", "    long\
    \ long mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval) {\n        return\
    \ midval;\n    }\n    return rightval;", "    long long n = l.size();\n    assert(n\
    \ >= 2);\n    long long mid = n / 2;\n    long long l1 = mid;\n    long long l2\
    \ = n - mid;\n    if (l2 % 2 == 0) {\n        return ((l1[l1 / 2 - 1] + l1[l1\
    \ / 2]) / 2.0f);\n    } else {\n        return ((l2[l2 / 2 - 1] + l2[l2 / 2])\
    \ / 2.0f);\n    }", "    long long size = l.size();\n    if (size % 2 == 0) {\n\
    \        float mid = l[size / 2];\n        float left = l[size / 2 - 1];\n   \
    \     float right = l[size / 2];\n        return ((mid < left) ? left : ((mid\
    \ > right) ? right : mid));\n    } else {\n        float mid = l[size / 2 - 1];\n\
    \        float left = l[size / 2];\n        float right = l[size / 2 + 1];\n \
    \       return ((mid < left) ? left : ((mid > right) ? right : mid));\n    }",
  "    long long ll = l.size();\n    if (ll % 2 == 0) {\n        return l[ll / 2 -\
    \ 1] + (l[ll / 2] + l[ll / 2 - 1]) / 2.0;\n    } else {\n        return l[ll /\
    \ 2];\n    }", "    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    float median = static_cast<float>(sum) / static_cast<float>(l.size());\n\
    \    return median;", "    long n = l.size();\n    assert(n >= 2);\n    long mid\
    \ = n / 2;\n    long l1 = mid;\n    long l2 = n - mid;\n    long l3 = n - 1;\n\
    \    long l4 = n - 2;\n    long l5 = n - 3;\n    long l6 = n - 4;\n    long l7\
    \ = n - 5;\n    long l8 = n - 6;\n    long l9 = n - 7;\n    long l10 = n - 8;\n\
    \    long l11 = n - 9;\n    long l12 = n - 10;\n    long l13 = n - 11;\n    long\
    \ l14 = n - 12;\n    long l15 = n - 13;\n    long l16 = n - 14;\n    long l17\
    \ = n - 15;\n    long l18 = n - 16;\n    long l19 = n - 17;\n    long l20 = n\
    \ - 18;\n    long l21 = n - 19;\n    long l22 = n - 20;\n    long l23 = n - 21;\n\
    \    long l24 = n - 22;\n    long l25 = n - 23;\n    long l26 = n - 24;\n    long\
    \ l27 = n - 25;\n    long l28 = n - 26;\n    long l29 = n - 27;\n    long l30\
    \ = n - 28;\n    long l31 = n - 29;\n    long l32 = n - 30;\n    long l33 = n\
    \ - 31;\n    long l34 = n - 32;\n    long l35 = n - 33;\n    long l36 = n - 34;\n\
    \    long l37 = n - 35;\n    long l38 = n - 36;\n    long l39 = n - 37;\n    long\
    \ l40 = n - 38;\n    long l41 = n - 39;\n    long l42 = n - 40;\n    long l43\
    \ = n - 41;\n    long l44 = n - 42;\n    long l45 = n - 43;\n    long l46 = n\
    \ - 44;\n    long l47 = n - 45;\n    long l48 = n - 46;\n    long l49 = n - 47;\n\
    \    long l50 = n - 48;\n    long l51 = n - 49;\n    long l52 = n - 50;\n    long\
    \ l53 = n - 51;\n    long l54 = n - 52;\n    long l55 = n - 53;\n    long l56\
    \ = n - 54;\n    long l57 = n - 55;\n    long l58 = n - 56;\n    long l", "  long\
    \ long n = l.size();\n  assert(n >= 2);\n  long long mid = n / 2;\n  long long\
    \ l1 = mid;\n  long long l2 = n - mid;\n  long long l3 = n - 1;\n  long long l4\
    \ = mid;\n  long long l5 = mid;\n  long long l6 = n - 1;\n  long long l7 = mid;\n\
    \  long long l8 = n - 1;\n  long long l9 = mid;\n  long long l10 = mid;\n  long\
    \ long l11 = n - 1;\n  long long l12 = mid;\n  long long l13 = mid;\n  long long\
    \ l14 = n - 1;\n  long long l15 = mid;\n  long long l16 = n - 1;\n  long long\
    \ l17 = mid;\n  long long l18 = mid;\n  long long l19 = n - 1;\n  long long l20\
    \ = mid;\n  long long l21 = mid;\n  long long l22 = n - 1;\n  long long l23 =\
    \ mid;\n  long long l24 = mid;\n  long long l25 = n - 1;\n  long long l26 = mid;\n\
    \  long long l27 = mid;\n  long long l28 = n - 1;\n  long long l29 = mid;\n  long\
    \ long l30 = mid;\n  long long l31 = n - 1;\n  long long l32 = mid;\n  long long\
    \ l33 = mid;\n  long long l34 = n - 1;\n  long long l35 = mid;\n  long long l36\
    \ = mid;\n  long long l37 = n - 1;\n  long long l38 = mid;\n  long long l39 =\
    \ mid;\n  long long l40 = n - 1;\n  long long l41 = mid;\n  long long l42 = mid;\n\
    \  long long l43 = n - 1;\n  long long l44 = mid;\n  long long l45 = mid;\n  long\
    \ long l46 = n - 1;\n  long long l47 = mid;\n  long long l48 = mid;\n  long long\
    \ l49 = n - 1;\n  long long l50 = mid;\n  long long l51 = mid;\n  long long l52\
    \ = n - 1;\n  long long l53 = mid;\n  long long l54 = mid;\n  long long l55 =\
    \ n - 1;\n  long long l56 = ", "    long long n = l.size();\n    if (n <= 1) return\
    \ l[0];\n    long long mid = n / 2;\n    float midval = l[mid];\n    float leftval\
    \ = l[mid];\n    float rightval = l[n - 1];\n    for (long long i = mid + 1; i\
    \ < n; i++) {\n        if (l[i] < leftval) leftval = l[i];\n        if (l[i] >\
    \ rightval) rightval = l[i];\n    }\n    return (leftval + rightval) / 2;", " \
    \   long long mid = l.size() / 2;\n    long long left = l[mid];\n    long long\
    \ right = l[mid+1];\n    if (left > right) {\n        return left;\n    }\n  \
    \  return right;", "    long n = l.size();\n    if (n % 2 == 0) {\n        return\
    \ l[n/2];\n    }\n    float m = (float)l[n/2];\n    float h = (float)l[n/2-1];\n\
    \    return (h + m) / 2;", "    long long n = l.size();\n    assert(n >= 1);\n\
    \    long long mid = n / 2;\n    long long m1 = mid;\n    long long m2 = mid +\
    \ 1;\n    long long m3 = mid + 2;\n    long long m4 = mid + 3;\n    long long\
    \ m5 = mid + 4;\n    long long m6 = mid + 5;\n    long long m7 = mid + 6;\n  \
    \  long long m8 = mid + 7;\n    long long m9 = mid + 8;\n    long long m10 = mid\
    \ + 9;\n    long long m11 = mid + 10;\n    long long m12 = mid + 11;\n    long\
    \ long m13 = mid + 12;\n    long long m14 = mid + 13;\n    long long m15 = mid\
    \ + 14;\n    long long m16 = mid + 15;\n    long long m17 = mid + 16;\n    long\
    \ long m18 = mid + 17;\n    long long m19 = mid + 18;\n    long long m20 = mid\
    \ + 19;\n    long long m21 = mid + 20;\n    long long m22 = mid + 21;\n    long\
    \ long m23 = mid + 22;\n    long long m24 = mid + 23;\n    long long m25 = mid\
    \ + 24;\n    long long m26 = mid + 25;\n    long long m27 = mid + 26;\n    long\
    \ long m28 = mid + 27;\n    long long m29 = mid + 28;\n    long long m30 = mid\
    \ + 29;\n    long long m31 = mid + 30;\n    long long m32 = mid + 31;\n    long\
    \ long m33 = mid + 32;\n    long long m34 = mid + 33;\n    long long m35 = mid\
    \ + 34;\n    long long m36 = mid + 35;\n    long long m37 = mid + 36;\n    long\
    \ long m38 = mid + 37;\n    long long m39 = mid + 38;\n    long long m40 = mid\
    \ + 39;\n    long long m41 = mid + 40;\n    long long m42 = mid + 41;\n    long\
    \ long m43 = mid + 42;\n    long long m44 = mid + 43;\n    long long m45 = mid\
    \ + 44;\n    long long m46 = mid + 45;\n    long long m47 = mid + 46;\n    long\
    \ long m48 = mid + 47;\n    long long m49 = mid + 48;\n    long long m50 = mid\
    \ + 49;\n    long long m51 = m", "    long long sum = 0;\n    long long count\
    \ = 0;\n    for (auto i : l) {\n        sum += i;\n        ++count;\n    }\n \
    \   if (count == 0)\n        return 0;\n    float avg = sum / count;\n    long\
    \ long mid = count / 2;\n    float median = (l[mid] + l[count - 1]) / 2;\n   \
    \ return avg < median ? avg : median;", "    long long ll = l.size();\n    if\
    \ (ll % 2 == 0) {\n        return l[ll / 2 - 1] + (l[ll / 2] + l[ll / 2 - 1])\
    \ / 2.0;\n    } else {\n        return l[ll / 2];\n    }", "    long long n =\
    \ l.size();\n    if (n <= 1) return l[0];\n    long long mid = n / 2;\n    long\
    \ long left = l[mid];\n    long long right = l[n - 1];\n    if (left > right)\
    \ return left;\n    return right;", "    long n = l.size();\n    if (n % 2 ==\
    \ 0) {\n        return l[n/2];\n    }\n    else {\n        return (l[n/2] + l[n/2-1])/2;\n\
    \    }", "    long long int n = l.size();\n    assert(n % 2 == 0);\n    long long\
    \ int m = n / 2;\n    long long int left = 0, right = m;\n    float mid;\n   \
    \ while (left < right) {\n        mid = (left + right) / 2;\n        if (l[mid]\
    \ <= l[mid + 1]) {\n            left = mid + 1;\n        } else {\n          \
    \  right = mid;\n        }\n    }\n    mid = (left + right) / 2;\n    mid = l[mid];\n\
    \    return mid;", "    long long n = l.size();\n    if (n <= 1) return l[0];\n\
    \    long long mid = n / 2;\n    float a = l[mid];\n    float b = l[n - 1];\n\
    \    return a + (b - a) * ((float)n / (float)2);", "    long n = l.size();\n \
    \   assert(n % 2 == 0);\n    long mid = n / 2;\n    long l1 = l[mid];\n    long\
    \ l2 = l[mid+1];\n    if (l2 < l1) {\n        std::swap(l1, l2);\n    }\n    return\
    \ ((l1 + l2) / 2.0);", "    long long n = l.size();\n    assert(n >= 1);\n   \
    \ long long mid = n / 2;\n    long long left = 0, right = mid;\n    float midval\
    \ = l[mid];\n    while (left < right) {\n        long long midvalleft = l[left];\n\
    \        long long midvalright = l[right];\n        if (midvalleft < midvalright)\
    \ {\n            left++;\n        } else if (midvalleft > midvalright) {\n   \
    \         right--;\n        } else {\n            return midval;\n        }\n\
    \    }\n    return midval;", "    assert(l.size() > 0);\n    long long mid = l[0]\
    \ + (l.size() / 2);\n    float median = mid;\n    for (long i = 1; i < l.size();\
    \ i++) {\n        if (l[i] < mid) {\n            median = l[i];\n        }\n \
    \   }\n    return median;", "    long long sum = 0;\n    for (long long i = 0;\
    \ i < l.size(); i++) {\n        sum += l[i];\n    }\n    float median = (float)sum\
    \ / l.size();\n    return median;", "    long long sum = 0;\n    long long count\
    \ = 0;\n    for (long long i = 0; i < l.size(); i++) {\n        sum += l[i];\n\
    \        count += 1;\n    }\n    if (count % 2 == 0) {\n        return (sum /\
    \ 2);\n    } else {\n        return (sum / 2 + l[count / 2]);\n    }", "    long\
    \ long int n = l.size();\n    assert(n >= 1);\n    long long int mid = n / 2;\n\
    \    long long int left = 0, right = mid;\n    float midval = l[mid];\n    while\
    \ (left < right) {\n        long long int midvalleft = l[left];\n        long\
    \ long int midvalright = l[right];\n        if (midvalleft > midvalright) {\n\
    \            long long int temp = midvalleft;\n            midvalleft = midvalright;\n\
    \            midvalright = temp;\n        }\n        if (midvalright < midvalleft)\
    \ {\n            long long int temp = midvalright;\n            midvalright =\
    \ midvalleft;\n            midvalleft = temp;\n        }\n        if (midvalleft\
    \ > midvalright) {\n            long long int temp = midvalleft;\n           \
    \ midvalleft = midvalright;\n            midvalright = temp;\n        }\n    \
    \    long long int midvalmid = l[mid];\n        if (midvalmid < midvalleft) {\n\
    \            midvalleft = midvalmid;\n        }\n        if (midvalmid > midvalright)\
    \ {\n            midvalright = midvalmid;\n        }\n        long long int midvalmidleft\
    \ = l[mid];\n        long long int midvalmidright = l[mid];\n        if (midvalmidleft\
    \ > midvalmidright) {\n            long long int temp = midvalmidleft;\n     \
    \       midvalmidleft = midvalmidright;\n            midvalmidright = temp;\n\
    \        }\n        if (midvalmidright < midvalmidleft) {\n            long long\
    \ int temp = midvalmidright;\n            midvalmidright = midvalmidleft;\n  \
    \          midvalmidleft = temp;\n        }\n        if (midvalmidleft > midvalmidright)\
    \ {\n            long long int temp = midvalmidleft;\n            midvalmidleft\
    \ = midvalmidright;\n            midvalmidright = temp;\n        }\n        long\
    \ long int midvalmidmid = l[mid];\n        if (midvalmidmid < midvalmidleft) {\n\
    \            midvalmidleft = midvalmidmid;\n        }\n        if (midvalmidmid\
    \ > midvalmidright) {\n            midvalmidright = midvalmidmid;\n        }\n\
    \        long long int midvalmidmidleft = l[mid];\n        long long int midvalmidmidright\
    \ = l[mid];\n        if (midvalmidmidleft > midvalmidmidright) {\n           \
    \ long long int temp = midvalmidmidleft;\n            midval", "    long long\
    \ n = l.size();\n    if (n % 2 == 1) {\n        return l[n/2];\n    }\n    float\
    \ mid = l[n/2-1] + l[n/2];\n    return mid / 2;", "    long long n = l.size();\n\
    \    if (n < 2)\n        return l[0];\n    long long mid = n / 2;\n    long long\
    \ l1 = mid;\n    long long l2 = n - mid;\n    if (l2 == 0)\n        return l[0];\n\
    \    if (l1 < l2)\n        return median(l, l1, mid);\n    return median(l, mid,\
    \ l2);", "    long long mid = l.size() / 2;\n    float median = l[mid];\n    for\
    \ (long long i = mid; i < l.size(); i++) {\n        median = std::max(median,\
    \ l[i]);\n    }\n    return median;", "  long long n = l.size();\n  if (n < 2)\
    \ return 0;\n  long long mid = n / 2;\n  long long left = 0, right = mid;\n  while\
    \ (left < right) {\n    long long mid1 = (left + right) / 2;\n    long long mid2\
    \ = mid - 1;\n    if (l[mid1] > l[mid2]) {\n      right = mid1;\n    } else {\n\
    \      left = mid2;\n    }\n  }\n  return l[mid];", "    long long n = l.size();\n\
    \    if (n <= 1) return l[0];\n    long long mid = n / 2;\n    float left = (float)l[mid];\n\
    \    float right = (float)l[n - 1];\n    if (left == right) return left;\n   \
    \ if (left > right) return median(l[mid]);\n    return median(l[n - 1]);", " \
    \   long n = l.size();\n    if (n < 2) return l[0];\n    long mid = n / 2;\n \
    \   long l1 = l[mid];\n    long l2 = l[n - 1];\n    float m1 = l1;\n    float\
    \ m2 = l2;\n    float m = (m1 + m2) / 2;\n    if (m == l1) return m1;\n    if\
    \ (m == l2) return m2;\n    if (m == m1) return l1;\n    if (m == m2) return l2;\n\
    \    if (m == m) return m1;\n    if (m == m) return m2;\n    return m;", "   \
    \ long n = l.size();\n    assert(n >= 2);\n    long mid = n / 2;\n    long l1\
    \ = mid;\n    long l2 = n - mid;\n    long l3 = mid;\n    long l4 = n - mid;\n\
    \    long l5 = mid;\n    long l6 = n - mid;\n    long l7 = mid;\n    long l8 =\
    \ n - mid;\n    long l9 = mid;\n    long l10 = n - mid;\n    long l11 = mid;\n\
    \    long l12 = n - mid;\n    long l13 = mid;\n    long l14 = n - mid;\n    long\
    \ l15 = mid;\n    long l16 = n - mid;\n    long l17 = mid;\n    long l18 = n -\
    \ mid;\n    long l19 = mid;\n    long l20 = n - mid;\n    long l21 = 0;\n    long\
    \ l22 = 0;\n    long l23 = 0;\n    long l24 = 0;\n    long l25 = 0;\n    long\
    \ l26 = 0;\n    long l27 = 0;\n    long l28 = 0;\n    long l29 = 0;\n    long\
    \ l30 = 0;\n    long l31 = 0;\n    long l32 = 0;\n    long l33 = 0;\n    long\
    \ l34 = 0;\n    long l35 = 0;\n    long l36 = 0;\n    long l37 = 0;\n    long\
    \ l38 = 0;\n    long l39 = 0;\n    long l40 = 0;\n    long l41 = 0;\n    long\
    \ l42 = 0;\n    long l43 = 0;\n    long l44 = 0;\n    long l45 = 0;\n    long\
    \ l46 = 0;\n    long l47 = 0;\n    long l48 = 0;\n    long l49 = 0;\n    long\
    \ l50 = 0;\n    long l51 = 0;\n    long l52 = 0;\n    long l53 = 0;\n    long\
    \ l54 = 0;\n    long l55 = 0;\n    long l56 = 0;\n    long l57 = 0;\n    long\
    \ l58 = 0;\n    long l59 = 0;\n    long l60 = 0;\n    long l61 = 0;\n    long\
    \ l62 = 0;\n    long l63 = 0;\n    long l64 = 0;\n    long l65 = 0;\n    long\
    \ l66 = 0;\n    long l67 = 0;\n    long l68 = 0;\n    long l69 = 0;\n    long\
    \ l70 = 0;\n    long l71 = 0;\n    long l72 = 0;\n    long l73 = 0;\n    long\
    \ l74 = 0;\n    long l75 = 0;\n    long l76", "    long long n = l.size();\n \
    \   if (n < 2) return l[0];\n    long long mid = n / 2;\n    float a = l[mid];\n\
    \    float b = l[n - 1];\n    return a + (b - a) * ((n - 1) / 2.0);", "    long\
    \ long n = l.size();\n    assert(n >= 2);\n    float mid = static_cast<float>(l[n-1]\
    \ + l[n-1]) / 2;\n    float low = l[n-1];\n    float high = l[n-1];\n    for (long\
    \ long i = 2; i < n; i++) {\n        low = std::min(low, l[i-1]);\n        high\
    \ = std::max(high, l[i-1]);\n    }\n    return mid + ((high - low) / 2);", " \
    \   long n = l.size();\n    assert(n % 2 == 0);\n    long mid = n / 2;\n    long\
    \ l1 = mid;\n    long l2 = n - mid;\n    long l3 = n - 1;\n    long l4 = mid;\n\
    \    long l5 = mid + 1;\n    long l6 = mid + 2;\n    long l7 = n - 1;\n    long\
    \ l8 = n;\n    long l9 = n / 2;\n    long l10 = mid + 1;\n    long l11 = mid;\n\
    \    long l12 = mid + 2;\n    long l13 = mid;\n    long l14 = n - 1;\n    long\
    \ l15 = mid;\n    long l16 = mid + 1;\n    long l17 = mid;\n    long l18 = mid\
    \ + 2;\n    long l19 = mid;\n    long l20 = n - 1;\n    long l21 = mid;\n    long\
    \ l22 = mid + 1;\n    long l23 = mid + 2;\n    long l24 = mid;\n    long l25 =\
    \ n - 1;\n    long l26 = mid;\n    long l27 = mid + 1;\n    long l28 = mid + 2;\n\
    \    long l29 = mid;\n    long l30 = n - 1;\n    long l31 = mid;\n    long l32\
    \ = mid + 1;\n    long l33 = mid + 2;\n    long l34 = mid;\n    long l35 = n -\
    \ 1;\n    long l36 = mid;\n    long l37 = mid + 1;\n    long l38 = mid + 2;\n\
    \    long l39 = mid;\n    long l40 = n - 1;\n    long l41 = mid;\n    long l42\
    \ = mid + 1;\n    long l43 = mid + 2;\n    long l44 = mid;\n    long l45 = n -\
    \ 1;\n    long l46 = mid;\n    long l47 = mid + 1;\n    long l48 = mid + 2;\n\
    \    long l49 = mid;\n    long l50 = n - 1;\n    long l51 = mid;\n    long l52\
    \ = mid + 1;\n    long l53 = mid + 2;\n    long l54 = mid;\n    long l55 = n -\
    \ 1;\n    long l56 = mid;\n    long l57 = mid + 1;\n    long l58 = mid + 2;\n\
    \    long l59 = mid;\n    long l60 = n - 1;\n    long l61 = mid;\n    long l62\
    \ = mid + 1;", "    long n = l.size();\n    if (n < 2) return 0;\n    long mid\
    \ = n / 2;\n    long l1 = mid;\n    long l2 = n - mid;\n    long l3 = n - 1;\n\
    \    long l4 = n - 2;\n    long l5 = n - 3;\n    long l6 = n - 4;\n    long l7\
    \ = n - 5;\n    long l8 = n - 6;\n    long l9 = n - 7;\n    long l10 = n - 8;\n\
    \    long l11 = n - 9;\n    long l12 = n - 10;\n    long l13 = n - 11;\n    long\
    \ l14 = n - 12;\n    long l15 = n - 13;\n    long l16 = n - 14;\n    long l17\
    \ = n - 15;\n    long l18 = n - 16;\n    long l19 = n - 17;\n    long l20 = n\
    \ - 18;\n    long l21 = n - 19;\n    long l22 = n - 20;\n    long l23 = n - 21;\n\
    \    long l24 = n - 22;\n    long l25 = n - 23;\n    long l26 = n - 24;\n    long\
    \ l27 = n - 25;\n    long l28 = n - 26;\n    long l29 = n - 27;\n    long l30\
    \ = n - 28;\n    long l31 = n - 29;\n    long l32 = n - 30;\n    long l33 = n\
    \ - 31;\n    long l34 = n - 32;\n    long l35 = n - 33;\n    long l36 = n - 34;\n\
    \    long l37 = n - 35;\n    long l38 = n - 36;\n    long l39 = n - 37;\n    long\
    \ l40 = n - 38;\n    long l41 = n - 39;\n    long l42 = n - 40;\n    long l43\
    \ = n - 41;\n    long l44 = n - 42;\n    long l45 = n - 43;\n    long l46 = n\
    \ - 44;\n    long l47 = n - 45;\n    long l48 = n - 46;\n    long l49 = n - 47;\n\
    \    long l50 = n - 48;\n    long l51 = n - 49;\n    long l52 = n - 50;\n    long\
    \ l53 = n - 51;\n    long l54 = n - 52;\n    long l55 = n - 53;\n    long l56\
    \ = n - 54;\n    long l57 = n - 55;\n    long l58 = n - 56;\n    long ", "   \
    \ long long mid = l.size() / 2;\n    long long left = l[mid];\n    long long right\
    \ = l[mid+1];\n    if (left > right) {\n        return left;\n    } else {\n \
    \       return right;\n    }", "    long long sum = 0;\n    for (auto i : l) {\n\
    \        sum += i;\n    }\n    float median = (float)sum / l.size();\n    return\
    \ median;", "    long n = l.size();\n    if (n <= 1) return l[0];\n    long mid\
    \ = n / 2;\n    long l1 = l[mid];\n    long l2 = l[n - 1];\n    if (l1 < l2) return\
    \ l1;\n    return l2;", "    long long ll = l.size();\n    if (ll % 2 == 0) {\n\
    \        float mid = (ll) / 2;\n        float a = l[mid];\n        float b = l[mid-1];\n\
    \        return ((a + b) / 2.0);\n    }\n    else {\n        float mid = ll /\
    \ 2;\n        float a = l[mid];\n        float b = l[mid-1];\n        return ((b\
    \ - a) / 2.0);\n    }", "    long n = l.size();\n    if (n % 2 == 1) {\n     \
    \   return l[n/2];\n    }\n    float mid = l[n/2-1] + l[n/2];\n    return mid\
    \ / 2;", "    assert(l.size() > 0);\n    long mid = l.size() / 2;\n    float midval\
    \ = l[mid];\n    float leftval = l[mid-1];\n    float rightval = l[mid+1];\n \
    \   if (leftval > rightval) return midval;\n    else return rightval;", "    long\
    \ long n = l.size();\n    assert(n >= 2);\n    long long mid = n / 2;\n    float\
    \ left = (float)l[mid];\n    float right = (float)l[n - 1];\n    if (left > right)\
    \ {\n        return left;\n    } else {\n        return right;\n    }", "    long\
    \ long n = l.size();\n    if (n % 2 == 0) {\n        return l[n/2];\n    } else\
    \ {\n        return (l[n/2] + l[n/2-1])/2.0;\n    }", "    long long ll = l.size();\n\
    \    if (ll % 2 == 0) {\n        return l[ll / 2 - 1] + (l[ll / 2] + l[ll / 2\
    \ - 1]) / 2.0;\n    } else {\n        return l[ll / 2];\n    }", "    long long\
    \ n = l.size();\n    assert(n >= 1);\n    long long mid = n / 2;\n    long long\
    \ m1 = mid;\n    long long m2 = mid + 1;\n    long long m3 = mid + 2;\n    long\
    \ long m4 = mid + 3;\n    long long m5 = mid + 4;\n    long long m6 = mid + 5;\n\
    \    long long m7 = mid + 6;\n    long long m8 = mid + 7;\n    long long m9 =\
    \ mid + 8;\n    long long m10 = mid + 9;\n    long long m11 = mid + 10;\n    long\
    \ long m12 = mid + 11;\n    long long m13 = mid + 12;\n    long long m14 = mid\
    \ + 13;\n    long long m15 = mid + 14;\n    long long m16 = mid + 15;\n    long\
    \ long m17 = mid + 16;\n    long long m18 = mid + 17;\n    long long m19 = mid\
    \ + 18;\n    long long m20 = mid + 19;\n    long long m21 = mid + 20;\n    long\
    \ long m22 = mid + 21;\n    long long m23 = mid + 22;\n    long long m24 = mid\
    \ + 23;\n    long long m25 = mid + 24;\n    long long m26 = mid + 25;\n    long\
    \ long m27 = mid + 26;\n    long long m28 = mid + 27;\n    long long m29 = mid\
    \ + 28;\n    long long m30 = mid + 29;\n    long long m31 = mid + 30;\n    long\
    \ long m32 = mid + 31;\n    long long m33 = mid + 32;\n    long long m34 = mid\
    \ + 33;\n    long long m35 = mid + 34;\n    long long m36 = mid + 35;\n    long\
    \ long m37 = mid + 36;\n    long long m38 = mid + 37;\n    long long m39 = mid\
    \ + 38;\n    long long m40 = mid + 39;\n    long long m41 = mid + 40;\n    long\
    \ long m42 = mid + 41;\n    long long m43 = mid + 42;\n    long long m44 = mid\
    \ + 43;\n    long long m45 = mid + 44;\n    long long m46 = mid + 45;\n    long\
    \ long m47 = mid + 46;\n    long long m48 = mid + 47;\n    long long m49 = mid\
    \ + 48;\n    long long m50 = mid + 49;\n    long long m51 = m", "    long long\
    \ n = l.size();\n    assert(n >= 2);\n    long long mid = n / 2;\n    long long\
    \ l1 = mid;\n    long long l2 = n - mid;\n    long long l3 = n - 1;\n    long\
    \ long l4 = mid;\n    long long l5 = n;\n    long long l6 = n - 1;\n    long long\
    \ l7 = n - 2;\n    long long l8 = n - 3;\n    long long l9 = n - 4;\n    long\
    \ long l10 = n - 5;\n    long long l11 = n - 6;\n    long long l12 = n - 7;\n\
    \    long long l13 = n - 8;\n    long long l14 = n - 9;\n    long long l15 = n\
    \ - 10;\n    long long l16 = n - 11;\n    long long l17 = n - 12;\n    long long\
    \ l18 = n - 13;\n    long long l19 = n - 14;\n    long long l20 = n - 15;\n  \
    \  long long l21 = 0;\n    long long l22 = 0;\n    long long l23 = 0;\n    long\
    \ long l24 = 0;\n    long long l25 = 0;\n    long long l26 = 0;\n    long long\
    \ l27 = 0;\n    long long l28 = 0;\n    long long l29 = 0;\n    long long l30\
    \ = 0;\n    long long l31 = 0;\n    long long l32 = 0;\n    long long l33 = 0;\n\
    \    long long l34 = 0;\n    long long l35 = 0;\n    long long l36 = 0;\n    long\
    \ long l37 = 0;\n    long long l38 = 0;\n    long long l39 = 0;\n    long long\
    \ l40 = 0;\n    long long l41 = 0;\n    long long l42 = 0;\n    long long l43\
    \ = 0;\n    long long l44 = 0;\n    long long l45 = 0;\n    long long l46 = 0;\n\
    \    long long l47 = 0;\n    long long l48 = 0;\n    long long l49 = 0;\n    long\
    \ long l50 = 0;\n    long long l51 = 0;\n    long long l52 = 0;\n    long long\
    \ l53 = 0;\n    long long l54 = 0;\n    long long l55 = 0;\n    long long l56\
    \ = 0;\n    long long l57 = 0;\n    long long l58 = 0;\n    long long l59 = 0;\n\
    \    long long l60 = 0;\n    long long l61 = 0;\n    long long l62 = 0;\n    long\
    \ long l63 = 0;\n    long long l64 = 0;\n    long long l65 = 0;\n    long long\
    \ l66 = 0;\n", "    long long n = l.size();\n    if (n % 2 == 0) {\n        return\
    \ l[n/2];\n    }\n    else {\n        return (l[n/2] + l[n/2-1])/2.0;\n    }",
  "    long long n = l.size();\n    assert(n >= 1);\n    long long mid = n / 2;\n\
    \    long long left = 0, right = mid;\n    float midval = l[mid];\n    while (left\
    \ < right) {\n        long long midvalleft = l[left];\n        long long midvalright\
    \ = l[right];\n        if (midvalleft < midvalright) {\n            left++;\n\
    \        } else if (midvalleft > midvalright) {\n            right--;\n      \
    \  } else {\n            return midval;\n        }\n    }\n    return midval;",
  "  long long n = l.size();\n  assert(n % 2 == 0);\n  long long mid = n / 2;\n  long\
    \ long l1 = 0, l2 = mid;\n  long long l3 = mid + 1, l4 = n;\n  long long l5 =\
    \ mid + 2;\n  long long l6 = mid + 3;\n  long long l7 = mid + 4;\n  long long\
    \ l8 = mid + 5;\n  long long l9 = mid + 6;\n  long long l10 = mid + 7;\n  long\
    \ long l11 = mid + 8;\n  long long l12 = mid + 9;\n  long long l13 = mid + 10;\n\
    \  long long l14 = mid + 11;\n  long long l15 = mid + 12;\n  long long l16 = mid\
    \ + 13;\n  long long l17 = mid + 14;\n  long long l18 = mid + 15;\n  long long\
    \ l19 = mid + 16;\n  long long l20 = mid + 17;\n  long long l21 = mid + 18;\n\
    \  long long l22 = mid + 19;\n  long long l23 = mid + 20;\n  long long l24 = mid\
    \ + 21;\n  long long l25 = mid + 22;\n  long long l26 = mid + 23;\n  long long\
    \ l27 = mid + 24;\n  long long l28 = mid + 25;\n  long long l29 = mid + 26;\n\
    \  long long l30 = mid + 27;\n  long long l31 = mid + 28;\n  long long l32 = mid\
    \ + 29;\n  long long l33 = mid + 30;\n  long long l34 = mid + 31;\n  long long\
    \ l35 = mid + 32;\n  long long l36 = mid + 33;\n  long long l37 = mid + 34;\n\
    \  long long l38 = mid + 35;\n  long long l39 = mid + 36;\n  long long l40 = mid\
    \ + 37;\n  long long l41 = mid + 38;\n  long long l42 = mid + 39;\n  long long\
    \ l43 = mid + 40;\n  long long l44 = mid + 41;\n  long long l45 = mid + 42;\n\
    \  long long l46 = mid + 43;\n  long long l47 = mid + 44;\n  long long l48 = mid\
    \ + 45;\n  long long l49 = mid + 46;\n  long long l50 = mid + 47;\n  long long\
    \ l51 = mid + 48;\n  long long l52 = mid + ", "    long long ll = l.size();\n\
    \    if (ll % 2 == 1) {\n        return l[ll / 2 - 1] + (l[ll / 2] + l[ll / 2\
    \ - 1]) / 2.0;\n    } else {\n        return l[ll / 2];\n    }", "    long long\
    \ n = l.size();\n    assert(n >= 1);\n    long long mid = n / 2;\n    long long\
    \ l1 = mid;\n    long long l2 = n - mid;\n    long long l3 = mid;\n    long long\
    \ l4 = n - mid;\n    long long l5 = mid;\n    long long l6 = n - mid;\n    long\
    \ long l7 = mid;\n    long long l8 = n - mid;\n    long long l9 = mid;\n    long\
    \ long l10 = n - mid;\n    long long l11 = mid;\n    long long l12 = n - mid;\n\
    \    long long l13 = mid;\n    long long l14 = n - mid;\n    long long l15 = mid;\n\
    \    long long l16 = n - mid;\n    long long l17 = mid;\n    long long l18 = n\
    \ - mid;\n    long long l19 = mid;\n    long long l20 = n - mid;\n    long long\
    \ l21 = 0;\n    long long l22 = 0;\n    long long l23 = 0;\n    long long l24\
    \ = 0;\n    long long l25 = 0;\n    long long l26 = 0;\n    long long l27 = 0;\n\
    \    long long l28 = 0;\n    long long l29 = 0;\n    long long l30 = 0;\n    long\
    \ long l31 = 0;\n    long long l32 = 0;\n    long long l33 = 0;\n    long long\
    \ l34 = 0;\n    long long l35 = 0;\n    long long l36 = 0;\n    long long l37\
    \ = 0;\n    long long l38 = 0;\n    long long l39 = 0;\n    long long l40 = 0;\n\
    \    long long l41 = 0;\n    long long l42 = 0;\n    long long l43 = 0;\n    long\
    \ long l44 = 0;\n    long long l45 = 0;\n    long long l46 = 0;\n    long long\
    \ l47 = 0;\n    long long l48 = 0;\n    long long l49 = 0;\n    long long l50\
    \ = 0;\n    long long l51 = 0;\n    long long l52 = 0;\n    long long l53 = 0;\n\
    \    long long l54 = 0;\n    long long l55 = 0;\n    long long l56 = 0;\n    long\
    \ long l57 = 0;\n    long long l58 = 0;\n    long long l59 = 0;\n    long long\
    \ l60 = 0;\n    long long l61 = 0;\n    long long l62 = 0;\n    long long l63\
    \ = 0;\n    long long l64 = 0;\n    long long l", "    assert(l.size() > 0);\n\
    \    long mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid]) / 2.0;\n    }", "    long n =\
    \ l.size();\n    if (n < 2) return 0;\n    long mid = n / 2;\n    long l1 = mid;\n\
    \    long l2 = n - mid;\n    long l3 = n - 1;\n    long l4 = mid;\n    long l5\
    \ = n - 1;\n    long l6 = mid;\n    long l7 = n - 1;\n    long l8 = n - 1;\n \
    \   long l9 = mid;\n    long l10 = n - 1;\n    long l11 = mid;\n    long l12 =\
    \ n - 1;\n    long l13 = n - 1;\n    long l14 = mid;\n    long l15 = n - 1;\n\
    \    long l16 = n - 1;\n    long l17 = mid;\n    long l18 = n - 1;\n    long l19\
    \ = n - 1;\n    long l20 = mid;\n    long l21 = n - 1;\n    long l22 = n - 1;\n\
    \    long l23 = n - 1;\n    long l24 = mid;\n    long l25 = n - 1;\n    long l26\
    \ = n - 1;\n    long l27 = n - 1;\n    long l28 = mid;\n    long l29 = n - 1;\n\
    \    long l30 = n - 1;\n    long l31 = n - 1;\n    long l32 = n - 1;\n    long\
    \ l33 = mid;\n    long l34 = n - 1;\n    long l35 = n - 1;\n    long l36 = n -\
    \ 1;\n    long l37 = n - 1;\n    long l38 = mid;\n    long l39 = n - 1;\n    long\
    \ l40 = n - 1;\n    long l41 = n - 1;\n    long l42 = n - 1;\n    long l43 = n\
    \ - 1;\n    long l44 = mid;\n    long l45 = n - 1;\n    long l46 = n - 1;\n  \
    \  long l47 = n - 1;\n    long l48 = n - 1;\n    long l49 = mid;\n    long l50\
    \ = n - 1;\n    long l51 = n - 1;\n    long l52 = n - 1;\n    long l53 = n - 1;\n\
    \    long l54 = n - 1;\n    long l55 = n - 1;\n    long l56 = n - 1;\n    long\
    \ l57 = n - 1;\n    long l58 = n - 1;\n    long l59 = n - 1;\n    long l60 = n\
    \ - 1;\n    long l61 = n - 1;\n    long l62 = n - 1;\n    long l63 = n - 1;",
  "    long long ll = l.size();\n    if (ll % 2 == 0) {\n        return ((l[ll / 2\
    \ - 1] + l[ll / 2]) / 2.0);\n    } else {\n        return l[ll / 2];\n    }",
  "    long long mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return\
    \ l[mid];\n    }\n    float a = l[mid];\n    float b = l[mid-1];\n    return a\
    \ + (b - a) * ((float)l.size() / 2.0);", "  long n = l.size();\n  long mid = n\
    \ / 2;\n  long l1 = 0, l2 = mid;\n  float midVal = l[mid];\n  float lMedian;\n\
    \  while (n-- > 0) {\n    if (l[mid] < l[n - 1]) {\n      l1 = mid;\n      l2\
    \ = n - 1;\n      midVal = l[mid];\n    } else {\n      l1 = n - 1;\n      l2\
    \ = mid;\n      midVal = l[mid];\n    }\n  }\n  lMedian = (l1 + l2) / 2;\n  return\
    \ midVal;", "    long long n = l.size();\n    if (n % 2 == 0) {\n        return\
    \ l[n / 2];\n    }\n    float mid = l[n / 2];\n    float leftMedian = median(l.slice(0,\
    \ n / 2));\n    float rightMedian = median(l.slice((n / 2) + 1, n));\n    return\
    \ mid;", "    long long n = l.size();\n    if (n < 2) return 0;\n    long long\
    \ mid = n / 2;\n    float midval = l[mid];\n    float leftval = l[n - 1];\n  \
    \  float rightval = l[mid];\n    if (leftval < midval) std::swap(leftval, midval);\n\
    \    if (rightval < midval) std::swap(rightval, midval);\n    if (leftval > rightval)\
    \ return leftval;\n    return rightval;", "  long long mid = l.size() / 2;\n \
    \ long long left = mid;\n  long long right = mid;\n  long long median = 0;\n \
    \ while (left < l.size()) {\n    right = left;\n    while (right < l.size() &&\
    \ l[right] < l[left]) {\n      right++;\n    }\n    if (right > left) {\n    \
    \  median = (l[left] + l[right]) / 2;\n      left++;\n      right--;\n    }\n\
    \  }\n  return median;", "    long long mid = l.size() / 2;\n    long long left\
    \ = l[mid];\n    long long right = l[mid+1];\n    if (left > right) {\n      \
    \  return left;\n    }\n    return right;", "    long long mid = l.size() / 2;\n\
    \    long long left = l[mid];\n    long long right = l[mid+1];\n    if (left >\
    \ right) {\n        return left;\n    } else {\n        return right;\n    }",
  "    long long int n = l.size();\n    assert(n >= 2);\n    long long int mid = n\
    \ / 2;\n    long long int left = l[mid];\n    long long int right = l[n - 1];\n\
    \    if (left > right) {\n        long long int temp = left;\n        left = right;\n\
    \        right = temp;\n    }\n    return (left + right) / 2;", "    long long\
    \ ll = l.size();\n    if (ll % 2 == 0) {\n        return ((l[ll / 2 - 1] + l[ll\
    \ / 2]) / 2.0);\n    } else {\n        return l[ll / 2];\n    }", "  long n =\
    \ l.size();\n  if (n < 2) return 0;\n  long mid = n / 2;\n  long l1 = l[mid];\n\
    \  long l2 = l[n - 1];\n  float l3 = l1;\n  float l4 = l2;\n  if (l1 < l2) l3\
    \ = l2;\n  if (l2 < l3) l4 = l3;\n  return l1 + (l2 - l1) * (l3 - l4) / (l1 +\
    \ l2 - l1);", "    long long mid = l.size() / 2;\n    long long left = l[mid];\n\
    \    long long right = l[mid+1];\n    if (left > right) {\n        return left;\n\
    \    } else {\n        return right;\n    }", "    long long n = l.size();\n \
    \   assert(n >= 2);\n    long long mid = n / 2;\n    long long l1 = mid;\n   \
    \ long long l2 = n - mid;\n    if (l2 == 0) return l[0];\n    if (l2 == 1) return\
    \ l[0];\n    if (l1 < l2) return l1;\n    return l2;", "    long long n = l.size();\n\
    \    if (n <= 1) return l[0];\n    long long mid = n / 2;\n    float midval =\
    \ l[mid];\n    float leftval = l[n - 1];\n    float rightval = l[mid];\n    if\
    \ (leftval > rightval) return median(l, mid - 1, midval);\n    if (leftval < rightval)\
    \ return median(l, mid + 1, midval);\n    return midval;", "    long long n =\
    \ l.size();\n    if (n < 2) return 0;\n    long long mid = n / 2;\n    long long\
    \ l1 = mid;\n    long long l2 = n - mid;\n    float l3 = l[mid];\n    float l4\
    \ = l[n - 1];\n    if (l1 < l2) return l3;\n    if (l2 < l1) return l4;\n    if\
    \ (l1 == l2) return (l1 + l2) / 2;\n    if (l1 > l2) return (l3 + l4) / 2;", " \
    \   long long n = l.size();\n    assert(n >= 2);\n    long long mid = n / 2;\n\
    \    long long l1 = mid;\n    long long l2 = n - mid;\n    if (l1 < l2) std::swap(l1,\
    \ l2);\n    if (l1 == 0) return l2[l2 % 2 == 0];\n    if (l2 == 0) return l1[l1\
    \ % 2 == 0];\n    float mid1 = l1[l1 % 2 == 0];\n    float mid2 = l2[l2 % 2 ==\
    \ 0];\n    float mid = (mid1 + mid2) / 2;\n    if (mid == mid1) return mid2;\n\
    \    if (mid == mid2) return mid1;\n    return mid;", "    long long sum = 0;\n\
    \    for (long long i = 0; i < l.size(); i++) {\n        sum += l[i];\n    }\n\
    \    float median = static_cast<float>(sum) / static_cast<float>(l.size());\n\
    \    return median;", "    long long int n = l.size();\n    if (n % 2 == 0) {\n\
    \        return l[n/2];\n    } else {\n        return (l[n/2] + l[n/2-1])/2.0;\n\
    \    }", "    assert(l.size() > 0);\n    long long mid = l.size() / 2;\n    float\
    \ midval = l[mid];\n    float leftval = l[mid-1];\n    float rightval = l[mid+1];\n\
    \    if (leftval > rightval)\n        return midval;\n    else\n        return\
    \ leftval;", "    long long size = l.size();\n    if (size % 2 == 0) {\n     \
    \   return l[size / 2];\n    }\n    float mid = l[size / 2 - 1];\n    float left\
    \ = l[size / 2];\n    float right = l[size / 2 + 1];\n    return mid + ((right\
    \ - left) / 2.0);", "    long long ll = l.size();\n    if (ll % 2 == 0)\n    \
    \    return l[ll / 2 - 1] + (l[ll / 2] + l[ll / 2 - 1]) / 2.0;\n    return l[ll\
    \ / 2];", "    long long n = l.size();\n    assert(n >= 1);\n    long long mid\
    \ = n / 2;\n    long long l1 = 0, l2 = 0, m1, m2;\n    for (long long i = 0; i\
    \ < n; i++) {\n        if (l1 < l[i]) {\n            l1 = l[i];\n        }\n \
    \       if (l2 < l[i]) {\n            l2 = l[i];\n        }\n    }\n    m1 = l1;\n\
    \    m2 = l2;\n    if (m1 < m2) {\n        std::swap(m1, m2);\n    }\n    if (m1\
    \ == m2)\n        return l1;\n    if (m1 < 0)\n        return l2;\n    return\
    \ l1;", "    long long ll = l.size();\n    if (ll % 2 == 0)\n        return l[ll\
    \ / 2 - 1] + (l[ll / 2] + l[ll / 2 - 1]) / 2.0;\n    return l[ll / 2];", "   \
    \ long n = l.size();\n    if (n % 2 == 0) {\n        return l[n/2];\n    } else\
    \ {\n        return (l[n/2] + l[n/2-1])/2.0;\n    }", "    long n = l.size();\n\
    \    if (n < 2) return 0;\n    long mid = n / 2;\n    long l1 = mid;\n    long\
    \ l2 = n - mid;\n    long l3 = n - 1;\n    long l4 = n - 2;\n    long l5 = n -\
    \ 3;\n    long l6 = n - 4;\n    long l7 = n - 5;\n    long l8 = n - 6;\n    long\
    \ l9 = n - 7;\n    long l10 = n - 8;\n    long l11 = n - 9;\n    long l12 = n\
    \ - 10;\n    long l13 = n - 11;\n    long l14 = n - 12;\n    long l15 = n - 13;\n\
    \    long l16 = n - 14;\n    long l17 = n - 15;\n    long l18 = n - 16;\n    long\
    \ l19 = n - 17;\n    long l20 = n - 18;\n    long l21 = n - 19;\n    long l22\
    \ = n - 20;\n    long l23 = n - 21;\n    long l24 = n - 22;\n    long l25 = n\
    \ - 23;\n    long l26 = n - 24;\n    long l27 = n - 25;\n    long l28 = n - 26;\n\
    \    long l29 = n - 27;\n    long l30 = n - 28;\n    long l31 = n - 29;\n    long\
    \ l32 = n - 30;\n    long l33 = n - 31;\n    long l34 = n - 32;\n    long l35\
    \ = n - 33;\n    long l36 = n - 34;\n    long l37 = n - 35;\n    long l38 = n\
    \ - 36;\n    long l39 = n - 37;\n    long l40 = n - 38;\n    long l41 = n - 39;\n\
    \    long l42 = n - 40;\n    long l43 = n - 41;\n    long l44 = n - 42;\n    long\
    \ l45 = n - 43;\n    long l46 = n - 44;\n    long l47 = n - 45;\n    long l48\
    \ = n - 46;\n    long l49 = n - 47;\n    long l50 = n - 48;\n    long l51 = n\
    \ - 49;\n    long l52 = n - 50;\n    long l53 = n - 51;\n    long l54 = n - 52;\n\
    \    long l55 = n - 53;\n    long l56 = n - 54;\n    long l57 = n - 55;\n    long\
    \ l58 = n - 56;\n    long ", "    long long n = l.size();\n    assert(n >= 2);\n\
    \    long long mid = n / 2;\n    float left = (float)l[mid];\n    float right\
    \ = (float)l[n - 1];\n    return left + (right - left) / 2;", "    long long int\
    \ n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n / 2;\n\
    \    float a = l[mid];\n    float b = l[n - 1];\n    if (a < b) std::swap(a, b);\n\
    \    if (n < 3) return a;\n    if (n < 5) return b;\n    float c = l[mid];\n \
    \   float d = l[n - 1];\n    if (c < d) return c;\n    return d;", "    long long\
    \ mid = l.size() / 2;\n    long long left = l[mid];\n    long long right = l[mid+1];\n\
    \    if (left > right) {\n        return left;\n    } else {\n        return right;\n\
    \    }", "    long long n = l.size();\n    if (n <= 1) return l[0];\n    long\
    \ long mid = n / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval) return midval;\n\
    \    return rightval;", "    long long sum = 0;\n    for (auto i : l) {\n    \
    \    sum += i;\n    }\n    float median = static_cast<float>(sum) / static_cast<float>(l.size());\n\
    \    return median;", "    long long n = l.size();\n    if (n < 2) return l[0];\n\
    \    long long mid = n / 2;\n    long long left = l[mid];\n    long long right\
    \ = l[n - mid];\n    if (left > right) return left;\n    return right;", "   \
    \ long long mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return\
    \ l[mid];\n    } else {\n        return (l[mid] + l[mid]) / 2.0;\n    }", "  \
    \  long long n = l.size();\n    assert(n >= 2);\n    long long mid = n / 2;\n\
    \    float midval = l[mid];\n    float leftval = l[n - 1];\n    float rightval\
    \ = l[0];\n    if (leftval > midval) {\n        return midval;\n    } else if\
    \ (rightval > midval) {\n        return rightval;\n    } else {\n        return\
    \ leftval;\n    }", "    long long sum = 0;\n    for (auto i : l) {\n        sum\
    \ += i;\n    }\n    float median = (float)sum / l.size();\n    return median;",
  "    long long n = l.size();\n    assert(n >= 1);\n    long long mid = n / 2;\n\
    \    long long left = 0, right = mid;\n    float midval = l[mid];\n    while (left\
    \ < right) {\n        long long midmid = left + (right - left) / 2;\n        if\
    \ (midval < l[midmid]) right = midmid;\n        else left = midmid;\n    }\n \
    \   return midval;", "    long n = l.size();\n    assert(n % 2 == 0);\n    float\
    \ mid = static_cast<float>(l[n/2]);\n    float left = 0;\n    float right = n;\n\
    \    while (left < right) {\n        float mid2 = static_cast<float>(l[left]);\n\
    \        if (mid2 > mid) {\n            right = left;\n        } else {\n    \
    \        left = left + 1;\n        }\n    }\n    return mid;", "    long long\
    \ n = l.size();\n    assert(n >= 2);\n    long long mid = n / 2;\n    long long\
    \ a = l[mid];\n    long long b = l[n - 1];\n    return ((a + b) / 2.0);", "  \
    \  long long n = l.size();\n    if (n <= 1) return l[0];\n    long long mid =\
    \ n / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n    float\
    \ rightval = l[mid];\n    if (leftval > rightval) return midval;\n    else return\
    \ rightval;", "    long long n = l.size();\n    assert(n >= 2);\n    long long\
    \ mid = n / 2;\n    long long l1 = mid;\n    long long l2 = n - mid;\n    float\
    \ l3 = l[mid];\n    float l4 = l[n - mid];\n    if (l1 < l2) {\n        return\
    \ l3;\n    }\n    return l4;", "    long long ll = l.size();\n    if (ll % 2 ==\
    \ 0) {\n        float x = (l[ll / 2 - 1] + l[ll / 2]) / 2;\n        return x;\n\
    \    } else {\n        float x = (l[ll / 2] + l[ll / 2 + 1]) / 2;\n        return\
    \ x;\n    }", "    assert(l.size() > 0);\n    long long mid = l.size() / 2;\n\
    \    float midval = l[mid];\n    float leftval = l[mid-1];\n    float rightval\
    \ = l[mid+1];\n    if (leftval > rightval) {\n        return midval;\n    }\n\
    \    return rightval;", "    long long n = l.size();\n    if (n % 2 == 0) {\n\
    \        long long mid = n / 2;\n        float a = l[mid];\n        float b =\
    \ l[mid-1];\n        return ((a + b) / 2.0);\n    } else {\n        long long\
    \ mid = n / 2;\n        float a = l[mid];\n        float b = l[mid+1];\n     \
    \   return ((a + b) / 2.0);\n    }", "    long long n = l.size();\n    if (n <\
    \ 2) return 0;\n    long long mid = n / 2;\n    long long l1 = 0, l2 = mid;\n\
    \    long long m1 = 0, m2 = mid;\n    long long lSum = 0, rSum = 0;\n    long\
    \ long midSum = 0;\n    for (long long i = 0; i < n; i++) {\n        lSum += l[i];\n\
    \        m1++;\n        if (m1 == mid) {\n            midSum += lSum;\n      \
    \      lSum = 0;\n            m1--;\n        }\n        if (m1 == mid) {\n   \
    \         m1--;\n            m2 = mid;\n            l2 = mid;\n        }\n   \
    \     if (m2 == mid) {\n            midSum += lSum;\n            rSum = midSum;\n\
    \            midSum = 0;\n            m2++;\n        }\n        if (m1 == m2 &&\
    \ m2 > mid) {\n            midSum += lSum;\n            lSum = 0;\n          \
    \  m1--;\n            m2++;\n        }\n    }\n    if (m1 < mid) return lSum /\
    \ m1;\n    if (m2 < mid) return rSum / m2;\n    return midSum / m1;", "    long\
    \ long ll = l.size();\n    if (ll % 2 == 0) {\n        return ((l[ll / 2 - 1]\
    \ + l[ll / 2]) / 2.0);\n    }\n    else {\n        return l[ll / 2];\n    }",
  "    long long mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return\
    \ l[mid];\n    } else {\n        return (l[mid] + l[mid]) / 2.0;\n    }", "  long\
    \ long n = l.size();\n  assert(n % 2 == 0);\n  long long mid = n / 2;\n  long\
    \ long l1 = mid;\n  long long l2 = mid + 1;\n  float l3 = l[mid];\n  float l4\
    \ = l[mid];\n  float l5 = l[mid];\n  float l6 = l[mid];\n  float l7 = l[mid];\n\
    \  float l8 = l[mid];\n  float l9 = l[mid];\n  float l10 = l[mid];\n  float l11\
    \ = l[mid];\n  float l12 = l[mid];\n  float l13 = l[mid];\n  float l14 = l[mid];\n\
    \  float l15 = l[mid];\n  float l16 = l[mid];\n  float l17 = l[mid];\n  float\
    \ l18 = l[mid];\n  float l19 = l[mid];\n  float l20 = l[mid];\n  float l21 = l[mid];\n\
    \  float l22 = l[mid];\n  float l23 = l[mid];\n  float l24 = l[mid];\n  float\
    \ l25 = l[mid];\n  float l26 = l[mid];\n  float l27 = l[mid];\n  float l28 = l[mid];\n\
    \  float l29 = l[mid];\n  float l30 = l[mid];\n  float l31 = l[mid];\n  float\
    \ l32 = l[mid];\n  float l33 = l[mid];\n  float l34 = l[mid];\n  float l35 = l[mid];\n\
    \  float l36 = l[mid];\n  float l37 = l[mid];\n  float l38 = l[mid];\n  float\
    \ l39 = l[mid];\n  float l40 = l[mid];\n  float l41 = l[mid];\n  float l42 = l[mid];\n\
    \  float l43 = l[mid];\n  float l44 = l[mid];\n  float l45 = l[mid];\n  float\
    \ l46 = l[mid];\n  float l47 = l[mid];\n  float l48 = l[mid];\n  float l49 = l[mid];\n\
    \  float l50 = l[mid];\n  float l", "    long long n = l.size();\n    if (n %\
    \ 2 == 0) {\n        return l[n/2-1] + (l[n/2-1] + l[n/2])/2.0;\n    }\n    return\
    \ l[n/2];", "    long long n = l.size();\n    if (n < 2) return 0;\n    long long\
    \ mid = n / 2;\n    long long l1 = 0, l2 = 0, l3 = 0, l4 = 0;\n    for (long i\
    \ = 0; i < n; i++) {\n        if (l[i] < l1) l1 = l[i];\n        if (l[i] > l2)\
    \ l2 = l[i];\n        if (l[i] < l3) l3 = l[i];\n        if (l[i] > l4) l4 = l[i];\n\
    \    }\n    float m1 = l1 + l2 + l3 + l4;\n    float m2 = l1 + l3;\n    float\
    \ m3 = l2 + l4;\n    float m4 = l1 + l3;\n    float m5 = l2 + l4;\n    float m6\
    \ = l1 + l3;\n    float m7 = l2 + l4;\n    float m8 = l1 + l3;\n    float m9 =\
    \ l2 + l4;\n    float m10 = (l1 + l2 + l3 + l4) / n;\n    float m11 = (l1 + l2\
    \ + l3 + l4) / n;\n    float m12 = (l1 + l2 + l3 + l4) / n;\n    float m13 = (l1\
    \ + l2 + l3 + l4) / n;\n    float m14 = (l1 + l2 + l3 + l4) / n;\n    float m15\
    \ = (l1 + l2 + l3 + l4) / n;\n    float m16 = (l1 + l2 + l3 + l4) / n;\n    float\
    \ m17 = (l1 + l2 + l3 + l4) / n;\n    float m18 = (l1 + l2 + l3 + l4) / n;\n \
    \   float m19 = (l1 + l2 + l3 + l4) / n;\n    float m20 = (l1 + l2 + l3 + l4)\
    \ / n;\n    float m21 = (l1 + l2 + l3 + l4) / n;\n    float m22 = (l1 + l2 + l3\
    \ + l4) / n;\n    float m23 = (l1 + l2 + l3 + l4) / n;\n    float m24 = (l1 +\
    \ l2 + l3 + l4) / n;\n    float m25 = (l1 + l2 + l3 + l4) / n;\n    float m26\
    \ = (l1 + l2 + l3 + l4) / n;\n    float m27 = (l1 + l2 + l3 + l4) / n;\n    float\
    \ m28 = (l1 + l2 + l3 + l4) / n;\n    float m29 = (l1 + l2 + l3 + l4) / n;\n \
    \   float m30 = (l1 + l2 + l3 + l4) / n;\n    float ", "    long long n = l.size();\n\
    \    if (n <= 1) return l[0];\n    long long mid = n / 2;\n    float midval =\
    \ l[mid];\n    float leftval = l[mid];\n    float rightval = l[n - 1];\n    for\
    \ (long long i = mid + 1; i < n; i++) {\n        if (l[i] < leftval) leftval =\
    \ l[i];\n        if (l[i] > rightval) rightval = l[i];\n    }\n    return midval\
    \ + 0.5 * (leftval + rightval);", "    long n = l.size();\n    assert(n >= 1);\n\
    \    long mid = n / 2;\n    long l1 = mid;\n    long l2 = n - mid;\n    if (l2\
    \ > 0)\n        return median(l1, l2);\n    long l3 = n - 1;\n    return median(l1,\
    \ l2, l3);", "    long n = l.size();\n    assert(n >= 2);\n    long mid = n /\
    \ 2;\n    long l1 = mid;\n    long l2 = n - mid;\n    if (l1 < l2) std::swap(l1,\
    \ l2);\n    float m1 = l1[l1 > l2 ? l1 - l2 : 0];\n    float m2 = l2[l2 > l1 ?\
    \ l2 - l1 : 0];\n    return m1 + (m2 - m1) * (0.5f);", "    long long sum = 0;\n\
    \    long long count = 0;\n    for (auto i : l) {\n        sum += i;\n       \
    \ ++count;\n    }\n    if (count == 0) {\n        return 0;\n    }\n    float\
    \ median = (float)sum / count;\n    return median;", "    long long n = l.size();\n\
    \    assert(n >= 2);\n    long long mid = n / 2;\n    long long l1 = mid;\n  \
    \  long long l2 = n - mid;\n    if (l1 > l2) std::swap(l1, l2);\n    float m1\
    \ = l1[l1 - 1];\n    float m2 = l2[l2 - 1];\n    float m = (m1 + m2) / 2;\n  \
    \  if (m == 0) return l1[l1 - 1];\n    if (m == 1) return l2[l2 - 1];\n    return\
    \ m;", "    long long ll = l.size();\n    if (ll % 2 == 0) {\n        float mid\
    \ = l[ll / 2 - 1];\n        float left = (l[ll / 2] + l[ll / 2 - 1]) / 2;\n  \
    \      float right = (l[ll / 2] + l[ll / 2 + 1]) / 2;\n        if (left > right)\
    \ {\n            return mid;\n        } else {\n            return right;\n  \
    \      }\n    } else {\n        float mid = l[ll / 2];\n        float left = (l[ll\
    \ / 2 - 1] + l[ll / 2]) / 2;\n        float right = (l[ll / 2 + 1] + l[ll / 2])\
    \ / 2;\n        if (left > right) {\n            return mid;\n        } else {\n\
    \            return right;\n        }\n    }", "    long long ll = l.size();\n\
    \    if (ll % 2 == 0) {\n        float x = (l[ll / 2 - 1] + l[ll / 2]) / 2;\n\
    \        return x;\n    }\n    return l[ll / 2];", "    long long sum = 0;\n \
    \   for (long long i = 0; i < l.size(); i++) {\n        sum += l[i];\n    }\n\
    \    float median = static_cast<float>(sum) / l.size();\n    return median;",
  "    assert(l.size() > 0);\n    long long mid = l[0] + (l.size() / 2);\n    float\
    \ midval = mid;\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] <\
    \ mid) {\n            midval = l[i];\n        }\n    }\n    return midval;", " \
    \   long long n = l.size();\n    if (n <= 1) return l[0];\n    long long mid =\
    \ n / 2;\n    float midval = l[mid];\n    float leftval = l[mid];\n    float rightval\
    \ = l[n - 1];\n    for (long long i = mid; i > 0; --i) {\n        if (l[i] < leftval)\
    \ leftval = l[i];\n        if (l[i] > rightval) rightval = l[i];\n    }\n    return\
    \ midval;", "    long long mid = l.size() / 2;\n    long long left = l[mid];\n\
    \    long long right = l[mid+1];\n    if (left > right) {\n        return left;\n\
    \    } else {\n        return right;\n    }", "    long long ll = l.size();\n\
    \    if (ll % 2 == 0) {\n        return ((l[ll/2] + l[ll/2-1])/2.0);\n    } else\
    \ {\n        return l[ll/2];\n    }", "    long long n = l.size();\n    if (n\
    \ % 2 == 0) {\n        return l[n / 2];\n    }\n    float mid = l[n / 2 - 1];\n\
    \    float low = l[n / 2];\n    float high = l[n / 2 + 1];\n    return low + (high\
    \ - low) / 2.0;", "    assert(l.size() > 0);\n    long long mid = l.size() / 2;\n\
    \    long long left = mid;\n    long long right = mid;\n    while (left < l.size())\
    \ {\n        mid = (left + right) / 2;\n        if (l[mid] < l[left]) {\n    \
    \        left = mid + 1;\n        } else {\n            right = mid;\n       \
    \ }\n    }\n    if (left == l.size()) {\n        return l[mid];\n    }\n    if\
    \ (l[mid] < l[left]) {\n        return l[mid];\n    } else {\n        return l[left];\n\
    \    }", "    long long ll = l.size();\n    if (ll % 2 == 1) {\n        return\
    \ l[ll / 2 - 1] + (l[ll / 2] + l[ll / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[ll / 2];\n    }", "    long long mid = l.size() / 2;\n    long long left =\
    \ mid;\n    long long right = mid;\n    long long largest = mid;\n    for (long\
    \ long i = 0; i < l.size(); i++) {\n        if (l[i] < left) {\n            left\
    \ = l[i];\n        } else if (l[i] > right) {\n            right = l[i];\n   \
    \     }\n    }\n    if (left == right) {\n        return left;\n    }\n    if\
    \ (left > right) {\n        largest = left;\n    } else {\n        largest = right;\n\
    \    }\n    float mid = (left + right) / 2;\n    if (mid % 2 == 0) {\n       \
    \ return mid;\n    } else {\n        return mid - 1;\n    }", "    long long sum\
    \ = 0;\n    for (long long i : l) {\n        sum += i;\n    }\n    float median\
    \ = static_cast<float>(sum) / static_cast<float>(l.size());\n    return median;",
  "    long long ll = l.size();\n    if (ll % 2 == 1) {\n        return l[ll / 2 -\
    \ 1] + (l[ll / 2] + l[ll / 2 - 1]) / 2.0;\n    } else {\n        return l[ll /\
    \ 2];\n    }", "    long long n = l.size();\n    assert(n >= 2);\n    long long\
    \ mid = n / 2;\n    long long l1 = mid;\n    long long l2 = n - mid;\n    float\
    \ l3 = l[mid];\n    float l4 = l[n - 1];\n    if (l2 < l1) {\n        std::swap(l1,\
    \ l2);\n    }\n    if (l2 < l3) {\n        std::swap(l3, l4);\n    }\n    if (l1\
    \ < l3) {\n        std::swap(l1, l3);\n    }\n    if (l1 < l4) {\n        std::swap(l4,\
    \ l1);\n    }\n    return l4;", "    long long mid = l.size() / 2;\n    float\
    \ midval = l[mid];\n    float leftval = l[mid-1];\n    float rightval = l[mid+1];\n\
    \    if (leftval > rightval) {\n        return midval;\n    } else {\n       \
    \ return rightval;\n    }", "    long long n = l.size();\n    if (n < 2) return\
    \ l[0];\n    long long mid = n / 2;\n    float midval = l[mid];\n    float leftval\
    \ = l[mid-1];\n    float rightval = l[mid+1];\n    if (leftval > rightval) return\
    \ midval;\n    return rightval;", "    long long n = l.size();\n    assert(n %\
    \ 2 == 0);\n    long long mid = n / 2;\n    long long l1 = mid;\n    long long\
    \ l2 = mid - 1;\n    long long l3 = mid + 1;\n    long long l4 = n - 1;\n    long\
    \ long l5 = n;\n    long long l6 = n - 1;\n    long long l7 = n;\n    long long\
    \ l8 = n;\n    long long l9 = n;\n    long long l10 = n;\n    long long l11 =\
    \ n;\n    long long l12 = n;\n    long long l13 = n;\n    long long l14 = n;\n\
    \    long long l15 = n;\n    long long l16 = n;\n    long long l17 = n;\n    long\
    \ long l18 = n;\n    long long l19 = n;\n    long long l20 = n;\n    long long\
    \ l21 = n;\n    long long l22 = n;\n    long long l23 = n;\n    long long l24\
    \ = n;\n    long long l25 = n;\n    long long l26 = n;\n    long long l27 = n;\n\
    \    long long l28 = n;\n    long long l29 = n;\n    long long l30 = n;\n    long\
    \ long l31 = n;\n    long long l32 = n;\n    long long l33 = n;\n    long long\
    \ l34 = n;\n    long long l35 = n;\n    long long l36 = n;\n    long long l37\
    \ = n;\n    long long l38 = n;\n    long long l39 = n;\n    long long l40 = n;\n\
    \    long long l41 = n;\n    long long l42 = n;\n    long long l43 = n;\n    long\
    \ long l44 = n;\n    long long l45 = n;\n    long long l46 = n;\n    long long\
    \ l47 = n;\n    long long l48 = n;\n    long long l49 = n;\n    long long l50\
    \ = n;\n    long long l51 = n;\n    long long l52 = n;\n    long long l53 = n;\n\
    \    long long l54 = n;\n    long long l55 = n;\n    long long l56 = n;\n    long\
    \ long l57 = n;\n    long long l58 = n;\n    long long l59 = n;\n    long long\
    \ l60 = n;\n    long long l61 = n;\n    long long l62 = ", "    long long n =\
    \ l.size();\n    if (n % 2 == 0) {\n        long long m = n / 2;\n        long\
    \ long m1 = m * 2;\n        long long m2 = m * 2;\n        long long m3 = m *\
    \ 2;\n        long long m4 = m * 2;\n        long long m5 = m * 2;\n        long\
    \ long m6 = m * 2;\n        long long m7 = m * 2;\n        long long m8 = m *\
    \ 2;\n        long long m9 = m * 2;\n        long long m10 = m * 2;\n        long\
    \ long m11 = m * 2;\n        long long m12 = m * 2;\n        long long m13 = m\
    \ * 2;\n        long long m14 = m * 2;\n        long long m15 = m * 2;\n     \
    \   long long m16 = m * 2;\n        long long m17 = m * 2;\n        long long\
    \ m18 = m * 2;\n        long long m19 = m * 2;\n        long long m20 = m * 2;\n\
    \        long long m21 = m * 2;\n        long long m22 = m * 2;\n        long\
    \ long m23 = m * 2;\n        long long m24 = m * 2;\n        long long m25 = m\
    \ * 2;\n        long long m26 = m * 2;\n        long long m27 = m * 2;\n     \
    \   long long m28 = m * 2;\n        long long m29 = m * 2;\n        long long\
    \ m30 = m * 2;\n        long long m31 = m * 2;\n        long long m32 = m * 2;\n\
    \        long long m33 = m * 2;\n        long long m34 = m * 2;\n        long\
    \ long m35 = m * 2;\n        long long m36 = m * 2;\n        long long m37 = m\
    \ * 2;\n        long long m38 = m * 2;\n        long long m39 = m * 2;\n     \
    \   long long m40 = m * 2;\n        long long m41 = m * 2;\n        long long\
    \ m42 = m * 2;\n        long long m43 = m * 2;\n        long long m44 = m * 2;\n\
    \        long long m45 = m * 2;\n        long long m46 = m * 2;\n        long\
    \ long m47 = m * 2;\n        long long m48 = m * 2;\n        long long m49 = m\
    \ * 2;\n        long long m50 = m * 2;\n        long long m51 = m * 2;\n     \
    \   long long m52 = m * 2;\n        long long m53 = m * 2;\n        long long\
    \ m54 = m * ", "    long n = l.size();\n    assert(n >= 2);\n    long mid = n\
    \ / 2;\n    long l1 = mid;\n    long l2 = n - mid;\n    long l3 = n - 1;\n   \
    \ long l4 = n - 2;\n    long l5 = n - 3;\n    long l6 = n - 4;\n    long l7 =\
    \ n - 5;\n    long l8 = n - 6;\n    long l9 = n - 7;\n    long l10 = n - 8;\n\
    \    long l11 = n - 9;\n    long l12 = n - 10;\n    long l13 = n - 11;\n    long\
    \ l14 = n - 12;\n    long l15 = n - 13;\n    long l16 = n - 14;\n    long l17\
    \ = n - 15;\n    long l18 = n - 16;\n    long l19 = n - 17;\n    long l20 = n\
    \ - 18;\n    long l21 = n - 19;\n    long l22 = n - 20;\n    long l23 = n - 21;\n\
    \    long l24 = n - 22;\n    long l25 = n - 23;\n    long l26 = n - 24;\n    long\
    \ l27 = n - 25;\n    long l28 = n - 26;\n    long l29 = n - 27;\n    long l30\
    \ = n - 28;\n    long l31 = n - 29;\n    long l32 = n - 30;\n    long l33 = n\
    \ - 31;\n    long l34 = n - 32;\n    long l35 = n - 33;\n    long l36 = n - 34;\n\
    \    long l37 = n - 35;\n    long l38 = n - 36;\n    long l39 = n - 37;\n    long\
    \ l40 = n - 38;\n    long l41 = n - 39;\n    long l42 = n - 40;\n    long l43\
    \ = n - 41;\n    long l44 = n - 42;\n    long l45 = n - 43;\n    long l46 = n\
    \ - 44;\n    long l47 = n - 45;\n    long l48 = n - 46;\n    long l49 = n - 47;\n\
    \    long l50 = n - 48;\n    long l51 = n - 49;\n    long l52 = n - 50;\n    long\
    \ l53 = n - 51;\n    long l54 = n - 52;\n    long l55 = n - 53;\n    long l56\
    \ = n - 54;\n    long l57 = n - 55;\n    long l58 = n - 56;\n    long l", "  \
    \  long long sum = 0;\n    for (auto i : l) {\n        sum += i;\n    }\n    float\
    \ average = static_cast<float>(sum) / l.size();\n    return average;", "    long\
    \ long n = l.size();\n    if (n < 2) return 0;\n    long long mid = n / 2;\n \
    \   float left = (float)l[mid];\n    float right = (float)l[n - 1];\n    if (left\
    \ > right) return left;\n    return right;", "    long n = l.size();\n    if (n\
    \ % 2 == 1) {\n        return l[n/2];\n    }\n    float mid = l[n/2-1] + l[n/2];\n\
    \    return mid / 2;", "  long n = l.size();\n  if (n <= 1) return l[0];\n  long\
    \ mid = n / 2;\n  long l1 = l[mid];\n  long l2 = l[n - 1];\n  return l1 + l2 /\
    \ (n - 1);", "    long long n = l.size();\n    assert(n >= 2);\n    long long\
    \ mid = n / 2;\n    long long left = 0, right = mid;\n    float midval = l[mid];\n\
    \    while (left < right) {\n        long long midval2 = l[mid];\n        if (midval2\
    \ < midval) {\n            midval = midval2;\n            mid = (mid + right)\
    \ / 2;\n            right = mid;\n        } else {\n            midval = midval2;\n\
    \            mid = (left + left) / 2;\n            left = mid;\n        }\n  \
    \  }\n    return midval;", "    long long size = l.size();\n    assert(size >\
    \ 0);\n    long long mid = size / 2;\n    if (size % 2 == 0) {\n        return\
    \ l[mid];\n    } else {\n        return (l[mid] + l[mid]) / 2.0;\n    }", "  \
    \  long long ll = l.size();\n    if (ll % 2 == 0)\n        return l[ll / 2 - 1]\
    \ + (l[ll / 2] + l[ll / 2 - 1]) / 2.0;\n    return l[ll / 2];", "    long long\
    \ n = l.size();\n    if (n % 2 == 0) {\n        return l[n/2];\n    }\n    return\
    \ ((l[n/2] + l[n/2-1])/2.0);", "    long long n = l.size();\n    if (n <= 1) return\
    \ l[0];\n    long long mid = n / 2;\n    float midval = l[mid];\n    float leftval\
    \ = l[mid-1];\n    float rightval = l[mid+1];\n    if (leftval > rightval) return\
    \ midval;\n    else return rightval;", "    long long mid = l.size() / 2;\n  \
    \  long long left = mid;\n    long long right = mid;\n    while (left < l.size())\
    \ {\n        mid = (left + right) / 2;\n        if (l[mid] <= l[mid+1]) {\n  \
    \          left = mid + 1;\n        } else {\n            right = mid;\n     \
    \   }\n    }\n    return l[mid];", "    long long n = l.size();\n    if (n <=\
    \ 1) return l[0];\n    long long mid = n / 2;\n    long long l1 = l[mid];\n  \
    \  long long l2 = l[n - 1];\n    if (l2 < l1) return l2;\n    return l1;", " \
    \   long long mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return\
    \ l[mid];\n    } else {\n        return (l[mid] + l[mid-1]) / 2;\n    }", "  \
    \  long n = l.size();\n    if (n < 2) return 0;\n    long mid = n / 2;\n    long\
    \ l1 = l[mid];\n    long l2 = l[n - 1];\n    if (l1 < l2) return l1;\n    return\
    \ l2;", "    assert(l.size() > 0);\n    long mid = l.size() / 2;\n    long left\
    \ = l[mid];\n    long right = l[mid+1];\n    if (left > right) {\n        return\
    \ left;\n    }\n    return right;", "  long long ll = l.size();\n  if (ll % 2\
    \ == 0) {\n    return ((ll * l.front()) + ((ll / 2) - 1)) / 2.0;\n  } else {\n\
    \    return ((ll * l.front()) + ((ll / 2) - 1)) / 2.0;\n  }", "    long long ll\
    \ = l.size();\n    if (ll % 2 == 0) {\n        return ((l[ll / 2 - 1] + l[ll /\
    \ 2]) / 2.0);\n    }\n    return l[ll / 2];", "    long n = l.size();\n    if\
    \ (n < 2) return l[0];\n    long mid = n / 2;\n    long l1 = l[mid];\n    long\
    \ l2 = l[n - 1];\n    float l3 = l[mid];\n    float l4 = l[n - 1];\n    if (l2\
    \ < l1) return l2;\n    if (l4 < l3) return l4;\n    return l3;", "    long long\
    \ ll = l.size();\n    if (ll % 2 == 1) {\n        float mid = (l[ll / 2 - 1] +\
    \ l[ll / 2]) / 2;\n        return mid;\n    }\n    float mid = l[ll / 2];\n  \
    \  return mid;", "    long n = l.size();\n    if (n <= 1) return l[0];\n    long\
    \ mid = n / 2;\n    long l1 = l[mid];\n    long l2 = l[n - 1];\n    if (l2 < l1)\
    \ return l2;\n    return l1;", "    long long ll = l.size();\n    if (ll % 2 ==\
    \ 1) {\n        return l[ll / 2 - 1] + (l[ll / 2] + l[ll / 2 - 1]) / 2.0;\n  \
    \  }\n    return l[ll / 2];", "    long long n = l.size();\n    if (n % 2 == 0)\
    \ {\n        return l[n / 2];\n    }\n    float mid = l[n / 2];\n    float left\
    \ = (n - 1) / 2;\n    float right = n - 1;\n    float median;\n    while (left\
    \ < right) {\n        median = l[left] + l[right];\n        if (median < mid)\
    \ {\n            left++;\n        } else if (median > mid) {\n            right--;\n\
    \        } else {\n            return median;\n        }\n    }\n    return l[left];",
  "    long long ll = l.size();\n    if (ll % 2 == 1) {\n        return l[ll / 2 -\
    \ 1] + (l[ll / 2] + l[ll / 2 - 1]) / 2;\n    }\n    return l[ll / 2];", "    long\
    \ long ll = l.size();\n    if (ll % 2 == 1) {\n        return l[ll / 2 - 1] +\
    \ (l[ll / 2] + l[ll / 2 - 1]) / 2.0;\n    }\n    return l[ll / 2];", "    long\
    \ long ll = l.size();\n    if (ll % 2 == 1)\n        return l[ll / 2 - 1] + (l[ll\
    \ / 2] + l[ll / 2 - 1]) / 2.0;\n    return l[ll / 2];", "    long long mid = l.size()\
    \ / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n    } else {\n \
    \       return std::max(l[mid], l[mid-1]);\n    }", "    long long n = l.size();\n\
    \    assert(n % 2 == 0);\n    long long mid = n / 2;\n    long long a = l[mid];\n\
    \    long long b = l[n - 1];\n    if (a > b) {\n        return a;\n    } else\
    \ {\n        return b;\n    }", "    long long n = l.size();\n    assert(n >=\
    \ 2);\n    long long mid = n / 2;\n    long long l1 = mid;\n    long long l2 =\
    \ n - mid;\n    if (l1 < l2) std::swap(l1, l2);\n    float m1 = l1[l1 > l2 ? l1\
    \ - l2 : 0];\n    float m2 = l2[l2 > l1 ? l2 - l1 : 0];\n    return m1 + (m2 -\
    \ m1) * ((float)n / 2);", "    long n = l.size();\n    if (n % 2 == 0) {\n   \
    \     return l[n/2];\n    } else {\n        return (l[n/2] + l[n/2-1])/2.0;\n\
    \    }", "    long long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    float median = (float)sum / l.size();\n    return median;", "    long\
    \ long n = l.size();\n    long long mid = n / 2;\n    long long left = 0, right\
    \ = mid;\n    float midVal;\n    while (left < right) {\n        midVal = l[mid];\n\
    \        if (midVal < 0)\n            left++;\n        else if (midVal > 0)\n\
    \            right--;\n        else\n            return midVal;\n    }\n    if\
    \ (left > right)\n        return l[mid];\n    midVal = l[mid];\n    if (midVal\
    \ < 0)\n        left++;\n    else if (midVal > 0)\n        right--;\n    else\n\
    \        return midVal;\n    while (left < right) {\n        midVal = l[mid];\n\
    \        if (midVal < 0)\n            left++;\n        else if (midVal > 0)\n\
    \            right--;\n        else\n            return midVal;\n    }\n    return\
    \ l[mid];", "    long long n = l.size();\n    if (n <= 1) return l[0];\n    long\
    \ long mid = n / 2;\n    long long left = l[mid];\n    long long right = l[n -\
    \ 1];\n    if (left > right) return median(l);\n    long long mid2 = mid / 2;\n\
    \    long long left2 = l[mid2];\n    long long right2 = l[n - 1];\n    if (left2\
    \ > right2) return median(l);\n    if (left2 < right2) return median(l);\n   \
    \ return left;", "    long long sum = 0;\n    for (long long i = 0; i < l.size();\
    \ i++) {\n        sum += l[i];\n    }\n    float median = static_cast<float>(sum)\
    \ / static_cast<float>(l.size());\n    return median;", "    long long ll = l.size();\n\
    \    if (ll % 2 == 0) {\n        return ((l[ll/2] + l[ll/2-1])/2.0);\n    } else\
    \ {\n        return (l[ll/2-1]);\n    }", "    assert(l.size() > 0);\n    long\
    \ long mid = l.size() / 2;\n    long long left = mid;\n    long long right = mid;\n\
    \    long long midVal = l[mid];\n    while (left < right) {\n        mid = (left\
    \ + right) / 2;\n        midVal = l[mid];\n        if (midVal < mid)\n       \
    \     left = mid + 1;\n        else\n            right = mid - 1;\n    }\n   \
    \ return midVal;", "    long long n = l.size();\n    assert(n >= 1);\n    long\
    \ long mid = n / 2;\n    long long m1 = mid;\n    long long m2 = mid + 1;\n  \
    \  long long m3 = mid + 2;\n    long long m4 = mid + 3;\n    long long m5 = mid\
    \ + 4;\n    long long m6 = mid + 5;\n    long long m7 = mid + 6;\n    long long\
    \ m8 = mid + 7;\n    long long m9 = mid + 8;\n    long long m10 = mid + 9;\n \
    \   long long m11 = mid + 10;\n    long long m12 = mid + 11;\n    long long m13\
    \ = mid + 12;\n    long long m14 = mid + 13;\n    long long m15 = mid + 14;\n\
    \    long long m16 = mid + 15;\n    long long m17 = mid + 16;\n    long long m18\
    \ = mid + 17;\n    long long m19 = mid + 18;\n    long long m20 = mid + 19;\n\
    \    long long m21 = mid + 20;\n    long long m22 = mid + 21;\n    long long m23\
    \ = mid + 22;\n    long long m24 = mid + 23;\n    long long m25 = mid + 24;\n\
    \    long long m26 = mid + 25;\n    long long m27 = mid + 26;\n    long long m28\
    \ = mid + 27;\n    long long m29 = mid + 28;\n    long long m30 = mid + 29;\n\
    \    long long m31 = mid + 30;\n    long long m32 = mid + 31;\n    long long m33\
    \ = mid + 32;\n    long long m34 = mid + 33;\n    long long m35 = mid + 34;\n\
    \    long long m36 = mid + 35;\n    long long m37 = mid + 36;\n    long long m38\
    \ = mid + 37;\n    long long m39 = mid + 38;\n    long long m40 = mid + 39;\n\
    \    long long m41 = mid + 40;\n    long long m42 = mid + 41;\n    long long m43\
    \ = mid + 42;\n    long long m44 = mid + 43;\n    long long m45 = mid + 44;\n\
    \    long long m46 = mid + 45;\n    long long m47 = mid + 46;\n    long long m48\
    \ = mid + 47;\n    long long m49 = mid + 48;\n    long long m50 = mid + 49;\n\
    \    long long m51 = m", "    long n = l.size();\n    if (n <= 1) return l[0];\n\
    \    long mid = n / 2;\n    long l1 = l[mid];\n    long l2 = l[n - 1];\n    if\
    \ (l2 < l1) return l1;\n    return l2;", "    long n = l.size();\n    if (n %\
    \ 2 == 0) return l[n/2];\n    else return (float(l[n/2]) + float(l[n/2+1]))/2;",
  "    long long int n = l.size();\n    if (n <= 1) return l[0];\n    long long int\
    \ mid = n / 2;\n    float left = (float) l[mid];\n    float right = (float) l[n\
    \ - 1];\n    if (left == right) return left;\n    if (left > right) return median(l,\
    \ mid + 1, n - 1);\n    else return median(l, mid - 1, n - 1);", "    long long\
    \ sum = 0;\n    long long count = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \        ++count;\n    }\n    assert(count != 0);\n    float average = static_cast<float>(sum)\
    \ / count;\n    long long mid = count / 2;\n    if (count % 2 == 0) {\n      \
    \  return average + static_cast<float>(l[mid]);\n    } else {\n        return\
    \ average - static_cast<float>(l[mid]);\n    }", "    long long sum = 0;\n   \
    \ for (auto i : l) {\n        sum += i;\n    }\n    float median = (float)sum\
    \ / l.size();\n    return median;", "    long long mid = l.size() / 2;\n    float\
    \ midval = l[mid];\n    float leftval = l[mid-1];\n    float rightval = l[mid+1];\n\
    \    if (leftval > rightval)\n        return midval;\n    else\n        return\
    \ rightval;", "    long long n = l.size();\n    assert(n >= 2);\n    long long\
    \ mid = n / 2;\n    long long left = 0, right = mid;\n    float midval = l[mid];\n\
    \    while (left < right) {\n        long long midval2 = l[mid];\n        if (midval2\
    \ < midval) midval = midval2;\n        if (midval > midval2) midval = midval2;\n\
    \        midval += midval2;\n        midval -= midval2;\n        midval += midval2;\n\
    \        midval -= midval2;\n        midval += midval2;\n        midval -= midval2;\n\
    \        midval += midval2;\n        midval -= midval2;\n        midval += midval2;\n\
    \        midval -= midval2;\n        midval += midval2;\n        midval -= midval2;\n\
    \        midval += midval2;\n        midval -= midval2;\n        midval += midval2;\n\
    \        midval -= midval2;\n        midval += midval2;\n        midval -= midval2;\n\
    \        midval += midval2;\n        midval -= midval2;\n        midval += midval2;\n\
    \        midval -= midval2;\n        midval += midval2;\n        midval -= midval2;\n\
    \        midval += midval2;\n        midval -= midval2;\n        midval += midval2;\n\
    \        midval -= midval2;\n        midval += midval2;\n        midval -= midval2;\n\
    \        midval += midval2;\n        midval -= midval2;\n        midval += midval2;\n\
    \        midval -= midval2;\n        midval += midval2;\n        midval -= midval2;\n\
    \        midval += midval2;\n        midval -= midval2;\n        midval += midval2;\n\
    \        midval -= midval2;\n        midval += midval2;\n        midval -= midval2;\n\
    \        midval += midval2;\n        midval -= midval2;\n        midval += midval2;\n\
    \        midval -= midval2;\n        midval += midval2;\n        midval -= midval2;\n\
    \        midval += midval2;\n        midval -= midval2;\n        midval += midval2;\n\
    \        midval -= midval2;\n        midval += midval2;\n        midval -= mid",
  "    long n = l.size();\n    assert(n >= 2);\n    long mid = n / 2;\n    long l1\
    \ = mid;\n    long l2 = n - mid;\n    if (l1 < l2) std::swap(l1, l2);\n    float\
    \ midval = l1[l1 - 1] + l2[l2 - 1];\n    if (midval < 0) midval += n;\n    return\
    \ midval;", "    long long n = l.size();\n    assert(n >= 2);\n    long long mid\
    \ = n / 2;\n    long long l1 = mid;\n    long long l2 = n - mid;\n    if (l2 ==\
    \ 0) return l[0];\n    if (l1 < l2) return l[l1];\n    return l[l2];", "    long\
    \ n = l.size();\n    assert(n >= 1);\n    long mid = n / 2;\n    long l1 = 0,\
    \ l2 = 0, l3 = 0, l4 = 0;\n    for (long i = 0; i < n; i++) {\n        if (l1\
    \ < l[i]) {\n            l1 = l[i];\n        }\n        if (l2 < l[i]) {\n   \
    \         l2 = l[i];\n        }\n        if (l3 < l[i]) {\n            l3 = l[i];\n\
    \        }\n        if (l4 < l[i]) {\n            l4 = l[i];\n        }\n    }\n\
    \    float l = (l1 + l2 + l3 + l4) / 4;\n    return l;", "    long long n = l.size();\n\
    \    if (n % 2 == 0) {\n        return l[n/2];\n    } else {\n        return (l[n/2]\
    \ + l[n/2-1])/2.0;\n    }", "    long long ll = l.size();\n    assert(ll > 0);\n\
    \    long long mid = ll / 2;\n    long long left = ll;\n    long long right =\
    \ mid;\n    long long midVal = l[mid];\n    long long medianVal = midVal;\n  \
    \  while (left > 0 && right > 0) {\n        if (l[left - 1] < midVal) {\n    \
    \        left--;\n        } else if (l[right - 1] > midVal) {\n            right--;\n\
    \        } else {\n            medianVal = l[left - 1];\n            left--;\n\
    \            right--;\n        }\n    }\n    if (left > 0 && right > 0) {\n  \
    \      medianVal = l[left - 1];\n    } else if (left > 0) {\n        medianVal\
    \ = l[left - 1];\n    } else if (right > 0) {\n        medianVal = l[right - 1];\n\
    \    }\n    return float(medianVal);", "    long long size = l.size();\n    if\
    \ (size % 2 == 0) {\n        return ((l[size / 2 - 1] + l[size / 2]) / 2.0);\n\
    \    } else {\n        return l[size / 2];\n    }", "    long long mid = l.size()\
    \ / 2;\n    if (l.size() % 2 == 0) {\n        return std::max(l[mid], l[mid-1]);\n\
    \    } else {\n        return std::max(l[mid], l[mid-1]);\n    }", "    long long\
    \ n = l.size();\n    assert(n >= 2);\n    long long mid = n / 2;\n    long long\
    \ l1 = mid;\n    long long l2 = n - mid;\n    if (l2 == 0) return l[0];\n    if\
    \ (l1 < l2) return l1;\n    long long lm = l1 + l2;\n    float mid1 = lm / 2;\n\
    \    float mid2 = lm / 2;\n    float mid3 = lm / 2;\n    float mid4 = lm / 2;\n\
    \    float mid5 = lm / 2;\n    float mid6 = lm / 2;\n    float mid7 = lm / 2;\n\
    \    float mid8 = lm / 2;\n    float mid9 = lm / 2;\n    float mid10 = lm / 2;\n\
    \    float mid11 = lm / 2;\n    float mid12 = lm / 2;\n    float mid13 = lm /\
    \ 2;\n    float mid14 = lm / 2;\n    float mid15 = lm / 2;\n    float mid16 =\
    \ lm / 2;\n    float mid17 = lm / 2;\n    float mid18 = lm / 2;\n    float mid19\
    \ = lm / 2;\n    float mid20 = lm / 2;\n    float mid21 = lm / 2;\n    float mid22\
    \ = lm / 2;\n    float mid23 = lm / 2;\n    float mid24 = lm / 2;\n    float mid25\
    \ = lm / 2;\n    float mid26 = lm / 2;\n    float mid27 = lm / 2;\n    float mid28\
    \ = lm / 2;\n    float mid29 = lm / 2;\n    float mid30 = lm / 2;\n    float mid31\
    \ = lm / 2;\n    float mid32 = lm / 2;\n    float mid33 = lm / 2;\n    float mid34\
    \ = lm / 2;\n    float mid35 = lm / 2;\n    float mid36 = lm / 2;\n    float mid37\
    \ = lm / 2;\n    float mid38 = lm / 2;\n    float mid39 = lm / 2;\n    float mid40\
    \ = lm / 2;\n    float mid41 = lm / 2;\n    float mid42 = lm / 2;\n    float mid43\
    \ = lm / 2;\n    float mid44 = lm / 2;\n    float mid45 = lm / 2;\n    float mid46\
    \ = lm / ", "    assert(l.size() > 0);\n    long long mid = l.size() / 2;\n  \
    \  long long left = mid;\n    long long right = mid;\n    while (left < l.size())\
    \ {\n        mid = (left + right) / 2;\n        if (l[mid] <= l[left]) {\n   \
    \         left = mid + 1;\n        } else {\n            right = mid;\n      \
    \  }\n    }\n    if (left == l.size()) {\n        return l[left];\n    }\n   \
    \ if (l[left] <= l[right]) {\n        return l[left];\n    }\n    return l[right];",
  "    long long ll = l.size();\n    if (ll % 2 == 0) {\n        float x = (l[ll /\
    \ 2 - 1] + l[ll / 2]) / 2;\n        return x;\n    } else {\n        float x =\
    \ (l[ll / 2] + l[ll / 2 + 1]) / 2;\n        return x;\n    }", "    long n = l.size();\n\
    \    if (n % 2 == 0) {\n        return l[n/2];\n    } else {\n        return (l[n/2]\
    \ + l[n/2 - 1])/2.0;\n    }", "    long long sum = 0;\n    for (long long i =\
    \ 0; i < l.size(); i++) {\n        sum += l[i];\n    }\n    float median = (float)sum\
    \ / l.size();\n    return median;", "    long n = l.size();\n    assert(n >= 2);\n\
    \    long mid = n / 2;\n    long l1 = l[mid];\n    long l2 = l[n - 1];\n    if\
    \ (l1 < l2) return l1;\n    return l2;", "    assert(l.size() > 0);\n    long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid]) / 2.0;\n    }", "    long long\
    \ n = l.size();\n    if (n <= 1) return l[0];\n    long long mid = n / 2;\n  \
    \  long long left = l[mid];\n    long long right = l[n - 1];\n    if (left > right)\
    \ return left;\n    return right;", "    long long ll = l.size();\n    if (ll\
    \ % 2 == 0) {\n        return l[ll / 2 - 1] + (l[ll / 2] + l[ll / 2 - 1]) / 2.0;\n\
    \    } else {\n        return l[ll / 2];\n    }", "    long long n = l.size();\n\
    \    assert(n >= 2);\n    long long mid = n / 2;\n    long long l1 = mid;\n  \
    \  long long l2 = n - mid;\n    if (l2 == 0) return l[mid];\n    if (l1 > l2)\
    \ std::swap(l1, l2);\n    float mid1 = l[mid];\n    float mid2 = l[n - mid];\n\
    \    if (mid1 > mid2) std::swap(mid1, mid2);\n    float m1 = mid1;\n    float\
    \ m2 = mid2;\n    float m = (m1 + m2) / 2;\n    if (m == l[mid]) m = m1;\n   \
    \ if (m == l[n - mid]) m = m2;\n    return m;", "    long long mid = l.size()\
    \ / 2;\n    long long left = l[mid];\n    long long right = l[mid+1];\n    if\
    \ (left > right) {\n        return left;\n    } else {\n        return right;\n\
    \    }"]
stop_tokens:
- "\n}"
