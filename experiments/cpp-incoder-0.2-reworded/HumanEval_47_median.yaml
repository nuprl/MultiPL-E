name: HumanEval_47_median
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
  \ in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2,\
  \ (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10,\
  \ (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
  \ l) {\n"
tests: "}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
  \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
  \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
  \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
  \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
completions: ["    long long n = l.size();\n    if (n < 2) return 0;\n    long long\
    \ mid = n / 2;\n    long long l1 = 0, l2 = mid;\n    long long m1 = 0, m2 = mid;\n\
    \    float midVal = l[mid];\n    while (true) {\n        if (l1 < mid) m1 = l1;\n\
    \        if (l2 < mid) m2 = l2;\n        if (m1 < m2 && m1 < midVal) l1 = m1 +\
    \ 1;\n        if (m2 < mid) l2 = m2;\n        if (l1 > l2) break;\n        midVal\
    \ = l[mid];\n    }\n    return midVal;", "  long long n = l.size();\n  assert(n\
    \ != 0);\n  long long mid = n / 2;\n  if (n % 2 == 0) {\n    return l[mid];\n\
    \  } else {\n    return (l[mid] + l[mid]) / 2.0;\n  }", "    long long n = l.size();\n\
    \    if (n % 2 == 0) {\n        return l[n/2-1] + (l[n/2] - l[n/2-1])/2.0;\n \
    \   } else {\n        return l[n/2];\n    }", "    long long n = l.size();\n \
    \   if (n % 2 == 0) {\n        return l[n/2];\n    } else {\n        return (l[n/2]\
    \ + l[n/2-1])/2.0;\n    }", "    long n = l.size();\n    if (n % 2 == 0) {\n \
    \       return l[n/2];\n    } else {\n        return (l[n/2] + l[n/2-1])/2.0;\n\
    \    }", "    long long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    float median = (float)sum / l.size();\n    return median;", "    long\
    \ long n = l.size();\n    assert(n >= 1);\n    long long mid = n / 2;\n    long\
    \ long m1 = mid;\n    long long m2 = mid + 1;\n    long long m3 = mid + 2;\n \
    \   long long m4 = mid + 3;\n    long long m5 = mid + 4;\n    long long m6 = mid\
    \ + 5;\n    long long m7 = mid + 6;\n    long long m8 = mid + 7;\n    long long\
    \ m9 = mid + 8;\n    long long m10 = mid + 9;\n    long long m11 = mid + 10;\n\
    \    long long m12 = mid + 11;\n    long long m13 = mid + 12;\n    long long m14\
    \ = mid + 13;\n    long long m15 = mid + 14;\n    long long m16 = mid + 15;\n\
    \    long long m17 = mid + 16;\n    long long m18 = mid + 17;\n    long long m19\
    \ = mid + 18;\n    long long m20 = mid + 19;\n    long long m21 = mid + 20;\n\
    \    long long m22 = mid + 21;\n    long long m23 = mid + 22;\n    long long m24\
    \ = mid + 23;\n    long long m25 = mid + 24;\n    long long m26 = mid + 25;\n\
    \    long long m27 = mid + 26;\n    long long m28 = mid + 27;\n    long long m29\
    \ = mid + 28;\n    long long m30 = mid + 29;\n    long long m31 = mid + 30;\n\
    \    long long m32 = mid + 31;\n    long long m33 = mid + 32;\n    long long m34\
    \ = mid + 33;\n    long long m35 = mid + 34;\n    long long m36 = mid + 35;\n\
    \    long long m37 = mid + 36;\n    long long m38 = mid + 37;\n    long long m39\
    \ = mid + 38;\n    long long m40 = mid + 39;\n    long long m41 = mid + 40;\n\
    \    long long m42 = mid + 41;\n    long long m43 = mid + 42;\n    long long m44\
    \ = mid + 43;\n    long long m45 = mid + 44;\n    long long m46 = mid + 45;\n\
    \    long long m47 = mid + 46;\n    long long m48 = mid + 47;\n    long long m49\
    \ = mid + 48;\n    long long m50 = mid + 49;\n    long long m51 = m", "    assert(l.size()\
    \ > 0);\n    long long mid = l[0] + (l.size() / 2);\n    float midval = mid;\n\
    \    float leftval = l[0];\n    float rightval = l[l.size() - 1];\n    float leftmedian\
    \ = midval;\n    float rightmedian = midval;\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (l[i] < midval) {\n            leftval = l[i];\n        \
    \    leftmedian = midval;\n        } else if (l[i] > midval) {\n            rightval\
    \ = l[i];\n            rightmedian = midval;\n        } else {\n            midval\
    \ = l[i];\n        }\n    }\n    return (leftmedian + rightmedian) / 2;", "  \
    \  long long n = l.size();\n    assert(n >= 1);\n    long long mid = n / 2;\n\
    \    long long left = 0, right = mid;\n    long long midVal = l[mid];\n    while\
    \ (left < right) {\n        long long midValLeft = l[left];\n        long long\
    \ midValRight = l[right];\n        if (midValLeft < midValRight) {\n         \
    \   left++;\n        } else if (midValLeft > midValRight) {\n            right--;\n\
    \        } else {\n            return midVal;\n        }\n    }\n    return l[left];",
  "    long long ll = l.size();\n    if (ll % 2 == 1) {\n        return l[ll / 2 -\
    \ 1] + (l[ll / 2] + l[ll / 2 - 1]) / 2.0;\n    }\n    return l[ll / 2];", "  \
    \  long long n = l.size();\n    if (n <= 1) return l[0];\n    long long mid =\
    \ n / 2;\n    float a = l[mid];\n    float b = l[n - 1];\n    return (b - a) /\
    \ 2.0;", "    long long n = l.size();\n    if (n < 2) return l[0];\n    long long\
    \ mid = n / 2;\n    float a = l[mid];\n    float b = l[n - 1];\n    float c =\
    \ l[mid];\n    float d = l[n - 1];\n    if (a > b) std::swap(a, b);\n    if (b\
    \ > c) std::swap(b, c);\n    if (a > b) std::swap(a, b);\n    if (b > c) std::swap(b,\
    \ c);\n    if (a > b) std::swap(a, b);\n    if (b > c) std::swap(b, c);\n    if\
    \ (a > b) std::swap(a, b);\n    if (b > c) std::swap(b, c);\n    if (a > b) std::swap(a,\
    \ b);\n    if (b > c) std::swap(b, c);\n    if (a > b) std::swap(a, b);\n    if\
    \ (b > c) std::swap(b, c);\n    if (a > b) std::swap(a, b);\n    if (b > c) std::swap(b,\
    \ c);\n    if (a > b) std::swap(a, b);\n    if (b > c) std::swap(b, c);\n    if\
    \ (a > b) std::swap(a, b);\n    if (b > c) std::swap(b, c);\n    if (a > b) std::swap(a,\
    \ b);\n    if (b > c) std::swap(b, c);\n    if (a > b) std::swap(a, b);\n    if\
    \ (b > c) std::swap(b, c);\n    if (a > b) std::swap(a, b);\n    if (b > c) std::swap(b,\
    \ c);\n    if (a > b) std::swap(a, b);\n    if (b > c) std::swap(b, c);\n    if\
    \ (a > b) std::swap(a, b);\n    if (b > c) std::swap(b, c);\n    if (a > b) std::swap(a,\
    \ b);\n    if (b > c) std::swap(b, c);\n    if (a > b) std::swap(a, b);\n    if\
    \ (b > c) std::swap(b, c);\n    if (a > b) std::swap(a, b);\n    if (b > c) std::swap(b,\
    \ c);\n    if (a > b) std::swap(a, b);\n    if (b > c) std::swap(b, c);\n    if\
    \ (a > b) std::swap(a, b);\n    if (b > c) std::swap(b, c);\n    if (a > b) std::swap(a,\
    \ b);\n    if (b > c) std::swap(b, c);\n    if (a > b) std::swap(a, b);\n    if\
    \ (b > c) std::swap(b, c);\n    if (a > b) std::swap(a, b);\n    if (b > c) ",
  "    long long mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval\
    \ = l[mid-1];\n    float rightval = l[mid+1];\n    if (leftval > rightval) {\n\
    \        return midval;\n    }\n    return rightval;", "    long long size = l.size();\n\
    \    if (size % 2 == 1) {\n        return l[size / 2];\n    }\n    float mid =\
    \ size / 2;\n    float a = l[mid];\n    float b = l[size / 2 - 1];\n    return\
    \ a + (b - a) * ((size / 2) - 1);", "    long long n = l.size();\n    if (n %\
    \ 2 == 0) {\n        return l[n/2];\n    } else {\n        return (l[n/2] + l[n/2-1])/2.0;\n\
    \    }", "    long long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    float median = (float)sum / l.size();\n    return median;", "    long\
    \ long mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval) {\n        return\
    \ midval;\n    }\n    return rightval;", "    long long n = l.size();\n    assert(n\
    \ >= 2);\n    long long mid = n / 2;\n    long long l1 = mid;\n    long long l2\
    \ = n - mid;\n    if (l2 % 2 == 0) {\n        return ((l1[l1 / 2 - 1] + l1[l1\
    \ / 2]) / 2.0f);\n    } else {\n        return ((l2[l2 / 2 - 1] + l2[l2 / 2])\
    \ / 2.0f);\n    }", "    long long size = l.size();\n    if (size % 2 == 0) {\n\
    \        float mid = l[size / 2];\n        float left = l[size / 2 - 1];\n   \
    \     float right = l[size / 2];\n        return ((mid < left) ? left : ((mid\
    \ > right) ? right : mid));\n    } else {\n        float mid = l[size / 2 - 1];\n\
    \        float left = l[size / 2];\n        float right = l[size / 2 + 1];\n \
    \       return ((mid < left) ? left : ((mid > right) ? right : mid));\n    }",
  "    long long ll = l.size();\n    if (ll % 2 == 0) {\n        return l[ll / 2 -\
    \ 1] + (l[ll / 2] + l[ll / 2 - 1]) / 2.0;\n    } else {\n        return l[ll /\
    \ 2];\n    }"]
stop_tokens:
- "\n}"
