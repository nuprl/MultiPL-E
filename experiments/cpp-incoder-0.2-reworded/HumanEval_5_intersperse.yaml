name: HumanEval_5_intersperse
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Insert a number 'delimeter'\
  \ between every two consecutive elements of input vector `numbers'\n// >>> intersperse((std::vector<long>()),\
  \ (4))\n// (std::vector<long>())\n// >>> intersperse((std::vector<long>({(long)1,\
  \ (long)2, (long)3})), (4))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)4,\
  \ (long)3}))\nstd::vector<long> intersperse(std::vector<long> numbers, long delimeter)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = intersperse;\n    assert(candidate((std::vector<long>()),\
  \ (7)) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)6, (long)3, (long)2})), (8)) == (std::vector<long>({(long)5, (long)8, (long)6,\
  \ (long)8, (long)3, (long)8, (long)2})));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)2, (long)2})), (2)) == (std::vector<long>({(long)2, (long)2, (long)2, (long)2,\
  \ (long)2})));\n}\n"
completions: ["    std::vector<long> result;\n    result.push_back(numbers[0]);\n\
    \    for (long i = 1, j = numbers.size(); i <= j; ++i, ++j) {\n        result.push_back(numbers[i]);\n\
    \        result.push_back(delimeter);\n        result.push_back(numbers[j]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    result.push_back(numbers[0]);\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        result.push_back(delimeter);\n\
    \        result.push_back(numbers[i]);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long temp;\n    for (long i = 0; i < numbers.size(); i++) {\n \
    \       temp = numbers[i];\n        result.push_back(temp);\n        result.push_back(delimeter);\n\
    \        result.push_back(temp);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long size = numbers.size();\n    long i = 0;\n    while (i < size)\
    \ {\n        result.push_back(numbers[i]);\n        i += 1;\n        while (i\
    \ < size && numbers[i] != delimeter)\n            i += 1;\n        result.push_back(delimeter);\n\
    \        i += 1;\n    }\n    return result;", "    std::vector<long> result;\n\
    \    result.push_back(numbers[0]);\n    for (long i = 1; i < numbers.size(); i++)\
    \ {\n        result.push_back(numbers[i]);\n        result.push_back(delimeter);\n\
    \        result.push_back(numbers[i]);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    result.push_back(numbers[0]);\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        result.push_back(numbers[i]);\n        result.push_back(delimeter);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    result.push_back(numbers[0]);\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \        result.push_back(delimeter);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    result.push_back(numbers[0]);\n    for (size_t i = 1; i < numbers.size();\
    \ ++i) {\n        result.push_back(delimeter);\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long n = numbers.size();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < n) {\n        if (j == delimeter)\
    \ {\n            result.push_back(numbers[i]);\n            i++;\n           \
    \ j = 0;\n        } else {\n            result.push_back(numbers[i]);\n      \
    \      j++;\n        }\n    }\n    return result;", "    std::vector<long> result;\n\
    \    long size = numbers.size();\n    long i = 0;\n    long j = 0;\n    while\
    \ (i < size) {\n        if (j == i) {\n            result.push_back(numbers[i]);\n\
    \            i++;\n        } else {\n            result.push_back(delimeter);\n\
    \            result.push_back(numbers[i]);\n            i++;\n            j++;\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ size = numbers.size();\n    for (long i = 0; i < size; i++) {\n        result.push_back(numbers[i]);\n\
    \        if (i != (size - 1)) {\n            result.push_back(delimeter);\n  \
    \      }\n    }\n    return result;", "    std::vector<long> result;\n    result.push_back(numbers[0]);\n\
    \    for(long i = 1; i < numbers.size(); i++) {\n        result.push_back(delimeter);\n\
    \        result.push_back(numbers[i]);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    for (long i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \        if (i != numbers.size() - 1) {\n            result.push_back(delimeter);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    result.push_back(numbers[0]);\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \        result.push_back(delimeter);\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    result.push_back(numbers[0]);\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \        result.push_back(delimeter);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long temp;\n    for (long i = 0; i < numbers.size(); i++) {\n \
    \       temp = numbers[i];\n        result.push_back(temp);\n        result.push_back(delimeter);\n\
    \        result.push_back(temp);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    result.push_back(numbers[0]);\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        result.push_back(numbers[i]);\n        result.push_back(delimeter);\n\
    \        result.push_back(numbers[i]);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    result.push_back(numbers[0]);\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        result.push_back(numbers[i]);\n        result.push_back(delimeter);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    result.push_back(numbers[0]);\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \        result.push_back(delimeter);\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    result.push_back(numbers[0]);\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        result.push_back(delimeter);\n\
    \        result.push_back(numbers[i]);\n    }\n    return result;"]
stop_tokens:
- "\n}"
